<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.8.20">
  <compound kind="file">
    <name>Koules.cpp</name>
    <path>/Users/mmoll/omplapp/ompl/demos/Koules/</path>
    <filename>Koules_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>Console.h</name>
    <path>/Users/mmoll/omplapp/ompl/src/ompl/util/</path>
    <filename>Console_8h.html</filename>
    <class kind="class">ompl::msg::OutputHandler</class>
    <class kind="class">ompl::msg::OutputHandlerSTD</class>
    <class kind="class">ompl::msg::OutputHandlerFile</class>
    <namespace>ompl</namespace>
    <namespace>ompl::msg</namespace>
    <member kind="define">
      <type>#define</type>
      <name>OMPL_ERROR</name>
      <anchorfile>group__logging.html</anchorfile>
      <anchor>ga05ad3ae88188e7f248748785afd2b882</anchor>
      <arglist>(fmt,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OMPL_WARN</name>
      <anchorfile>group__logging.html</anchorfile>
      <anchor>gab76357dced39cb468d2061d3358f80a6</anchor>
      <arglist>(fmt,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OMPL_INFORM</name>
      <anchorfile>group__logging.html</anchorfile>
      <anchor>ga04bc36d1b8c57ad7e13a8a48451a3a05</anchor>
      <arglist>(fmt,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OMPL_DEBUG</name>
      <anchorfile>group__logging.html</anchorfile>
      <anchor>ga576d0bc79b521f19c5415f330e2b173d</anchor>
      <arglist>(fmt,...)</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LogLevel</name>
      <anchorfile>namespaceompl_1_1msg.html</anchorfile>
      <anchor>ace832246a7b4bc5a50dde93a7e29a6b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>noOutputHandler</name>
      <anchorfile>namespaceompl_1_1msg.html</anchorfile>
      <anchor>a83e28f524a5576a73bb062523bbdc53d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restorePreviousOutputHandler</name>
      <anchorfile>namespaceompl_1_1msg.html</anchorfile>
      <anchor>ae944620cc2012c5ffe07e8bb6186d28c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useOutputHandler</name>
      <anchorfile>namespaceompl_1_1msg.html</anchorfile>
      <anchor>a66fd8fd39855d4166ff40164fe4d9d6b</anchor>
      <arglist>(OutputHandler *oh)</arglist>
    </member>
    <member kind="function">
      <type>OutputHandler *</type>
      <name>getOutputHandler</name>
      <anchorfile>namespaceompl_1_1msg.html</anchorfile>
      <anchor>a0e9a5d161592281f8caf01b0c8b2e746</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLogLevel</name>
      <anchorfile>namespaceompl_1_1msg.html</anchorfile>
      <anchor>a1c18c4617e713817e0e4fe7dc5c5c864</anchor>
      <arglist>(LogLevel level)</arglist>
    </member>
    <member kind="function">
      <type>LogLevel</type>
      <name>getLogLevel</name>
      <anchorfile>namespaceompl_1_1msg.html</anchorfile>
      <anchor>ad43f0d2a008f25720e8111395c5ff314</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>log</name>
      <anchorfile>namespaceompl_1_1msg.html</anchorfile>
      <anchor>affe7852f27c06f98af7eb2579f1e5350</anchor>
      <arglist>(const char *file, int line, LogLevel level, const char *m,...)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>AtlasOptions</name>
    <filename>structAtlasOptions.html</filename>
  </compound>
  <compound kind="class">
    <name>BinaryHeap&lt; aitstar::Edge, std::function&lt; bool(const aitstar::Edge &amp;, const aitstar::Edge &amp;)&gt; &gt;</name>
    <filename>classompl_1_1BinaryHeap.html</filename>
    <member kind="typedef">
      <type>void(*)(Element *, void *)</type>
      <name>EventAfterInsert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ae2e2ef4ecd57edb2cd78e3c41a5a9dfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*)(Element *, void *)</type>
      <name>EventBeforeRemove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a06e78b10045dc0bd8d8556c0dd95c961</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onAfterInsert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>adb5a517c064a3844a47cc873fddea796</anchor>
      <arglist>(EventAfterInsert event, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onBeforeRemove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a5a6368ea8193cdbf545f8a57dbaf02f5</anchor>
      <arglist>(EventBeforeRemove event, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>addf7a2e9d0cc43dd05659686f58d695f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>top</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a5d1ecb7a7d154ad44df98a5109738697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a178e694e35e7864834d765a2819256f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a56848811174698cd9a907e1128e6ce02</anchor>
      <arglist>(Element *element)</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>insert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a7712c8909b596a4d12e0080960bd0274</anchor>
      <arglist>(const aitstar::Edge &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a275aa4aab2088b38df1fa2fd2827fffe</anchor>
      <arglist>(const std::vector&lt; aitstar::Edge &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildFrom</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ac8d1b64b5b7d50cd09380bfa14bbc45d</anchor>
      <arglist>(const std::vector&lt; aitstar::Edge &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rebuild</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>acb0b1a3d8a1f5e7852aec45bae1960dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a8114dc53c4239fe0e199106386898ce3</anchor>
      <arglist>(Element *element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a442b00d357e3c2859c40169ed0817b92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>af624f87ff25d2e31f08afb6b4c1b4fc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getContent</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ac7bc9e22fbcbad4ea5dfd20b34ef348f</anchor>
      <arglist>(std::vector&lt; aitstar::Edge &gt; &amp;content) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ad782d92c652443841ebc310d778a22f0</anchor>
      <arglist>(std::vector&lt; aitstar::Edge &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>std::function&lt; bool(const aitstar::Edge &amp;, const aitstar::Edge &amp;)&gt; &amp;</type>
      <name>getComparisonOperator</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a99e2aec266c1746cf0f16aa763d00d7f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BinaryHeap&lt; BiDirMotion *, BiDirMotionCompare &gt;</name>
    <filename>classompl_1_1BinaryHeap.html</filename>
    <member kind="typedef">
      <type>void(*)(Element *, void *)</type>
      <name>EventAfterInsert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ae2e2ef4ecd57edb2cd78e3c41a5a9dfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*)(Element *, void *)</type>
      <name>EventBeforeRemove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a06e78b10045dc0bd8d8556c0dd95c961</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onAfterInsert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>adb5a517c064a3844a47cc873fddea796</anchor>
      <arglist>(EventAfterInsert event, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onBeforeRemove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a5a6368ea8193cdbf545f8a57dbaf02f5</anchor>
      <arglist>(EventBeforeRemove event, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>addf7a2e9d0cc43dd05659686f58d695f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>top</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a5d1ecb7a7d154ad44df98a5109738697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a178e694e35e7864834d765a2819256f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a56848811174698cd9a907e1128e6ce02</anchor>
      <arglist>(Element *element)</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>insert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a7712c8909b596a4d12e0080960bd0274</anchor>
      <arglist>(const BiDirMotion * &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a275aa4aab2088b38df1fa2fd2827fffe</anchor>
      <arglist>(const std::vector&lt; BiDirMotion * &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildFrom</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ac8d1b64b5b7d50cd09380bfa14bbc45d</anchor>
      <arglist>(const std::vector&lt; BiDirMotion * &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rebuild</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>acb0b1a3d8a1f5e7852aec45bae1960dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a8114dc53c4239fe0e199106386898ce3</anchor>
      <arglist>(Element *element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a442b00d357e3c2859c40169ed0817b92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>af624f87ff25d2e31f08afb6b4c1b4fc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getContent</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ac7bc9e22fbcbad4ea5dfd20b34ef348f</anchor>
      <arglist>(std::vector&lt; BiDirMotion * &gt; &amp;content) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ad782d92c652443841ebc310d778a22f0</anchor>
      <arglist>(std::vector&lt; BiDirMotion * &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>BiDirMotionCompare &amp;</type>
      <name>getComparisonOperator</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a99e2aec266c1746cf0f16aa763d00d7f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BinaryHeap&lt; CellX *, LessThanExternalCell &gt;</name>
    <filename>classompl_1_1BinaryHeap.html</filename>
    <member kind="typedef">
      <type>void(*)(Element *, void *)</type>
      <name>EventAfterInsert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ae2e2ef4ecd57edb2cd78e3c41a5a9dfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*)(Element *, void *)</type>
      <name>EventBeforeRemove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a06e78b10045dc0bd8d8556c0dd95c961</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onAfterInsert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>adb5a517c064a3844a47cc873fddea796</anchor>
      <arglist>(EventAfterInsert event, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onBeforeRemove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a5a6368ea8193cdbf545f8a57dbaf02f5</anchor>
      <arglist>(EventBeforeRemove event, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>addf7a2e9d0cc43dd05659686f58d695f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>top</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a5d1ecb7a7d154ad44df98a5109738697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a178e694e35e7864834d765a2819256f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a56848811174698cd9a907e1128e6ce02</anchor>
      <arglist>(Element *element)</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>insert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a7712c8909b596a4d12e0080960bd0274</anchor>
      <arglist>(const CellX * &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a275aa4aab2088b38df1fa2fd2827fffe</anchor>
      <arglist>(const std::vector&lt; CellX * &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildFrom</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ac8d1b64b5b7d50cd09380bfa14bbc45d</anchor>
      <arglist>(const std::vector&lt; CellX * &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rebuild</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>acb0b1a3d8a1f5e7852aec45bae1960dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a8114dc53c4239fe0e199106386898ce3</anchor>
      <arglist>(Element *element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a442b00d357e3c2859c40169ed0817b92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>af624f87ff25d2e31f08afb6b4c1b4fc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getContent</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ac7bc9e22fbcbad4ea5dfd20b34ef348f</anchor>
      <arglist>(std::vector&lt; CellX * &gt; &amp;content) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ad782d92c652443841ebc310d778a22f0</anchor>
      <arglist>(std::vector&lt; CellX * &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>LessThanExternalCell &amp;</type>
      <name>getComparisonOperator</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a99e2aec266c1746cf0f16aa763d00d7f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BinaryHeap&lt; CellX *, LessThanInternalCell &gt;</name>
    <filename>classompl_1_1BinaryHeap.html</filename>
    <member kind="typedef">
      <type>void(*)(Element *, void *)</type>
      <name>EventAfterInsert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ae2e2ef4ecd57edb2cd78e3c41a5a9dfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*)(Element *, void *)</type>
      <name>EventBeforeRemove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a06e78b10045dc0bd8d8556c0dd95c961</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onAfterInsert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>adb5a517c064a3844a47cc873fddea796</anchor>
      <arglist>(EventAfterInsert event, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onBeforeRemove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a5a6368ea8193cdbf545f8a57dbaf02f5</anchor>
      <arglist>(EventBeforeRemove event, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>addf7a2e9d0cc43dd05659686f58d695f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>top</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a5d1ecb7a7d154ad44df98a5109738697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a178e694e35e7864834d765a2819256f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a56848811174698cd9a907e1128e6ce02</anchor>
      <arglist>(Element *element)</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>insert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a7712c8909b596a4d12e0080960bd0274</anchor>
      <arglist>(const CellX * &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a275aa4aab2088b38df1fa2fd2827fffe</anchor>
      <arglist>(const std::vector&lt; CellX * &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildFrom</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ac8d1b64b5b7d50cd09380bfa14bbc45d</anchor>
      <arglist>(const std::vector&lt; CellX * &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rebuild</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>acb0b1a3d8a1f5e7852aec45bae1960dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a8114dc53c4239fe0e199106386898ce3</anchor>
      <arglist>(Element *element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a442b00d357e3c2859c40169ed0817b92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>af624f87ff25d2e31f08afb6b4c1b4fc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getContent</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ac7bc9e22fbcbad4ea5dfd20b34ef348f</anchor>
      <arglist>(std::vector&lt; CellX * &gt; &amp;content) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ad782d92c652443841ebc310d778a22f0</anchor>
      <arglist>(std::vector&lt; CellX * &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>LessThanInternalCell &amp;</type>
      <name>getComparisonOperator</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a99e2aec266c1746cf0f16aa763d00d7f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BinaryHeap&lt; KeyVertexPair, std::function&lt; bool(const KeyVertexPair &amp;, const KeyVertexPair &amp;)&gt; &gt;</name>
    <filename>classompl_1_1BinaryHeap.html</filename>
    <member kind="typedef">
      <type>void(*)(Element *, void *)</type>
      <name>EventAfterInsert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ae2e2ef4ecd57edb2cd78e3c41a5a9dfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*)(Element *, void *)</type>
      <name>EventBeforeRemove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a06e78b10045dc0bd8d8556c0dd95c961</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onAfterInsert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>adb5a517c064a3844a47cc873fddea796</anchor>
      <arglist>(EventAfterInsert event, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onBeforeRemove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a5a6368ea8193cdbf545f8a57dbaf02f5</anchor>
      <arglist>(EventBeforeRemove event, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>addf7a2e9d0cc43dd05659686f58d695f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>top</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a5d1ecb7a7d154ad44df98a5109738697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a178e694e35e7864834d765a2819256f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a56848811174698cd9a907e1128e6ce02</anchor>
      <arglist>(Element *element)</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>insert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a7712c8909b596a4d12e0080960bd0274</anchor>
      <arglist>(const KeyVertexPair &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a275aa4aab2088b38df1fa2fd2827fffe</anchor>
      <arglist>(const std::vector&lt; KeyVertexPair &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildFrom</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ac8d1b64b5b7d50cd09380bfa14bbc45d</anchor>
      <arglist>(const std::vector&lt; KeyVertexPair &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rebuild</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>acb0b1a3d8a1f5e7852aec45bae1960dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a8114dc53c4239fe0e199106386898ce3</anchor>
      <arglist>(Element *element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a442b00d357e3c2859c40169ed0817b92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>af624f87ff25d2e31f08afb6b4c1b4fc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getContent</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ac7bc9e22fbcbad4ea5dfd20b34ef348f</anchor>
      <arglist>(std::vector&lt; KeyVertexPair &gt; &amp;content) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ad782d92c652443841ebc310d778a22f0</anchor>
      <arglist>(std::vector&lt; KeyVertexPair &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>std::function&lt; bool(const KeyVertexPair &amp;, const KeyVertexPair &amp;)&gt; &amp;</type>
      <name>getComparisonOperator</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a99e2aec266c1746cf0f16aa763d00d7f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BinaryHeap&lt; Motion *, MotionCompare &gt;</name>
    <filename>classompl_1_1BinaryHeap.html</filename>
    <member kind="typedef">
      <type>void(*)(Element *, void *)</type>
      <name>EventAfterInsert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ae2e2ef4ecd57edb2cd78e3c41a5a9dfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*)(Element *, void *)</type>
      <name>EventBeforeRemove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a06e78b10045dc0bd8d8556c0dd95c961</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onAfterInsert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>adb5a517c064a3844a47cc873fddea796</anchor>
      <arglist>(EventAfterInsert event, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onBeforeRemove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a5a6368ea8193cdbf545f8a57dbaf02f5</anchor>
      <arglist>(EventBeforeRemove event, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>addf7a2e9d0cc43dd05659686f58d695f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>top</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a5d1ecb7a7d154ad44df98a5109738697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a178e694e35e7864834d765a2819256f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a56848811174698cd9a907e1128e6ce02</anchor>
      <arglist>(Element *element)</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>insert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a7712c8909b596a4d12e0080960bd0274</anchor>
      <arglist>(const Motion * &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a275aa4aab2088b38df1fa2fd2827fffe</anchor>
      <arglist>(const std::vector&lt; Motion * &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildFrom</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ac8d1b64b5b7d50cd09380bfa14bbc45d</anchor>
      <arglist>(const std::vector&lt; Motion * &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rebuild</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>acb0b1a3d8a1f5e7852aec45bae1960dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a8114dc53c4239fe0e199106386898ce3</anchor>
      <arglist>(Element *element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a442b00d357e3c2859c40169ed0817b92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>af624f87ff25d2e31f08afb6b4c1b4fc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getContent</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ac7bc9e22fbcbad4ea5dfd20b34ef348f</anchor>
      <arglist>(std::vector&lt; Motion * &gt; &amp;content) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ad782d92c652443841ebc310d778a22f0</anchor>
      <arglist>(std::vector&lt; Motion * &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>MotionCompare &amp;</type>
      <name>getComparisonOperator</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a99e2aec266c1746cf0f16aa763d00d7f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BinaryHeap&lt; ompl::control::PDST::Motion *, ompl::control::PDST::MotionCompare &gt;</name>
    <filename>classompl_1_1BinaryHeap.html</filename>
    <member kind="typedef">
      <type>void(*)(Element *, void *)</type>
      <name>EventAfterInsert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ae2e2ef4ecd57edb2cd78e3c41a5a9dfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*)(Element *, void *)</type>
      <name>EventBeforeRemove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a06e78b10045dc0bd8d8556c0dd95c961</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onAfterInsert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>adb5a517c064a3844a47cc873fddea796</anchor>
      <arglist>(EventAfterInsert event, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onBeforeRemove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a5a6368ea8193cdbf545f8a57dbaf02f5</anchor>
      <arglist>(EventBeforeRemove event, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>addf7a2e9d0cc43dd05659686f58d695f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>top</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a5d1ecb7a7d154ad44df98a5109738697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a178e694e35e7864834d765a2819256f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a56848811174698cd9a907e1128e6ce02</anchor>
      <arglist>(Element *element)</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>insert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a7712c8909b596a4d12e0080960bd0274</anchor>
      <arglist>(const ompl::control::PDST::Motion * &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a275aa4aab2088b38df1fa2fd2827fffe</anchor>
      <arglist>(const std::vector&lt; ompl::control::PDST::Motion * &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildFrom</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ac8d1b64b5b7d50cd09380bfa14bbc45d</anchor>
      <arglist>(const std::vector&lt; ompl::control::PDST::Motion * &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rebuild</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>acb0b1a3d8a1f5e7852aec45bae1960dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a8114dc53c4239fe0e199106386898ce3</anchor>
      <arglist>(Element *element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a442b00d357e3c2859c40169ed0817b92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>af624f87ff25d2e31f08afb6b4c1b4fc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getContent</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ac7bc9e22fbcbad4ea5dfd20b34ef348f</anchor>
      <arglist>(std::vector&lt; ompl::control::PDST::Motion * &gt; &amp;content) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ad782d92c652443841ebc310d778a22f0</anchor>
      <arglist>(std::vector&lt; ompl::control::PDST::Motion * &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>ompl::control::PDST::MotionCompare &amp;</type>
      <name>getComparisonOperator</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a99e2aec266c1746cf0f16aa763d00d7f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BinaryHeap&lt; ompl::geometric::PDST::Motion *, ompl::geometric::PDST::MotionCompare &gt;</name>
    <filename>classompl_1_1BinaryHeap.html</filename>
    <member kind="typedef">
      <type>void(*)(Element *, void *)</type>
      <name>EventAfterInsert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ae2e2ef4ecd57edb2cd78e3c41a5a9dfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*)(Element *, void *)</type>
      <name>EventBeforeRemove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a06e78b10045dc0bd8d8556c0dd95c961</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onAfterInsert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>adb5a517c064a3844a47cc873fddea796</anchor>
      <arglist>(EventAfterInsert event, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onBeforeRemove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a5a6368ea8193cdbf545f8a57dbaf02f5</anchor>
      <arglist>(EventBeforeRemove event, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>addf7a2e9d0cc43dd05659686f58d695f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>top</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a5d1ecb7a7d154ad44df98a5109738697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a178e694e35e7864834d765a2819256f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a56848811174698cd9a907e1128e6ce02</anchor>
      <arglist>(Element *element)</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>insert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a7712c8909b596a4d12e0080960bd0274</anchor>
      <arglist>(const ompl::geometric::PDST::Motion * &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a275aa4aab2088b38df1fa2fd2827fffe</anchor>
      <arglist>(const std::vector&lt; ompl::geometric::PDST::Motion * &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildFrom</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ac8d1b64b5b7d50cd09380bfa14bbc45d</anchor>
      <arglist>(const std::vector&lt; ompl::geometric::PDST::Motion * &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rebuild</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>acb0b1a3d8a1f5e7852aec45bae1960dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a8114dc53c4239fe0e199106386898ce3</anchor>
      <arglist>(Element *element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a442b00d357e3c2859c40169ed0817b92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>af624f87ff25d2e31f08afb6b4c1b4fc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getContent</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ac7bc9e22fbcbad4ea5dfd20b34ef348f</anchor>
      <arglist>(std::vector&lt; ompl::geometric::PDST::Motion * &gt; &amp;content) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ad782d92c652443841ebc310d778a22f0</anchor>
      <arglist>(std::vector&lt; ompl::geometric::PDST::Motion * &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>ompl::geometric::PDST::MotionCompare &amp;</type>
      <name>getComparisonOperator</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a99e2aec266c1746cf0f16aa763d00d7f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BinaryHeap&lt; ompl::geometric::RRTXstatic::Motion *, ompl::geometric::RRTXstatic::MotionCompare &gt;</name>
    <filename>classompl_1_1BinaryHeap.html</filename>
    <member kind="typedef">
      <type>void(*)(Element *, void *)</type>
      <name>EventAfterInsert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ae2e2ef4ecd57edb2cd78e3c41a5a9dfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*)(Element *, void *)</type>
      <name>EventBeforeRemove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a06e78b10045dc0bd8d8556c0dd95c961</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onAfterInsert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>adb5a517c064a3844a47cc873fddea796</anchor>
      <arglist>(EventAfterInsert event, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onBeforeRemove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a5a6368ea8193cdbf545f8a57dbaf02f5</anchor>
      <arglist>(EventBeforeRemove event, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>addf7a2e9d0cc43dd05659686f58d695f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>top</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a5d1ecb7a7d154ad44df98a5109738697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a178e694e35e7864834d765a2819256f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a56848811174698cd9a907e1128e6ce02</anchor>
      <arglist>(Element *element)</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>insert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a7712c8909b596a4d12e0080960bd0274</anchor>
      <arglist>(const ompl::geometric::RRTXstatic::Motion * &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a275aa4aab2088b38df1fa2fd2827fffe</anchor>
      <arglist>(const std::vector&lt; ompl::geometric::RRTXstatic::Motion * &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildFrom</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ac8d1b64b5b7d50cd09380bfa14bbc45d</anchor>
      <arglist>(const std::vector&lt; ompl::geometric::RRTXstatic::Motion * &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rebuild</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>acb0b1a3d8a1f5e7852aec45bae1960dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a8114dc53c4239fe0e199106386898ce3</anchor>
      <arglist>(Element *element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a442b00d357e3c2859c40169ed0817b92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>af624f87ff25d2e31f08afb6b4c1b4fc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getContent</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ac7bc9e22fbcbad4ea5dfd20b34ef348f</anchor>
      <arglist>(std::vector&lt; ompl::geometric::RRTXstatic::Motion * &gt; &amp;content) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ad782d92c652443841ebc310d778a22f0</anchor>
      <arglist>(std::vector&lt; ompl::geometric::RRTXstatic::Motion * &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>ompl::geometric::RRTXstatic::MotionCompare &amp;</type>
      <name>getComparisonOperator</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a99e2aec266c1746cf0f16aa763d00d7f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BinaryHeap&lt; SortKeyAndVertexPtrPair, EdgeComparisonFunction &gt;</name>
    <filename>classompl_1_1BinaryHeap.html</filename>
    <member kind="typedef">
      <type>void(*)(Element *, void *)</type>
      <name>EventAfterInsert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ae2e2ef4ecd57edb2cd78e3c41a5a9dfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*)(Element *, void *)</type>
      <name>EventBeforeRemove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a06e78b10045dc0bd8d8556c0dd95c961</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onAfterInsert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>adb5a517c064a3844a47cc873fddea796</anchor>
      <arglist>(EventAfterInsert event, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onBeforeRemove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a5a6368ea8193cdbf545f8a57dbaf02f5</anchor>
      <arglist>(EventBeforeRemove event, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>addf7a2e9d0cc43dd05659686f58d695f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>top</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a5d1ecb7a7d154ad44df98a5109738697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a178e694e35e7864834d765a2819256f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a56848811174698cd9a907e1128e6ce02</anchor>
      <arglist>(Element *element)</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>insert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a7712c8909b596a4d12e0080960bd0274</anchor>
      <arglist>(const SortKeyAndVertexPtrPair &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a275aa4aab2088b38df1fa2fd2827fffe</anchor>
      <arglist>(const std::vector&lt; SortKeyAndVertexPtrPair &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildFrom</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ac8d1b64b5b7d50cd09380bfa14bbc45d</anchor>
      <arglist>(const std::vector&lt; SortKeyAndVertexPtrPair &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rebuild</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>acb0b1a3d8a1f5e7852aec45bae1960dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a8114dc53c4239fe0e199106386898ce3</anchor>
      <arglist>(Element *element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a442b00d357e3c2859c40169ed0817b92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>af624f87ff25d2e31f08afb6b4c1b4fc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getContent</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ac7bc9e22fbcbad4ea5dfd20b34ef348f</anchor>
      <arglist>(std::vector&lt; SortKeyAndVertexPtrPair &gt; &amp;content) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ad782d92c652443841ebc310d778a22f0</anchor>
      <arglist>(std::vector&lt; SortKeyAndVertexPtrPair &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>EdgeComparisonFunction &amp;</type>
      <name>getComparisonOperator</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a99e2aec266c1746cf0f16aa763d00d7f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ConstrainedOptions</name>
    <filename>structConstrainedOptions.html</filename>
  </compound>
  <compound kind="class">
    <name>ConstrainedPlanningCommon::ConstrainedProblem</name>
    <filename>classConstrainedPlanningCommon_1_1ConstrainedProblem.html</filename>
  </compound>
  <compound kind="class">
    <name>ConstrainedPlanningImplicitChain::ChainConstraint</name>
    <filename>classConstrainedPlanningImplicitChain_1_1ChainConstraint.html</filename>
    <base>ompl::base::Constraint</base>
    <class kind="class">ConstrainedPlanningImplicitChain::ChainConstraint::Wall</class>
  </compound>
  <compound kind="class">
    <name>ConstrainedPlanningImplicitChain::ChainConstraint::Wall</name>
    <filename>classConstrainedPlanningImplicitChain_1_1ChainConstraint_1_1Wall.html</filename>
  </compound>
  <compound kind="class">
    <name>ConstrainedPlanningSphere::SphereConstraint</name>
    <filename>classConstrainedPlanningSphere_1_1SphereConstraint.html</filename>
    <base>ompl::base::Constraint</base>
  </compound>
  <compound kind="class">
    <name>ConstrainedPlanningSphere::SphereProjection</name>
    <filename>classConstrainedPlanningSphere_1_1SphereProjection.html</filename>
    <base>ompl::base::ProjectionEvaluator</base>
  </compound>
  <compound kind="class">
    <name>ConstrainedPlanningTorus::TorusConstraint</name>
    <filename>classConstrainedPlanningTorus_1_1TorusConstraint.html</filename>
    <base>ompl::base::Constraint</base>
  </compound>
  <compound kind="class">
    <name>ConstrainedProblem</name>
    <filename>classConstrainedProblem.html</filename>
  </compound>
  <compound kind="class">
    <name>ConstraintGeneration::Constraint</name>
    <filename>classConstraintGeneration_1_1Constraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__getitem__</name>
      <anchorfile>classConstraintGeneration_1_1Constraint.html</anchorfile>
      <anchor>a165da2cdf386ccdfd7c931f87ee9f9ae</anchor>
      <arglist>(self, index)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>getVars</name>
      <anchorfile>classConstraintGeneration_1_1Constraint.html</anchorfile>
      <anchor>a5627e97b0bd780d9e4be618fc00c56a8</anchor>
      <arglist>(self)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>getConstraints</name>
      <anchorfile>classConstraintGeneration_1_1Constraint.html</anchorfile>
      <anchor>a2e1cff84378f70039fb1f3b7277a15c7</anchor>
      <arglist>(self)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>addConstraint</name>
      <anchorfile>classConstraintGeneration_1_1Constraint.html</anchorfile>
      <anchor>a7db25568883415f3d14c054eb6799410</anchor>
      <arglist>(self, f)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>jacobian</name>
      <anchorfile>classConstraintGeneration_1_1Constraint.html</anchorfile>
      <anchor>a5bcee1c9ab76ffaaa5c4a97b1dacb9cd</anchor>
      <arglist>(self)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConvexPolygon</name>
    <filename>classConvexPolygon.html</filename>
  </compound>
  <compound kind="class">
    <name>Discretization&lt; ompl::geometric::BKPIECE1::Motion &gt;</name>
    <filename>classompl_1_1geometric_1_1Discretization.html</filename>
    <member kind="typedef">
      <type>GridB&lt; CellData *, OrderCellsByImportance &gt;</type>
      <name>Grid</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>af696d7d3f5d93dfc44975be68babdafe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Grid::Cell</type>
      <name>Cell</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a86c80c67138c62e3da31dc5e42e0726b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Grid::Coord</type>
      <name>Coord</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a2dac26349b7da7fe428522518dfea7dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::function&lt; void(ompl::geometric::BKPIECE1::Motion *)&gt;</type>
      <name>FreeMotionFn</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>ae5b7df926fd3dc7f8af068808ca27f77</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderFraction</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>aac6dfc7acc8db082a84b7bbdadb78e87</anchor>
      <arglist>(double bp)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBorderFraction</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a43a530e0a34a1d4ddb9b3534fbe6973d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimension</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>acfdbc5b059330490b55185dda00f0eb1</anchor>
      <arglist>(unsigned int dim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a43c29d951fd5206e08a33931b02c4ddc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a28df4ebd2c0d78eab8b4fc72c6f27d43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>addMotion</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a6ac71e099d8a69dc6c2ee5ff1736a277</anchor>
      <arglist>(ompl::geometric::BKPIECE1::Motion *motion, const Coord &amp;coord, double dist=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selectMotion</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a8db183fa4a3231509336ffb7057805df</anchor>
      <arglist>(ompl::geometric::BKPIECE1::Motion *&amp;smotion, Cell *&amp;scell)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Discretization&lt; ompl::geometric::KPIECE1::Motion &gt;</name>
    <filename>classompl_1_1geometric_1_1Discretization.html</filename>
    <member kind="typedef">
      <type>GridB&lt; CellData *, OrderCellsByImportance &gt;</type>
      <name>Grid</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>af696d7d3f5d93dfc44975be68babdafe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Grid::Cell</type>
      <name>Cell</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a86c80c67138c62e3da31dc5e42e0726b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Grid::Coord</type>
      <name>Coord</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a2dac26349b7da7fe428522518dfea7dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::function&lt; void(ompl::geometric::KPIECE1::Motion *)&gt;</type>
      <name>FreeMotionFn</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>ae5b7df926fd3dc7f8af068808ca27f77</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderFraction</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>aac6dfc7acc8db082a84b7bbdadb78e87</anchor>
      <arglist>(double bp)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBorderFraction</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a43a530e0a34a1d4ddb9b3534fbe6973d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimension</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>acfdbc5b059330490b55185dda00f0eb1</anchor>
      <arglist>(unsigned int dim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a43c29d951fd5206e08a33931b02c4ddc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a28df4ebd2c0d78eab8b4fc72c6f27d43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>addMotion</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a6ac71e099d8a69dc6c2ee5ff1736a277</anchor>
      <arglist>(ompl::geometric::KPIECE1::Motion *motion, const Coord &amp;coord, double dist=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selectMotion</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a8db183fa4a3231509336ffb7057805df</anchor>
      <arglist>(ompl::geometric::KPIECE1::Motion *&amp;smotion, Cell *&amp;scell)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Discretization&lt; ompl::geometric::LBKPIECE1::Motion &gt;</name>
    <filename>classompl_1_1geometric_1_1Discretization.html</filename>
    <member kind="typedef">
      <type>GridB&lt; CellData *, OrderCellsByImportance &gt;</type>
      <name>Grid</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>af696d7d3f5d93dfc44975be68babdafe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Grid::Cell</type>
      <name>Cell</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a86c80c67138c62e3da31dc5e42e0726b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Grid::Coord</type>
      <name>Coord</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a2dac26349b7da7fe428522518dfea7dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::function&lt; void(ompl::geometric::LBKPIECE1::Motion *)&gt;</type>
      <name>FreeMotionFn</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>ae5b7df926fd3dc7f8af068808ca27f77</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderFraction</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>aac6dfc7acc8db082a84b7bbdadb78e87</anchor>
      <arglist>(double bp)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBorderFraction</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a43a530e0a34a1d4ddb9b3534fbe6973d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimension</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>acfdbc5b059330490b55185dda00f0eb1</anchor>
      <arglist>(unsigned int dim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a43c29d951fd5206e08a33931b02c4ddc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a28df4ebd2c0d78eab8b4fc72c6f27d43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>addMotion</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a6ac71e099d8a69dc6c2ee5ff1736a277</anchor>
      <arglist>(ompl::geometric::LBKPIECE1::Motion *motion, const Coord &amp;coord, double dist=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selectMotion</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a8db183fa4a3231509336ffb7057805df</anchor>
      <arglist>(ompl::geometric::LBKPIECE1::Motion *&amp;smotion, Cell *&amp;scell)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GreedyKCenters&lt; NNElement &gt;</name>
    <filename>classompl_1_1GreedyKCenters.html</filename>
    <member kind="typedef">
      <type>std::function&lt; double(const NNElement &amp;, const NNElement &amp;)&gt;</type>
      <name>DistanceFunction</name>
      <anchorfile>classompl_1_1GreedyKCenters.html</anchorfile>
      <anchor>a4efe9e669d852a90ece40527191d72bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::MatrixXd</type>
      <name>Matrix</name>
      <anchorfile>classompl_1_1GreedyKCenters.html</anchorfile>
      <anchor>afaab15f295d63a4546a552647fa23c1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDistanceFunction</name>
      <anchorfile>classompl_1_1GreedyKCenters.html</anchorfile>
      <anchor>aa46b77a69db20e4c411bbb85956eab21</anchor>
      <arglist>(const DistanceFunction &amp;distFun)</arglist>
    </member>
    <member kind="function">
      <type>const DistanceFunction &amp;</type>
      <name>getDistanceFunction</name>
      <anchorfile>classompl_1_1GreedyKCenters.html</anchorfile>
      <anchor>a9b9bcd71e87170f731f9e48b8b6a055e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>kcenters</name>
      <anchorfile>classompl_1_1GreedyKCenters.html</anchorfile>
      <anchor>ad8e0e7c79e810f3b3827dd8a5a8eeb01</anchor>
      <arglist>(const std::vector&lt; NNElement &gt; &amp;data, unsigned int k, std::vector&lt; unsigned int &gt; &amp;centers, Matrix &amp;dists)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DistanceFunction</type>
      <name>distFun_</name>
      <anchorfile>classompl_1_1GreedyKCenters.html</anchorfile>
      <anchor>a4c617a02bb7489b3d1e32261f099f113</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1GreedyKCenters.html</anchorfile>
      <anchor>a9f9f1e9cacc57cc0a7c1526406cc94dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GreedyKCenters&lt; std::shared_ptr&lt; ompl::geometric::aitstar::Vertex &gt; &gt;</name>
    <filename>classompl_1_1GreedyKCenters.html</filename>
    <member kind="typedef">
      <type>std::function&lt; double(const std::shared_ptr&lt; ompl::geometric::aitstar::Vertex &gt; &amp;, const std::shared_ptr&lt; ompl::geometric::aitstar::Vertex &gt; &amp;)&gt;</type>
      <name>DistanceFunction</name>
      <anchorfile>classompl_1_1GreedyKCenters.html</anchorfile>
      <anchor>a4efe9e669d852a90ece40527191d72bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::MatrixXd</type>
      <name>Matrix</name>
      <anchorfile>classompl_1_1GreedyKCenters.html</anchorfile>
      <anchor>afaab15f295d63a4546a552647fa23c1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDistanceFunction</name>
      <anchorfile>classompl_1_1GreedyKCenters.html</anchorfile>
      <anchor>aa46b77a69db20e4c411bbb85956eab21</anchor>
      <arglist>(const DistanceFunction &amp;distFun)</arglist>
    </member>
    <member kind="function">
      <type>const DistanceFunction &amp;</type>
      <name>getDistanceFunction</name>
      <anchorfile>classompl_1_1GreedyKCenters.html</anchorfile>
      <anchor>a9b9bcd71e87170f731f9e48b8b6a055e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>kcenters</name>
      <anchorfile>classompl_1_1GreedyKCenters.html</anchorfile>
      <anchor>ad8e0e7c79e810f3b3827dd8a5a8eeb01</anchor>
      <arglist>(const std::vector&lt; std::shared_ptr&lt; ompl::geometric::aitstar::Vertex &gt; &gt; &amp;data, unsigned int k, std::vector&lt; unsigned int &gt; &amp;centers, Matrix &amp;dists)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DistanceFunction</type>
      <name>distFun_</name>
      <anchorfile>classompl_1_1GreedyKCenters.html</anchorfile>
      <anchor>a4c617a02bb7489b3d1e32261f099f113</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1GreedyKCenters.html</anchorfile>
      <anchor>a9f9f1e9cacc57cc0a7c1526406cc94dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grid&lt; CellData * &gt;</name>
    <filename>classompl_1_1Grid.html</filename>
    <member kind="typedef">
      <type>Eigen::VectorXi</type>
      <name>Coord</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a4dfe6d93f717a9413f75ff0b661baee0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Cell * &gt;</type>
      <name>CellArray</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ae6b4ce01d4402b29c33d33079994d378</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename CoordHash::const_iterator</type>
      <name>iterator</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ac31b9031290d6185aa15667a56511208</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Grid</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>aa11294d2cb47b1e55bacd101b131d3c1</anchor>
      <arglist>(unsigned int dimension)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Grid</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>acace53abca008ae9210248cb2d54739d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>aa6a94d0ecdc11fd7e60d72b24b9d1930</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a58a9f8b580a3caeed96c37dd2e5fffe4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimension</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a118373bcfe70886449d94782b0a7c783</anchor>
      <arglist>(unsigned int dimension)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a34348b5cb9c17d8b4f2f3e762b7fa4a2</anchor>
      <arglist>(const Coord &amp;coord) const</arglist>
    </member>
    <member kind="function">
      <type>Cell *</type>
      <name>getCell</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ab1a51a1006f8529095f12b412a19e859</anchor>
      <arglist>(const Coord &amp;coord) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a20d361c71a9fd21a5d49f6330fc75367</anchor>
      <arglist>(const Cell *cell, CellArray &amp;list) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a18a4496fde6782960c13a5f4c7671bae</anchor>
      <arglist>(const Coord &amp;coord, CellArray &amp;list) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>abfc9b5bfe3d96b5be1d0388b611cbcea</anchor>
      <arglist>(Coord &amp;coord, CellArray &amp;list) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; Cell * &gt; &gt;</type>
      <name>components</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>afb363fa290bdac1d2812b0d068e985d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cell *</type>
      <name>createCell</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a1d0e09b5912dff94caa57aee681053cf</anchor>
      <arglist>(const Coord &amp;coord, CellArray *nbh=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a72386f9ffd43e98d25aa38b224541564</anchor>
      <arglist>(Cell *cell)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ac72fa046a57332c7627126e8d84fb1dc</anchor>
      <arglist>(Cell *cell)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroyCell</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a4d15cc71ece573822af0881fda220f65</anchor>
      <arglist>(Cell *cell) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getContent</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>afb473084ca2688e73a4a6b09ce8dd45d</anchor>
      <arglist>(std::vector&lt; CellData * &gt; &amp;content) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCoordinates</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a6d77bf0b3307bdf01a38deee198d5c3c</anchor>
      <arglist>(std::vector&lt; Coord * &gt; &amp;coords) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCells</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a94f47f15e9ef9b3aeec5e16d6b9be8c1</anchor>
      <arglist>(CellArray &amp;cells) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printCoord</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a2bec8613da9389cb118cfcd1f1015fb4</anchor>
      <arglist>(Coord &amp;coord, std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a2acee7e9fa181e1ca1335dd8a0be80c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a80e21fbfab2a491c65a93a1e909523bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>status</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a3f294fbd3352504a31c990ff2b2a43af</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ae4d082867db0a9a1f5d8d030c5f622ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ab89fb5bcb59eeb4c2bfbeb65c9a740ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::unordered_map&lt; Coord *, Cell *, HashFunCoordPtr, EqualCoordPtr &gt;</type>
      <name>CoordHash</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a66a7f0446cfe8842b4e642b552a8b5a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ab5f51d3c4ae3f021f17d8435643cd3d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>dimension_</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a8dfdf767f8c14a15fddbdb4bc1e993f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxNeighbors_</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a826614263d30ffcc37924cecfef25471</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordHash</type>
      <name>hash_</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>afbf8751613b70340e9e287d3bb53650d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grid&lt; ompl::control::EST::MotionInfo &gt;</name>
    <filename>classompl_1_1Grid.html</filename>
    <member kind="typedef">
      <type>Eigen::VectorXi</type>
      <name>Coord</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a4dfe6d93f717a9413f75ff0b661baee0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Cell * &gt;</type>
      <name>CellArray</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ae6b4ce01d4402b29c33d33079994d378</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename CoordHash::const_iterator</type>
      <name>iterator</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ac31b9031290d6185aa15667a56511208</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Grid</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>aa11294d2cb47b1e55bacd101b131d3c1</anchor>
      <arglist>(unsigned int dimension)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Grid</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>acace53abca008ae9210248cb2d54739d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>aa6a94d0ecdc11fd7e60d72b24b9d1930</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a58a9f8b580a3caeed96c37dd2e5fffe4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimension</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a118373bcfe70886449d94782b0a7c783</anchor>
      <arglist>(unsigned int dimension)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a34348b5cb9c17d8b4f2f3e762b7fa4a2</anchor>
      <arglist>(const Coord &amp;coord) const</arglist>
    </member>
    <member kind="function">
      <type>Cell *</type>
      <name>getCell</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ab1a51a1006f8529095f12b412a19e859</anchor>
      <arglist>(const Coord &amp;coord) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a20d361c71a9fd21a5d49f6330fc75367</anchor>
      <arglist>(const Cell *cell, CellArray &amp;list) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a18a4496fde6782960c13a5f4c7671bae</anchor>
      <arglist>(const Coord &amp;coord, CellArray &amp;list) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>abfc9b5bfe3d96b5be1d0388b611cbcea</anchor>
      <arglist>(Coord &amp;coord, CellArray &amp;list) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; Cell * &gt; &gt;</type>
      <name>components</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>afb363fa290bdac1d2812b0d068e985d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cell *</type>
      <name>createCell</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a1d0e09b5912dff94caa57aee681053cf</anchor>
      <arglist>(const Coord &amp;coord, CellArray *nbh=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a72386f9ffd43e98d25aa38b224541564</anchor>
      <arglist>(Cell *cell)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ac72fa046a57332c7627126e8d84fb1dc</anchor>
      <arglist>(Cell *cell)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroyCell</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a4d15cc71ece573822af0881fda220f65</anchor>
      <arglist>(Cell *cell) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getContent</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>afb473084ca2688e73a4a6b09ce8dd45d</anchor>
      <arglist>(std::vector&lt; ompl::control::EST::MotionInfo &gt; &amp;content) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCoordinates</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a6d77bf0b3307bdf01a38deee198d5c3c</anchor>
      <arglist>(std::vector&lt; Coord * &gt; &amp;coords) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCells</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a94f47f15e9ef9b3aeec5e16d6b9be8c1</anchor>
      <arglist>(CellArray &amp;cells) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printCoord</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a2bec8613da9389cb118cfcd1f1015fb4</anchor>
      <arglist>(Coord &amp;coord, std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a2acee7e9fa181e1ca1335dd8a0be80c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a80e21fbfab2a491c65a93a1e909523bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>status</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a3f294fbd3352504a31c990ff2b2a43af</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ae4d082867db0a9a1f5d8d030c5f622ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ab89fb5bcb59eeb4c2bfbeb65c9a740ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::unordered_map&lt; Coord *, Cell *, HashFunCoordPtr, EqualCoordPtr &gt;</type>
      <name>CoordHash</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a66a7f0446cfe8842b4e642b552a8b5a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ab5f51d3c4ae3f021f17d8435643cd3d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>dimension_</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a8dfdf767f8c14a15fddbdb4bc1e993f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxNeighbors_</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a826614263d30ffcc37924cecfef25471</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordHash</type>
      <name>hash_</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>afbf8751613b70340e9e287d3bb53650d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grid&lt; ompl::geometric::ProjEST::MotionInfo &gt;</name>
    <filename>classompl_1_1Grid.html</filename>
    <member kind="typedef">
      <type>Eigen::VectorXi</type>
      <name>Coord</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a4dfe6d93f717a9413f75ff0b661baee0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Cell * &gt;</type>
      <name>CellArray</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ae6b4ce01d4402b29c33d33079994d378</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename CoordHash::const_iterator</type>
      <name>iterator</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ac31b9031290d6185aa15667a56511208</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Grid</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>aa11294d2cb47b1e55bacd101b131d3c1</anchor>
      <arglist>(unsigned int dimension)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Grid</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>acace53abca008ae9210248cb2d54739d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>aa6a94d0ecdc11fd7e60d72b24b9d1930</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a58a9f8b580a3caeed96c37dd2e5fffe4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimension</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a118373bcfe70886449d94782b0a7c783</anchor>
      <arglist>(unsigned int dimension)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a34348b5cb9c17d8b4f2f3e762b7fa4a2</anchor>
      <arglist>(const Coord &amp;coord) const</arglist>
    </member>
    <member kind="function">
      <type>Cell *</type>
      <name>getCell</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ab1a51a1006f8529095f12b412a19e859</anchor>
      <arglist>(const Coord &amp;coord) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a20d361c71a9fd21a5d49f6330fc75367</anchor>
      <arglist>(const Cell *cell, CellArray &amp;list) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a18a4496fde6782960c13a5f4c7671bae</anchor>
      <arglist>(const Coord &amp;coord, CellArray &amp;list) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>abfc9b5bfe3d96b5be1d0388b611cbcea</anchor>
      <arglist>(Coord &amp;coord, CellArray &amp;list) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; Cell * &gt; &gt;</type>
      <name>components</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>afb363fa290bdac1d2812b0d068e985d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cell *</type>
      <name>createCell</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a1d0e09b5912dff94caa57aee681053cf</anchor>
      <arglist>(const Coord &amp;coord, CellArray *nbh=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a72386f9ffd43e98d25aa38b224541564</anchor>
      <arglist>(Cell *cell)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ac72fa046a57332c7627126e8d84fb1dc</anchor>
      <arglist>(Cell *cell)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroyCell</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a4d15cc71ece573822af0881fda220f65</anchor>
      <arglist>(Cell *cell) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getContent</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>afb473084ca2688e73a4a6b09ce8dd45d</anchor>
      <arglist>(std::vector&lt; ompl::geometric::ProjEST::MotionInfo &gt; &amp;content) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCoordinates</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a6d77bf0b3307bdf01a38deee198d5c3c</anchor>
      <arglist>(std::vector&lt; Coord * &gt; &amp;coords) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCells</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a94f47f15e9ef9b3aeec5e16d6b9be8c1</anchor>
      <arglist>(CellArray &amp;cells) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printCoord</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a2bec8613da9389cb118cfcd1f1015fb4</anchor>
      <arglist>(Coord &amp;coord, std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a2acee7e9fa181e1ca1335dd8a0be80c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a80e21fbfab2a491c65a93a1e909523bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>status</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a3f294fbd3352504a31c990ff2b2a43af</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ae4d082867db0a9a1f5d8d030c5f622ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ab89fb5bcb59eeb4c2bfbeb65c9a740ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::unordered_map&lt; Coord *, Cell *, HashFunCoordPtr, EqualCoordPtr &gt;</type>
      <name>CoordHash</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a66a7f0446cfe8842b4e642b552a8b5a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ab5f51d3c4ae3f021f17d8435643cd3d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>dimension_</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a8dfdf767f8c14a15fddbdb4bc1e993f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxNeighbors_</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a826614263d30ffcc37924cecfef25471</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordHash</type>
      <name>hash_</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>afbf8751613b70340e9e287d3bb53650d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grid&lt; ompl::geometric::pSBL::MotionInfo &gt;</name>
    <filename>classompl_1_1Grid.html</filename>
    <member kind="typedef">
      <type>Eigen::VectorXi</type>
      <name>Coord</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a4dfe6d93f717a9413f75ff0b661baee0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Cell * &gt;</type>
      <name>CellArray</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ae6b4ce01d4402b29c33d33079994d378</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename CoordHash::const_iterator</type>
      <name>iterator</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ac31b9031290d6185aa15667a56511208</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Grid</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>aa11294d2cb47b1e55bacd101b131d3c1</anchor>
      <arglist>(unsigned int dimension)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Grid</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>acace53abca008ae9210248cb2d54739d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>aa6a94d0ecdc11fd7e60d72b24b9d1930</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a58a9f8b580a3caeed96c37dd2e5fffe4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimension</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a118373bcfe70886449d94782b0a7c783</anchor>
      <arglist>(unsigned int dimension)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a34348b5cb9c17d8b4f2f3e762b7fa4a2</anchor>
      <arglist>(const Coord &amp;coord) const</arglist>
    </member>
    <member kind="function">
      <type>Cell *</type>
      <name>getCell</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ab1a51a1006f8529095f12b412a19e859</anchor>
      <arglist>(const Coord &amp;coord) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a20d361c71a9fd21a5d49f6330fc75367</anchor>
      <arglist>(const Cell *cell, CellArray &amp;list) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a18a4496fde6782960c13a5f4c7671bae</anchor>
      <arglist>(const Coord &amp;coord, CellArray &amp;list) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>abfc9b5bfe3d96b5be1d0388b611cbcea</anchor>
      <arglist>(Coord &amp;coord, CellArray &amp;list) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; Cell * &gt; &gt;</type>
      <name>components</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>afb363fa290bdac1d2812b0d068e985d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cell *</type>
      <name>createCell</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a1d0e09b5912dff94caa57aee681053cf</anchor>
      <arglist>(const Coord &amp;coord, CellArray *nbh=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a72386f9ffd43e98d25aa38b224541564</anchor>
      <arglist>(Cell *cell)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ac72fa046a57332c7627126e8d84fb1dc</anchor>
      <arglist>(Cell *cell)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroyCell</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a4d15cc71ece573822af0881fda220f65</anchor>
      <arglist>(Cell *cell) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getContent</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>afb473084ca2688e73a4a6b09ce8dd45d</anchor>
      <arglist>(std::vector&lt; ompl::geometric::pSBL::MotionInfo &gt; &amp;content) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCoordinates</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a6d77bf0b3307bdf01a38deee198d5c3c</anchor>
      <arglist>(std::vector&lt; Coord * &gt; &amp;coords) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCells</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a94f47f15e9ef9b3aeec5e16d6b9be8c1</anchor>
      <arglist>(CellArray &amp;cells) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printCoord</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a2bec8613da9389cb118cfcd1f1015fb4</anchor>
      <arglist>(Coord &amp;coord, std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a2acee7e9fa181e1ca1335dd8a0be80c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a80e21fbfab2a491c65a93a1e909523bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>status</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a3f294fbd3352504a31c990ff2b2a43af</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ae4d082867db0a9a1f5d8d030c5f622ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ab89fb5bcb59eeb4c2bfbeb65c9a740ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::unordered_map&lt; Coord *, Cell *, HashFunCoordPtr, EqualCoordPtr &gt;</type>
      <name>CoordHash</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a66a7f0446cfe8842b4e642b552a8b5a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ab5f51d3c4ae3f021f17d8435643cd3d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>dimension_</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a8dfdf767f8c14a15fddbdb4bc1e993f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxNeighbors_</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a826614263d30ffcc37924cecfef25471</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordHash</type>
      <name>hash_</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>afbf8751613b70340e9e287d3bb53650d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grid&lt; ompl::geometric::SBL::MotionInfo &gt;</name>
    <filename>classompl_1_1Grid.html</filename>
    <member kind="typedef">
      <type>Eigen::VectorXi</type>
      <name>Coord</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a4dfe6d93f717a9413f75ff0b661baee0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Cell * &gt;</type>
      <name>CellArray</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ae6b4ce01d4402b29c33d33079994d378</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename CoordHash::const_iterator</type>
      <name>iterator</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ac31b9031290d6185aa15667a56511208</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Grid</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>aa11294d2cb47b1e55bacd101b131d3c1</anchor>
      <arglist>(unsigned int dimension)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Grid</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>acace53abca008ae9210248cb2d54739d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>aa6a94d0ecdc11fd7e60d72b24b9d1930</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a58a9f8b580a3caeed96c37dd2e5fffe4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimension</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a118373bcfe70886449d94782b0a7c783</anchor>
      <arglist>(unsigned int dimension)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a34348b5cb9c17d8b4f2f3e762b7fa4a2</anchor>
      <arglist>(const Coord &amp;coord) const</arglist>
    </member>
    <member kind="function">
      <type>Cell *</type>
      <name>getCell</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ab1a51a1006f8529095f12b412a19e859</anchor>
      <arglist>(const Coord &amp;coord) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a20d361c71a9fd21a5d49f6330fc75367</anchor>
      <arglist>(const Cell *cell, CellArray &amp;list) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a18a4496fde6782960c13a5f4c7671bae</anchor>
      <arglist>(const Coord &amp;coord, CellArray &amp;list) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>abfc9b5bfe3d96b5be1d0388b611cbcea</anchor>
      <arglist>(Coord &amp;coord, CellArray &amp;list) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; Cell * &gt; &gt;</type>
      <name>components</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>afb363fa290bdac1d2812b0d068e985d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cell *</type>
      <name>createCell</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a1d0e09b5912dff94caa57aee681053cf</anchor>
      <arglist>(const Coord &amp;coord, CellArray *nbh=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a72386f9ffd43e98d25aa38b224541564</anchor>
      <arglist>(Cell *cell)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ac72fa046a57332c7627126e8d84fb1dc</anchor>
      <arglist>(Cell *cell)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroyCell</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a4d15cc71ece573822af0881fda220f65</anchor>
      <arglist>(Cell *cell) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getContent</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>afb473084ca2688e73a4a6b09ce8dd45d</anchor>
      <arglist>(std::vector&lt; ompl::geometric::SBL::MotionInfo &gt; &amp;content) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCoordinates</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a6d77bf0b3307bdf01a38deee198d5c3c</anchor>
      <arglist>(std::vector&lt; Coord * &gt; &amp;coords) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCells</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a94f47f15e9ef9b3aeec5e16d6b9be8c1</anchor>
      <arglist>(CellArray &amp;cells) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printCoord</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a2bec8613da9389cb118cfcd1f1015fb4</anchor>
      <arglist>(Coord &amp;coord, std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a2acee7e9fa181e1ca1335dd8a0be80c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a80e21fbfab2a491c65a93a1e909523bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>status</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a3f294fbd3352504a31c990ff2b2a43af</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ae4d082867db0a9a1f5d8d030c5f622ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ab89fb5bcb59eeb4c2bfbeb65c9a740ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::unordered_map&lt; Coord *, Cell *, HashFunCoordPtr, EqualCoordPtr &gt;</type>
      <name>CoordHash</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a66a7f0446cfe8842b4e642b552a8b5a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ab5f51d3c4ae3f021f17d8435643cd3d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>dimension_</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a8dfdf767f8c14a15fddbdb4bc1e993f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxNeighbors_</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a826614263d30ffcc37924cecfef25471</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordHash</type>
      <name>hash_</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>afbf8751613b70340e9e287d3bb53650d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GridB&lt; CellData *, OrderCellsByImportance &gt;</name>
    <filename>classompl_1_1GridB.html</filename>
    <base>GridN&lt; CellData * &gt;</base>
    <member kind="typedef">
      <type>typename GridN&lt; CellData * &gt;::Cell</type>
      <name>Cell</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a9c64100fc82be7f1dfc1b07a6669446f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename GridN&lt; CellData * &gt;::CellArray</type>
      <name>CellArray</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a814aa9c6bd59bc0b621b193d4930dfb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename GridN&lt; CellData * &gt;::Coord</type>
      <name>Coord</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a89b9087b1351ab5d26785f99b1583d8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*)(Cell *, void *)</type>
      <name>EventCellUpdate</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a54662c0d0ff21c9ab5eaa1a80e1f9244</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridB</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a6f51bf34a19905e875d6bdffa3246b11</anchor>
      <arglist>(unsigned int dimension)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onCellUpdate</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a89bffe3573ef977f63b4ab4ff7759705</anchor>
      <arglist>(EventCellUpdate event, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>Cell *</type>
      <name>topInternal</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>ad7e3648604e7e06d63c595d18edefb2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Cell *</type>
      <name>topExternal</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>adcd6fd9b1cc11a49c45d6216320badda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>countInternal</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>ab053e6a30a308d9da83be70b2e742299</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>countExternal</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a78b32f15b137596941aa3cb81730a74c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fracExternal</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>abef554f7393a0b50adae5833743dd343</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fracInternal</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a0168d43da878bb6557dc0255d4548974</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>aceb50d07f1b2bdb195df8ef2c06999e7</anchor>
      <arglist>(Cell *cell)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateAll</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a177ec08a842589d77338095e36a3b2f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cell *</type>
      <name>createCell</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>ab5b346ddd6e6c21cc2e35a493a59f420</anchor>
      <arglist>(const Coord &amp;coord, CellArray *nbh=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a2d028cfdf6233f097ff43fd70591896b</anchor>
      <arglist>(Cell *cell)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a35d8377f870c0e03fca9f2839d863165</anchor>
      <arglist>(Cell *cell)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a9fc63d3a944813e04db038153e07368b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a19374aa02670366e2d47dd2b45db0f5a</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const override</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>BinaryHeap&lt; CellX *, LessThanInternalCell &gt;</type>
      <name>internalBHeap</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a7a9822c91a89b8c3407c25e24c1d7c25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>BinaryHeap&lt; CellX *, LessThanExternalCell &gt;</type>
      <name>externalBHeap</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a52b79e7840e69d476e0cdb568ed6f03e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupHeaps</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a885d2d151a374acf376617019f0c4f86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clearHeaps</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>ab332ad98c88d0ddc7c2ba9e04eaa6c65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>noCellUpdate</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a24ba3c3dfcd76b0f7f79006252e18928</anchor>
      <arglist>(Cell *, void *)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>setHeapElementI</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a5d5d287741c00a9dba43113064f867d1</anchor>
      <arglist>(typename internalBHeap::Element *element, void *)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>setHeapElementE</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>ae2fb49e37b99d8f9e224c17577f5c622</anchor>
      <arglist>(typename externalBHeap::Element *element, void *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventCellUpdate</type>
      <name>eventCellUpdate_</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a21a662edc0904ba14495d44b2088669f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>eventCellUpdateData_</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>ab229dc7aca157fe152411fe75ad2f73f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>internalBHeap</type>
      <name>internal_</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a00fa01d1103ced09fb7ee3ebee187665</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>externalBHeap</type>
      <name>external_</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>afede0d811f4f9b53abc0f1945b871516</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GridN&lt; CellData * &gt;</name>
    <filename>classompl_1_1GridN.html</filename>
    <base>Grid&lt; CellData * &gt;</base>
    <member kind="typedef">
      <type>typename Grid&lt; CellData * &gt;::Cell</type>
      <name>BaseCell</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a9e1067c00569afbcf615025011b266a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Grid&lt; CellData * &gt;::CellArray</type>
      <name>BaseCellArray</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a96f5b11c5e35cb7144209f860805ba4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Grid&lt; CellData * &gt;::Coord</type>
      <name>Coord</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a956fca906da92d20c795578e486e46f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Cell * &gt;</type>
      <name>CellArray</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>ab82a159e63a146da22ed01448caad7b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridN</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a19056d56c0b54dd8ef2c3c9d483f1211</anchor>
      <arglist>(unsigned int dimension)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimension</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a8f301e691e48294e1e216d1c7971aa9d</anchor>
      <arglist>(unsigned int dimension)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBounds</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>ae69767d44f200c28b21683ac76d1624d</anchor>
      <arglist>(const Coord &amp;low, const Coord &amp;up)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInteriorCellNeighborLimit</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>ae5d42e023d6aa00ac1d479dad46d7144</anchor>
      <arglist>(unsigned int count)</arglist>
    </member>
    <member kind="function">
      <type>Cell *</type>
      <name>getCell</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a7656f059f2cc09f5839147646310d091</anchor>
      <arglist>(const Coord &amp;coord) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>aa5f609ccc4c4db2bb73c2a6d26df4ef4</anchor>
      <arglist>(const Cell *cell, CellArray &amp;list) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>ac741aaff4a2bc57af17d05eac207c457</anchor>
      <arglist>(const Coord &amp;coord, CellArray &amp;list) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>aaae2a80770d9b9bea447355dbdb53623</anchor>
      <arglist>(Coord &amp;coord, CellArray &amp;list) const</arglist>
    </member>
    <member kind="function">
      <type>BaseCell *</type>
      <name>createCell</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a705ebbeb6cb92398dffb24ea49ed34f4</anchor>
      <arglist>(const Coord &amp;coord, BaseCellArray *nbh=nullptr) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>ad6d7daf6ab4eee599611279d3a6635ba</anchor>
      <arglist>(BaseCell *cell) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCells</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>ae390a456793c108f6a84bc940b709789</anchor>
      <arglist>(CellArray &amp;cells) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned int</type>
      <name>numberOfBoundaryDimensions</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>ad4c133164404bfce4f569911c331c192</anchor>
      <arglist>(const Coord &amp;coord) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>hasBounds_</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>ace239cb56364f32748d8c4a66ec8b31f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>lowBound_</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>acdf65b3cd4603c5d25597e62064751d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>upBound_</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a422a9ee23538f070a2d9704e2ca70ead</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>interiorCellNeighborsLimit_</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a035b9527b8cfd98a6e4f4d7472e668a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>overrideCellNeighborsLimit_</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a1e9cc38ff1df4dca6c9969f73dcad61e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KinematicChainProjector</name>
    <filename>classKinematicChainProjector.html</filename>
    <base>ompl::base::ProjectionEvaluator</base>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classKinematicChainProjector.html</anchorfile>
      <anchor>a77319d166fe7465de2c2d0fac161d76a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>project</name>
      <anchorfile>classKinematicChainProjector.html</anchorfile>
      <anchor>af1488fead90aa3cd4d7f86e44c2fb186</anchor>
      <arglist>(const ompl::base::State *state, Eigen::Ref&lt; Eigen::VectorXd &gt; projection) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KinematicChainSpace</name>
    <filename>classKinematicChainSpace.html</filename>
    <base>ompl::base::RealVectorStateSpace</base>
    <member kind="function">
      <type>void</type>
      <name>registerProjections</name>
      <anchorfile>classKinematicChainSpace.html</anchorfile>
      <anchor>a81841311706b7dc8e30882d0c7b027d9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classKinematicChainSpace.html</anchorfile>
      <anchor>a449b947f5fe785f01839ae42412e34ae</anchor>
      <arglist>(const ompl::base::State *state1, const ompl::base::State *state2) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enforceBounds</name>
      <anchorfile>classKinematicChainSpace.html</anchorfile>
      <anchor>a70ed11e1bed001826a598bac8dd22e1e</anchor>
      <arglist>(ompl::base::State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalStates</name>
      <anchorfile>classKinematicChainSpace.html</anchorfile>
      <anchor>a084def9949d479e5698345dfeb2f4877</anchor>
      <arglist>(const ompl::base::State *state1, const ompl::base::State *state2) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classKinematicChainSpace.html</anchorfile>
      <anchor>a8d5420970c3b67f6f675f1ec98176c68</anchor>
      <arglist>(const ompl::base::State *from, const ompl::base::State *to, const double t, ompl::base::State *state) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KinematicChainValidityChecker</name>
    <filename>classKinematicChainValidityChecker.html</filename>
    <base>ompl::base::StateValidityChecker</base>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classKinematicChainValidityChecker.html</anchorfile>
      <anchor>a24b295b867c0a98b661e1350d3569f58</anchor>
      <arglist>(const ompl::base::State *state) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KoulesControlSampler</name>
    <filename>classKoulesControlSampler.html</filename>
    <base>ompl::control::ControlSampler</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sample</name>
      <anchorfile>classKoulesControlSampler.html</anchorfile>
      <anchor>ad2ef551f9935e44a7f2f0da86c78bbce</anchor>
      <arglist>(ompl::control::Control *control)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sample</name>
      <anchorfile>classKoulesControlSampler.html</anchorfile>
      <anchor>af491e9eb8f838a7f88a24f7586f7ad5b</anchor>
      <arglist>(ompl::control::Control *control, const ompl::base::State *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleNext</name>
      <anchorfile>classKoulesControlSampler.html</anchorfile>
      <anchor>a8872a45c9b897ce5a2b3946a9750e11d</anchor>
      <arglist>(ompl::control::Control *control, const ompl::control::Control *, const ompl::base::State *state)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KoulesControlSpace</name>
    <filename>classKoulesControlSpace.html</filename>
    <base>ompl::control::RealVectorControlSpace</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ompl::control::ControlSamplerPtr</type>
      <name>allocDefaultControlSampler</name>
      <anchorfile>classKoulesControlSpace.html</anchorfile>
      <anchor>ac44d5634411be222ce892746aa5ad0fe</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KoulesDecomposition</name>
    <filename>classKoulesDecomposition.html</filename>
    <base>ompl::control::GridDecomposition</base>
    <member kind="function">
      <type>void</type>
      <name>project</name>
      <anchorfile>classKoulesDecomposition.html</anchorfile>
      <anchor>a84b94311cb72dae2b58441aae90f72bc</anchor>
      <arglist>(const ompl::base::State *s, std::vector&lt; double &gt; &amp;coord) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KoulesDirectedControlSampler</name>
    <filename>classKoulesDirectedControlSampler.html</filename>
    <base>ompl::control::DirectedControlSampler</base>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>sampleTo</name>
      <anchorfile>classKoulesDirectedControlSampler.html</anchorfile>
      <anchor>ae8bee46ee36c230a9ef91e685b0a821a</anchor>
      <arglist>(ompl::control::Control *control, const ompl::base::State *source, ompl::base::State *dest)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>sampleTo</name>
      <anchorfile>classKoulesDirectedControlSampler.html</anchorfile>
      <anchor>ab4d770c001131d3ada9112f132b5375b</anchor>
      <arglist>(ompl::control::Control *control, const ompl::control::Control *, const ompl::base::State *source, ompl::base::State *dest)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KoulesGoal</name>
    <filename>classKoulesGoal.html</filename>
    <base>ompl::base::GoalSampleableRegion</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>distanceGoal</name>
      <anchorfile>classKoulesGoal.html</anchorfile>
      <anchor>af9e58edb5684f783c06d90069d4b79ef</anchor>
      <arglist>(const ompl::base::State *st) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleGoal</name>
      <anchorfile>classKoulesGoal.html</anchorfile>
      <anchor>a87412cd8e65308b514b11d6ec4a7a4d4</anchor>
      <arglist>(ompl::base::State *st) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>maxSampleCount</name>
      <anchorfile>classKoulesGoal.html</anchorfile>
      <anchor>ab67670bf36595165fd098f73a7737d6a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KoulesProjection</name>
    <filename>classKoulesProjection.html</filename>
    <base>ompl::base::ProjectionEvaluator</base>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classKoulesProjection.html</anchorfile>
      <anchor>a994a4c98e0a9c4e86423141138ffac9f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>defaultCellSizes</name>
      <anchorfile>classKoulesProjection.html</anchorfile>
      <anchor>a95363c1b39551883092a032c72144a67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>project</name>
      <anchorfile>classKoulesProjection.html</anchorfile>
      <anchor>a8c71cb166fc3e5f2e4231e3e6d61e01e</anchor>
      <arglist>(const ompl::base::State *state, Eigen::Ref&lt; Eigen::VectorXd &gt; projection) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KoulesSimulator</name>
    <filename>classKoulesSimulator.html</filename>
  </compound>
  <compound kind="class">
    <name>KoulesStatePropagator</name>
    <filename>classKoulesStatePropagator.html</filename>
    <base>ompl::control::StatePropagator</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>propagate</name>
      <anchorfile>classKoulesStatePropagator.html</anchorfile>
      <anchor>aa426afe4b93169bc17f17b0d72766437</anchor>
      <arglist>(const ompl::base::State *start, const ompl::control::Control *control, const double duration, ompl::base::State *result) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NearestNeighbors&lt; Configuration * &gt;</name>
    <filename>classompl_1_1NearestNeighbors.html</filename>
    <member kind="typedef">
      <type>std::function&lt; double(const Configuration * &amp;, const Configuration * &amp;)&gt;</type>
      <name>DistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ab4474df83bbe6b2635de9bcea6da93a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>abb8cd1ac5b87a0a01b27aecab2094d8f</anchor>
      <arglist>(const DistanceFunction &amp;distFun)</arglist>
    </member>
    <member kind="function">
      <type>const DistanceFunction &amp;</type>
      <name>getDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac6f8e15588dbd628417afbd6cd7d9593</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>reportsSortedResults</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aadc6ca87a9ec140b7c488dabda079618</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aac3adbd29fa8719b399896bdb79bab3f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>acdec6e843eb3e2f039df9b5b24ce0ad7</anchor>
      <arglist>(const Configuration * &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aae3c2592a0ef5c64f3bde107c144d70a</anchor>
      <arglist>(const std::vector&lt; Configuration * &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af4fcf7cc39c33a4e25e2f7e00b0220c0</anchor>
      <arglist>(const Configuration * &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Configuration *</type>
      <name>nearest</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af36aec28328e97ba999c51be4f8987c9</anchor>
      <arglist>(const Configuration * &amp;data) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ae3d54c8565ec5ff4f97c31b3d60d5091</anchor>
      <arglist>(const Configuration * &amp;data, std::size_t k, std::vector&lt; Configuration * &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a473fbd3b00e2eb4aa6b56c767e702e9c</anchor>
      <arglist>(const Configuration * &amp;data, double radius, std::vector&lt; Configuration * &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ad6fe9e5ebff411e8d56ef2201e25dcb3</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>list</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac2d3971a579f748aba6ad2b10f118562</anchor>
      <arglist>(std::vector&lt; Configuration * &gt; &amp;data) const=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DistanceFunction</type>
      <name>distFun_</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a6f15f3b591fb69b91ca35e504723b54f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NearestNeighbors&lt; DenseVertex &gt;</name>
    <filename>classompl_1_1NearestNeighbors.html</filename>
    <member kind="typedef">
      <type>std::function&lt; double(const DenseVertex &amp;, const DenseVertex &amp;)&gt;</type>
      <name>DistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ab4474df83bbe6b2635de9bcea6da93a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>abb8cd1ac5b87a0a01b27aecab2094d8f</anchor>
      <arglist>(const DistanceFunction &amp;distFun)</arglist>
    </member>
    <member kind="function">
      <type>const DistanceFunction &amp;</type>
      <name>getDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac6f8e15588dbd628417afbd6cd7d9593</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>reportsSortedResults</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aadc6ca87a9ec140b7c488dabda079618</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aac3adbd29fa8719b399896bdb79bab3f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>acdec6e843eb3e2f039df9b5b24ce0ad7</anchor>
      <arglist>(const DenseVertex &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aae3c2592a0ef5c64f3bde107c144d70a</anchor>
      <arglist>(const std::vector&lt; DenseVertex &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af4fcf7cc39c33a4e25e2f7e00b0220c0</anchor>
      <arglist>(const DenseVertex &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DenseVertex</type>
      <name>nearest</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af36aec28328e97ba999c51be4f8987c9</anchor>
      <arglist>(const DenseVertex &amp;data) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ae3d54c8565ec5ff4f97c31b3d60d5091</anchor>
      <arglist>(const DenseVertex &amp;data, std::size_t k, std::vector&lt; DenseVertex &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a473fbd3b00e2eb4aa6b56c767e702e9c</anchor>
      <arglist>(const DenseVertex &amp;data, double radius, std::vector&lt; DenseVertex &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ad6fe9e5ebff411e8d56ef2201e25dcb3</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>list</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac2d3971a579f748aba6ad2b10f118562</anchor>
      <arglist>(std::vector&lt; DenseVertex &gt; &amp;data) const=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DistanceFunction</type>
      <name>distFun_</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a6f15f3b591fb69b91ca35e504723b54f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NearestNeighbors&lt; Milestone &gt;</name>
    <filename>classompl_1_1NearestNeighbors.html</filename>
    <member kind="typedef">
      <type>std::function&lt; double(const Milestone &amp;, const Milestone &amp;)&gt;</type>
      <name>DistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ab4474df83bbe6b2635de9bcea6da93a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>abb8cd1ac5b87a0a01b27aecab2094d8f</anchor>
      <arglist>(const DistanceFunction &amp;distFun)</arglist>
    </member>
    <member kind="function">
      <type>const DistanceFunction &amp;</type>
      <name>getDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac6f8e15588dbd628417afbd6cd7d9593</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>reportsSortedResults</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aadc6ca87a9ec140b7c488dabda079618</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aac3adbd29fa8719b399896bdb79bab3f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>acdec6e843eb3e2f039df9b5b24ce0ad7</anchor>
      <arglist>(const Milestone &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aae3c2592a0ef5c64f3bde107c144d70a</anchor>
      <arglist>(const std::vector&lt; Milestone &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af4fcf7cc39c33a4e25e2f7e00b0220c0</anchor>
      <arglist>(const Milestone &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Milestone</type>
      <name>nearest</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af36aec28328e97ba999c51be4f8987c9</anchor>
      <arglist>(const Milestone &amp;data) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ae3d54c8565ec5ff4f97c31b3d60d5091</anchor>
      <arglist>(const Milestone &amp;data, std::size_t k, std::vector&lt; Milestone &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a473fbd3b00e2eb4aa6b56c767e702e9c</anchor>
      <arglist>(const Milestone &amp;data, double radius, std::vector&lt; Milestone &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ad6fe9e5ebff411e8d56ef2201e25dcb3</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>list</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac2d3971a579f748aba6ad2b10f118562</anchor>
      <arglist>(std::vector&lt; Milestone &gt; &amp;data) const=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DistanceFunction</type>
      <name>distFun_</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a6f15f3b591fb69b91ca35e504723b54f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NearestNeighbors&lt; Motion * &gt;</name>
    <filename>classompl_1_1NearestNeighbors.html</filename>
    <member kind="typedef">
      <type>std::function&lt; double(const Motion * &amp;, const Motion * &amp;)&gt;</type>
      <name>DistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ab4474df83bbe6b2635de9bcea6da93a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>abb8cd1ac5b87a0a01b27aecab2094d8f</anchor>
      <arglist>(const DistanceFunction &amp;distFun)</arglist>
    </member>
    <member kind="function">
      <type>const DistanceFunction &amp;</type>
      <name>getDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac6f8e15588dbd628417afbd6cd7d9593</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>reportsSortedResults</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aadc6ca87a9ec140b7c488dabda079618</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aac3adbd29fa8719b399896bdb79bab3f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>acdec6e843eb3e2f039df9b5b24ce0ad7</anchor>
      <arglist>(const Motion * &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aae3c2592a0ef5c64f3bde107c144d70a</anchor>
      <arglist>(const std::vector&lt; Motion * &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af4fcf7cc39c33a4e25e2f7e00b0220c0</anchor>
      <arglist>(const Motion * &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Motion *</type>
      <name>nearest</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af36aec28328e97ba999c51be4f8987c9</anchor>
      <arglist>(const Motion * &amp;data) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ae3d54c8565ec5ff4f97c31b3d60d5091</anchor>
      <arglist>(const Motion * &amp;data, std::size_t k, std::vector&lt; Motion * &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a473fbd3b00e2eb4aa6b56c767e702e9c</anchor>
      <arglist>(const Motion * &amp;data, double radius, std::vector&lt; Motion * &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ad6fe9e5ebff411e8d56ef2201e25dcb3</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>list</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac2d3971a579f748aba6ad2b10f118562</anchor>
      <arglist>(std::vector&lt; Motion * &gt; &amp;data) const=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DistanceFunction</type>
      <name>distFun_</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a6f15f3b591fb69b91ca35e504723b54f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NearestNeighbors&lt; NNElement &gt;</name>
    <filename>classompl_1_1NearestNeighbors.html</filename>
    <member kind="typedef">
      <type>std::function&lt; double(const NNElement &amp;, const NNElement &amp;)&gt;</type>
      <name>DistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ab4474df83bbe6b2635de9bcea6da93a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>abb8cd1ac5b87a0a01b27aecab2094d8f</anchor>
      <arglist>(const DistanceFunction &amp;distFun)</arglist>
    </member>
    <member kind="function">
      <type>const DistanceFunction &amp;</type>
      <name>getDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac6f8e15588dbd628417afbd6cd7d9593</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>reportsSortedResults</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aadc6ca87a9ec140b7c488dabda079618</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aac3adbd29fa8719b399896bdb79bab3f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>acdec6e843eb3e2f039df9b5b24ce0ad7</anchor>
      <arglist>(const NNElement &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aae3c2592a0ef5c64f3bde107c144d70a</anchor>
      <arglist>(const std::vector&lt; NNElement &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af4fcf7cc39c33a4e25e2f7e00b0220c0</anchor>
      <arglist>(const NNElement &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual NNElement</type>
      <name>nearest</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af36aec28328e97ba999c51be4f8987c9</anchor>
      <arglist>(const NNElement &amp;data) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ae3d54c8565ec5ff4f97c31b3d60d5091</anchor>
      <arglist>(const NNElement &amp;data, std::size_t k, std::vector&lt; NNElement &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a473fbd3b00e2eb4aa6b56c767e702e9c</anchor>
      <arglist>(const NNElement &amp;data, double radius, std::vector&lt; NNElement &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ad6fe9e5ebff411e8d56ef2201e25dcb3</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>list</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac2d3971a579f748aba6ad2b10f118562</anchor>
      <arglist>(std::vector&lt; NNElement &gt; &amp;data) const=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DistanceFunction</type>
      <name>distFun_</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a6f15f3b591fb69b91ca35e504723b54f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NearestNeighbors&lt; ompl::base::PlannerDataPtr &gt;</name>
    <filename>classompl_1_1NearestNeighbors.html</filename>
    <member kind="typedef">
      <type>std::function&lt; double(const ompl::base::PlannerDataPtr &amp;, const ompl::base::PlannerDataPtr &amp;)&gt;</type>
      <name>DistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ab4474df83bbe6b2635de9bcea6da93a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>abb8cd1ac5b87a0a01b27aecab2094d8f</anchor>
      <arglist>(const DistanceFunction &amp;distFun)</arglist>
    </member>
    <member kind="function">
      <type>const DistanceFunction &amp;</type>
      <name>getDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac6f8e15588dbd628417afbd6cd7d9593</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>reportsSortedResults</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aadc6ca87a9ec140b7c488dabda079618</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aac3adbd29fa8719b399896bdb79bab3f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>acdec6e843eb3e2f039df9b5b24ce0ad7</anchor>
      <arglist>(const ompl::base::PlannerDataPtr &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aae3c2592a0ef5c64f3bde107c144d70a</anchor>
      <arglist>(const std::vector&lt; ompl::base::PlannerDataPtr &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af4fcf7cc39c33a4e25e2f7e00b0220c0</anchor>
      <arglist>(const ompl::base::PlannerDataPtr &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ompl::base::PlannerDataPtr</type>
      <name>nearest</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af36aec28328e97ba999c51be4f8987c9</anchor>
      <arglist>(const ompl::base::PlannerDataPtr &amp;data) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ae3d54c8565ec5ff4f97c31b3d60d5091</anchor>
      <arglist>(const ompl::base::PlannerDataPtr &amp;data, std::size_t k, std::vector&lt; ompl::base::PlannerDataPtr &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a473fbd3b00e2eb4aa6b56c767e702e9c</anchor>
      <arglist>(const ompl::base::PlannerDataPtr &amp;data, double radius, std::vector&lt; ompl::base::PlannerDataPtr &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ad6fe9e5ebff411e8d56ef2201e25dcb3</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>list</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac2d3971a579f748aba6ad2b10f118562</anchor>
      <arglist>(std::vector&lt; ompl::base::PlannerDataPtr &gt; &amp;data) const=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DistanceFunction</type>
      <name>distFun_</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a6f15f3b591fb69b91ca35e504723b54f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NearestNeighbors&lt; ompl::control::RRT::Motion * &gt;</name>
    <filename>classompl_1_1NearestNeighbors.html</filename>
    <member kind="typedef">
      <type>std::function&lt; double(const ompl::control::RRT::Motion * &amp;, const ompl::control::RRT::Motion * &amp;)&gt;</type>
      <name>DistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ab4474df83bbe6b2635de9bcea6da93a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>abb8cd1ac5b87a0a01b27aecab2094d8f</anchor>
      <arglist>(const DistanceFunction &amp;distFun)</arglist>
    </member>
    <member kind="function">
      <type>const DistanceFunction &amp;</type>
      <name>getDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac6f8e15588dbd628417afbd6cd7d9593</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>reportsSortedResults</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aadc6ca87a9ec140b7c488dabda079618</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aac3adbd29fa8719b399896bdb79bab3f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>acdec6e843eb3e2f039df9b5b24ce0ad7</anchor>
      <arglist>(const ompl::control::RRT::Motion * &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aae3c2592a0ef5c64f3bde107c144d70a</anchor>
      <arglist>(const std::vector&lt; ompl::control::RRT::Motion * &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af4fcf7cc39c33a4e25e2f7e00b0220c0</anchor>
      <arglist>(const ompl::control::RRT::Motion * &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ompl::control::RRT::Motion *</type>
      <name>nearest</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af36aec28328e97ba999c51be4f8987c9</anchor>
      <arglist>(const ompl::control::RRT::Motion * &amp;data) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ae3d54c8565ec5ff4f97c31b3d60d5091</anchor>
      <arglist>(const ompl::control::RRT::Motion * &amp;data, std::size_t k, std::vector&lt; ompl::control::RRT::Motion * &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a473fbd3b00e2eb4aa6b56c767e702e9c</anchor>
      <arglist>(const ompl::control::RRT::Motion * &amp;data, double radius, std::vector&lt; ompl::control::RRT::Motion * &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ad6fe9e5ebff411e8d56ef2201e25dcb3</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>list</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac2d3971a579f748aba6ad2b10f118562</anchor>
      <arglist>(std::vector&lt; ompl::control::RRT::Motion * &gt; &amp;data) const=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DistanceFunction</type>
      <name>distFun_</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a6f15f3b591fb69b91ca35e504723b54f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NearestNeighbors&lt; ompl::control::SST::Motion * &gt;</name>
    <filename>classompl_1_1NearestNeighbors.html</filename>
    <member kind="typedef">
      <type>std::function&lt; double(const ompl::control::SST::Motion * &amp;, const ompl::control::SST::Motion * &amp;)&gt;</type>
      <name>DistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ab4474df83bbe6b2635de9bcea6da93a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>abb8cd1ac5b87a0a01b27aecab2094d8f</anchor>
      <arglist>(const DistanceFunction &amp;distFun)</arglist>
    </member>
    <member kind="function">
      <type>const DistanceFunction &amp;</type>
      <name>getDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac6f8e15588dbd628417afbd6cd7d9593</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>reportsSortedResults</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aadc6ca87a9ec140b7c488dabda079618</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aac3adbd29fa8719b399896bdb79bab3f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>acdec6e843eb3e2f039df9b5b24ce0ad7</anchor>
      <arglist>(const ompl::control::SST::Motion * &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aae3c2592a0ef5c64f3bde107c144d70a</anchor>
      <arglist>(const std::vector&lt; ompl::control::SST::Motion * &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af4fcf7cc39c33a4e25e2f7e00b0220c0</anchor>
      <arglist>(const ompl::control::SST::Motion * &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ompl::control::SST::Motion *</type>
      <name>nearest</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af36aec28328e97ba999c51be4f8987c9</anchor>
      <arglist>(const ompl::control::SST::Motion * &amp;data) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ae3d54c8565ec5ff4f97c31b3d60d5091</anchor>
      <arglist>(const ompl::control::SST::Motion * &amp;data, std::size_t k, std::vector&lt; ompl::control::SST::Motion * &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a473fbd3b00e2eb4aa6b56c767e702e9c</anchor>
      <arglist>(const ompl::control::SST::Motion * &amp;data, double radius, std::vector&lt; ompl::control::SST::Motion * &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ad6fe9e5ebff411e8d56ef2201e25dcb3</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>list</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac2d3971a579f748aba6ad2b10f118562</anchor>
      <arglist>(std::vector&lt; ompl::control::SST::Motion * &gt; &amp;data) const=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DistanceFunction</type>
      <name>distFun_</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a6f15f3b591fb69b91ca35e504723b54f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NearestNeighbors&lt; ompl::geometric::BFMT::BiDirMotion * &gt;</name>
    <filename>classompl_1_1NearestNeighbors.html</filename>
    <member kind="typedef">
      <type>std::function&lt; double(const ompl::geometric::BFMT::BiDirMotion * &amp;, const ompl::geometric::BFMT::BiDirMotion * &amp;)&gt;</type>
      <name>DistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ab4474df83bbe6b2635de9bcea6da93a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>abb8cd1ac5b87a0a01b27aecab2094d8f</anchor>
      <arglist>(const DistanceFunction &amp;distFun)</arglist>
    </member>
    <member kind="function">
      <type>const DistanceFunction &amp;</type>
      <name>getDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac6f8e15588dbd628417afbd6cd7d9593</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>reportsSortedResults</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aadc6ca87a9ec140b7c488dabda079618</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aac3adbd29fa8719b399896bdb79bab3f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>acdec6e843eb3e2f039df9b5b24ce0ad7</anchor>
      <arglist>(const ompl::geometric::BFMT::BiDirMotion * &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aae3c2592a0ef5c64f3bde107c144d70a</anchor>
      <arglist>(const std::vector&lt; ompl::geometric::BFMT::BiDirMotion * &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af4fcf7cc39c33a4e25e2f7e00b0220c0</anchor>
      <arglist>(const ompl::geometric::BFMT::BiDirMotion * &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ompl::geometric::BFMT::BiDirMotion *</type>
      <name>nearest</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af36aec28328e97ba999c51be4f8987c9</anchor>
      <arglist>(const ompl::geometric::BFMT::BiDirMotion * &amp;data) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ae3d54c8565ec5ff4f97c31b3d60d5091</anchor>
      <arglist>(const ompl::geometric::BFMT::BiDirMotion * &amp;data, std::size_t k, std::vector&lt; ompl::geometric::BFMT::BiDirMotion * &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a473fbd3b00e2eb4aa6b56c767e702e9c</anchor>
      <arglist>(const ompl::geometric::BFMT::BiDirMotion * &amp;data, double radius, std::vector&lt; ompl::geometric::BFMT::BiDirMotion * &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ad6fe9e5ebff411e8d56ef2201e25dcb3</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>list</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac2d3971a579f748aba6ad2b10f118562</anchor>
      <arglist>(std::vector&lt; ompl::geometric::BFMT::BiDirMotion * &gt; &amp;data) const=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DistanceFunction</type>
      <name>distFun_</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a6f15f3b591fb69b91ca35e504723b54f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NearestNeighbors&lt; ompl::geometric::BiEST::Motion * &gt;</name>
    <filename>classompl_1_1NearestNeighbors.html</filename>
    <member kind="typedef">
      <type>std::function&lt; double(const ompl::geometric::BiEST::Motion * &amp;, const ompl::geometric::BiEST::Motion * &amp;)&gt;</type>
      <name>DistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ab4474df83bbe6b2635de9bcea6da93a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>abb8cd1ac5b87a0a01b27aecab2094d8f</anchor>
      <arglist>(const DistanceFunction &amp;distFun)</arglist>
    </member>
    <member kind="function">
      <type>const DistanceFunction &amp;</type>
      <name>getDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac6f8e15588dbd628417afbd6cd7d9593</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>reportsSortedResults</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aadc6ca87a9ec140b7c488dabda079618</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aac3adbd29fa8719b399896bdb79bab3f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>acdec6e843eb3e2f039df9b5b24ce0ad7</anchor>
      <arglist>(const ompl::geometric::BiEST::Motion * &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aae3c2592a0ef5c64f3bde107c144d70a</anchor>
      <arglist>(const std::vector&lt; ompl::geometric::BiEST::Motion * &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af4fcf7cc39c33a4e25e2f7e00b0220c0</anchor>
      <arglist>(const ompl::geometric::BiEST::Motion * &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ompl::geometric::BiEST::Motion *</type>
      <name>nearest</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af36aec28328e97ba999c51be4f8987c9</anchor>
      <arglist>(const ompl::geometric::BiEST::Motion * &amp;data) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ae3d54c8565ec5ff4f97c31b3d60d5091</anchor>
      <arglist>(const ompl::geometric::BiEST::Motion * &amp;data, std::size_t k, std::vector&lt; ompl::geometric::BiEST::Motion * &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a473fbd3b00e2eb4aa6b56c767e702e9c</anchor>
      <arglist>(const ompl::geometric::BiEST::Motion * &amp;data, double radius, std::vector&lt; ompl::geometric::BiEST::Motion * &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ad6fe9e5ebff411e8d56ef2201e25dcb3</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>list</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac2d3971a579f748aba6ad2b10f118562</anchor>
      <arglist>(std::vector&lt; ompl::geometric::BiEST::Motion * &gt; &amp;data) const=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DistanceFunction</type>
      <name>distFun_</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a6f15f3b591fb69b91ca35e504723b54f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NearestNeighbors&lt; ompl::geometric::EST::Motion * &gt;</name>
    <filename>classompl_1_1NearestNeighbors.html</filename>
    <member kind="typedef">
      <type>std::function&lt; double(const ompl::geometric::EST::Motion * &amp;, const ompl::geometric::EST::Motion * &amp;)&gt;</type>
      <name>DistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ab4474df83bbe6b2635de9bcea6da93a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>abb8cd1ac5b87a0a01b27aecab2094d8f</anchor>
      <arglist>(const DistanceFunction &amp;distFun)</arglist>
    </member>
    <member kind="function">
      <type>const DistanceFunction &amp;</type>
      <name>getDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac6f8e15588dbd628417afbd6cd7d9593</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>reportsSortedResults</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aadc6ca87a9ec140b7c488dabda079618</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aac3adbd29fa8719b399896bdb79bab3f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>acdec6e843eb3e2f039df9b5b24ce0ad7</anchor>
      <arglist>(const ompl::geometric::EST::Motion * &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aae3c2592a0ef5c64f3bde107c144d70a</anchor>
      <arglist>(const std::vector&lt; ompl::geometric::EST::Motion * &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af4fcf7cc39c33a4e25e2f7e00b0220c0</anchor>
      <arglist>(const ompl::geometric::EST::Motion * &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ompl::geometric::EST::Motion *</type>
      <name>nearest</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af36aec28328e97ba999c51be4f8987c9</anchor>
      <arglist>(const ompl::geometric::EST::Motion * &amp;data) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ae3d54c8565ec5ff4f97c31b3d60d5091</anchor>
      <arglist>(const ompl::geometric::EST::Motion * &amp;data, std::size_t k, std::vector&lt; ompl::geometric::EST::Motion * &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a473fbd3b00e2eb4aa6b56c767e702e9c</anchor>
      <arglist>(const ompl::geometric::EST::Motion * &amp;data, double radius, std::vector&lt; ompl::geometric::EST::Motion * &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ad6fe9e5ebff411e8d56ef2201e25dcb3</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>list</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac2d3971a579f748aba6ad2b10f118562</anchor>
      <arglist>(std::vector&lt; ompl::geometric::EST::Motion * &gt; &amp;data) const=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DistanceFunction</type>
      <name>distFun_</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a6f15f3b591fb69b91ca35e504723b54f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NearestNeighbors&lt; ompl::geometric::FMT::Motion * &gt;</name>
    <filename>classompl_1_1NearestNeighbors.html</filename>
    <member kind="typedef">
      <type>std::function&lt; double(const ompl::geometric::FMT::Motion * &amp;, const ompl::geometric::FMT::Motion * &amp;)&gt;</type>
      <name>DistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ab4474df83bbe6b2635de9bcea6da93a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>abb8cd1ac5b87a0a01b27aecab2094d8f</anchor>
      <arglist>(const DistanceFunction &amp;distFun)</arglist>
    </member>
    <member kind="function">
      <type>const DistanceFunction &amp;</type>
      <name>getDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac6f8e15588dbd628417afbd6cd7d9593</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>reportsSortedResults</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aadc6ca87a9ec140b7c488dabda079618</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aac3adbd29fa8719b399896bdb79bab3f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>acdec6e843eb3e2f039df9b5b24ce0ad7</anchor>
      <arglist>(const ompl::geometric::FMT::Motion * &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aae3c2592a0ef5c64f3bde107c144d70a</anchor>
      <arglist>(const std::vector&lt; ompl::geometric::FMT::Motion * &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af4fcf7cc39c33a4e25e2f7e00b0220c0</anchor>
      <arglist>(const ompl::geometric::FMT::Motion * &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ompl::geometric::FMT::Motion *</type>
      <name>nearest</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af36aec28328e97ba999c51be4f8987c9</anchor>
      <arglist>(const ompl::geometric::FMT::Motion * &amp;data) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ae3d54c8565ec5ff4f97c31b3d60d5091</anchor>
      <arglist>(const ompl::geometric::FMT::Motion * &amp;data, std::size_t k, std::vector&lt; ompl::geometric::FMT::Motion * &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a473fbd3b00e2eb4aa6b56c767e702e9c</anchor>
      <arglist>(const ompl::geometric::FMT::Motion * &amp;data, double radius, std::vector&lt; ompl::geometric::FMT::Motion * &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ad6fe9e5ebff411e8d56ef2201e25dcb3</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>list</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac2d3971a579f748aba6ad2b10f118562</anchor>
      <arglist>(std::vector&lt; ompl::geometric::FMT::Motion * &gt; &amp;data) const=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DistanceFunction</type>
      <name>distFun_</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a6f15f3b591fb69b91ca35e504723b54f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NearestNeighbors&lt; ompl::geometric::LazyLBTRRT::Motion * &gt;</name>
    <filename>classompl_1_1NearestNeighbors.html</filename>
    <member kind="typedef">
      <type>std::function&lt; double(const ompl::geometric::LazyLBTRRT::Motion * &amp;, const ompl::geometric::LazyLBTRRT::Motion * &amp;)&gt;</type>
      <name>DistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ab4474df83bbe6b2635de9bcea6da93a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>abb8cd1ac5b87a0a01b27aecab2094d8f</anchor>
      <arglist>(const DistanceFunction &amp;distFun)</arglist>
    </member>
    <member kind="function">
      <type>const DistanceFunction &amp;</type>
      <name>getDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac6f8e15588dbd628417afbd6cd7d9593</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>reportsSortedResults</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aadc6ca87a9ec140b7c488dabda079618</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aac3adbd29fa8719b399896bdb79bab3f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>acdec6e843eb3e2f039df9b5b24ce0ad7</anchor>
      <arglist>(const ompl::geometric::LazyLBTRRT::Motion * &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aae3c2592a0ef5c64f3bde107c144d70a</anchor>
      <arglist>(const std::vector&lt; ompl::geometric::LazyLBTRRT::Motion * &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af4fcf7cc39c33a4e25e2f7e00b0220c0</anchor>
      <arglist>(const ompl::geometric::LazyLBTRRT::Motion * &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ompl::geometric::LazyLBTRRT::Motion *</type>
      <name>nearest</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af36aec28328e97ba999c51be4f8987c9</anchor>
      <arglist>(const ompl::geometric::LazyLBTRRT::Motion * &amp;data) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ae3d54c8565ec5ff4f97c31b3d60d5091</anchor>
      <arglist>(const ompl::geometric::LazyLBTRRT::Motion * &amp;data, std::size_t k, std::vector&lt; ompl::geometric::LazyLBTRRT::Motion * &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a473fbd3b00e2eb4aa6b56c767e702e9c</anchor>
      <arglist>(const ompl::geometric::LazyLBTRRT::Motion * &amp;data, double radius, std::vector&lt; ompl::geometric::LazyLBTRRT::Motion * &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ad6fe9e5ebff411e8d56ef2201e25dcb3</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>list</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac2d3971a579f748aba6ad2b10f118562</anchor>
      <arglist>(std::vector&lt; ompl::geometric::LazyLBTRRT::Motion * &gt; &amp;data) const=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DistanceFunction</type>
      <name>distFun_</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a6f15f3b591fb69b91ca35e504723b54f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NearestNeighbors&lt; ompl::geometric::LazyRRT::Motion * &gt;</name>
    <filename>classompl_1_1NearestNeighbors.html</filename>
    <member kind="typedef">
      <type>std::function&lt; double(const ompl::geometric::LazyRRT::Motion * &amp;, const ompl::geometric::LazyRRT::Motion * &amp;)&gt;</type>
      <name>DistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ab4474df83bbe6b2635de9bcea6da93a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>abb8cd1ac5b87a0a01b27aecab2094d8f</anchor>
      <arglist>(const DistanceFunction &amp;distFun)</arglist>
    </member>
    <member kind="function">
      <type>const DistanceFunction &amp;</type>
      <name>getDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac6f8e15588dbd628417afbd6cd7d9593</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>reportsSortedResults</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aadc6ca87a9ec140b7c488dabda079618</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aac3adbd29fa8719b399896bdb79bab3f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>acdec6e843eb3e2f039df9b5b24ce0ad7</anchor>
      <arglist>(const ompl::geometric::LazyRRT::Motion * &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aae3c2592a0ef5c64f3bde107c144d70a</anchor>
      <arglist>(const std::vector&lt; ompl::geometric::LazyRRT::Motion * &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af4fcf7cc39c33a4e25e2f7e00b0220c0</anchor>
      <arglist>(const ompl::geometric::LazyRRT::Motion * &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ompl::geometric::LazyRRT::Motion *</type>
      <name>nearest</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af36aec28328e97ba999c51be4f8987c9</anchor>
      <arglist>(const ompl::geometric::LazyRRT::Motion * &amp;data) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ae3d54c8565ec5ff4f97c31b3d60d5091</anchor>
      <arglist>(const ompl::geometric::LazyRRT::Motion * &amp;data, std::size_t k, std::vector&lt; ompl::geometric::LazyRRT::Motion * &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a473fbd3b00e2eb4aa6b56c767e702e9c</anchor>
      <arglist>(const ompl::geometric::LazyRRT::Motion * &amp;data, double radius, std::vector&lt; ompl::geometric::LazyRRT::Motion * &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ad6fe9e5ebff411e8d56ef2201e25dcb3</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>list</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac2d3971a579f748aba6ad2b10f118562</anchor>
      <arglist>(std::vector&lt; ompl::geometric::LazyRRT::Motion * &gt; &amp;data) const=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DistanceFunction</type>
      <name>distFun_</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a6f15f3b591fb69b91ca35e504723b54f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NearestNeighbors&lt; ompl::geometric::LBTRRT::Motion * &gt;</name>
    <filename>classompl_1_1NearestNeighbors.html</filename>
    <member kind="typedef">
      <type>std::function&lt; double(const ompl::geometric::LBTRRT::Motion * &amp;, const ompl::geometric::LBTRRT::Motion * &amp;)&gt;</type>
      <name>DistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ab4474df83bbe6b2635de9bcea6da93a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>abb8cd1ac5b87a0a01b27aecab2094d8f</anchor>
      <arglist>(const DistanceFunction &amp;distFun)</arglist>
    </member>
    <member kind="function">
      <type>const DistanceFunction &amp;</type>
      <name>getDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac6f8e15588dbd628417afbd6cd7d9593</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>reportsSortedResults</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aadc6ca87a9ec140b7c488dabda079618</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aac3adbd29fa8719b399896bdb79bab3f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>acdec6e843eb3e2f039df9b5b24ce0ad7</anchor>
      <arglist>(const ompl::geometric::LBTRRT::Motion * &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aae3c2592a0ef5c64f3bde107c144d70a</anchor>
      <arglist>(const std::vector&lt; ompl::geometric::LBTRRT::Motion * &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af4fcf7cc39c33a4e25e2f7e00b0220c0</anchor>
      <arglist>(const ompl::geometric::LBTRRT::Motion * &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ompl::geometric::LBTRRT::Motion *</type>
      <name>nearest</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af36aec28328e97ba999c51be4f8987c9</anchor>
      <arglist>(const ompl::geometric::LBTRRT::Motion * &amp;data) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ae3d54c8565ec5ff4f97c31b3d60d5091</anchor>
      <arglist>(const ompl::geometric::LBTRRT::Motion * &amp;data, std::size_t k, std::vector&lt; ompl::geometric::LBTRRT::Motion * &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a473fbd3b00e2eb4aa6b56c767e702e9c</anchor>
      <arglist>(const ompl::geometric::LBTRRT::Motion * &amp;data, double radius, std::vector&lt; ompl::geometric::LBTRRT::Motion * &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ad6fe9e5ebff411e8d56ef2201e25dcb3</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>list</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac2d3971a579f748aba6ad2b10f118562</anchor>
      <arglist>(std::vector&lt; ompl::geometric::LBTRRT::Motion * &gt; &amp;data) const=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DistanceFunction</type>
      <name>distFun_</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a6f15f3b591fb69b91ca35e504723b54f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NearestNeighbors&lt; ompl::geometric::pRRT::Motion * &gt;</name>
    <filename>classompl_1_1NearestNeighbors.html</filename>
    <member kind="typedef">
      <type>std::function&lt; double(const ompl::geometric::pRRT::Motion * &amp;, const ompl::geometric::pRRT::Motion * &amp;)&gt;</type>
      <name>DistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ab4474df83bbe6b2635de9bcea6da93a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>abb8cd1ac5b87a0a01b27aecab2094d8f</anchor>
      <arglist>(const DistanceFunction &amp;distFun)</arglist>
    </member>
    <member kind="function">
      <type>const DistanceFunction &amp;</type>
      <name>getDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac6f8e15588dbd628417afbd6cd7d9593</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>reportsSortedResults</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aadc6ca87a9ec140b7c488dabda079618</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aac3adbd29fa8719b399896bdb79bab3f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>acdec6e843eb3e2f039df9b5b24ce0ad7</anchor>
      <arglist>(const ompl::geometric::pRRT::Motion * &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aae3c2592a0ef5c64f3bde107c144d70a</anchor>
      <arglist>(const std::vector&lt; ompl::geometric::pRRT::Motion * &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af4fcf7cc39c33a4e25e2f7e00b0220c0</anchor>
      <arglist>(const ompl::geometric::pRRT::Motion * &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ompl::geometric::pRRT::Motion *</type>
      <name>nearest</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af36aec28328e97ba999c51be4f8987c9</anchor>
      <arglist>(const ompl::geometric::pRRT::Motion * &amp;data) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ae3d54c8565ec5ff4f97c31b3d60d5091</anchor>
      <arglist>(const ompl::geometric::pRRT::Motion * &amp;data, std::size_t k, std::vector&lt; ompl::geometric::pRRT::Motion * &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a473fbd3b00e2eb4aa6b56c767e702e9c</anchor>
      <arglist>(const ompl::geometric::pRRT::Motion * &amp;data, double radius, std::vector&lt; ompl::geometric::pRRT::Motion * &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ad6fe9e5ebff411e8d56ef2201e25dcb3</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>list</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac2d3971a579f748aba6ad2b10f118562</anchor>
      <arglist>(std::vector&lt; ompl::geometric::pRRT::Motion * &gt; &amp;data) const=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DistanceFunction</type>
      <name>distFun_</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a6f15f3b591fb69b91ca35e504723b54f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NearestNeighbors&lt; ompl::geometric::RRT::Motion * &gt;</name>
    <filename>classompl_1_1NearestNeighbors.html</filename>
    <member kind="typedef">
      <type>std::function&lt; double(const ompl::geometric::RRT::Motion * &amp;, const ompl::geometric::RRT::Motion * &amp;)&gt;</type>
      <name>DistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ab4474df83bbe6b2635de9bcea6da93a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>abb8cd1ac5b87a0a01b27aecab2094d8f</anchor>
      <arglist>(const DistanceFunction &amp;distFun)</arglist>
    </member>
    <member kind="function">
      <type>const DistanceFunction &amp;</type>
      <name>getDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac6f8e15588dbd628417afbd6cd7d9593</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>reportsSortedResults</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aadc6ca87a9ec140b7c488dabda079618</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aac3adbd29fa8719b399896bdb79bab3f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>acdec6e843eb3e2f039df9b5b24ce0ad7</anchor>
      <arglist>(const ompl::geometric::RRT::Motion * &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aae3c2592a0ef5c64f3bde107c144d70a</anchor>
      <arglist>(const std::vector&lt; ompl::geometric::RRT::Motion * &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af4fcf7cc39c33a4e25e2f7e00b0220c0</anchor>
      <arglist>(const ompl::geometric::RRT::Motion * &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ompl::geometric::RRT::Motion *</type>
      <name>nearest</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af36aec28328e97ba999c51be4f8987c9</anchor>
      <arglist>(const ompl::geometric::RRT::Motion * &amp;data) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ae3d54c8565ec5ff4f97c31b3d60d5091</anchor>
      <arglist>(const ompl::geometric::RRT::Motion * &amp;data, std::size_t k, std::vector&lt; ompl::geometric::RRT::Motion * &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a473fbd3b00e2eb4aa6b56c767e702e9c</anchor>
      <arglist>(const ompl::geometric::RRT::Motion * &amp;data, double radius, std::vector&lt; ompl::geometric::RRT::Motion * &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ad6fe9e5ebff411e8d56ef2201e25dcb3</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>list</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac2d3971a579f748aba6ad2b10f118562</anchor>
      <arglist>(std::vector&lt; ompl::geometric::RRT::Motion * &gt; &amp;data) const=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DistanceFunction</type>
      <name>distFun_</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a6f15f3b591fb69b91ca35e504723b54f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NearestNeighbors&lt; ompl::geometric::RRTstar::Motion * &gt;</name>
    <filename>classompl_1_1NearestNeighbors.html</filename>
    <member kind="typedef">
      <type>std::function&lt; double(const ompl::geometric::RRTstar::Motion * &amp;, const ompl::geometric::RRTstar::Motion * &amp;)&gt;</type>
      <name>DistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ab4474df83bbe6b2635de9bcea6da93a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>abb8cd1ac5b87a0a01b27aecab2094d8f</anchor>
      <arglist>(const DistanceFunction &amp;distFun)</arglist>
    </member>
    <member kind="function">
      <type>const DistanceFunction &amp;</type>
      <name>getDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac6f8e15588dbd628417afbd6cd7d9593</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>reportsSortedResults</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aadc6ca87a9ec140b7c488dabda079618</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aac3adbd29fa8719b399896bdb79bab3f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>acdec6e843eb3e2f039df9b5b24ce0ad7</anchor>
      <arglist>(const ompl::geometric::RRTstar::Motion * &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aae3c2592a0ef5c64f3bde107c144d70a</anchor>
      <arglist>(const std::vector&lt; ompl::geometric::RRTstar::Motion * &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af4fcf7cc39c33a4e25e2f7e00b0220c0</anchor>
      <arglist>(const ompl::geometric::RRTstar::Motion * &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ompl::geometric::RRTstar::Motion *</type>
      <name>nearest</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af36aec28328e97ba999c51be4f8987c9</anchor>
      <arglist>(const ompl::geometric::RRTstar::Motion * &amp;data) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ae3d54c8565ec5ff4f97c31b3d60d5091</anchor>
      <arglist>(const ompl::geometric::RRTstar::Motion * &amp;data, std::size_t k, std::vector&lt; ompl::geometric::RRTstar::Motion * &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a473fbd3b00e2eb4aa6b56c767e702e9c</anchor>
      <arglist>(const ompl::geometric::RRTstar::Motion * &amp;data, double radius, std::vector&lt; ompl::geometric::RRTstar::Motion * &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ad6fe9e5ebff411e8d56ef2201e25dcb3</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>list</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac2d3971a579f748aba6ad2b10f118562</anchor>
      <arglist>(std::vector&lt; ompl::geometric::RRTstar::Motion * &gt; &amp;data) const=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DistanceFunction</type>
      <name>distFun_</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a6f15f3b591fb69b91ca35e504723b54f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NearestNeighbors&lt; ompl::geometric::RRTXstatic::Motion * &gt;</name>
    <filename>classompl_1_1NearestNeighbors.html</filename>
    <member kind="typedef">
      <type>std::function&lt; double(const ompl::geometric::RRTXstatic::Motion * &amp;, const ompl::geometric::RRTXstatic::Motion * &amp;)&gt;</type>
      <name>DistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ab4474df83bbe6b2635de9bcea6da93a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>abb8cd1ac5b87a0a01b27aecab2094d8f</anchor>
      <arglist>(const DistanceFunction &amp;distFun)</arglist>
    </member>
    <member kind="function">
      <type>const DistanceFunction &amp;</type>
      <name>getDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac6f8e15588dbd628417afbd6cd7d9593</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>reportsSortedResults</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aadc6ca87a9ec140b7c488dabda079618</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aac3adbd29fa8719b399896bdb79bab3f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>acdec6e843eb3e2f039df9b5b24ce0ad7</anchor>
      <arglist>(const ompl::geometric::RRTXstatic::Motion * &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aae3c2592a0ef5c64f3bde107c144d70a</anchor>
      <arglist>(const std::vector&lt; ompl::geometric::RRTXstatic::Motion * &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af4fcf7cc39c33a4e25e2f7e00b0220c0</anchor>
      <arglist>(const ompl::geometric::RRTXstatic::Motion * &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ompl::geometric::RRTXstatic::Motion *</type>
      <name>nearest</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af36aec28328e97ba999c51be4f8987c9</anchor>
      <arglist>(const ompl::geometric::RRTXstatic::Motion * &amp;data) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ae3d54c8565ec5ff4f97c31b3d60d5091</anchor>
      <arglist>(const ompl::geometric::RRTXstatic::Motion * &amp;data, std::size_t k, std::vector&lt; ompl::geometric::RRTXstatic::Motion * &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a473fbd3b00e2eb4aa6b56c767e702e9c</anchor>
      <arglist>(const ompl::geometric::RRTXstatic::Motion * &amp;data, double radius, std::vector&lt; ompl::geometric::RRTXstatic::Motion * &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ad6fe9e5ebff411e8d56ef2201e25dcb3</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>list</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac2d3971a579f748aba6ad2b10f118562</anchor>
      <arglist>(std::vector&lt; ompl::geometric::RRTXstatic::Motion * &gt; &amp;data) const=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DistanceFunction</type>
      <name>distFun_</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a6f15f3b591fb69b91ca35e504723b54f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NearestNeighbors&lt; ompl::geometric::SST::Motion * &gt;</name>
    <filename>classompl_1_1NearestNeighbors.html</filename>
    <member kind="typedef">
      <type>std::function&lt; double(const ompl::geometric::SST::Motion * &amp;, const ompl::geometric::SST::Motion * &amp;)&gt;</type>
      <name>DistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ab4474df83bbe6b2635de9bcea6da93a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>abb8cd1ac5b87a0a01b27aecab2094d8f</anchor>
      <arglist>(const DistanceFunction &amp;distFun)</arglist>
    </member>
    <member kind="function">
      <type>const DistanceFunction &amp;</type>
      <name>getDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac6f8e15588dbd628417afbd6cd7d9593</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>reportsSortedResults</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aadc6ca87a9ec140b7c488dabda079618</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aac3adbd29fa8719b399896bdb79bab3f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>acdec6e843eb3e2f039df9b5b24ce0ad7</anchor>
      <arglist>(const ompl::geometric::SST::Motion * &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aae3c2592a0ef5c64f3bde107c144d70a</anchor>
      <arglist>(const std::vector&lt; ompl::geometric::SST::Motion * &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af4fcf7cc39c33a4e25e2f7e00b0220c0</anchor>
      <arglist>(const ompl::geometric::SST::Motion * &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ompl::geometric::SST::Motion *</type>
      <name>nearest</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af36aec28328e97ba999c51be4f8987c9</anchor>
      <arglist>(const ompl::geometric::SST::Motion * &amp;data) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ae3d54c8565ec5ff4f97c31b3d60d5091</anchor>
      <arglist>(const ompl::geometric::SST::Motion * &amp;data, std::size_t k, std::vector&lt; ompl::geometric::SST::Motion * &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a473fbd3b00e2eb4aa6b56c767e702e9c</anchor>
      <arglist>(const ompl::geometric::SST::Motion * &amp;data, double radius, std::vector&lt; ompl::geometric::SST::Motion * &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ad6fe9e5ebff411e8d56ef2201e25dcb3</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>list</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac2d3971a579f748aba6ad2b10f118562</anchor>
      <arglist>(std::vector&lt; ompl::geometric::SST::Motion * &gt; &amp;data) const=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DistanceFunction</type>
      <name>distFun_</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a6f15f3b591fb69b91ca35e504723b54f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NearestNeighbors&lt; ompl::geometric::TRRT::Motion * &gt;</name>
    <filename>classompl_1_1NearestNeighbors.html</filename>
    <member kind="typedef">
      <type>std::function&lt; double(const ompl::geometric::TRRT::Motion * &amp;, const ompl::geometric::TRRT::Motion * &amp;)&gt;</type>
      <name>DistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ab4474df83bbe6b2635de9bcea6da93a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>abb8cd1ac5b87a0a01b27aecab2094d8f</anchor>
      <arglist>(const DistanceFunction &amp;distFun)</arglist>
    </member>
    <member kind="function">
      <type>const DistanceFunction &amp;</type>
      <name>getDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac6f8e15588dbd628417afbd6cd7d9593</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>reportsSortedResults</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aadc6ca87a9ec140b7c488dabda079618</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aac3adbd29fa8719b399896bdb79bab3f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>acdec6e843eb3e2f039df9b5b24ce0ad7</anchor>
      <arglist>(const ompl::geometric::TRRT::Motion * &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aae3c2592a0ef5c64f3bde107c144d70a</anchor>
      <arglist>(const std::vector&lt; ompl::geometric::TRRT::Motion * &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af4fcf7cc39c33a4e25e2f7e00b0220c0</anchor>
      <arglist>(const ompl::geometric::TRRT::Motion * &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ompl::geometric::TRRT::Motion *</type>
      <name>nearest</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af36aec28328e97ba999c51be4f8987c9</anchor>
      <arglist>(const ompl::geometric::TRRT::Motion * &amp;data) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ae3d54c8565ec5ff4f97c31b3d60d5091</anchor>
      <arglist>(const ompl::geometric::TRRT::Motion * &amp;data, std::size_t k, std::vector&lt; ompl::geometric::TRRT::Motion * &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a473fbd3b00e2eb4aa6b56c767e702e9c</anchor>
      <arglist>(const ompl::geometric::TRRT::Motion * &amp;data, double radius, std::vector&lt; ompl::geometric::TRRT::Motion * &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ad6fe9e5ebff411e8d56ef2201e25dcb3</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>list</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac2d3971a579f748aba6ad2b10f118562</anchor>
      <arglist>(std::vector&lt; ompl::geometric::TRRT::Motion * &gt; &amp;data) const=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DistanceFunction</type>
      <name>distFun_</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a6f15f3b591fb69b91ca35e504723b54f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NearestNeighbors&lt; ompl::geometric::TSRRT::Motion * &gt;</name>
    <filename>classompl_1_1NearestNeighbors.html</filename>
    <member kind="typedef">
      <type>std::function&lt; double(const ompl::geometric::TSRRT::Motion * &amp;, const ompl::geometric::TSRRT::Motion * &amp;)&gt;</type>
      <name>DistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ab4474df83bbe6b2635de9bcea6da93a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>abb8cd1ac5b87a0a01b27aecab2094d8f</anchor>
      <arglist>(const DistanceFunction &amp;distFun)</arglist>
    </member>
    <member kind="function">
      <type>const DistanceFunction &amp;</type>
      <name>getDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac6f8e15588dbd628417afbd6cd7d9593</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>reportsSortedResults</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aadc6ca87a9ec140b7c488dabda079618</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aac3adbd29fa8719b399896bdb79bab3f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>acdec6e843eb3e2f039df9b5b24ce0ad7</anchor>
      <arglist>(const ompl::geometric::TSRRT::Motion * &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aae3c2592a0ef5c64f3bde107c144d70a</anchor>
      <arglist>(const std::vector&lt; ompl::geometric::TSRRT::Motion * &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af4fcf7cc39c33a4e25e2f7e00b0220c0</anchor>
      <arglist>(const ompl::geometric::TSRRT::Motion * &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ompl::geometric::TSRRT::Motion *</type>
      <name>nearest</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af36aec28328e97ba999c51be4f8987c9</anchor>
      <arglist>(const ompl::geometric::TSRRT::Motion * &amp;data) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ae3d54c8565ec5ff4f97c31b3d60d5091</anchor>
      <arglist>(const ompl::geometric::TSRRT::Motion * &amp;data, std::size_t k, std::vector&lt; ompl::geometric::TSRRT::Motion * &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a473fbd3b00e2eb4aa6b56c767e702e9c</anchor>
      <arglist>(const ompl::geometric::TSRRT::Motion * &amp;data, double radius, std::vector&lt; ompl::geometric::TSRRT::Motion * &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ad6fe9e5ebff411e8d56ef2201e25dcb3</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>list</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac2d3971a579f748aba6ad2b10f118562</anchor>
      <arglist>(std::vector&lt; ompl::geometric::TSRRT::Motion * &gt; &amp;data) const=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DistanceFunction</type>
      <name>distFun_</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a6f15f3b591fb69b91ca35e504723b54f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NearestNeighbors&lt; SparseVertex &gt;</name>
    <filename>classompl_1_1NearestNeighbors.html</filename>
    <member kind="typedef">
      <type>std::function&lt; double(const SparseVertex &amp;, const SparseVertex &amp;)&gt;</type>
      <name>DistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ab4474df83bbe6b2635de9bcea6da93a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>abb8cd1ac5b87a0a01b27aecab2094d8f</anchor>
      <arglist>(const DistanceFunction &amp;distFun)</arglist>
    </member>
    <member kind="function">
      <type>const DistanceFunction &amp;</type>
      <name>getDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac6f8e15588dbd628417afbd6cd7d9593</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>reportsSortedResults</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aadc6ca87a9ec140b7c488dabda079618</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aac3adbd29fa8719b399896bdb79bab3f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>acdec6e843eb3e2f039df9b5b24ce0ad7</anchor>
      <arglist>(const SparseVertex &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aae3c2592a0ef5c64f3bde107c144d70a</anchor>
      <arglist>(const std::vector&lt; SparseVertex &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af4fcf7cc39c33a4e25e2f7e00b0220c0</anchor>
      <arglist>(const SparseVertex &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SparseVertex</type>
      <name>nearest</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af36aec28328e97ba999c51be4f8987c9</anchor>
      <arglist>(const SparseVertex &amp;data) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ae3d54c8565ec5ff4f97c31b3d60d5091</anchor>
      <arglist>(const SparseVertex &amp;data, std::size_t k, std::vector&lt; SparseVertex &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a473fbd3b00e2eb4aa6b56c767e702e9c</anchor>
      <arglist>(const SparseVertex &amp;data, double radius, std::vector&lt; SparseVertex &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ad6fe9e5ebff411e8d56ef2201e25dcb3</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>list</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac2d3971a579f748aba6ad2b10f118562</anchor>
      <arglist>(std::vector&lt; SparseVertex &gt; &amp;data) const=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DistanceFunction</type>
      <name>distFun_</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a6f15f3b591fb69b91ca35e504723b54f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NearestNeighbors&lt; std::shared_ptr&lt; ompl::geometric::aitstar::Vertex &gt; &gt;</name>
    <filename>classompl_1_1NearestNeighbors.html</filename>
    <member kind="typedef">
      <type>std::function&lt; double(const std::shared_ptr&lt; ompl::geometric::aitstar::Vertex &gt; &amp;, const std::shared_ptr&lt; ompl::geometric::aitstar::Vertex &gt; &amp;)&gt;</type>
      <name>DistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ab4474df83bbe6b2635de9bcea6da93a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>abb8cd1ac5b87a0a01b27aecab2094d8f</anchor>
      <arglist>(const DistanceFunction &amp;distFun)</arglist>
    </member>
    <member kind="function">
      <type>const DistanceFunction &amp;</type>
      <name>getDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac6f8e15588dbd628417afbd6cd7d9593</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>reportsSortedResults</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aadc6ca87a9ec140b7c488dabda079618</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aac3adbd29fa8719b399896bdb79bab3f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>acdec6e843eb3e2f039df9b5b24ce0ad7</anchor>
      <arglist>(const std::shared_ptr&lt; ompl::geometric::aitstar::Vertex &gt; &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aae3c2592a0ef5c64f3bde107c144d70a</anchor>
      <arglist>(const std::vector&lt; std::shared_ptr&lt; ompl::geometric::aitstar::Vertex &gt; &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af4fcf7cc39c33a4e25e2f7e00b0220c0</anchor>
      <arglist>(const std::shared_ptr&lt; ompl::geometric::aitstar::Vertex &gt; &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::shared_ptr&lt; ompl::geometric::aitstar::Vertex &gt;</type>
      <name>nearest</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af36aec28328e97ba999c51be4f8987c9</anchor>
      <arglist>(const std::shared_ptr&lt; ompl::geometric::aitstar::Vertex &gt; &amp;data) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ae3d54c8565ec5ff4f97c31b3d60d5091</anchor>
      <arglist>(const std::shared_ptr&lt; ompl::geometric::aitstar::Vertex &gt; &amp;data, std::size_t k, std::vector&lt; std::shared_ptr&lt; ompl::geometric::aitstar::Vertex &gt; &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a473fbd3b00e2eb4aa6b56c767e702e9c</anchor>
      <arglist>(const std::shared_ptr&lt; ompl::geometric::aitstar::Vertex &gt; &amp;data, double radius, std::vector&lt; std::shared_ptr&lt; ompl::geometric::aitstar::Vertex &gt; &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ad6fe9e5ebff411e8d56ef2201e25dcb3</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>list</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac2d3971a579f748aba6ad2b10f118562</anchor>
      <arglist>(std::vector&lt; std::shared_ptr&lt; ompl::geometric::aitstar::Vertex &gt; &gt; &amp;data) const=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DistanceFunction</type>
      <name>distFun_</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a6f15f3b591fb69b91ca35e504723b54f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NearestNeighbors&lt; Vertex &gt;</name>
    <filename>classompl_1_1NearestNeighbors.html</filename>
    <member kind="typedef">
      <type>std::function&lt; double(const Vertex &amp;, const Vertex &amp;)&gt;</type>
      <name>DistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ab4474df83bbe6b2635de9bcea6da93a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>abb8cd1ac5b87a0a01b27aecab2094d8f</anchor>
      <arglist>(const DistanceFunction &amp;distFun)</arglist>
    </member>
    <member kind="function">
      <type>const DistanceFunction &amp;</type>
      <name>getDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac6f8e15588dbd628417afbd6cd7d9593</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>reportsSortedResults</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aadc6ca87a9ec140b7c488dabda079618</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aac3adbd29fa8719b399896bdb79bab3f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>acdec6e843eb3e2f039df9b5b24ce0ad7</anchor>
      <arglist>(const Vertex &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aae3c2592a0ef5c64f3bde107c144d70a</anchor>
      <arglist>(const std::vector&lt; Vertex &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af4fcf7cc39c33a4e25e2f7e00b0220c0</anchor>
      <arglist>(const Vertex &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vertex</type>
      <name>nearest</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af36aec28328e97ba999c51be4f8987c9</anchor>
      <arglist>(const Vertex &amp;data) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ae3d54c8565ec5ff4f97c31b3d60d5091</anchor>
      <arglist>(const Vertex &amp;data, std::size_t k, std::vector&lt; Vertex &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a473fbd3b00e2eb4aa6b56c767e702e9c</anchor>
      <arglist>(const Vertex &amp;data, double radius, std::vector&lt; Vertex &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ad6fe9e5ebff411e8d56ef2201e25dcb3</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>list</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac2d3971a579f748aba6ad2b10f118562</anchor>
      <arglist>(std::vector&lt; Vertex &gt; &amp;data) const=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DistanceFunction</type>
      <name>distFun_</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a6f15f3b591fb69b91ca35e504723b54f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NearestNeighbors&lt; VertexPtr &gt;</name>
    <filename>classompl_1_1NearestNeighbors.html</filename>
    <member kind="typedef">
      <type>std::function&lt; double(const VertexPtr &amp;, const VertexPtr &amp;)&gt;</type>
      <name>DistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ab4474df83bbe6b2635de9bcea6da93a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>abb8cd1ac5b87a0a01b27aecab2094d8f</anchor>
      <arglist>(const DistanceFunction &amp;distFun)</arglist>
    </member>
    <member kind="function">
      <type>const DistanceFunction &amp;</type>
      <name>getDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac6f8e15588dbd628417afbd6cd7d9593</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>reportsSortedResults</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aadc6ca87a9ec140b7c488dabda079618</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aac3adbd29fa8719b399896bdb79bab3f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>acdec6e843eb3e2f039df9b5b24ce0ad7</anchor>
      <arglist>(const VertexPtr &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aae3c2592a0ef5c64f3bde107c144d70a</anchor>
      <arglist>(const std::vector&lt; VertexPtr &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af4fcf7cc39c33a4e25e2f7e00b0220c0</anchor>
      <arglist>(const VertexPtr &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual VertexPtr</type>
      <name>nearest</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af36aec28328e97ba999c51be4f8987c9</anchor>
      <arglist>(const VertexPtr &amp;data) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ae3d54c8565ec5ff4f97c31b3d60d5091</anchor>
      <arglist>(const VertexPtr &amp;data, std::size_t k, std::vector&lt; VertexPtr &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a473fbd3b00e2eb4aa6b56c767e702e9c</anchor>
      <arglist>(const VertexPtr &amp;data, double radius, std::vector&lt; VertexPtr &gt; &amp;nbh) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ad6fe9e5ebff411e8d56ef2201e25dcb3</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>list</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac2d3971a579f748aba6ad2b10f118562</anchor>
      <arglist>(std::vector&lt; VertexPtr &gt; &amp;data) const=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DistanceFunction</type>
      <name>distFun_</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a6f15f3b591fb69b91ca35e504723b54f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NearestNeighborsFLANN&lt; _T, FLANNDistance&lt; _T &gt; &gt;</name>
    <filename>classompl_1_1NearestNeighborsFLANN.html</filename>
    <base>ompl::NearestNeighbors</base>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>af9f7859744172a05482b8cf77e393ee3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reportsSortedResults</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a28d01f441d81c3aa8d5558f9dd1a4a87</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a5114b0e5289f64c57bf84ae11b23f3f6</anchor>
      <arglist>(const _T &amp;data) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>ad3eb7b33f12fd8f1718f7f7487a9807f</anchor>
      <arglist>(const std::vector&lt; _T &gt; &amp;data) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a937df19373fa1e7c19392dd24eda2cb8</anchor>
      <arglist>(const _T &amp;data) override</arglist>
    </member>
    <member kind="function">
      <type>_T</type>
      <name>nearest</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a88da3c76feedbee4ba4319f410fa20f0</anchor>
      <arglist>(const _T &amp;data) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>adcb05422c6525a618d3fb0af6f32f561</anchor>
      <arglist>(const _T &amp;data, std::size_t k, std::vector&lt; _T &gt; &amp;nbh) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a117e1c9eec4da73c3383598e6276face</anchor>
      <arglist>(const _T &amp;data, double radius, std::vector&lt; _T &gt; &amp;nbh) const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>acf8b91442e6604d4d6e5c05d5b8d8fa4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>list</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a63d9d30bb06275575a29210bb2a607f6</anchor>
      <arglist>(std::vector&lt; _T &gt; &amp;data) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIndexParams</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a8744517fb9f49287501de1e29dce0151</anchor>
      <arglist>(const std::shared_ptr&lt; flann::IndexParams &gt; &amp;params)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::shared_ptr&lt; flann::IndexParams &gt; &amp;</type>
      <name>getIndexParams</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a3b45a436ea320688e9ea193dce3e52b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSearchParams</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a61713a0d38ec52ee242d3f6b21caaf79</anchor>
      <arglist>(const flann::SearchParams &amp;searchParams)</arglist>
    </member>
    <member kind="function">
      <type>flann::SearchParams &amp;</type>
      <name>getSearchParams</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a550e09c5d54d1f157da5385900aef93e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const flann::SearchParams &amp;</type>
      <name>getSearchParams</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a786a02bdcb1b41aedb761e975f067c0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createIndex</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>aad212794536e6ecfddff9b281fde1e00</anchor>
      <arglist>(const flann::Matrix&lt; _T &gt; &amp;mat)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>rebuildIndex</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a7b935f8afe093da0397144ca500f0afc</anchor>
      <arglist>(unsigned int capacity=0)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; _T &gt;</type>
      <name>data_</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a5cff9cb3adfe57413fa7dbf17ed32c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>flann::Index&lt; FLANNDistance&lt; _T &gt; &gt; *</type>
      <name>index_</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>ab3a4cee81352c5baa2526b0579bf0206</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; flann::IndexParams &gt;</type>
      <name>params_</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a125e83d30f061dbd1f45f6f495de6e44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>flann::SearchParams</type>
      <name>searchParams_</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>ab15a612bcea206654d9ff23b36a719bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>dimension_</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a64354375954f00fce065c2520ee8bba3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NearestNeighborsGNAT&lt; NNElement &gt;</name>
    <filename>classompl_1_1NearestNeighborsGNAT.html</filename>
    <base>NearestNeighbors&lt; NNElement &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>setDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>abf9fd332568e46b173caa069cb3d7b65</anchor>
      <arglist>(const typename NearestNeighbors&lt; NNElement &gt;::DistanceFunction &amp;distFun) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a2ae0a5855cb97c01f8def5013d351296</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reportsSortedResults</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a28597987114d643f33afaf1f94aeafcc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>ac2ab166f10167e07b55a3fe5c88195bc</anchor>
      <arglist>(const NNElement &amp;data) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a42fb426d77c7f1cc6a89d6f6e06a67da</anchor>
      <arglist>(const std::vector&lt; NNElement &gt; &amp;data) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rebuildDataStructure</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a5a5d1ed1969d8a94096af37c2212953c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a48879f4f40c84792378ccc4823041bbc</anchor>
      <arglist>(const NNElement &amp;data) override</arglist>
    </member>
    <member kind="function">
      <type>NNElement</type>
      <name>nearest</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a252bb6d2aa3ff3edf540d0b041d4e892</anchor>
      <arglist>(const NNElement &amp;data) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>af59c70ac7e6fa37e2e555fad4915b9a9</anchor>
      <arglist>(const NNElement &amp;data, std::size_t k, std::vector&lt; NNElement &gt; &amp;nbh) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a9e10038b16f17ae175d2cee8e43308d6</anchor>
      <arglist>(const NNElement &amp;data, double radius, std::vector&lt; NNElement &gt; &amp;nbh) const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>aca63a6fbdbe2d1938084f01d7847da5d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>list</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a83fdc5ea599a2025a2f8e10d92e7175e</anchor>
      <arglist>(std::vector&lt; NNElement &gt; &amp;data) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isRemoved</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a6bb84334105d10e972f3687ac00a3793</anchor>
      <arglist>(const NNElement &amp;data) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>nearestKInternal</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a6d09afe7aa8b588270ab61f64d3026c6</anchor>
      <arglist>(const NNElement &amp;data, std::size_t k, NearQueue &amp;nbhQueue) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>nearestRInternal</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>adbd6149cb209843d3870193e0d71654b</anchor>
      <arglist>(const NNElement &amp;data, double radius, NearQueue &amp;nbhQueue) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>postprocessNearest</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a03bc066eb387dda356059d0690095c00</anchor>
      <arglist>(NearQueue &amp;nbhQueue, std::vector&lt; NNElement &gt; &amp;nbh) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Node *</type>
      <name>tree_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>af71f11d8395bb7ab208df7cf03351aaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>degree_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a9d705ed546c919cd52c428255a0c1a9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>minDegree_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a0843613b6418efbb2b417c37789246c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxDegree_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a925bada72c7c7e7826acdc1581a0a920</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxNumPtsPerLeaf_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a41c47b9f460e190bfadc2dc6f07cae3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>size_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a40bd930123e198450f10736efe73a970</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>rebuildSize_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a2da7487ea1149c183ec8560280855a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>removedCacheSize_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a79547bf4b75f57dcf2d736c11f612b1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GreedyKCenters&lt; NNElement &gt;</type>
      <name>pivotSelector_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a36b2e4bad87ded77f629a48425156bdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_set&lt; const NNElement * &gt;</type>
      <name>removed_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>accc6371f2e2fdb66b70b3b7a4cdb3a87</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a1e1b937c81eb1d184ffa588589bcc07f</anchor>
      <arglist>(std::ostream &amp;out, const NearestNeighborsGNAT&lt; NNElement &gt; &amp;gnat)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NearestNeighborsGNATNoThreadSafety&lt; std::shared_ptr&lt; ompl::geometric::aitstar::Vertex &gt; &gt;</name>
    <filename>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</filename>
    <base>NearestNeighbors&lt; std::shared_ptr&lt; ompl::geometric::aitstar::Vertex &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>setDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>af003eba0a7b1c82fec1c7fd0799474c9</anchor>
      <arglist>(const typename NearestNeighbors&lt; std::shared_ptr&lt; ompl::geometric::aitstar::Vertex &gt; &gt;::DistanceFunction &amp;distFun) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>af58a8ae3d74f561f0d1152a8dc259bb6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reportsSortedResults</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a05226daa78ba92f95ded39d45e524c51</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>ac83e682c6768608c17f91d9bfcc72730</anchor>
      <arglist>(const std::shared_ptr&lt; ompl::geometric::aitstar::Vertex &gt; &amp;data) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>aaf3551a2d81473e658adb1697b448fd6</anchor>
      <arglist>(const std::vector&lt; std::shared_ptr&lt; ompl::geometric::aitstar::Vertex &gt; &gt; &amp;data) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rebuildDataStructure</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>af3717a4ddc0fff565b500ce7a438d034</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a8842ec1f8dd7b335636a46d5b17322d5</anchor>
      <arglist>(const std::shared_ptr&lt; ompl::geometric::aitstar::Vertex &gt; &amp;data) override</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; ompl::geometric::aitstar::Vertex &gt;</type>
      <name>nearest</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a8672bdf83e3093b0164fe52003e4dda5</anchor>
      <arglist>(const std::shared_ptr&lt; ompl::geometric::aitstar::Vertex &gt; &amp;data) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>ac5e0af9bdd87ba19266265f321eb0c61</anchor>
      <arglist>(const std::shared_ptr&lt; ompl::geometric::aitstar::Vertex &gt; &amp;data, std::size_t k, std::vector&lt; std::shared_ptr&lt; ompl::geometric::aitstar::Vertex &gt; &gt; &amp;nbh) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a40e2410b79ba7328cb9548591ba23667</anchor>
      <arglist>(const std::shared_ptr&lt; ompl::geometric::aitstar::Vertex &gt; &amp;data, double radius, std::vector&lt; std::shared_ptr&lt; ompl::geometric::aitstar::Vertex &gt; &gt; &amp;nbh) const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>aa3a2710689996f0aadfaf6a7e576e8d3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>list</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>af189efcf926a1df467dc7493cb5b5e42</anchor>
      <arglist>(std::vector&lt; std::shared_ptr&lt; ompl::geometric::aitstar::Vertex &gt; &gt; &amp;data) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isRemoved</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>ac71112f32361dc0cb855b2a1a5e7b517</anchor>
      <arglist>(const std::shared_ptr&lt; ompl::geometric::aitstar::Vertex &gt; &amp;data) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>nearestKInternal</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a7a15354a7143c3f8f61aa71a03ea9060</anchor>
      <arglist>(const std::shared_ptr&lt; ompl::geometric::aitstar::Vertex &gt; &amp;data, std::size_t k) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>nearestRInternal</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a5a1d6edfdde32daa9e5c847f6981e12a</anchor>
      <arglist>(const std::shared_ptr&lt; ompl::geometric::aitstar::Vertex &gt; &amp;data, double radius) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>postprocessNearest</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a29b9d2c3dc13387158b2ca97260324b1</anchor>
      <arglist>(std::vector&lt; std::shared_ptr&lt; ompl::geometric::aitstar::Vertex &gt; &gt; &amp;nbh) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Node *</type>
      <name>tree_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a2b49cb68c80321a951ff19756cf5191e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>degree_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a8959464f3e38151e2292e4c1858f58c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>minDegree_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a4ba5298198ef2188b9e3f956462193c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxDegree_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a4d1d3a2402968ff67980675bf78380e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxNumPtsPerLeaf_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a77fb35650377c5917f1383a3fdc618eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>size_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>aa458a54056dcfae4d9700220c0c31591</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>rebuildSize_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a6a9f147a6e698731e37315f647c1e19c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>removedCacheSize_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a8ef42c25ab1f81812a2ec9abee28a76a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GreedyKCenters&lt; std::shared_ptr&lt; ompl::geometric::aitstar::Vertex &gt; &gt;</type>
      <name>pivotSelector_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>aad11fc2ef17a9015c19a28ec24f3b703</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_set&lt; const std::shared_ptr&lt; ompl::geometric::aitstar::Vertex &gt; * &gt;</type>
      <name>removed_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a67ba40aba48e6357bad78d022e0d7914</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeQueue</type>
      <name>nodeQueue_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a7ab94ab52946fe49dab384c7e14d0a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Permutation</type>
      <name>permutation_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>acf47844443e2f2d5a8ab3b0d5f4392d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>pivots_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a2d085f6316b3a5c7f378d19b7765d006</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GreedyKCenters&lt; std::shared_ptr&lt; ompl::geometric::aitstar::Vertex &gt; &gt;::Matrix</type>
      <name>distances_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a925191fb1c63bcdfad0915dde2724036</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>aefae7627603eaea6da67d53ed3fc3ac6</anchor>
      <arglist>(std::ostream &amp;out, const NearestNeighborsGNATNoThreadSafety&lt; std::shared_ptr&lt; ompl::geometric::aitstar::Vertex &gt; &gt; &amp;gnat)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeQueue</type>
      <name>nodeQueue_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a7ab94ab52946fe49dab384c7e14d0a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Permutation</type>
      <name>permutation_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>acf47844443e2f2d5a8ab3b0d5f4392d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>pivots_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a2d085f6316b3a5c7f378d19b7765d006</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GreedyKCenters&lt; std::shared_ptr&lt; ompl::geometric::aitstar::Vertex &gt; &gt;::Matrix</type>
      <name>distances_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a925191fb1c63bcdfad0915dde2724036</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::AdjacencyList</name>
    <filename>classompl_1_1AdjacencyList.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::base::AllValidStateValidityChecker</name>
    <filename>classompl_1_1base_1_1AllValidStateValidityChecker.html</filename>
    <base>ompl::base::StateValidityChecker</base>
    <member kind="function">
      <type></type>
      <name>AllValidStateValidityChecker</name>
      <anchorfile>classompl_1_1base_1_1AllValidStateValidityChecker.html</anchorfile>
      <anchor>add44d7428ce612f9f3ef979aad817bd1</anchor>
      <arglist>(SpaceInformation *si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AllValidStateValidityChecker</name>
      <anchorfile>classompl_1_1base_1_1AllValidStateValidityChecker.html</anchorfile>
      <anchor>a8d0114667d9a1915cd5992763f5aedfb</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classompl_1_1base_1_1AllValidStateValidityChecker.html</anchorfile>
      <anchor>a9aeeb31169eacd18c4cf2348a66f4d32</anchor>
      <arglist>(const State *) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::AtlasChart</name>
    <filename>classompl_1_1base_1_1AtlasChart.html</filename>
    <member kind="function">
      <type></type>
      <name>AtlasChart</name>
      <anchorfile>classompl_1_1base_1_1AtlasChart.html</anchorfile>
      <anchor>a5a6ce37aa4aad64612026ee371a3bc04</anchor>
      <arglist>(const AtlasStateSpace *atlas, const AtlasStateSpace::StateType *state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AtlasChart</name>
      <anchorfile>classompl_1_1base_1_1AtlasChart.html</anchorfile>
      <anchor>a788555d0c062181c6a3b104bd8c4d585</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1base_1_1AtlasChart.html</anchorfile>
      <anchor>a1c95639fbf7570db68cd26c17780b3ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const AtlasStateSpace::StateType *</type>
      <name>getOrigin</name>
      <anchorfile>classompl_1_1base_1_1AtlasChart.html</anchorfile>
      <anchor>a26315247f05ea09d897fd32c267006b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getAmbientDimension</name>
      <anchorfile>classompl_1_1base_1_1AtlasChart.html</anchorfile>
      <anchor>a360ea5537ebd63327fabd9eabf33998e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getManifoldDimension</name>
      <anchorfile>classompl_1_1base_1_1AtlasChart.html</anchorfile>
      <anchor>a718fa00e632dc9fb272c974c1fafaac7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>phi</name>
      <anchorfile>classompl_1_1base_1_1AtlasChart.html</anchorfile>
      <anchor>af3a07a6b5b871980e26c0bfda1b4ceb1</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;u, Eigen::Ref&lt; Eigen::VectorXd &gt; out) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>psi</name>
      <anchorfile>classompl_1_1base_1_1AtlasChart.html</anchorfile>
      <anchor>a593871dafb4eded9ba4152375636f6b1</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;u, Eigen::Ref&lt; Eigen::VectorXd &gt; out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>psiInverse</name>
      <anchorfile>classompl_1_1base_1_1AtlasChart.html</anchorfile>
      <anchor>ad85f550b77dadee97c78cf4fdf90b03f</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;x, Eigen::Ref&lt; Eigen::VectorXd &gt; out) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inPolytope</name>
      <anchorfile>classompl_1_1base_1_1AtlasChart.html</anchorfile>
      <anchor>a05629a40e81a141f70084c186d0e8b1e</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;u, const Halfspace *ignore1=nullptr, const Halfspace *ignore2=nullptr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>borderCheck</name>
      <anchorfile>classompl_1_1base_1_1AtlasChart.html</anchorfile>
      <anchor>a87c309b951f651df5b9f999c289a6d46</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>const AtlasChart *</type>
      <name>owningNeighbor</name>
      <anchorfile>classompl_1_1base_1_1AtlasChart.html</anchorfile>
      <anchor>af8b404d3158c034b027be68d5f9ba903</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>toPolygon</name>
      <anchorfile>classompl_1_1base_1_1AtlasChart.html</anchorfile>
      <anchor>a95f3c07160e1628ccf0dee0cc33179dd</anchor>
      <arglist>(std::vector&lt; Eigen::VectorXd &gt; &amp;vertices) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNeighborCount</name>
      <anchorfile>classompl_1_1base_1_1AtlasChart.html</anchorfile>
      <anchor>ac6089735240c86623dcd42b3cdad973e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>estimateIsFrontier</name>
      <anchorfile>classompl_1_1base_1_1AtlasChart.html</anchorfile>
      <anchor>a1363834e31fd5c979046ace59608630f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>generateHalfspace</name>
      <anchorfile>classompl_1_1base_1_1AtlasChart.html</anchorfile>
      <anchor>ac7362faa11728b8b8777ec89bfea64a3</anchor>
      <arglist>(AtlasChart *c1, AtlasChart *c2)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addBoundary</name>
      <anchorfile>classompl_1_1base_1_1AtlasChart.html</anchorfile>
      <anchor>a1b8ec45dee3a4db7ca6b6f41e31e341a</anchor>
      <arglist>(Halfspace *halfspace)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Constraint *</type>
      <name>constraint_</name>
      <anchorfile>classompl_1_1base_1_1AtlasChart.html</anchorfile>
      <anchor>aa47b5b21a44f6df48a3fc582a71c8e0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Halfspace * &gt;</type>
      <name>polytope_</name>
      <anchorfile>classompl_1_1base_1_1AtlasChart.html</anchorfile>
      <anchor>a092fb3f7591e4ddb2048d60fb20159c9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::AtlasStateSampler</name>
    <filename>classompl_1_1base_1_1AtlasStateSampler.html</filename>
    <base>ompl::base::StateSampler</base>
    <member kind="function">
      <type></type>
      <name>AtlasStateSampler</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSampler.html</anchorfile>
      <anchor>ad8a0fc7824b684b300bdb28dcea6de0d</anchor>
      <arglist>(const AtlasStateSpace *space)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSampler.html</anchorfile>
      <anchor>acf6b11271ba004cd728c5914999af2c3</anchor>
      <arglist>(State *state) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleUniformNear</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSampler.html</anchorfile>
      <anchor>af5aa235ae4f292ee1c7a4905066cff17</anchor>
      <arglist>(State *state, const State *near, double distance) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleGaussian</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSampler.html</anchorfile>
      <anchor>ad1eb7ed1443bbabf3cc1797c2602a2a8</anchor>
      <arglist>(State *state, const State *mean, double stdDev) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::AtlasStateSpace</name>
    <filename>classompl_1_1base_1_1AtlasStateSpace.html</filename>
    <base>ompl::base::ConstrainedStateSpace</base>
    <class kind="class">ompl::base::AtlasStateSpace::StateType</class>
    <member kind="function">
      <type></type>
      <name>AtlasStateSpace</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>ac9680d2943d722a9249dcfe9c2d68c95</anchor>
      <arglist>(const StateSpacePtr &amp;ambientSpace, const ConstraintPtr &amp;constraint, bool separate=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AtlasStateSpace</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a1d8b2107cb33703c2113844955ff7007</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a11dc065788df57321c9699b56f3265d8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>StateSamplerPtr</type>
      <name>allocDefaultStateSampler</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>ad2298624cc5ca6f2394521fefa71c2ad</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>StateSamplerPtr</type>
      <name>allocStateSampler</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a29c6f5739a8b885b64d8ffea760dbf90</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyState</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a656b759972d7d6442ba9ebc91a0eb043</anchor>
      <arglist>(State *destination, const State *source) const override</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>allocState</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a96f753e86e24a243b97dab1b37952dba</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEpsilon</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>acd6ac1018866cc1d7d159ff2d1b55cc7</anchor>
      <arglist>(double epsilon)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRho</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a6776d7b75168ae0cfa1ddc8fa2a4fd9a</anchor>
      <arglist>(double rho)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlpha</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>acb262b58dc71ed679478066b640f462b</anchor>
      <arglist>(double alpha)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExploration</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a931df43dd9ce03ea021140b93229ccd5</anchor>
      <arglist>(double exploration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxChartsPerExtension</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>aadf582787ca0c1ac2b866080f0e32846</anchor>
      <arglist>(unsigned int charts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBiasFunction</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>aadfaa634d3461e9c4c60b90725e5d9f9</anchor>
      <arglist>(const AtlasChartBiasFunction &amp;biasFunction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSeparated</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>ac81c1a72fb83b2f1c202eb184d070a21</anchor>
      <arglist>(bool separate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackoff</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>af8736b3bd8c1862ae7371db686611b1d</anchor>
      <arglist>(double backoff)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEpsilon</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>ad8d99ac057f7a5fcc5eb055c4a59af54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRho</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a3a1d190f7a028ffe8f41bececf64f48e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAlpha</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a685415be3eaedd3e2a312569e0ed6ae1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getExploration</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a4de1e089669e343ddb796d5173c8acd3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRho_s</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a4d2cca457d09a1a8a022bb5a9bdc3d03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMaxChartsPerExtension</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>ae1f21d5d2d32646d858ca5c50191d550</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSeparated</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a0996def390019cfd7771643cdae47507</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getChartCount</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a98e19886eb324758dbe947e596760580</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBackoff</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a6a3fdde0066aaff2d5d9f5b259617988</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AtlasChart *</type>
      <name>newChart</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>acf67311c4c5c681e99fbf3b21e34bce4</anchor>
      <arglist>(const StateType *state) const</arglist>
    </member>
    <member kind="function">
      <type>AtlasChart *</type>
      <name>sampleChart</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a29d7d75c551537d5582440abf3bb36bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AtlasChart *</type>
      <name>owningChart</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a39f3a4b97f115cbfabf154e29394d104</anchor>
      <arglist>(const StateType *state) const</arglist>
    </member>
    <member kind="function">
      <type>AtlasChart *</type>
      <name>getChart</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>afb524fb0dc17a128e3662c12690e2292</anchor>
      <arglist>(const StateType *state, bool force=false, bool *created=nullptr) const</arglist>
    </member>
    <member kind="function">
      <type>AtlasChart *</type>
      <name>anchorChart</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a7b811b3a8ac551d83063f6d08e5ba5fe</anchor>
      <arglist>(const State *state) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>discreteGeodesic</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a794b909f11eaabe07509aad2cf9c29c2</anchor>
      <arglist>(const State *from, const State *to, bool interpolate=false, std::vector&lt; State * &gt; *geodesic=nullptr) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>estimateFrontierPercent</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a2e5e052e74708d7f703d9e7969935fc9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printPLY</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a6ce0a08ccb4c4b7c41eb83db20f98b65</anchor>
      <arglist>(std::ostream &amp;out) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; StateType * &gt;</type>
      <name>anchors_</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a1707a7af91a7823f0a555fae71b3c10e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; AtlasChart * &gt;</type>
      <name>charts_</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a4e2c8b252c89a942dfb7ea2fd3d62836</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PDF&lt; AtlasChart * &gt;</type>
      <name>chartPDF_</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a4561491fb48347fc1da92d5922e904cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NearestNeighborsGNAT&lt; NNElement &gt;</type>
      <name>chartNN_</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>aa3c31838cee531ba238bfc2033c78afa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AtlasChartBiasFunction</type>
      <name>biasFunction_</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>ac65baf8bfe82bca037c50d58eac26768</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>separate_</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>aec1c3bbc0443fe2f327856770b924268</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>ab775301c175d22645c5548732ccdaaa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>epsilon_</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a7e3637aef4a7b7980e753d8c8c0ba66f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>rho_</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>aef8f443a2f089e99ed7dbdc9adf51df0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>cos_alpha_</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a3726eb53cbf41d2f5bf22c4c357a82a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>exploration_</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>ac0fdddcfbeef1fc24a16468311801214</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>rho_s_</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a7fad144043cebd2fd03151620146203e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>backoff_</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>aa29f947d5b2cce8fccfcd5d22519d2ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxChartsPerExtension_</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a29464943c968c35f97761fee60121a5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEpsilon</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>acd6ac1018866cc1d7d159ff2d1b55cc7</anchor>
      <arglist>(double epsilon)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRho</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a6776d7b75168ae0cfa1ddc8fa2a4fd9a</anchor>
      <arglist>(double rho)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlpha</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>acb262b58dc71ed679478066b640f462b</anchor>
      <arglist>(double alpha)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExploration</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a931df43dd9ce03ea021140b93229ccd5</anchor>
      <arglist>(double exploration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxChartsPerExtension</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>aadf582787ca0c1ac2b866080f0e32846</anchor>
      <arglist>(unsigned int charts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBiasFunction</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>aadfaa634d3461e9c4c60b90725e5d9f9</anchor>
      <arglist>(const AtlasChartBiasFunction &amp;biasFunction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSeparated</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>ac81c1a72fb83b2f1c202eb184d070a21</anchor>
      <arglist>(bool separate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackoff</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>af8736b3bd8c1862ae7371db686611b1d</anchor>
      <arglist>(double backoff)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEpsilon</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>ad8d99ac057f7a5fcc5eb055c4a59af54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRho</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a3a1d190f7a028ffe8f41bececf64f48e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAlpha</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a685415be3eaedd3e2a312569e0ed6ae1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getExploration</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a4de1e089669e343ddb796d5173c8acd3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRho_s</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a4d2cca457d09a1a8a022bb5a9bdc3d03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMaxChartsPerExtension</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>ae1f21d5d2d32646d858ca5c50191d550</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSeparated</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a0996def390019cfd7771643cdae47507</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getChartCount</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a98e19886eb324758dbe947e596760580</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBackoff</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a6a3fdde0066aaff2d5d9f5b259617988</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AtlasChart *</type>
      <name>newChart</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>acf67311c4c5c681e99fbf3b21e34bce4</anchor>
      <arglist>(const StateType *state) const</arglist>
    </member>
    <member kind="function">
      <type>AtlasChart *</type>
      <name>sampleChart</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a29d7d75c551537d5582440abf3bb36bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AtlasChart *</type>
      <name>owningChart</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a39f3a4b97f115cbfabf154e29394d104</anchor>
      <arglist>(const StateType *state) const</arglist>
    </member>
    <member kind="function">
      <type>AtlasChart *</type>
      <name>getChart</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>afb524fb0dc17a128e3662c12690e2292</anchor>
      <arglist>(const StateType *state, bool force=false, bool *created=nullptr) const</arglist>
    </member>
    <member kind="function">
      <type>AtlasChart *</type>
      <name>anchorChart</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a7b811b3a8ac551d83063f6d08e5ba5fe</anchor>
      <arglist>(const State *state) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>discreteGeodesic</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a794b909f11eaabe07509aad2cf9c29c2</anchor>
      <arglist>(const State *from, const State *to, bool interpolate=false, std::vector&lt; State * &gt; *geodesic=nullptr) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>estimateFrontierPercent</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a2e5e052e74708d7f703d9e7969935fc9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printPLY</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a6ce0a08ccb4c4b7c41eb83db20f98b65</anchor>
      <arglist>(std::ostream &amp;out) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>epsilon_</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a7e3637aef4a7b7980e753d8c8c0ba66f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>rho_</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>aef8f443a2f089e99ed7dbdc9adf51df0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>cos_alpha_</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a3726eb53cbf41d2f5bf22c4c357a82a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>exploration_</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>ac0fdddcfbeef1fc24a16468311801214</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>rho_s_</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a7fad144043cebd2fd03151620146203e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>backoff_</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>aa29f947d5b2cce8fccfcd5d22519d2ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxChartsPerExtension_</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace.html</anchorfile>
      <anchor>a29464943c968c35f97761fee60121a5e</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1base_1_1AtlasStateSpace.html">gAtlas</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::base::AtlasStateSpace::StateType</name>
    <filename>classompl_1_1base_1_1AtlasStateSpace_1_1StateType.html</filename>
    <base>ompl::base::ConstrainedStateSpace::StateType</base>
    <member kind="function">
      <type></type>
      <name>StateType</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace_1_1StateType.html</anchorfile>
      <anchor>a9b685c29e7851a81ac7d03e32ba94bac</anchor>
      <arglist>(const ConstrainedStateSpace *space)</arglist>
    </member>
    <member kind="function">
      <type>AtlasChart *</type>
      <name>getChart</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace_1_1StateType.html</anchorfile>
      <anchor>a9ee8e5973620bb16ae278eb1e4f45b3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChart</name>
      <anchorfile>classompl_1_1base_1_1AtlasStateSpace_1_1StateType.html</anchorfile>
      <anchor>ac757ac98d6c7ffc78b86da02361f93dc</anchor>
      <arglist>(AtlasChart *c) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::BridgeTestValidStateSampler</name>
    <filename>classompl_1_1base_1_1BridgeTestValidStateSampler.html</filename>
    <base>ompl::base::ValidStateSampler</base>
    <member kind="function">
      <type></type>
      <name>BridgeTestValidStateSampler</name>
      <anchorfile>classompl_1_1base_1_1BridgeTestValidStateSampler.html</anchorfile>
      <anchor>a7a54fdc1219e1e97e913bfe8f5b70cbb</anchor>
      <arglist>(const SpaceInformation *si)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sample</name>
      <anchorfile>classompl_1_1base_1_1BridgeTestValidStateSampler.html</anchorfile>
      <anchor>ac413d16a7fbfc3444a6130cbe5d19ef9</anchor>
      <arglist>(State *state) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sampleNear</name>
      <anchorfile>classompl_1_1base_1_1BridgeTestValidStateSampler.html</anchorfile>
      <anchor>a074bddcce58bffe7223f0ccc74030916</anchor>
      <arglist>(State *state, const State *near, double distance) override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getStdDev</name>
      <anchorfile>classompl_1_1base_1_1BridgeTestValidStateSampler.html</anchorfile>
      <anchor>a36c48b27b33a929d3963c619c331a519</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStdDev</name>
      <anchorfile>classompl_1_1base_1_1BridgeTestValidStateSampler.html</anchorfile>
      <anchor>afca3149256aec6d8bdb5ae815bfe2e15</anchor>
      <arglist>(double stddev)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1base_1_1BridgeTestValidStateSampler.html</anchorfile>
      <anchor>ab4300e38a407b9aa5b6df7ae949dd5a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>stddev_</name>
      <anchorfile>classompl_1_1base_1_1BridgeTestValidStateSampler.html</anchorfile>
      <anchor>a5d6f929ed8bc083bcd06038d48ce0bc0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::CForestStateSampler</name>
    <filename>classompl_1_1base_1_1CForestStateSampler.html</filename>
    <base>ompl::base::StateSampler</base>
    <member kind="function">
      <type></type>
      <name>CForestStateSampler</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSampler.html</anchorfile>
      <anchor>ac849349712a0e1d0820f1822520cc0c7</anchor>
      <arglist>(const StateSpace *space, StateSamplerPtr sampler)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CForestStateSampler</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSampler.html</anchorfile>
      <anchor>a1ab1d6a828f108d0681625a1297090b7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSampler.html</anchorfile>
      <anchor>a8b4b4281ea1cedb484760d908dd05879</anchor>
      <arglist>(State *state) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleUniformNear</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSampler.html</anchorfile>
      <anchor>a70bd7e323855cea78971900e92a617be</anchor>
      <arglist>(State *state, const State *near, double distance) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleGaussian</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSampler.html</anchorfile>
      <anchor>a18475f3036fbb645d0cb287ad1fb92f9</anchor>
      <arglist>(State *state, const State *mean, double stdDev) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStatesToSample</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSampler.html</anchorfile>
      <anchor>af3add105483046a065b6842ea41ba952</anchor>
      <arglist>(const std::vector&lt; const State * &gt; &amp;states)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getNextSample</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSampler.html</anchorfile>
      <anchor>ae1cdb7c0a4877622dcb929aa0b91432c</anchor>
      <arglist>(State *state)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; State * &gt;</type>
      <name>statesToSample_</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSampler.html</anchorfile>
      <anchor>a5330b587ad2ef8d2afc3c69d68b7f9bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSampler.html</anchorfile>
      <anchor>af69509cf4200290b44a91c119f70cb75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::mutex</type>
      <name>statesLock_</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSampler.html</anchorfile>
      <anchor>a062f55e9992812f7934a35d17669673e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::CForestStateSpaceWrapper</name>
    <filename>classompl_1_1base_1_1CForestStateSpaceWrapper.html</filename>
    <base>ompl::base::StateSpace</base>
    <member kind="function">
      <type>StateSamplerPtr</type>
      <name>allocDefaultStateSampler</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>a7189dd4f4d8a1be09e3e18cb9b53a647</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>StateSamplerPtr</type>
      <name>allocStateSampler</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>a66be13e51b2ab78a34db525432396302</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>aa36dfbc0119ab4514dda12806a2c75ab</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompound</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>a714756532091ab256b3d6f036e322c81</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDiscrete</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>aac34c7ac165f60b6821a846d473a473d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isHybrid</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>a65d2a071d311bac9d7d49d6aef588d83</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMetricSpace</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>a7c1b728f95012569f6c17d5c42938b9c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSymmetricDistance</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>a1b0fabc3ed4329c4590e593417259444</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSymmetricInterpolate</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>ad56d8e70348f91ec8643ae4d0e223a0a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLongestValidSegmentFraction</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>aab96c1376f04dcdedc57091802bbab9c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLongestValidSegmentFraction</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>aff87df59be6dbf252196918875cbb3d2</anchor>
      <arglist>(double segmentFraction) override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>validSegmentCount</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>a1e73c8bf8c6555bfd14e5eb6976a1fd9</anchor>
      <arglist>(const State *state1, const State *state2) const override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>a8b27f28985357281b5d8f79098417645</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>a61ecd2538eed20d28f774a79a7772a12</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMeasure</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>ade728fe09b47386501372cdd5f328686</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enforceBounds</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>a725106f84591e29735f341cfb36d24f1</anchor>
      <arglist>(State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>a532c7fd393865375759b7d76093b8619</anchor>
      <arglist>(const State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyState</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>a837159a2ce8dc638293172f9f01e6760</anchor>
      <arglist>(State *destination, const State *source) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>a25ab585c84364488f6ea5d87772f2385</anchor>
      <arglist>(const State *state1, const State *state2) const override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getSerializationLength</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>ace15b6fb4c5311bf5d4d992e84b69c87</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>a70bacc322ae37e30e7cd47f3c67f987e</anchor>
      <arglist>(void *serialization, const State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserialize</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>a3dfb704e145ae3731cf4d306460af8cb</anchor>
      <arglist>(State *state, const void *serialization) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalStates</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>a970fccf69837bbf04114d76fcf1a5332</anchor>
      <arglist>(const State *state1, const State *state2) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>a9fbde10c7df8cfda58873d1dff167e1c</anchor>
      <arglist>(const State *from, const State *to, const double t, State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>allocState</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>a04ab8f8d355af47ab5f5ae0dcc94609e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeState</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>ac73e02fee9bdc9a31e557a7fe6f41e52</anchor>
      <arglist>(State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getValueAddressAtIndex</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>a4171ed1f5a8f2e963c46c8fde0dddd7f</anchor>
      <arglist>(State *state, const unsigned int index) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerProjections</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>a9ace658f90522c42a7a0833a6240a750</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printState</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>afbe345d317b8e20a159b76195526af5a</anchor>
      <arglist>(const State *state, std::ostream &amp;out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printSettings</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>a5a11dda3eb68ca6215eae8ad284d9328</anchor>
      <arglist>(std::ostream &amp;out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printProjections</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>a1a2cf91a1fb4bbadbe46e487455136d7</anchor>
      <arglist>(std::ostream &amp;out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sanityChecks</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>abc8c921848218e3290f77cb5cd9ada5a</anchor>
      <arglist>(double zero, double eps, unsigned int flags) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sanityChecks</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>a329333bad66566fab35b1b58b5f2bed9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>StateSamplerPtr</type>
      <name>allocSubspaceStateSampler</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>ae040edd46e01c41459a985d7e2368e33</anchor>
      <arglist>(const StateSpace *subspace) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocations</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>aff532684aa596f45ff875383db82b242</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::CompoundState</name>
    <filename>classompl_1_1base_1_1CompoundState.html</filename>
    <base>ompl::base::State</base>
    <member kind="function">
      <type>const T *</type>
      <name>as</name>
      <anchorfile>classompl_1_1base_1_1CompoundState.html</anchorfile>
      <anchor>a3fed804c968d7482c6147a267878614b</anchor>
      <arglist>(unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>as</name>
      <anchorfile>classompl_1_1base_1_1CompoundState.html</anchorfile>
      <anchor>ab5bd560f3017629a2fc4fce7c52dfbeb</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>const State *</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1base_1_1CompoundState.html</anchorfile>
      <anchor>a18226fde12b3ffe67372b451fefa1c94</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1base_1_1CompoundState.html</anchorfile>
      <anchor>a392d7c4afb7977b4b3026a705aab7bb0</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="variable">
      <type>State **</type>
      <name>components</name>
      <anchorfile>classompl_1_1base_1_1CompoundState.html</anchorfile>
      <anchor>acbfb1f1ff3d5eb2315f47c13fc79a86e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::CompoundStateSampler</name>
    <filename>classompl_1_1base_1_1CompoundStateSampler.html</filename>
    <base>ompl::base::StateSampler</base>
    <member kind="function">
      <type></type>
      <name>CompoundStateSampler</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSampler.html</anchorfile>
      <anchor>aa643838d5e9c6f488e610286a7b576fe</anchor>
      <arglist>(const StateSpace *space)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CompoundStateSampler</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSampler.html</anchorfile>
      <anchor>a96fac6d5187dd3bfe684bf3c292531c5</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addSampler</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSampler.html</anchorfile>
      <anchor>a1c3640b72b4eecbae07f1699e5690042</anchor>
      <arglist>(const StateSamplerPtr &amp;sampler, double weightImportance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSampler.html</anchorfile>
      <anchor>aa137c3a78f2a6406a4d56d953f3cdc2b</anchor>
      <arglist>(State *state) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleUniformNear</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSampler.html</anchorfile>
      <anchor>acb942effe30b4500c99a51ebe178c8b3</anchor>
      <arglist>(State *state, const State *near, double distance) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleGaussian</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSampler.html</anchorfile>
      <anchor>a42e0ed2c9210ff6dbe44fdc4f9473757</anchor>
      <arglist>(State *state, const State *mean, double stdDev) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; StateSamplerPtr &gt;</type>
      <name>samplers_</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSampler.html</anchorfile>
      <anchor>a710e5cfa1fd4e9e72b82978245b8ac7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>weightImportance_</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSampler.html</anchorfile>
      <anchor>a1548ec65daceafd54f928ca163a93780</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::CompoundStateSpace</name>
    <filename>classompl_1_1base_1_1CompoundStateSpace.html</filename>
    <base>ompl::base::StateSpace</base>
    <member kind="typedef">
      <type>ompl::base::CompoundState</type>
      <name>StateType</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a1edbb5159328ff529b9c4e1a2e569247</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompoundStateSpace</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a2dcbcf1fac267248ea6ed756494414c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompoundStateSpace</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a813ec9cca9b410654350c8125892c5b2</anchor>
      <arglist>(const std::vector&lt; StateSpacePtr &gt; &amp;components, const std::vector&lt; double &gt; &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>as</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>afec510def21209463e299ff5454306bd</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>as</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a9ca3f65b67e6cb96fc2d3fc5afe4d3d1</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompound</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a5490f9b7fecf5ef31446a0766aa21e5d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isHybrid</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a733e5645f459edb6f58c2aa7e2ea35e6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printState</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a669a54a7e843f2584fe052d8cc88a3fb</anchor>
      <arglist>(const State *state, std::ostream &amp;out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printSettings</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>aea8fb125dc2148a1219dabaa71be3c90</anchor>
      <arglist>(std::ostream &amp;out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocations</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a794aaf0bb2d390cee7a480ee75581e9e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a9c458b9bf92fb4224ea68fb9ac8c31e3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSubspace</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a9c772d5b74271f79d95531d00ed36bf7</anchor>
      <arglist>(const StateSpacePtr &amp;component, double weight)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getSubspaceCount</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a37925cde42b721071c47efe220157a3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const StateSpacePtr &amp;</type>
      <name>getSubspace</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a332b23e17e7145d92dce19c6f58a11f9</anchor>
      <arglist>(unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>const StateSpacePtr &amp;</type>
      <name>getSubspace</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a7b5ba390a8e09b3c427ca950e9d0960f</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getSubspaceIndex</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a5b7d7b973395044cdeaf0709385c76cf</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSubspace</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>afd732b307d13a6b7eb1f928f07aea3ca</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSubspaceWeight</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a540795010d8e81d44c84348a3b7a619b</anchor>
      <arglist>(unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSubspaceWeight</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a0edd79a90a01bbf4dda911b163d8f481</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubspaceWeight</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a2792fe1850d393d19c7540907e85ac68</anchor>
      <arglist>(unsigned int index, double weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubspaceWeight</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>acaadb6fc872c2ad7ec0f6d2ad2339e14</anchor>
      <arglist>(const std::string &amp;name, double weight)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; StateSpacePtr &gt; &amp;</type>
      <name>getSubspaces</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>ad696fe7c77eed7ac104cba13f94f1b80</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>getSubspaceWeights</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a7f96a0db5b7faa12b2ee09f62c74f56a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLocked</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a31227ba6cda713c6e3f142ab082b6dae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>ab344f21f0aba84c14fda3ec87a0b21ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StateSamplerPtr</type>
      <name>allocSubspaceStateSampler</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a977b3695541ab3f50a1bc4ef4ddbf04a</anchor>
      <arglist>(const StateSpace *subspace) const override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a2362ca0dc64dfadbc62cccff30f582a0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>adabf6feb3eff5759820db0a1c39d2c9a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMeasure</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a2ac4b250225ee7dce504689c76ccca36</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enforceBounds</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>af7689cf965cb0b19efc335e8485efd6a</anchor>
      <arglist>(State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>ab1c39eaae3b4c3784d3da186e70b429c</anchor>
      <arglist>(const State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyState</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>ae41661fdd48a3c7ec5f072b8c5f17398</anchor>
      <arglist>(State *destination, const State *source) const override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getSerializationLength</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a531a9a460ed142638ebf4974cfe3c566</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>aacfd6e75d6a0c39904cd621b32265b1c</anchor>
      <arglist>(void *serialization, const State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserialize</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>ab47577a33dbed19e27e92959e6fa76d5</anchor>
      <arglist>(State *state, const void *serialization) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>aa816af1b7db21c3863a4cf342da8e0d7</anchor>
      <arglist>(const State *state1, const State *state2) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLongestValidSegmentFraction</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a87e037d9ac1798da4f875783a5577228</anchor>
      <arglist>(double segmentFraction) override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>validSegmentCount</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a133df8e19915dd8f805a054509e38256</anchor>
      <arglist>(const State *state1, const State *state2) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalStates</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a62bfb19a08cbc87134b6d9cf133c48e8</anchor>
      <arglist>(const State *state1, const State *state2) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>ab3607217f57862bd6ba65bbfa7e2e5db</anchor>
      <arglist>(const State *from, const State *to, double t, State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>StateSamplerPtr</type>
      <name>allocDefaultStateSampler</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a0096d7a8bc3527c1697b98a6eb376dcf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>allocState</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>abfb8ddbac5b77415efdbbb64cc9c15e7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeState</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>ac149b7bbe11236d46193d4bd40bcadd9</anchor>
      <arglist>(State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getValueAddressAtIndex</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>ab048edbb0c3276058e855a62890cba54</anchor>
      <arglist>(State *state, unsigned int index) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>allocStateComponents</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a39ecd1399f805a0cd0c1e1e68af06e63</anchor>
      <arglist>(CompoundState *state) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; StateSpacePtr &gt;</type>
      <name>components_</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>ae5f43ed0a30998604b18f50b007455b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>componentCount_</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a8c53501d4730a16782ad9619e8423d15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>weights_</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>adbbc7fd19539c47056f3395a39d2ef67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>weightSum_</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a49177a2fbfdbd97e8cfd75743fc939dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>locked_</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a4ed84298425b21e1d2b120a85c124427</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSubspace</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a9c772d5b74271f79d95531d00ed36bf7</anchor>
      <arglist>(const StateSpacePtr &amp;component, double weight)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getSubspaceCount</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a37925cde42b721071c47efe220157a3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const StateSpacePtr &amp;</type>
      <name>getSubspace</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a332b23e17e7145d92dce19c6f58a11f9</anchor>
      <arglist>(unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>const StateSpacePtr &amp;</type>
      <name>getSubspace</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a7b5ba390a8e09b3c427ca950e9d0960f</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getSubspaceIndex</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a5b7d7b973395044cdeaf0709385c76cf</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSubspace</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>afd732b307d13a6b7eb1f928f07aea3ca</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSubspaceWeight</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a540795010d8e81d44c84348a3b7a619b</anchor>
      <arglist>(unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSubspaceWeight</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a0edd79a90a01bbf4dda911b163d8f481</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubspaceWeight</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a2792fe1850d393d19c7540907e85ac68</anchor>
      <arglist>(unsigned int index, double weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubspaceWeight</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>acaadb6fc872c2ad7ec0f6d2ad2339e14</anchor>
      <arglist>(const std::string &amp;name, double weight)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; StateSpacePtr &gt; &amp;</type>
      <name>getSubspaces</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>ad696fe7c77eed7ac104cba13f94f1b80</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>getSubspaceWeights</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a7f96a0db5b7faa12b2ee09f62c74f56a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLocked</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a31227ba6cda713c6e3f142ab082b6dae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>ab344f21f0aba84c14fda3ec87a0b21ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StateSamplerPtr</type>
      <name>allocSubspaceStateSampler</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a977b3695541ab3f50a1bc4ef4ddbf04a</anchor>
      <arglist>(const StateSpace *subspace) const override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a2362ca0dc64dfadbc62cccff30f582a0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>adabf6feb3eff5759820db0a1c39d2c9a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMeasure</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a2ac4b250225ee7dce504689c76ccca36</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enforceBounds</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>af7689cf965cb0b19efc335e8485efd6a</anchor>
      <arglist>(State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>ab1c39eaae3b4c3784d3da186e70b429c</anchor>
      <arglist>(const State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyState</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>ae41661fdd48a3c7ec5f072b8c5f17398</anchor>
      <arglist>(State *destination, const State *source) const override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getSerializationLength</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a531a9a460ed142638ebf4974cfe3c566</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>aacfd6e75d6a0c39904cd621b32265b1c</anchor>
      <arglist>(void *serialization, const State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserialize</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>ab47577a33dbed19e27e92959e6fa76d5</anchor>
      <arglist>(State *state, const void *serialization) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>aa816af1b7db21c3863a4cf342da8e0d7</anchor>
      <arglist>(const State *state1, const State *state2) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLongestValidSegmentFraction</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a87e037d9ac1798da4f875783a5577228</anchor>
      <arglist>(double segmentFraction) override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>validSegmentCount</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a133df8e19915dd8f805a054509e38256</anchor>
      <arglist>(const State *state1, const State *state2) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalStates</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a62bfb19a08cbc87134b6d9cf133c48e8</anchor>
      <arglist>(const State *state1, const State *state2) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>ab3607217f57862bd6ba65bbfa7e2e5db</anchor>
      <arglist>(const State *from, const State *to, double t, State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>StateSamplerPtr</type>
      <name>allocDefaultStateSampler</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a0096d7a8bc3527c1697b98a6eb376dcf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>allocState</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>abfb8ddbac5b77415efdbbb64cc9c15e7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeState</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>ac149b7bbe11236d46193d4bd40bcadd9</anchor>
      <arglist>(State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getValueAddressAtIndex</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>ab048edbb0c3276058e855a62890cba54</anchor>
      <arglist>(State *state, unsigned int index) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::ConstrainedMotionValidator</name>
    <filename>classompl_1_1base_1_1ConstrainedMotionValidator.html</filename>
    <base>ompl::base::MotionValidator</base>
    <member kind="function">
      <type></type>
      <name>ConstrainedMotionValidator</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedMotionValidator.html</anchorfile>
      <anchor>aa065e7127ae1ce732cd23ca7e3642275</anchor>
      <arglist>(SpaceInformation *si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstrainedMotionValidator</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedMotionValidator.html</anchorfile>
      <anchor>a897afa14a244d3c739e2cbd10e82b6a5</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkMotion</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedMotionValidator.html</anchorfile>
      <anchor>a534eb8dfda829df2da4795352bc48d62</anchor>
      <arglist>(const State *s1, const State *s2) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkMotion</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedMotionValidator.html</anchorfile>
      <anchor>a6fdb5749c9f1b0f2c1f4bba76b07da78</anchor>
      <arglist>(const State *s1, const State *s2, std::pair&lt; State *, double &gt; &amp;lastValid) const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ConstrainedStateSpace &amp;</type>
      <name>ss_</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedMotionValidator.html</anchorfile>
      <anchor>ac01d9da7df42777a42072580bc7a1eea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::ConstrainedSpaceInformation</name>
    <filename>classompl_1_1base_1_1ConstrainedSpaceInformation.html</filename>
    <base>ompl::base::SpaceInformation</base>
    <member kind="function">
      <type></type>
      <name>ConstrainedSpaceInformation</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedSpaceInformation.html</anchorfile>
      <anchor>af46db86489864c9de22dc3803d991ee2</anchor>
      <arglist>(StateSpacePtr space)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMotionStates</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedSpaceInformation.html</anchorfile>
      <anchor>aef8ac143240b3ffac84fe0964d1ccb07</anchor>
      <arglist>(const State *s1, const State *s2, std::vector&lt; State * &gt; &amp;states, unsigned int, bool endpoints, bool) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::ConstrainedStateSpace</name>
    <filename>classompl_1_1base_1_1ConstrainedStateSpace.html</filename>
    <base>ompl::base::WrapperStateSpace</base>
    <class kind="class">ompl::base::ConstrainedStateSpace::StateType</class>
    <member kind="enumeration">
      <type></type>
      <name>SanityChecks</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>ab71679cb1f5d35230b54f33e86c6517d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSTRAINED_STATESPACE_SAMPLERS</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>ab71679cb1f5d35230b54f33e86c6517da2f124648bfd2bd72c0f2000997aa55b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSTRAINED_STATESPACE_GEODESIC_SATISFY</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>ab71679cb1f5d35230b54f33e86c6517da1418b1544de813bf7808315a2ee6b9f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSTRAINED_STATESPACE_GEODESIC_CONTINUITY</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>ab71679cb1f5d35230b54f33e86c6517da343f05f800434d26bb238a08c2d57d40</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSTRAINED_STATESPACE_GEODESIC_INTERPOLATE</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>ab71679cb1f5d35230b54f33e86c6517da52005a0a4c0e60385d53b9eca18a8b7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSTRAINED_STATESPACE_JACOBIAN</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>ab71679cb1f5d35230b54f33e86c6517da387aac313de41a4fa7df1d962ca234ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSTRAINED_STATESPACE_SAMPLERS</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>ab71679cb1f5d35230b54f33e86c6517da2f124648bfd2bd72c0f2000997aa55b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSTRAINED_STATESPACE_GEODESIC_SATISFY</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>ab71679cb1f5d35230b54f33e86c6517da1418b1544de813bf7808315a2ee6b9f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSTRAINED_STATESPACE_GEODESIC_CONTINUITY</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>ab71679cb1f5d35230b54f33e86c6517da343f05f800434d26bb238a08c2d57d40</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSTRAINED_STATESPACE_GEODESIC_INTERPOLATE</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>ab71679cb1f5d35230b54f33e86c6517da52005a0a4c0e60385d53b9eca18a8b7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSTRAINED_STATESPACE_JACOBIAN</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>ab71679cb1f5d35230b54f33e86c6517da387aac313de41a4fa7df1d962ca234ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstrainedStateSpace</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>a9673ee354444d18a0c32d85f232e8382</anchor>
      <arglist>(const StateSpacePtr &amp;ambientSpace, const ConstraintPtr &amp;constraint)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMetricSpace</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>aa8283c37b80fbee9ecac85a7d7980e9a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpaceInformation</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>a349cdde886586bc63b243c49176650ba</anchor>
      <arglist>(SpaceInformation *si)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>ae79fac42f95ee2d8f8f28d74ab9fe602</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>a50701a7c829dbe5869376ad5eba1f601</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>allocState</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>a706574802bed0fc539ee7c32011dc298</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constrainedSanityChecks</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>a8e1324482598ba2c396877f9d86059a9</anchor>
      <arglist>(unsigned int flags) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sanityChecks</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>abe381e7751f329702e0a5906d5ae8a59</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>validSegmentCount</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>ab53799358a1cc69a3f1e6a26c8dbaaf9</anchor>
      <arglist>(const State *s1, const State *s2) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>a76c3278b1b6efdcd588a6609666281db</anchor>
      <arglist>(const State *from, const State *to, double t, State *state) const override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>discreteGeodesic</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>a7945eeb749bed04c6f3a8bf39e3fcd9d</anchor>
      <arglist>(const State *from, const State *to, bool interpolate=false, std::vector&lt; State * &gt; *geodesic=nullptr) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual State *</type>
      <name>geodesicInterpolate</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>a0e179bc674e590fe1eb44c344b1db528</anchor>
      <arglist>(const std::vector&lt; State * &gt; &amp;geodesic, double t) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDelta</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>ac4b381611fa84be9e6d0ff2870b11498</anchor>
      <arglist>(double delta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLambda</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>a1327ddb0831627a49d289e22601453cf</anchor>
      <arglist>(double lambda)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDelta</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>a18988282782c55e3a5b13eb16ff7c52d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLambda</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>a3069963a553655a29ab4243c52d02854</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getAmbientDimension</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>a985baf63acfd88159ca51afeae25e41e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getManifoldDimension</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>afda550dbe902a7d22ab16a60f4653f52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ConstraintPtr</type>
      <name>getConstraint</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>a4a02e8865a0a45ac2eddce1d5b8248b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SpaceInformation *</type>
      <name>si_</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>ae715b570b104c090708de69d8c5da343</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ConstraintPtr</type>
      <name>constraint_</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>aeef3f0a5675e4246ebcddb13a4f2b166</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const unsigned int</type>
      <name>n_</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>aa4c140b86a44c645d7ed1f30d4940b72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const unsigned int</type>
      <name>k_</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>ac26fa6580e0ffaa11c388bd19ba8e135</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>delta_</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>a84da2ea2a24f81f0c8f0407fe9e4309b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>lambda_</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>a6de1afc3140a0df5a8a659ee124883d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>setup_</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>a5263246afe2906dc44ed652da0a630c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMetricSpace</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>aa8283c37b80fbee9ecac85a7d7980e9a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpaceInformation</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>a349cdde886586bc63b243c49176650ba</anchor>
      <arglist>(SpaceInformation *si)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>ae79fac42f95ee2d8f8f28d74ab9fe602</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>a50701a7c829dbe5869376ad5eba1f601</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>allocState</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>a706574802bed0fc539ee7c32011dc298</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constrainedSanityChecks</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>a8e1324482598ba2c396877f9d86059a9</anchor>
      <arglist>(unsigned int flags) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sanityChecks</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>abe381e7751f329702e0a5906d5ae8a59</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>validSegmentCount</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>ab53799358a1cc69a3f1e6a26c8dbaaf9</anchor>
      <arglist>(const State *s1, const State *s2) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>a76c3278b1b6efdcd588a6609666281db</anchor>
      <arglist>(const State *from, const State *to, double t, State *state) const override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>discreteGeodesic</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>a7945eeb749bed04c6f3a8bf39e3fcd9d</anchor>
      <arglist>(const State *from, const State *to, bool interpolate=false, std::vector&lt; State * &gt; *geodesic=nullptr) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual State *</type>
      <name>geodesicInterpolate</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>a0e179bc674e590fe1eb44c344b1db528</anchor>
      <arglist>(const std::vector&lt; State * &gt; &amp;geodesic, double t) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDelta</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>ac4b381611fa84be9e6d0ff2870b11498</anchor>
      <arglist>(double delta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLambda</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>a1327ddb0831627a49d289e22601453cf</anchor>
      <arglist>(double lambda)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDelta</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>a18988282782c55e3a5b13eb16ff7c52d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLambda</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>a3069963a553655a29ab4243c52d02854</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getAmbientDimension</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>a985baf63acfd88159ca51afeae25e41e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getManifoldDimension</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>afda550dbe902a7d22ab16a60f4653f52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ConstraintPtr</type>
      <name>getConstraint</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace.html</anchorfile>
      <anchor>a4a02e8865a0a45ac2eddce1d5b8248b4</anchor>
      <arglist>() const</arglist>
    </member>
    <docanchor file="classompl_1_1base_1_1ConstrainedStateSpace.html">gConstrained</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::base::ConstrainedStateSpace::StateType</name>
    <filename>classompl_1_1base_1_1ConstrainedStateSpace_1_1StateType.html</filename>
    <base>ompl::base::WrapperStateSpace::StateType</base>
    <member kind="function">
      <type></type>
      <name>StateType</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace_1_1StateType.html</anchorfile>
      <anchor>ae0c16c1fcae871e86d22fd67e798cce0</anchor>
      <arglist>(const ConstrainedStateSpace *space)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedStateSpace_1_1StateType.html</anchorfile>
      <anchor>a9c34bd251d98449b1fcb662dc3b9982d</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::ConstrainedValidStateSampler</name>
    <filename>classompl_1_1base_1_1ConstrainedValidStateSampler.html</filename>
    <base>ompl::base::ValidStateSampler</base>
    <member kind="function">
      <type></type>
      <name>ConstrainedValidStateSampler</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedValidStateSampler.html</anchorfile>
      <anchor>a7bebe336eb90b4b20c07e086489dcdfd</anchor>
      <arglist>(const SpaceInformation *si)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sample</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedValidStateSampler.html</anchorfile>
      <anchor>ae04d43b2eb5ce955003a9fe329764803</anchor>
      <arglist>(State *state) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sampleNear</name>
      <anchorfile>classompl_1_1base_1_1ConstrainedValidStateSampler.html</anchorfile>
      <anchor>a4486f57fadf17c98d55572906bef4abc</anchor>
      <arglist>(State *state, const State *near, double distance) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::Constraint</name>
    <filename>classompl_1_1base_1_1Constraint.html</filename>
    <member kind="function">
      <type></type>
      <name>Constraint</name>
      <anchorfile>classompl_1_1base_1_1Constraint.html</anchorfile>
      <anchor>aaefa1497a68c7944e146ff2811023398</anchor>
      <arglist>(const unsigned int ambientDim, const unsigned int coDim, double tolerance=magic::CONSTRAINT_PROJECTION_TOLERANCE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>function</name>
      <anchorfile>classompl_1_1base_1_1Constraint.html</anchorfile>
      <anchor>a08882bb91416db1a604baaa61525d2cc</anchor>
      <arglist>(const State *state, Eigen::Ref&lt; Eigen::VectorXd &gt; out) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>function</name>
      <anchorfile>classompl_1_1base_1_1Constraint.html</anchorfile>
      <anchor>a22e21da4721119a35968a0cf325d8f65</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;x, Eigen::Ref&lt; Eigen::VectorXd &gt; out) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jacobian</name>
      <anchorfile>classompl_1_1base_1_1Constraint.html</anchorfile>
      <anchor>a7f15239c4bbc8b1b8a36e7579d47346c</anchor>
      <arglist>(const State *state, Eigen::Ref&lt; Eigen::MatrixXd &gt; out) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jacobian</name>
      <anchorfile>classompl_1_1base_1_1Constraint.html</anchorfile>
      <anchor>a4800d1f76f1d56afa1e08dab415d8bda</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;x, Eigen::Ref&lt; Eigen::MatrixXd &gt; out) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>project</name>
      <anchorfile>classompl_1_1base_1_1Constraint.html</anchorfile>
      <anchor>a84203729cf979b398e8e59f92d136ed3</anchor>
      <arglist>(State *state) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>project</name>
      <anchorfile>classompl_1_1base_1_1Constraint.html</anchorfile>
      <anchor>a27c1ecac7eb642028d58b33d6742160d</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; x) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>distance</name>
      <anchorfile>classompl_1_1base_1_1Constraint.html</anchorfile>
      <anchor>ab19d03c6f8a491a6db1b14ea055a1c62</anchor>
      <arglist>(const State *state) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>distance</name>
      <anchorfile>classompl_1_1base_1_1Constraint.html</anchorfile>
      <anchor>af945e8c94949a4a06a199b567c277be9</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;x) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSatisfied</name>
      <anchorfile>classompl_1_1base_1_1Constraint.html</anchorfile>
      <anchor>a0e4d9def91883487533583390fbd2281</anchor>
      <arglist>(const State *state) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSatisfied</name>
      <anchorfile>classompl_1_1base_1_1Constraint.html</anchorfile>
      <anchor>a777dbc260073df452bf52caab80baef5</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getAmbientDimension</name>
      <anchorfile>classompl_1_1base_1_1Constraint.html</anchorfile>
      <anchor>a6be267c6c9287f4833b053afde940d4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getManifoldDimension</name>
      <anchorfile>classompl_1_1base_1_1Constraint.html</anchorfile>
      <anchor>a49338ae4a7616d5ee59c043cd86ed912</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getCoDimension</name>
      <anchorfile>classompl_1_1base_1_1Constraint.html</anchorfile>
      <anchor>a7c6917b07e2177eb10ca8da014044f9d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setManifoldDimension</name>
      <anchorfile>classompl_1_1base_1_1Constraint.html</anchorfile>
      <anchor>ac22291e02a0e3f2063f0a92eac0b70e7</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTolerance</name>
      <anchorfile>classompl_1_1base_1_1Constraint.html</anchorfile>
      <anchor>a2634e2534e66268e0c98ac2b2d240fb1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMaxIterations</name>
      <anchorfile>classompl_1_1base_1_1Constraint.html</anchorfile>
      <anchor>af4b8b270a79ecf467682286ad121ab63</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTolerance</name>
      <anchorfile>classompl_1_1base_1_1Constraint.html</anchorfile>
      <anchor>a4413eaf904a95e843b85938236a1a2ab</anchor>
      <arglist>(const double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxIterations</name>
      <anchorfile>classompl_1_1base_1_1Constraint.html</anchorfile>
      <anchor>ab907de9231aac2c08ed507ef5e626210</anchor>
      <arglist>(const unsigned int iterations)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const unsigned int</type>
      <name>n_</name>
      <anchorfile>classompl_1_1base_1_1Constraint.html</anchorfile>
      <anchor>a865f005ecfec58fcae2f343e1620b2f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>k_</name>
      <anchorfile>classompl_1_1base_1_1Constraint.html</anchorfile>
      <anchor>a11422165236ecd753545380c892554b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>tolerance_</name>
      <anchorfile>classompl_1_1base_1_1Constraint.html</anchorfile>
      <anchor>a7e8342420eb0d011c30fa3b5ae32b3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxIterations_</name>
      <anchorfile>classompl_1_1base_1_1Constraint.html</anchorfile>
      <anchor>af254fc9398582ff4ced7d4a0aff62cc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>function</name>
      <anchorfile>classompl_1_1base_1_1Constraint.html</anchorfile>
      <anchor>a08882bb91416db1a604baaa61525d2cc</anchor>
      <arglist>(const State *state, Eigen::Ref&lt; Eigen::VectorXd &gt; out) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>function</name>
      <anchorfile>classompl_1_1base_1_1Constraint.html</anchorfile>
      <anchor>a22e21da4721119a35968a0cf325d8f65</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;x, Eigen::Ref&lt; Eigen::VectorXd &gt; out) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jacobian</name>
      <anchorfile>classompl_1_1base_1_1Constraint.html</anchorfile>
      <anchor>a7f15239c4bbc8b1b8a36e7579d47346c</anchor>
      <arglist>(const State *state, Eigen::Ref&lt; Eigen::MatrixXd &gt; out) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>jacobian</name>
      <anchorfile>classompl_1_1base_1_1Constraint.html</anchorfile>
      <anchor>a4800d1f76f1d56afa1e08dab415d8bda</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;x, Eigen::Ref&lt; Eigen::MatrixXd &gt; out) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>project</name>
      <anchorfile>classompl_1_1base_1_1Constraint.html</anchorfile>
      <anchor>a84203729cf979b398e8e59f92d136ed3</anchor>
      <arglist>(State *state) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>project</name>
      <anchorfile>classompl_1_1base_1_1Constraint.html</anchorfile>
      <anchor>a27c1ecac7eb642028d58b33d6742160d</anchor>
      <arglist>(Eigen::Ref&lt; Eigen::VectorXd &gt; x) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>distance</name>
      <anchorfile>classompl_1_1base_1_1Constraint.html</anchorfile>
      <anchor>ab19d03c6f8a491a6db1b14ea055a1c62</anchor>
      <arglist>(const State *state) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>distance</name>
      <anchorfile>classompl_1_1base_1_1Constraint.html</anchorfile>
      <anchor>af945e8c94949a4a06a199b567c277be9</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;x) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSatisfied</name>
      <anchorfile>classompl_1_1base_1_1Constraint.html</anchorfile>
      <anchor>a0e4d9def91883487533583390fbd2281</anchor>
      <arglist>(const State *state) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSatisfied</name>
      <anchorfile>classompl_1_1base_1_1Constraint.html</anchorfile>
      <anchor>a777dbc260073df452bf52caab80baef5</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getAmbientDimension</name>
      <anchorfile>classompl_1_1base_1_1Constraint.html</anchorfile>
      <anchor>a6be267c6c9287f4833b053afde940d4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getManifoldDimension</name>
      <anchorfile>classompl_1_1base_1_1Constraint.html</anchorfile>
      <anchor>a49338ae4a7616d5ee59c043cd86ed912</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getCoDimension</name>
      <anchorfile>classompl_1_1base_1_1Constraint.html</anchorfile>
      <anchor>a7c6917b07e2177eb10ca8da014044f9d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setManifoldDimension</name>
      <anchorfile>classompl_1_1base_1_1Constraint.html</anchorfile>
      <anchor>ac22291e02a0e3f2063f0a92eac0b70e7</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTolerance</name>
      <anchorfile>classompl_1_1base_1_1Constraint.html</anchorfile>
      <anchor>a2634e2534e66268e0c98ac2b2d240fb1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMaxIterations</name>
      <anchorfile>classompl_1_1base_1_1Constraint.html</anchorfile>
      <anchor>af4b8b270a79ecf467682286ad121ab63</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTolerance</name>
      <anchorfile>classompl_1_1base_1_1Constraint.html</anchorfile>
      <anchor>a4413eaf904a95e843b85938236a1a2ab</anchor>
      <arglist>(const double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxIterations</name>
      <anchorfile>classompl_1_1base_1_1Constraint.html</anchorfile>
      <anchor>ab907de9231aac2c08ed507ef5e626210</anchor>
      <arglist>(const unsigned int iterations)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::ConstraintIntersection</name>
    <filename>classompl_1_1base_1_1ConstraintIntersection.html</filename>
    <base>ompl::base::Constraint</base>
    <member kind="function">
      <type></type>
      <name>ConstraintIntersection</name>
      <anchorfile>classompl_1_1base_1_1ConstraintIntersection.html</anchorfile>
      <anchor>abcd2f27cffe4da7246b2742a257071d0</anchor>
      <arglist>(const unsigned int ambientDim, std::vector&lt; ConstraintPtr &gt; constraints)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstraintIntersection</name>
      <anchorfile>classompl_1_1base_1_1ConstraintIntersection.html</anchorfile>
      <anchor>a08c7aa88e7a485e00b97f76f4fd85ed0</anchor>
      <arglist>(const unsigned int ambientDim, std::initializer_list&lt; ConstraintPtr &gt; constraints)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>function</name>
      <anchorfile>classompl_1_1base_1_1ConstraintIntersection.html</anchorfile>
      <anchor>a2ba20e752dadd20fc14515add949d026</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;x, Eigen::Ref&lt; Eigen::VectorXd &gt; out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jacobian</name>
      <anchorfile>classompl_1_1base_1_1ConstraintIntersection.html</anchorfile>
      <anchor>af97e4babac66afa17113a16e6cd0a710</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;x, Eigen::Ref&lt; Eigen::MatrixXd &gt; out) const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ConstraintPtr &gt;</type>
      <name>constraints_</name>
      <anchorfile>classompl_1_1base_1_1ConstraintIntersection.html</anchorfile>
      <anchor>a451f6d90cda82d5921d186c769b9ff4c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::ConstraintObjective</name>
    <filename>classompl_1_1base_1_1ConstraintObjective.html</filename>
    <base>ompl::base::OptimizationObjective</base>
    <member kind="function">
      <type></type>
      <name>ConstraintObjective</name>
      <anchorfile>classompl_1_1base_1_1ConstraintObjective.html</anchorfile>
      <anchor>af6639fa567631f78e0686aab128974d5</anchor>
      <arglist>(ConstraintPtr constraint, SpaceInformationPtr si)</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>stateCost</name>
      <anchorfile>classompl_1_1base_1_1ConstraintObjective.html</anchorfile>
      <anchor>af15a1b51e3169a78d786f3bf6fa6b4cf</anchor>
      <arglist>(const State *s) const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstraintPtr</type>
      <name>constraint_</name>
      <anchorfile>classompl_1_1base_1_1ConstraintObjective.html</anchorfile>
      <anchor>ae996661a4d07105573e4fb79bc5581cf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::ConstraintPtr</name>
    <filename>classompl_1_1base_1_1ConstraintPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::base::Cost</name>
    <filename>classompl_1_1base_1_1Cost.html</filename>
    <member kind="function">
      <type></type>
      <name>Cost</name>
      <anchorfile>classompl_1_1base_1_1Cost.html</anchorfile>
      <anchor>a19bb3539532f4db2e35ee61151a8ade6</anchor>
      <arglist>(double v=0.0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>value</name>
      <anchorfile>classompl_1_1base_1_1Cost.html</anchorfile>
      <anchor>a3cd5c47c10a591badea945b4fc84014c</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::CostConvergenceTerminationCondition</name>
    <filename>classompl_1_1base_1_1CostConvergenceTerminationCondition.html</filename>
    <base>ompl::base::PlannerTerminationCondition</base>
    <member kind="function">
      <type></type>
      <name>CostConvergenceTerminationCondition</name>
      <anchorfile>classompl_1_1base_1_1CostConvergenceTerminationCondition.html</anchorfile>
      <anchor>a07cb180f828a509cf1e8cdd22e71b229</anchor>
      <arglist>(ProblemDefinitionPtr &amp;pdef, size_t solutionsWindow=10, double epsilon=0.1)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::DeterministicSequence</name>
    <filename>classompl_1_1base_1_1DeterministicSequence.html</filename>
    <member kind="function">
      <type></type>
      <name>DeterministicSequence</name>
      <anchorfile>classompl_1_1base_1_1DeterministicSequence.html</anchorfile>
      <anchor>a48e7007d774443c8ea2b6b9ee5e18f5b</anchor>
      <arglist>(unsigned int dimensions)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; double &gt;</type>
      <name>sample</name>
      <anchorfile>classompl_1_1base_1_1DeterministicSequence.html</anchorfile>
      <anchor>ac4e80947f97c7f18bf3bb24b091a9602</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::DeterministicStateSampler</name>
    <filename>classompl_1_1base_1_1DeterministicStateSampler.html</filename>
    <base>ompl::base::StateSampler</base>
    <member kind="function">
      <type></type>
      <name>DeterministicStateSampler</name>
      <anchorfile>classompl_1_1base_1_1DeterministicStateSampler.html</anchorfile>
      <anchor>abc97001613eb75a1c75eabf35e5eb6dd</anchor>
      <arglist>(const StateSpace *space, DeterministicSamplerType type=DeterministicSamplerType::HALTON)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DeterministicStateSampler</name>
      <anchorfile>classompl_1_1base_1_1DeterministicStateSampler.html</anchorfile>
      <anchor>a0c16ca9cecfcbfc6c5977cd38696580e</anchor>
      <arglist>(const StateSpace *space, std::shared_ptr&lt; DeterministicSequence &gt; sequence_ptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1DeterministicStateSampler.html</anchorfile>
      <anchor>a74fe7628b26aff6e61b11ae20b42d4e4</anchor>
      <arglist>(State *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleUniformNear</name>
      <anchorfile>classompl_1_1base_1_1DeterministicStateSampler.html</anchorfile>
      <anchor>a90aac007bdfb5b993090657090456bcd</anchor>
      <arglist>(State *, const State *, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleGaussian</name>
      <anchorfile>classompl_1_1base_1_1DeterministicStateSampler.html</anchorfile>
      <anchor>a4fbc99a868978508706bfe7809c9a08a</anchor>
      <arglist>(State *, const State *, double)</arglist>
    </member>
    <docanchor file="classompl_1_1base_1_1DeterministicStateSampler.html">DeterministicStateSampler</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::base::DiscreteMotionValidator</name>
    <filename>classompl_1_1base_1_1DiscreteMotionValidator.html</filename>
    <base>ompl::base::MotionValidator</base>
    <member kind="function">
      <type></type>
      <name>DiscreteMotionValidator</name>
      <anchorfile>classompl_1_1base_1_1DiscreteMotionValidator.html</anchorfile>
      <anchor>a8a24886d956a31326de16e97ef72382b</anchor>
      <arglist>(SpaceInformation *si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteMotionValidator</name>
      <anchorfile>classompl_1_1base_1_1DiscreteMotionValidator.html</anchorfile>
      <anchor>a206557c0c0bf3b3751ee09c1184f4b7b</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkMotion</name>
      <anchorfile>classompl_1_1base_1_1DiscreteMotionValidator.html</anchorfile>
      <anchor>abeb1288d3b72bf566b135961679d1252</anchor>
      <arglist>(const State *s1, const State *s2) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkMotion</name>
      <anchorfile>classompl_1_1base_1_1DiscreteMotionValidator.html</anchorfile>
      <anchor>a87e2f832830185eed98e9f7eaab2e06d</anchor>
      <arglist>(const State *s1, const State *s2, std::pair&lt; State *, double &gt; &amp;lastValid) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::DiscreteStateSampler</name>
    <filename>classompl_1_1base_1_1DiscreteStateSampler.html</filename>
    <base>ompl::base::StateSampler</base>
    <member kind="function">
      <type></type>
      <name>DiscreteStateSampler</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSampler.html</anchorfile>
      <anchor>ab087ba3cbdebc2a12fd5fd1f3c18cc53</anchor>
      <arglist>(const StateSpace *space)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSampler.html</anchorfile>
      <anchor>ab7b9ec6eb55500e000ffb8ec91d83950</anchor>
      <arglist>(State *state) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleUniformNear</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSampler.html</anchorfile>
      <anchor>aa5cc10e9d779dac0a38e4ede96b11cd8</anchor>
      <arglist>(State *state, const State *near, double distance) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleGaussian</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSampler.html</anchorfile>
      <anchor>a3ace7c4fa63d4a85ec940455cd647e3f</anchor>
      <arglist>(State *state, const State *mean, double stdDev) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::DiscreteStateSpace</name>
    <filename>classompl_1_1base_1_1DiscreteStateSpace.html</filename>
    <base>ompl::base::StateSpace</base>
    <class kind="class">ompl::base::DiscreteStateSpace::StateType</class>
    <member kind="function">
      <type></type>
      <name>DiscreteStateSpace</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>a3d3b1f110e2717437d5e20ce33185346</anchor>
      <arglist>(int lowerBound, int upperBound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDiscrete</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>ab85b9f2653ef5e543fafc9b6ff12e3e8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>a38c0ccfc98afd9eabc0004d903e5ad95</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>aef4574223140875e8d1b5b58c30e97f0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMeasure</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>a6c0f4229b5f260feb8ae0f79adf481a5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enforceBounds</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>afe6c530a2057cb1390f5457e94077016</anchor>
      <arglist>(State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>aa5f5b6b964bc8dfb7069e7e83639aeb4</anchor>
      <arglist>(const State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getSerializationLength</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>ac4e5b61e8857e6df7af2546c6666bc9e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>acaf6f5899a047f847bf3ef041734c798</anchor>
      <arglist>(void *serialization, const State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserialize</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>aaf79456ec2f19b96f9471ed1482ed597</anchor>
      <arglist>(State *state, const void *serialization) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyState</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>ab2f5ad05a7e2fdee6d04521214c4e72b</anchor>
      <arglist>(State *destination, const State *source) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>a43d4bc3423a31e3e9d22e37f5c5d1372</anchor>
      <arglist>(const State *state1, const State *state2) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalStates</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>a4bb7d39610fe9ebab78e1e8be631728c</anchor>
      <arglist>(const State *state1, const State *state2) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>a4fd31c60a1d9b3843a788d1aac343fe6</anchor>
      <arglist>(const State *from, const State *to, double t, State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>StateSamplerPtr</type>
      <name>allocDefaultStateSampler</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>a4ac07a37bb6aae025b4236aee1cdb353</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>allocState</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>ab74809f2b58e490294ab03b5d7ff4559</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeState</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>ab59340fafd08043503e889ffc056e319</anchor>
      <arglist>(State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printState</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>ad5cf37a88a7efc07bf83d89b29189d04</anchor>
      <arglist>(const State *state, std::ostream &amp;out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printSettings</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>a3ab911e7ca7d32ba75b2818971f52170</anchor>
      <arglist>(std::ostream &amp;out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerProjections</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>abf6fcfe5577fbeb843d45d98a7140f8f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getStateCount</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>a5c7ed56cdc4c5678c2b14962d0d0e199</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLowerBound</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>abff205c54f34ecc38118ba2ad9299f55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getUpperBound</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>a59680826a5df20d3267a6c1f6bf2d1bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBounds</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>a998e66139b0ecb28fbc2743ada6e9af5</anchor>
      <arglist>(int lowerBound, int upperBound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>a3a8fdaeb1a1c59cd7474ab8c52f53f4c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lowerBound_</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>a7174ff602c03b57979137dcca4b65e82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperBound_</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>a6ef735722c1289bf0a3fda7a6f6c2dd7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::DiscreteStateSpace::StateType</name>
    <filename>classompl_1_1base_1_1DiscreteStateSpace_1_1StateType.html</filename>
    <base>ompl::base::State</base>
    <member kind="variable">
      <type>int</type>
      <name>value</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace_1_1StateType.html</anchorfile>
      <anchor>a3a8b1ff9485b81db52b2695269ad15f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::DubinsMotionValidator</name>
    <filename>classompl_1_1base_1_1DubinsMotionValidator.html</filename>
    <base>ompl::base::MotionValidator</base>
    <member kind="function">
      <type>bool</type>
      <name>checkMotion</name>
      <anchorfile>classompl_1_1base_1_1DubinsMotionValidator.html</anchorfile>
      <anchor>a7cb40c204f715e8c330d429bedd7829a</anchor>
      <arglist>(const State *s1, const State *s2) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkMotion</name>
      <anchorfile>classompl_1_1base_1_1DubinsMotionValidator.html</anchorfile>
      <anchor>a06988c160e9e87169f3088c81121af30</anchor>
      <arglist>(const State *s1, const State *s2, std::pair&lt; State *, double &gt; &amp;lastValid) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::DubinsStateSpace</name>
    <filename>classompl_1_1base_1_1DubinsStateSpace.html</filename>
    <base>ompl::base::SE2StateSpace</base>
    <class kind="class">ompl::base::DubinsStateSpace::DubinsPath</class>
    <member kind="enumeration">
      <type></type>
      <name>DubinsPathSegmentType</name>
      <anchorfile>classompl_1_1base_1_1DubinsStateSpace.html</anchorfile>
      <anchor>a34eab50fdbefb94065b43fb84fe8bdb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMetricSpace</name>
      <anchorfile>classompl_1_1base_1_1DubinsStateSpace.html</anchorfile>
      <anchor>a3ea5e301eae03a105513032aa30dddb8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classompl_1_1base_1_1DubinsStateSpace.html</anchorfile>
      <anchor>a9a7d9eca0e776eeb2ff3f7fc261d8ff5</anchor>
      <arglist>(const State *state1, const State *state2) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1base_1_1DubinsStateSpace.html</anchorfile>
      <anchor>a2f3c7c9f95899a885a56be2793fcd6d3</anchor>
      <arglist>(const State *from, const State *to, double t, State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSymmetricDistance</name>
      <anchorfile>classompl_1_1base_1_1DubinsStateSpace.html</anchorfile>
      <anchor>a6be739b9f8544154c6fc30461446cf75</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSymmetricInterpolate</name>
      <anchorfile>classompl_1_1base_1_1DubinsStateSpace.html</anchorfile>
      <anchor>ac487bd0ac5e2802d2e142a099ce7c529</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sanityChecks</name>
      <anchorfile>classompl_1_1base_1_1DubinsStateSpace.html</anchorfile>
      <anchor>a689c11f23e07b206cd62c1d4f8b7bde4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>DubinsPath</type>
      <name>dubins</name>
      <anchorfile>classompl_1_1base_1_1DubinsStateSpace.html</anchorfile>
      <anchor>a5909422e4ecc51b21d197b826ef15aca</anchor>
      <arglist>(const State *state1, const State *state2) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DubinsPathSegmentType</type>
      <name>dubinsPathType</name>
      <anchorfile>classompl_1_1base_1_1DubinsStateSpace.html</anchorfile>
      <anchor>aebf8057b5f39407b3b9be39804a1c156</anchor>
      <arglist>[6][3]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>rho_</name>
      <anchorfile>classompl_1_1base_1_1DubinsStateSpace.html</anchorfile>
      <anchor>abaaaafabe7d3861288fae598e4f11a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isSymmetric_</name>
      <anchorfile>classompl_1_1base_1_1DubinsStateSpace.html</anchorfile>
      <anchor>adb79628e083c068506671524714fec49</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::DubinsStateSpace::DubinsPath</name>
    <filename>classompl_1_1base_1_1DubinsStateSpace_1_1DubinsPath.html</filename>
    <member kind="variable">
      <type>const DubinsPathSegmentType *</type>
      <name>type_</name>
      <anchorfile>classompl_1_1base_1_1DubinsStateSpace_1_1DubinsPath.html</anchorfile>
      <anchor>af858afdae77aab1792a7ccfc8e4fcb5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>length_</name>
      <anchorfile>classompl_1_1base_1_1DubinsStateSpace_1_1DubinsPath.html</anchorfile>
      <anchor>a30de504b0ca835d4db99234983743834</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>reverse_</name>
      <anchorfile>classompl_1_1base_1_1DubinsStateSpace_1_1DubinsPath.html</anchorfile>
      <anchor>a2e343bbf7753309853426bf7399c93a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::GaussianValidStateSampler</name>
    <filename>classompl_1_1base_1_1GaussianValidStateSampler.html</filename>
    <base>ompl::base::ValidStateSampler</base>
    <member kind="function">
      <type></type>
      <name>GaussianValidStateSampler</name>
      <anchorfile>classompl_1_1base_1_1GaussianValidStateSampler.html</anchorfile>
      <anchor>ac1e86d2bbad84c0d6ef8f8ba1bd6e80f</anchor>
      <arglist>(const SpaceInformation *si)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sample</name>
      <anchorfile>classompl_1_1base_1_1GaussianValidStateSampler.html</anchorfile>
      <anchor>a92be1a251d3da7125321fdeef70f993c</anchor>
      <arglist>(State *state) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sampleNear</name>
      <anchorfile>classompl_1_1base_1_1GaussianValidStateSampler.html</anchorfile>
      <anchor>a7623ccbfa18260c340a9711d134bb67a</anchor>
      <arglist>(State *state, const State *near, double distance) override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getStdDev</name>
      <anchorfile>classompl_1_1base_1_1GaussianValidStateSampler.html</anchorfile>
      <anchor>aec1aec4d3f1190ef85224c4e939ec795</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStdDev</name>
      <anchorfile>classompl_1_1base_1_1GaussianValidStateSampler.html</anchorfile>
      <anchor>aa82bfdfce3b00d6ea22a02c570356588</anchor>
      <arglist>(double stddev)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1base_1_1GaussianValidStateSampler.html</anchorfile>
      <anchor>a48a0f8607cf0581ad8e991b49cf494f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>stddev_</name>
      <anchorfile>classompl_1_1base_1_1GaussianValidStateSampler.html</anchorfile>
      <anchor>a8ba0b055b4a9c2c1bf1809b5fff577b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::GenericParam</name>
    <filename>classompl_1_1base_1_1GenericParam.html</filename>
    <member kind="function">
      <type></type>
      <name>GenericParam</name>
      <anchorfile>classompl_1_1base_1_1GenericParam.html</anchorfile>
      <anchor>ab263f35eb1d30b1015188a4d840a966e</anchor>
      <arglist>(std::string name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classompl_1_1base_1_1GenericParam.html</anchorfile>
      <anchor>adc559d6be02a62ecc8b2c1bcf58515c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classompl_1_1base_1_1GenericParam.html</anchorfile>
      <anchor>afef9c614152e54f0622ad820ed6e216e</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setValue</name>
      <anchorfile>classompl_1_1base_1_1GenericParam.html</anchorfile>
      <anchor>ac86966b2dbc76ade5f19832315440972</anchor>
      <arglist>(const std::string &amp;value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getValue</name>
      <anchorfile>classompl_1_1base_1_1GenericParam.html</anchorfile>
      <anchor>a1e887eea4d9cfb443a749a3621701cab</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>GenericParam &amp;</type>
      <name>operator=</name>
      <anchorfile>classompl_1_1base_1_1GenericParam.html</anchorfile>
      <anchor>a60aff425e9f64795991d6a0da3c437ad</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRangeSuggestion</name>
      <anchorfile>classompl_1_1base_1_1GenericParam.html</anchorfile>
      <anchor>a78b8f0256bb82994ba01107ddb23afab</anchor>
      <arglist>(const std::string &amp;rangeSuggestion)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getRangeSuggestion</name>
      <anchorfile>classompl_1_1base_1_1GenericParam.html</anchorfile>
      <anchor>ae5d0c6e5545dbdf6cfb252bfc6e59493</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>classompl_1_1base_1_1GenericParam.html</anchorfile>
      <anchor>a4aa3a92cdf3ce19efdec17284ac460ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>rangeSuggestion_</name>
      <anchorfile>classompl_1_1base_1_1GenericParam.html</anchorfile>
      <anchor>adfcb7422d41e2a863c604bc6b28e892e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::Goal</name>
    <filename>classompl_1_1base_1_1Goal.html</filename>
    <member kind="function">
      <type></type>
      <name>Goal</name>
      <anchorfile>classompl_1_1base_1_1Goal.html</anchorfile>
      <anchor>ae3898b85325b9ef08e56eab36c7e73c9</anchor>
      <arglist>(SpaceInformationPtr si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Goal</name>
      <anchorfile>classompl_1_1base_1_1Goal.html</anchorfile>
      <anchor>a6cb5c3bcea09ac131c381f4241c6685c</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>as</name>
      <anchorfile>classompl_1_1base_1_1Goal.html</anchorfile>
      <anchor>a79bd15b3c533dbf5c0290bfd41e1db9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>as</name>
      <anchorfile>classompl_1_1base_1_1Goal.html</anchorfile>
      <anchor>ac8fbda15a24dbc4e3e67d79908efed52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GoalType</type>
      <name>getType</name>
      <anchorfile>classompl_1_1base_1_1Goal.html</anchorfile>
      <anchor>ace28f0de8842994b0eb536f6c5986101</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasType</name>
      <anchorfile>classompl_1_1base_1_1Goal.html</anchorfile>
      <anchor>a6858cf269f15fe8164170e541f1ec45b</anchor>
      <arglist>(GoalType type) const</arglist>
    </member>
    <member kind="function">
      <type>const SpaceInformationPtr &amp;</type>
      <name>getSpaceInformation</name>
      <anchorfile>classompl_1_1base_1_1Goal.html</anchorfile>
      <anchor>aa5ff46c2697ad623a65108d86ac777b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isSatisfied</name>
      <anchorfile>classompl_1_1base_1_1Goal.html</anchorfile>
      <anchor>a02ba4ba487714cd4e8f67c9d4164d0ec</anchor>
      <arglist>(const State *st) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSatisfied</name>
      <anchorfile>classompl_1_1base_1_1Goal.html</anchorfile>
      <anchor>ac45ea8e10f11beec4d99e809dc66fd08</anchor>
      <arglist>(const State *st, double *distance) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isStartGoalPairValid</name>
      <anchorfile>classompl_1_1base_1_1Goal.html</anchorfile>
      <anchor>afc074067701a07f562da8cbb58c1f5a8</anchor>
      <arglist>(const State *, const State *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classompl_1_1base_1_1Goal.html</anchorfile>
      <anchor>a31921f0b9a9922226f1578718f4bbb1f</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GoalType</type>
      <name>type_</name>
      <anchorfile>classompl_1_1base_1_1Goal.html</anchorfile>
      <anchor>af5e22736c4d1335c4edf92d8c76eaa02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SpaceInformationPtr</type>
      <name>si_</name>
      <anchorfile>classompl_1_1base_1_1Goal.html</anchorfile>
      <anchor>a2568592d1968413e2759564c4f6511b0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::GoalLazySamples</name>
    <filename>classompl_1_1base_1_1GoalLazySamples.html</filename>
    <base>ompl::base::GoalStates</base>
    <member kind="typedef">
      <type>std::function&lt; void(const base::State *)&gt;</type>
      <name>NewStateCallbackFn</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>af2be142f7ee344b86731e64acc5d8ff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GoalLazySamples</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>a09d1b00d2d4f563257af777f3dbbe03d</anchor>
      <arglist>(const SpaceInformationPtr &amp;si, GoalSamplingFn samplerFunc, bool autoStart=true, double minDist=std::numeric_limits&lt; double &gt;::epsilon())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleGoal</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>a484b6893f2f523f9b941aef9c6a13773</anchor>
      <arglist>(State *st) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceGoal</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>a56a1c9e072717136c25e88e384dfc0c6</anchor>
      <arglist>(const State *st) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addState</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>a0206f1b4faf1401118f5634e3bf871d8</anchor>
      <arglist>(const State *st) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startSampling</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>a4c4cef910c1c1cb0dca35467cb2922a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopSampling</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>a660b9c56424ea5ead3071852b334c00a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSampling</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>a4e2939fdfd06fd86142bbd58976816c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinNewSampleDistance</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>ae19f97c741f2c0f48c7e3c88b16d432f</anchor>
      <arglist>(double dist)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMinNewSampleDistance</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>a86ed55b60068d945b1899d5d605176f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>samplingAttemptsCount</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>a1320684af42c5cf1cfd38a44584b265a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNewStateCallback</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>a9994712b27abc015ede61ddeda8b7c40</anchor>
      <arglist>(const NewStateCallbackFn &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addStateIfDifferent</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>aa7015a082cbebc65f76d57cc7fc8521a</anchor>
      <arglist>(const State *st, double minDistance)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>couldSample</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>a8a0d707ef0915500cc1404c4e5ba4d24</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasStates</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>ae9de35350e4ada05a138ca7223bc4168</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>ac92a1e626439d62cec13418b09fad785</anchor>
      <arglist>(unsigned int index) const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getStateCount</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>aa341629e1e024a48bfb0ab403499361b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>a1d9c09b75e3c0b40d3f76273b788638c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>maxSampleCount</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>ada14ad90be152f52ac8601a993de7c0a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>goalSamplingThread</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>a3d1575a83c63febec869b3cbf598a43f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::mutex</type>
      <name>lock_</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>acec0373afd2076ceb38bde486436aa6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GoalSamplingFn</type>
      <name>samplerFunc_</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>ad3ce46e7898f2f001fcdd07a23b09987</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>terminateSamplingThread_</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>ac8bfb5596555a8f1ee48c8c75ee93205</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::thread *</type>
      <name>samplingThread_</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>afaae834bc6e996bc4ac5a4eb60d702aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>samplingAttempts_</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>af913f060090e17115082b6a44afb5165</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>minDist_</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>a2872e6f726b36c7140d88b81921a5a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NewStateCallbackFn</type>
      <name>callback_</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>a7a0e26aafce1ce507d4453a5b3023cf9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::GoalPtr</name>
    <filename>classompl_1_1base_1_1GoalPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::base::GoalRegion</name>
    <filename>classompl_1_1base_1_1GoalRegion.html</filename>
    <base>ompl::base::Goal</base>
    <member kind="function">
      <type></type>
      <name>GoalRegion</name>
      <anchorfile>classompl_1_1base_1_1GoalRegion.html</anchorfile>
      <anchor>a8582e4a9183af6341efeec3a3d52e91b</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>classompl_1_1base_1_1GoalRegion.html</anchorfile>
      <anchor>a3500254fe74f092fdd86cb8b61c48467</anchor>
      <arglist>(const State *st) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>classompl_1_1base_1_1GoalRegion.html</anchorfile>
      <anchor>ab181f2b4e83c31c7c1220722618acdd8</anchor>
      <arglist>(const State *st, double *distance) const override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>distanceGoal</name>
      <anchorfile>classompl_1_1base_1_1GoalRegion.html</anchorfile>
      <anchor>a4c7a9ab388d762c76711790af0ba53ea</anchor>
      <arglist>(const State *st) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classompl_1_1base_1_1GoalRegion.html</anchorfile>
      <anchor>a52bed1d55665cbd980d63e1d42611bd2</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setThreshold</name>
      <anchorfile>classompl_1_1base_1_1GoalRegion.html</anchorfile>
      <anchor>a66faea81767a0772924082816b88e63f</anchor>
      <arglist>(double threshold)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getThreshold</name>
      <anchorfile>classompl_1_1base_1_1GoalRegion.html</anchorfile>
      <anchor>a66e372802930500fceac120760e4dff2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>threshold_</name>
      <anchorfile>classompl_1_1base_1_1GoalRegion.html</anchorfile>
      <anchor>a2f7fad7260906a91d4f59f39b1d96199</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::GoalSampleableRegion</name>
    <filename>classompl_1_1base_1_1GoalSampleableRegion.html</filename>
    <base>ompl::base::GoalRegion</base>
    <member kind="function">
      <type></type>
      <name>GoalSampleableRegion</name>
      <anchorfile>classompl_1_1base_1_1GoalSampleableRegion.html</anchorfile>
      <anchor>a9faa48988af0b30f168c2042a3877936</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sampleGoal</name>
      <anchorfile>classompl_1_1base_1_1GoalSampleableRegion.html</anchorfile>
      <anchor>a11c9d2c4d9d5ddbeb8c30e531d1efc5f</anchor>
      <arglist>(State *st) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>maxSampleCount</name>
      <anchorfile>classompl_1_1base_1_1GoalSampleableRegion.html</anchorfile>
      <anchor>ae0625cd4b7646d600244b79da9101f0d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canSample</name>
      <anchorfile>classompl_1_1base_1_1GoalSampleableRegion.html</anchorfile>
      <anchor>a401051f3386dc9100781cd49030ff894</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>couldSample</name>
      <anchorfile>classompl_1_1base_1_1GoalSampleableRegion.html</anchorfile>
      <anchor>a9a223491193090090ff02cdf45cd3cbc</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::GoalSpace</name>
    <filename>classompl_1_1base_1_1GoalSpace.html</filename>
    <base>ompl::base::GoalSampleableRegion</base>
    <member kind="function">
      <type></type>
      <name>GoalSpace</name>
      <anchorfile>classompl_1_1base_1_1GoalSpace.html</anchorfile>
      <anchor>a473e413fb9cb01da9ffc929e9c4ed14f</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleGoal</name>
      <anchorfile>classompl_1_1base_1_1GoalSpace.html</anchorfile>
      <anchor>a19372e6cbc3f5bd80c2a6cf8ca6bd97c</anchor>
      <arglist>(State *st) const override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>maxSampleCount</name>
      <anchorfile>classompl_1_1base_1_1GoalSpace.html</anchorfile>
      <anchor>a84596193bff3741b1ae7532aa46fece1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceGoal</name>
      <anchorfile>classompl_1_1base_1_1GoalSpace.html</anchorfile>
      <anchor>a92e2bed08633911de80bfdea116c703d</anchor>
      <arglist>(const State *st) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classompl_1_1base_1_1GoalSpace.html</anchorfile>
      <anchor>a952795286c65636c17f72a386d9bc0fb</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpace</name>
      <anchorfile>classompl_1_1base_1_1GoalSpace.html</anchorfile>
      <anchor>ade89d2a2a576b68dbbd0fe0f17b7a0b1</anchor>
      <arglist>(const StateSpacePtr space)</arglist>
    </member>
    <member kind="function">
      <type>StateSpacePtr</type>
      <name>getSpace</name>
      <anchorfile>classompl_1_1base_1_1GoalSpace.html</anchorfile>
      <anchor>a9fc653a853e5be26b18ee0baebf6a235</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StateSpacePtr</type>
      <name>goalSpace_</name>
      <anchorfile>classompl_1_1base_1_1GoalSpace.html</anchorfile>
      <anchor>abca325cc62a45e6ad339ffe391abc34c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StateSamplerPtr</type>
      <name>goalSampler_</name>
      <anchorfile>classompl_1_1base_1_1GoalSpace.html</anchorfile>
      <anchor>a606c45d40bb5df88632dca5244b17a0a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::GoalState</name>
    <filename>classompl_1_1base_1_1GoalState.html</filename>
    <base>ompl::base::GoalSampleableRegion</base>
    <member kind="function">
      <type></type>
      <name>GoalState</name>
      <anchorfile>classompl_1_1base_1_1GoalState.html</anchorfile>
      <anchor>a4622c973b5b2aadfaccb94a96266a726</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleGoal</name>
      <anchorfile>classompl_1_1base_1_1GoalState.html</anchorfile>
      <anchor>aa6adddbd7c45a093c6c6068889f67f31</anchor>
      <arglist>(State *st) const override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>maxSampleCount</name>
      <anchorfile>classompl_1_1base_1_1GoalState.html</anchorfile>
      <anchor>a09aa8539dda9d6ac692a7313674253b9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceGoal</name>
      <anchorfile>classompl_1_1base_1_1GoalState.html</anchorfile>
      <anchor>ab63d3552679541ba86d1745efd83f274</anchor>
      <arglist>(const State *st) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classompl_1_1base_1_1GoalState.html</anchorfile>
      <anchor>ada0f25cd9e2a7a19381dc4001a0368f7</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classompl_1_1base_1_1GoalState.html</anchorfile>
      <anchor>a4ffb6cc48229964b4cc86066dda3e649</anchor>
      <arglist>(const State *st)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classompl_1_1base_1_1GoalState.html</anchorfile>
      <anchor>a8217875a352e3e9c8ed0de422d60ae9d</anchor>
      <arglist>(const ScopedState&lt;&gt; &amp;st)</arglist>
    </member>
    <member kind="function">
      <type>const State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1base_1_1GoalState.html</anchorfile>
      <anchor>a6c44aa2e3c6b7076c828e3a3961c233e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1base_1_1GoalState.html</anchorfile>
      <anchor>aa8616cd760d47cb05fd64166dcc08331</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>State *</type>
      <name>state_</name>
      <anchorfile>classompl_1_1base_1_1GoalState.html</anchorfile>
      <anchor>ada5f219321f4ef763ee2c718a5e6ee35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::GoalStates</name>
    <filename>classompl_1_1base_1_1GoalStates.html</filename>
    <base>ompl::base::GoalSampleableRegion</base>
    <member kind="function">
      <type></type>
      <name>GoalStates</name>
      <anchorfile>classompl_1_1base_1_1GoalStates.html</anchorfile>
      <anchor>ac1431173837a911a7b4b32d7e7f86dbc</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleGoal</name>
      <anchorfile>classompl_1_1base_1_1GoalStates.html</anchorfile>
      <anchor>a6f1a08574b3b85363b48cf27ef285159</anchor>
      <arglist>(State *st) const override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>maxSampleCount</name>
      <anchorfile>classompl_1_1base_1_1GoalStates.html</anchorfile>
      <anchor>a1ffb5ba567de8622150f30f4e7f5767a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceGoal</name>
      <anchorfile>classompl_1_1base_1_1GoalStates.html</anchorfile>
      <anchor>a08c766eb9d7d6f0a66dd6e12c38c8d8f</anchor>
      <arglist>(const State *st) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classompl_1_1base_1_1GoalStates.html</anchorfile>
      <anchor>a7c32926d9e3e3512c9a6f0cf60786ac7</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addState</name>
      <anchorfile>classompl_1_1base_1_1GoalStates.html</anchorfile>
      <anchor>a6cf378a86fd25680dfaa5b2446598d55</anchor>
      <arglist>(const State *st)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addState</name>
      <anchorfile>classompl_1_1base_1_1GoalStates.html</anchorfile>
      <anchor>af43dd0177bdc390dc3d98aab04003238</anchor>
      <arglist>(const ScopedState&lt;&gt; &amp;st)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1base_1_1GoalStates.html</anchorfile>
      <anchor>a868450f0d56ec4ad679680acb947f3da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasStates</name>
      <anchorfile>classompl_1_1base_1_1GoalStates.html</anchorfile>
      <anchor>a174c3dca65dee8062a49c8ad3397fc27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1base_1_1GoalStates.html</anchorfile>
      <anchor>ad6937bc94b795503e0a79bd861b029de</anchor>
      <arglist>(unsigned int index) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::size_t</type>
      <name>getStateCount</name>
      <anchorfile>classompl_1_1base_1_1GoalStates.html</anchorfile>
      <anchor>a68be03f42d39bdf9cf8bd4812d50aab9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; State * &gt;</type>
      <name>states_</name>
      <anchorfile>classompl_1_1base_1_1GoalStates.html</anchorfile>
      <anchor>a4596d3db355a814a9ebfe6f3362dd46a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::HaltonSequence</name>
    <filename>classompl_1_1base_1_1HaltonSequence.html</filename>
    <base>ompl::base::DeterministicSequence</base>
    <member kind="function">
      <type></type>
      <name>HaltonSequence</name>
      <anchorfile>classompl_1_1base_1_1HaltonSequence.html</anchorfile>
      <anchor>a91c6cfd4b5e0b3b6e2475de582c971c0</anchor>
      <arglist>(unsigned int dimensions)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HaltonSequence</name>
      <anchorfile>classompl_1_1base_1_1HaltonSequence.html</anchorfile>
      <anchor>acd06af6dafd0a1f59718771fb532f43c</anchor>
      <arglist>(unsigned int dimensions, std::vector&lt; unsigned int &gt; bases)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>sample</name>
      <anchorfile>classompl_1_1base_1_1HaltonSequence.html</anchorfile>
      <anchor>a002fc8202be5ae3eb54a592d9091b5f5</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::HaltonSequence1D</name>
    <filename>classompl_1_1base_1_1HaltonSequence1D.html</filename>
    <member kind="function">
      <type></type>
      <name>HaltonSequence1D</name>
      <anchorfile>classompl_1_1base_1_1HaltonSequence1D.html</anchorfile>
      <anchor>aa39e97a16c1b426f41e90a3b63b6e0cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HaltonSequence1D</name>
      <anchorfile>classompl_1_1base_1_1HaltonSequence1D.html</anchorfile>
      <anchor>a446c07578c1ef6e64703163eae8fdf8f</anchor>
      <arglist>(unsigned int base)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBase</name>
      <anchorfile>classompl_1_1base_1_1HaltonSequence1D.html</anchorfile>
      <anchor>a48eacd8ae6308e95ca1c634e174da06e</anchor>
      <arglist>(unsigned int base)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sample</name>
      <anchorfile>classompl_1_1base_1_1HaltonSequence1D.html</anchorfile>
      <anchor>a4e6b5280839a3be24dbf12ac92ff3a49</anchor>
      <arglist>()</arglist>
    </member>
    <docanchor file="classompl_1_1base_1_1HaltonSequence1D.html">HaltonSequence1D</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::base::InformedSampler</name>
    <filename>classompl_1_1base_1_1InformedSampler.html</filename>
    <member kind="function">
      <type></type>
      <name>InformedSampler</name>
      <anchorfile>classompl_1_1base_1_1InformedSampler.html</anchorfile>
      <anchor>a120c9a7334392ccf1c8afa5fe6c49966</anchor>
      <arglist>(const ProblemDefinitionPtr &amp;probDefn, unsigned int maxNumberCalls)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1InformedSampler.html</anchorfile>
      <anchor>a2d32eb1cc581d4e3b23c2d09d94f4f84</anchor>
      <arglist>(State *statePtr, const Cost &amp;maxCost)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1InformedSampler.html</anchorfile>
      <anchor>a396b50e8d31a47f5d28bc9552aa33246</anchor>
      <arglist>(State *statePtr, const Cost &amp;minCost, const Cost &amp;maxCost)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasInformedMeasure</name>
      <anchorfile>classompl_1_1base_1_1InformedSampler.html</anchorfile>
      <anchor>a800a1bcbba0d51b2a53fcdbd828a2975</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getInformedMeasure</name>
      <anchorfile>classompl_1_1base_1_1InformedSampler.html</anchorfile>
      <anchor>a1c09d81b80ea8f75e19efc85823cc092</anchor>
      <arglist>(const Cost &amp;currentCost) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getInformedMeasure</name>
      <anchorfile>classompl_1_1base_1_1InformedSampler.html</anchorfile>
      <anchor>a3cf8af7d2c1b37cae332c6aa19869d45</anchor>
      <arglist>(const Cost &amp;minCost, const Cost &amp;maxCost) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cost</type>
      <name>heuristicSolnCost</name>
      <anchorfile>classompl_1_1base_1_1InformedSampler.html</anchorfile>
      <anchor>a373b10b1f993913e9ffed99ddba45e3c</anchor>
      <arglist>(const State *statePtr) const</arglist>
    </member>
    <member kind="function">
      <type>ProblemDefinitionPtr</type>
      <name>getProblemDefn</name>
      <anchorfile>classompl_1_1base_1_1InformedSampler.html</anchorfile>
      <anchor>a91ed7244554e01d76e2ea42325557240</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMaxNumberOfIters</name>
      <anchorfile>classompl_1_1base_1_1InformedSampler.html</anchorfile>
      <anchor>a22afa402851518d8ad8a398718c31a9f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ProblemDefinitionPtr</type>
      <name>probDefn_</name>
      <anchorfile>classompl_1_1base_1_1InformedSampler.html</anchorfile>
      <anchor>a504d725e8178d40a097202b7b39ab84e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OptimizationObjectivePtr</type>
      <name>opt_</name>
      <anchorfile>classompl_1_1base_1_1InformedSampler.html</anchorfile>
      <anchor>a1ef1b4a722b212618179a424c4720911</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StateSpacePtr</type>
      <name>space_</name>
      <anchorfile>classompl_1_1base_1_1InformedSampler.html</anchorfile>
      <anchor>af51abcd9f7e177cdc39e2c714bded74f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numIters_</name>
      <anchorfile>classompl_1_1base_1_1InformedSampler.html</anchorfile>
      <anchor>a62aee37b97016c751e6eea4ac0a72783</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::InformedStateSampler</name>
    <filename>classompl_1_1base_1_1InformedStateSampler.html</filename>
    <base>ompl::base::StateSampler</base>
    <member kind="typedef">
      <type>std::function&lt; Cost()&gt;</type>
      <name>GetCurrentCostFunc</name>
      <anchorfile>classompl_1_1base_1_1InformedStateSampler.html</anchorfile>
      <anchor>a30bd695c4305120da65eae3f0d7b4421</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InformedStateSampler</name>
      <anchorfile>classompl_1_1base_1_1InformedStateSampler.html</anchorfile>
      <anchor>ab68fe20aad707ae747ca129a0d7adb0b</anchor>
      <arglist>(const ProblemDefinitionPtr &amp;probDefn, unsigned int maxNumberCalls, const GetCurrentCostFunc &amp;costFunc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InformedStateSampler</name>
      <anchorfile>classompl_1_1base_1_1InformedStateSampler.html</anchorfile>
      <anchor>a30a95df17c2960e732191cbdaa3fab87</anchor>
      <arglist>(const ProblemDefinitionPtr &amp;probDefn, const GetCurrentCostFunc &amp;costFunc, const InformedSamplerPtr &amp;infSampler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1InformedStateSampler.html</anchorfile>
      <anchor>a24c344953159e58be5ea0ce24dcbbab6</anchor>
      <arglist>(State *statePtr) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleUniformNear</name>
      <anchorfile>classompl_1_1base_1_1InformedStateSampler.html</anchorfile>
      <anchor>a643fb9a25f8dc638dffa6a75be878230</anchor>
      <arglist>(State *statePtr, const State *near, double distance) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleGaussian</name>
      <anchorfile>classompl_1_1base_1_1InformedStateSampler.html</anchorfile>
      <anchor>af04761173d9692b6ceaf9d18bf475272</anchor>
      <arglist>(State *statePtr, const State *mean, double stdDev) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::IterationTerminationCondition</name>
    <filename>classompl_1_1base_1_1IterationTerminationCondition.html</filename>
    <member kind="function">
      <type></type>
      <name>IterationTerminationCondition</name>
      <anchorfile>classompl_1_1base_1_1IterationTerminationCondition.html</anchorfile>
      <anchor>ad0a2a20d4f575fa2de579dd5a78b063a</anchor>
      <arglist>(unsigned int numIterations)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eval</name>
      <anchorfile>classompl_1_1base_1_1IterationTerminationCondition.html</anchorfile>
      <anchor>a49951c7149298bdb4f010b72f9e83490</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classompl_1_1base_1_1IterationTerminationCondition.html</anchorfile>
      <anchor>a246b9ca7e6b2f86a39136f828aeea19c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator PlannerTerminationCondition</name>
      <anchorfile>classompl_1_1base_1_1IterationTerminationCondition.html</anchorfile>
      <anchor>aaefe7d1f60c659d66b73c547c59edb1b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::LightningRetrieveRepairPtr</name>
    <filename>classompl_1_1base_1_1LightningRetrieveRepairPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::base::MaximizeClearanceValidStateSampler</name>
    <filename>classompl_1_1base_1_1MaximizeClearanceValidStateSampler.html</filename>
    <base>ompl::base::ValidStateSampler</base>
    <member kind="function">
      <type></type>
      <name>MaximizeClearanceValidStateSampler</name>
      <anchorfile>classompl_1_1base_1_1MaximizeClearanceValidStateSampler.html</anchorfile>
      <anchor>aa2e74681d93fae719ec4bdfa2aa972ef</anchor>
      <arglist>(const SpaceInformation *si)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sample</name>
      <anchorfile>classompl_1_1base_1_1MaximizeClearanceValidStateSampler.html</anchorfile>
      <anchor>a32e3c57975a9d682344597bb18fc6a2b</anchor>
      <arglist>(State *state) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sampleNear</name>
      <anchorfile>classompl_1_1base_1_1MaximizeClearanceValidStateSampler.html</anchorfile>
      <anchor>a015e1bc1d5cc7188d6126cd2d7a5f4e8</anchor>
      <arglist>(State *state, const State *near, double distance) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNrImproveAttempts</name>
      <anchorfile>classompl_1_1base_1_1MaximizeClearanceValidStateSampler.html</anchorfile>
      <anchor>aefacb7239f457714144e3ccfa4e0ccce</anchor>
      <arglist>(unsigned int attempts)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNrImproveAttempts</name>
      <anchorfile>classompl_1_1base_1_1MaximizeClearanceValidStateSampler.html</anchorfile>
      <anchor>a552ba1216fdab7ddbffc204b3f6d0daf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1base_1_1MaximizeClearanceValidStateSampler.html</anchorfile>
      <anchor>a368e17353f06f39a33953f82f2e0c1e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>improveAttempts_</name>
      <anchorfile>classompl_1_1base_1_1MaximizeClearanceValidStateSampler.html</anchorfile>
      <anchor>a2f1941ee63effda2c8977ed6d5aafb9f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::MaximizeMinClearanceObjective</name>
    <filename>classompl_1_1base_1_1MaximizeMinClearanceObjective.html</filename>
    <base>ompl::base::MinimaxObjective</base>
    <member kind="function">
      <type>Cost</type>
      <name>stateCost</name>
      <anchorfile>classompl_1_1base_1_1MaximizeMinClearanceObjective.html</anchorfile>
      <anchor>a67b5c3e1b8b26595a24db257b008dede</anchor>
      <arglist>(const State *s) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCostBetterThan</name>
      <anchorfile>classompl_1_1base_1_1MaximizeMinClearanceObjective.html</anchorfile>
      <anchor>a62b9839c6544994af4d4361c09f25fbf</anchor>
      <arglist>(Cost c1, Cost c2) const override</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>identityCost</name>
      <anchorfile>classompl_1_1base_1_1MaximizeMinClearanceObjective.html</anchorfile>
      <anchor>ad327d2927c382e49834cf748faadc228</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>infiniteCost</name>
      <anchorfile>classompl_1_1base_1_1MaximizeMinClearanceObjective.html</anchorfile>
      <anchor>a0f35de2aa93bd0370bcc382ec8328c3c</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::MechanicalWorkOptimizationObjective</name>
    <filename>classompl_1_1base_1_1MechanicalWorkOptimizationObjective.html</filename>
    <base>ompl::base::OptimizationObjective</base>
    <member kind="function">
      <type></type>
      <name>MechanicalWorkOptimizationObjective</name>
      <anchorfile>classompl_1_1base_1_1MechanicalWorkOptimizationObjective.html</anchorfile>
      <anchor>a0eae6572471af6a9bae53ca7aee983f3</anchor>
      <arglist>(const SpaceInformationPtr &amp;si, double pathLengthWeight=0.00001)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPathLengthWeight</name>
      <anchorfile>classompl_1_1base_1_1MechanicalWorkOptimizationObjective.html</anchorfile>
      <anchor>a4eb9be3c6baca4f17406c3426ee5fd77</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>stateCost</name>
      <anchorfile>classompl_1_1base_1_1MechanicalWorkOptimizationObjective.html</anchorfile>
      <anchor>a9c7d082f72cad58b02b08a933fc97be6</anchor>
      <arglist>(const State *s) const override</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>motionCost</name>
      <anchorfile>classompl_1_1base_1_1MechanicalWorkOptimizationObjective.html</anchorfile>
      <anchor>a0a1b18c0020c49e89f5b2cb089cf4b08</anchor>
      <arglist>(const State *s1, const State *s2) const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>pathLengthWeight_</name>
      <anchorfile>classompl_1_1base_1_1MechanicalWorkOptimizationObjective.html</anchorfile>
      <anchor>a6011d919c54dd41a62aa08a968cb5caf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::MinimaxObjective</name>
    <filename>classompl_1_1base_1_1MinimaxObjective.html</filename>
    <base>ompl::base::OptimizationObjective</base>
    <member kind="function">
      <type>Cost</type>
      <name>stateCost</name>
      <anchorfile>classompl_1_1base_1_1MinimaxObjective.html</anchorfile>
      <anchor>a73b5756f02b54f2aacb9559cb6d579ab</anchor>
      <arglist>(const State *s) const override</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>motionCost</name>
      <anchorfile>classompl_1_1base_1_1MinimaxObjective.html</anchorfile>
      <anchor>ab89469a2f9e8796a30900a0ca62725e4</anchor>
      <arglist>(const State *s1, const State *s2) const override</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>combineCosts</name>
      <anchorfile>classompl_1_1base_1_1MinimaxObjective.html</anchorfile>
      <anchor>a14cb24da7fdae3d0bce23d14b8dd5391</anchor>
      <arglist>(Cost c1, Cost c2) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::MinimumClearanceValidStateSampler</name>
    <filename>classompl_1_1base_1_1MinimumClearanceValidStateSampler.html</filename>
    <base>ompl::base::ValidStateSampler</base>
    <member kind="function">
      <type></type>
      <name>MinimumClearanceValidStateSampler</name>
      <anchorfile>classompl_1_1base_1_1MinimumClearanceValidStateSampler.html</anchorfile>
      <anchor>a5f0578d92698bf8e1d11f02d7de765a0</anchor>
      <arglist>(const SpaceInformation *si)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sample</name>
      <anchorfile>classompl_1_1base_1_1MinimumClearanceValidStateSampler.html</anchorfile>
      <anchor>afb7386ac9a1cf89a943e75244f0dfba0</anchor>
      <arglist>(State *state) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sampleNear</name>
      <anchorfile>classompl_1_1base_1_1MinimumClearanceValidStateSampler.html</anchorfile>
      <anchor>aaef4c422539e0c592c7305279ed23924</anchor>
      <arglist>(State *state, const State *near, double distance) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinimumObstacleClearance</name>
      <anchorfile>classompl_1_1base_1_1MinimumClearanceValidStateSampler.html</anchorfile>
      <anchor>a7e2fee6ea081b9da8adba8308681d6cd</anchor>
      <arglist>(double clearance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMinimumObstacleClearance</name>
      <anchorfile>classompl_1_1base_1_1MinimumClearanceValidStateSampler.html</anchorfile>
      <anchor>a64e32dd2a54daa48bd9c6896db66c647</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1base_1_1MinimumClearanceValidStateSampler.html</anchorfile>
      <anchor>a7a2ab03527b127a5a8210903940db191</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>clearance_</name>
      <anchorfile>classompl_1_1base_1_1MinimumClearanceValidStateSampler.html</anchorfile>
      <anchor>abb3523b75b220e58e4a8ab0759b98857</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::MorseEnvironment</name>
    <filename>classompl_1_1base_1_1MorseEnvironment.html</filename>
    <member kind="function">
      <type>void</type>
      <name>getControlBounds</name>
      <anchorfile>classompl_1_1base_1_1MorseEnvironment.html</anchorfile>
      <anchor>aee8723c1f126f02a39e5a7a979db3ddb</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;lower, std::vector&lt; double &gt; &amp;upper) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>readState</name>
      <anchorfile>classompl_1_1base_1_1MorseEnvironment.html</anchorfile>
      <anchor>ae063bf2576ad6a4576b0d1742ef442aa</anchor>
      <arglist>(State *state)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeState</name>
      <anchorfile>classompl_1_1base_1_1MorseEnvironment.html</anchorfile>
      <anchor>ab4842a70d977bc492a5c8fa7d795dc01</anchor>
      <arglist>(const State *state)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>applyControl</name>
      <anchorfile>classompl_1_1base_1_1MorseEnvironment.html</anchorfile>
      <anchor>a4b3c439ab43dd8e5d278f7ea5076a575</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;control)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>worldStep</name>
      <anchorfile>classompl_1_1base_1_1MorseEnvironment.html</anchorfile>
      <anchor>a11931ee0b4b7d7e15d1dd2ede46cd248</anchor>
      <arglist>(const double dur)=0</arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>controlDim_</name>
      <anchorfile>classompl_1_1base_1_1MorseEnvironment.html</anchorfile>
      <anchor>a84bae780e232819bac041a1d4634853c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::vector&lt; double &gt;</type>
      <name>controlBounds_</name>
      <anchorfile>classompl_1_1base_1_1MorseEnvironment.html</anchorfile>
      <anchor>a1d6be66876b90ff9ee11cc7bbefd2f3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>rigidBodies_</name>
      <anchorfile>classompl_1_1base_1_1MorseEnvironment.html</anchorfile>
      <anchor>ae4d62642f96d5fbd4b79481d84147097</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>positionBounds_</name>
      <anchorfile>classompl_1_1base_1_1MorseEnvironment.html</anchorfile>
      <anchor>a89c0286b2bc1684e53919065e70dcc9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>linvelBounds_</name>
      <anchorfile>classompl_1_1base_1_1MorseEnvironment.html</anchorfile>
      <anchor>ab6ae4f41f16f7d34b8eebe367c297a0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>angvelBounds_</name>
      <anchorfile>classompl_1_1base_1_1MorseEnvironment.html</anchorfile>
      <anchor>aa5cc92fe28589fcada28645c05fc572c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>stepSize_</name>
      <anchorfile>classompl_1_1base_1_1MorseEnvironment.html</anchorfile>
      <anchor>a5df72bafbb861ea157ea23d843237489</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>minControlSteps_</name>
      <anchorfile>classompl_1_1base_1_1MorseEnvironment.html</anchorfile>
      <anchor>a0d93140576183040716cccaee3a17e57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>maxControlSteps_</name>
      <anchorfile>classompl_1_1base_1_1MorseEnvironment.html</anchorfile>
      <anchor>a01dd2c7e38c34d88fd9ef606fafe0b6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>simRunning_</name>
      <anchorfile>classompl_1_1base_1_1MorseEnvironment.html</anchorfile>
      <anchor>a73959924420922f5345de72efdbd8f9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::mutex</type>
      <name>mutex_</name>
      <anchorfile>classompl_1_1base_1_1MorseEnvironment.html</anchorfile>
      <anchor>ad32ef7eecbeb4381864e8b8fba916aeb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::MorseEnvironmentPtr</name>
    <filename>classompl_1_1base_1_1MorseEnvironmentPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::base::MorseGoal</name>
    <filename>classompl_1_1base_1_1MorseGoal.html</filename>
    <base>ompl::base::Goal</base>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>classompl_1_1base_1_1MorseGoal.html</anchorfile>
      <anchor>a1c3968073847fa47951cda70a5816148</anchor>
      <arglist>(const State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>classompl_1_1base_1_1MorseGoal.html</anchorfile>
      <anchor>a0729b7e54c5727df2c23827cf5183d57</anchor>
      <arglist>(const State *state, double *distance) const override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isSatisfied_Py</name>
      <anchorfile>classompl_1_1base_1_1MorseGoal.html</anchorfile>
      <anchor>a6ea4c13a93e81cc815caff927d584f7d</anchor>
      <arglist>(const State *state) const =0</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>distance_</name>
      <anchorfile>classompl_1_1base_1_1MorseGoal.html</anchorfile>
      <anchor>a8f4e048cbf75c341c325e956121b1d55</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::MorseProjection</name>
    <filename>classompl_1_1base_1_1MorseProjection.html</filename>
    <base>ompl::base::ProjectionEvaluator</base>
    <member kind="function">
      <type></type>
      <name>MorseProjection</name>
      <anchorfile>classompl_1_1base_1_1MorseProjection.html</anchorfile>
      <anchor>a61798b0775e34d8826526e51d446f1c2</anchor>
      <arglist>(const StateSpacePtr &amp;space)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1base_1_1MorseProjection.html</anchorfile>
      <anchor>add36bfce2e06168e1e11bc3924ce0991</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1base_1_1MorseProjection.html</anchorfile>
      <anchor>a34c7764e81582c2b86b095011a6c6bb8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>defaultCellSizes</name>
      <anchorfile>classompl_1_1base_1_1MorseProjection.html</anchorfile>
      <anchor>a1daeacbf5f43ef9dd24275478ee0b98e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>project</name>
      <anchorfile>classompl_1_1base_1_1MorseProjection.html</anchorfile>
      <anchor>afa0f5df07cccbc0d045eb0c25f87863a</anchor>
      <arglist>(const State *state, Eigen::Ref&lt; Eigen::VectorXd &gt; projection) const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MorseStateSpace *</type>
      <name>space_</name>
      <anchorfile>classompl_1_1base_1_1MorseProjection.html</anchorfile>
      <anchor>af30b3483a854f7bf9be1dd44372b8678</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::MorseStateSpace</name>
    <filename>classompl_1_1base_1_1MorseStateSpace.html</filename>
    <base>ompl::base::CompoundStateSpace</base>
    <class kind="class">ompl::base::MorseStateSpace::StateType</class>
    <member kind="function">
      <type></type>
      <name>MorseStateSpace</name>
      <anchorfile>classompl_1_1base_1_1MorseStateSpace.html</anchorfile>
      <anchor>a8bf033b307efcd363c22b0f6b082384b</anchor>
      <arglist>(const MorseEnvironmentPtr &amp;env, double positionWeight=1.0, double linVelWeight=0.5, double angVelWeight=0.5, double orientationWeight=1.0)</arglist>
    </member>
    <member kind="function">
      <type>const MorseEnvironmentPtr &amp;</type>
      <name>getEnvironment</name>
      <anchorfile>classompl_1_1base_1_1MorseStateSpace.html</anchorfile>
      <anchor>ae4984f11ab4549b258eab564b8974708</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNrBodies</name>
      <anchorfile>classompl_1_1base_1_1MorseStateSpace.html</anchorfile>
      <anchor>a44c6483642a15b8b60d3ebe07e76e6c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBounds</name>
      <anchorfile>classompl_1_1base_1_1MorseStateSpace.html</anchorfile>
      <anchor>a74cc079c1a705a21508da70c7515ab03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPositionBounds</name>
      <anchorfile>classompl_1_1base_1_1MorseStateSpace.html</anchorfile>
      <anchor>ad1c3f943f4c534e62bf94a99897bdbd2</anchor>
      <arglist>(const RealVectorBounds &amp;bounds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinearVelocityBounds</name>
      <anchorfile>classompl_1_1base_1_1MorseStateSpace.html</anchorfile>
      <anchor>a4e9d27694c8cd5615514eadae5c828bc</anchor>
      <arglist>(const RealVectorBounds &amp;bounds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngularVelocityBounds</name>
      <anchorfile>classompl_1_1base_1_1MorseStateSpace.html</anchorfile>
      <anchor>ad72bb7ae19bd0ea13812215a6a28de90</anchor>
      <arglist>(const RealVectorBounds &amp;bounds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readState</name>
      <anchorfile>classompl_1_1base_1_1MorseStateSpace.html</anchorfile>
      <anchor>a497bc1f460f7fc0547c274cdd3ff5726</anchor>
      <arglist>(State *state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeState</name>
      <anchorfile>classompl_1_1base_1_1MorseStateSpace.html</anchorfile>
      <anchor>a6670c04bf35f7c7e45b8aa8f3653bb25</anchor>
      <arglist>(const State *state) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>classompl_1_1base_1_1MorseStateSpace.html</anchorfile>
      <anchor>a3fc7c45c61fbe8ba66b7ed7072777abe</anchor>
      <arglist>(const State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>allocState</name>
      <anchorfile>classompl_1_1base_1_1MorseStateSpace.html</anchorfile>
      <anchor>ad934101231e1004f1282f586f0db5d7c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeState</name>
      <anchorfile>classompl_1_1base_1_1MorseStateSpace.html</anchorfile>
      <anchor>ac7838e434a022c30b89cdf9f01c1fa5c</anchor>
      <arglist>(State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyState</name>
      <anchorfile>classompl_1_1base_1_1MorseStateSpace.html</anchorfile>
      <anchor>a9c2a404246a047be96083cc1fbae5a36</anchor>
      <arglist>(State *destination, const State *source) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1base_1_1MorseStateSpace.html</anchorfile>
      <anchor>ab1b7ee4d60feab29504f47b7a8453dd1</anchor>
      <arglist>(const State *from, const State *to, double t, State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>StateSamplerPtr</type>
      <name>allocDefaultStateSampler</name>
      <anchorfile>classompl_1_1base_1_1MorseStateSpace.html</anchorfile>
      <anchor>a054830e41f73b83a987fbb961547d156</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>StateSamplerPtr</type>
      <name>allocStateSampler</name>
      <anchorfile>classompl_1_1base_1_1MorseStateSpace.html</anchorfile>
      <anchor>a44859bcb2ee75142b3e268fd1f972aef</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MorseEnvironmentPtr</type>
      <name>env_</name>
      <anchorfile>classompl_1_1base_1_1MorseStateSpace.html</anchorfile>
      <anchor>ab05c8e9693dce70e8077a65fc91b9f74</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::MorseStateSpace::StateType</name>
    <filename>classompl_1_1base_1_1MorseStateSpace_1_1StateType.html</filename>
    <base>ompl::base::CompoundState</base>
  </compound>
  <compound kind="class">
    <name>ompl::base::MorseStateValidityChecker</name>
    <filename>classompl_1_1base_1_1MorseStateValidityChecker.html</filename>
    <base>ompl::base::StateValidityChecker</base>
    <member kind="function">
      <type></type>
      <name>MorseStateValidityChecker</name>
      <anchorfile>classompl_1_1base_1_1MorseStateValidityChecker.html</anchorfile>
      <anchor>a3a66849ce975b0e8338df263148fc5d6</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classompl_1_1base_1_1MorseStateValidityChecker.html</anchorfile>
      <anchor>a2640b1be3bfa2f417e28dcd553fc175c</anchor>
      <arglist>(const State *state) const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MorseStateSpace *</type>
      <name>mss_</name>
      <anchorfile>classompl_1_1base_1_1MorseStateValidityChecker.html</anchorfile>
      <anchor>a6c311dc822fac7f9de9b0c9e26f3bf69</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::MorseTerminationCondition</name>
    <filename>classompl_1_1base_1_1MorseTerminationCondition.html</filename>
    <base>ompl::base::PlannerTerminationCondition</base>
  </compound>
  <compound kind="class">
    <name>ompl::base::MotionValidator</name>
    <filename>classompl_1_1base_1_1MotionValidator.html</filename>
    <member kind="function">
      <type></type>
      <name>MotionValidator</name>
      <anchorfile>classompl_1_1base_1_1MotionValidator.html</anchorfile>
      <anchor>a15055e5f4def52f36c570ec7027ba158</anchor>
      <arglist>(SpaceInformation *si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MotionValidator</name>
      <anchorfile>classompl_1_1base_1_1MotionValidator.html</anchorfile>
      <anchor>a855c98a07315e15d030c4f3a428b35f3</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>checkMotion</name>
      <anchorfile>classompl_1_1base_1_1MotionValidator.html</anchorfile>
      <anchor>a9b6d254308ea12799a72049a8dff3fc6</anchor>
      <arglist>(const State *s1, const State *s2) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>checkMotion</name>
      <anchorfile>classompl_1_1base_1_1MotionValidator.html</anchorfile>
      <anchor>a86af4d5a138cc41b5fe08de033b3c401</anchor>
      <arglist>(const State *s1, const State *s2, std::pair&lt; State *, double &gt; &amp;lastValid) const =0</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getValidMotionCount</name>
      <anchorfile>classompl_1_1base_1_1MotionValidator.html</anchorfile>
      <anchor>af8418a54b83ced743d2c6c9681dfab44</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getInvalidMotionCount</name>
      <anchorfile>classompl_1_1base_1_1MotionValidator.html</anchorfile>
      <anchor>aaad0b4516eeea8855559a5ed71d81af2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getCheckedMotionCount</name>
      <anchorfile>classompl_1_1base_1_1MotionValidator.html</anchorfile>
      <anchor>a5163134cdc572c818022435b5603f8d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getValidMotionFraction</name>
      <anchorfile>classompl_1_1base_1_1MotionValidator.html</anchorfile>
      <anchor>a4352050a1475b39449827c977dba0c45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetMotionCounter</name>
      <anchorfile>classompl_1_1base_1_1MotionValidator.html</anchorfile>
      <anchor>a9ca6f71508846761ac53c1999e53e703</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SpaceInformation *</type>
      <name>si_</name>
      <anchorfile>classompl_1_1base_1_1MotionValidator.html</anchorfile>
      <anchor>a2629e7715db18fd173b54392db71e4c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>valid_</name>
      <anchorfile>classompl_1_1base_1_1MotionValidator.html</anchorfile>
      <anchor>ae66b1bf994516a3abd2f7f8548731bc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>invalid_</name>
      <anchorfile>classompl_1_1base_1_1MotionValidator.html</anchorfile>
      <anchor>aefa042881c1060d57cc9bd28f5df7cac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::MotionValidatorPtr</name>
    <filename>classompl_1_1base_1_1MotionValidatorPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::base::MultiOptimizationObjective</name>
    <filename>classompl_1_1base_1_1MultiOptimizationObjective.html</filename>
    <base>ompl::base::OptimizationObjective</base>
    <class kind="struct">ompl::base::MultiOptimizationObjective::Component</class>
    <member kind="function">
      <type>void</type>
      <name>addObjective</name>
      <anchorfile>classompl_1_1base_1_1MultiOptimizationObjective.html</anchorfile>
      <anchor>adc1f3daeac02055c1f43066496a9851c</anchor>
      <arglist>(const OptimizationObjectivePtr &amp;objective, double weight)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getObjectiveCount</name>
      <anchorfile>classompl_1_1base_1_1MultiOptimizationObjective.html</anchorfile>
      <anchor>a55a619222a47d2eb1bff8e3addd6cd9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const OptimizationObjectivePtr &amp;</type>
      <name>getObjective</name>
      <anchorfile>classompl_1_1base_1_1MultiOptimizationObjective.html</anchorfile>
      <anchor>a159d4f8dbd0448de6e8a2a3f375fb0f1</anchor>
      <arglist>(unsigned int idx) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getObjectiveWeight</name>
      <anchorfile>classompl_1_1base_1_1MultiOptimizationObjective.html</anchorfile>
      <anchor>a67ad7aaa2720d1aadc51574e92d4b383</anchor>
      <arglist>(unsigned int idx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObjectiveWeight</name>
      <anchorfile>classompl_1_1base_1_1MultiOptimizationObjective.html</anchorfile>
      <anchor>a20f6e0a7169ee2d31dcf2e6cf9f729ac</anchor>
      <arglist>(unsigned int idx, double weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>classompl_1_1base_1_1MultiOptimizationObjective.html</anchorfile>
      <anchor>af8ee10e2a50bd00b2dc25315a0537716</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLocked</name>
      <anchorfile>classompl_1_1base_1_1MultiOptimizationObjective.html</anchorfile>
      <anchor>ac0678ce606f52c600a3a518b3518d42c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>stateCost</name>
      <anchorfile>classompl_1_1base_1_1MultiOptimizationObjective.html</anchorfile>
      <anchor>a5f019dcfbe147be3dceed31bd9ea21ce</anchor>
      <arglist>(const State *s) const override</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>motionCost</name>
      <anchorfile>classompl_1_1base_1_1MultiOptimizationObjective.html</anchorfile>
      <anchor>ae7dab5fc146383b27d01c40739870414</anchor>
      <arglist>(const State *s1, const State *s2) const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Component &gt;</type>
      <name>components_</name>
      <anchorfile>classompl_1_1base_1_1MultiOptimizationObjective.html</anchorfile>
      <anchor>ad2b37645c317dc327423276e44ea05dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>locked_</name>
      <anchorfile>classompl_1_1base_1_1MultiOptimizationObjective.html</anchorfile>
      <anchor>a70547ad7e799b4e8a806472071546c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend OptimizationObjectivePtr</type>
      <name>operator+</name>
      <anchorfile>classompl_1_1base_1_1MultiOptimizationObjective.html</anchorfile>
      <anchor>af383e931d014bc44d371d7fea3779acb</anchor>
      <arglist>(const OptimizationObjectivePtr &amp;a, const OptimizationObjectivePtr &amp;b)</arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend OptimizationObjectivePtr</type>
      <name>operator*</name>
      <anchorfile>classompl_1_1base_1_1MultiOptimizationObjective.html</anchorfile>
      <anchor>aab47fc494d97ecc9f0a8f7ea17ece8d3</anchor>
      <arglist>(double weight, const OptimizationObjectivePtr &amp;a)</arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend OptimizationObjectivePtr</type>
      <name>operator*</name>
      <anchorfile>classompl_1_1base_1_1MultiOptimizationObjective.html</anchorfile>
      <anchor>a9c4efb639ca3be22c4ba6c7871253195</anchor>
      <arglist>(const OptimizationObjectivePtr &amp;a, double weight)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::base::MultiOptimizationObjective::Component</name>
    <filename>structompl_1_1base_1_1MultiOptimizationObjective_1_1Component.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::base::ObstacleBasedValidStateSampler</name>
    <filename>classompl_1_1base_1_1ObstacleBasedValidStateSampler.html</filename>
    <base>ompl::base::ValidStateSampler</base>
    <member kind="function">
      <type></type>
      <name>ObstacleBasedValidStateSampler</name>
      <anchorfile>classompl_1_1base_1_1ObstacleBasedValidStateSampler.html</anchorfile>
      <anchor>ad1444e3fd0b28b4458d53cc42d298a25</anchor>
      <arglist>(const SpaceInformation *si)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sample</name>
      <anchorfile>classompl_1_1base_1_1ObstacleBasedValidStateSampler.html</anchorfile>
      <anchor>af209f8a64eda1bdc6d420b45d659657b</anchor>
      <arglist>(State *state) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sampleNear</name>
      <anchorfile>classompl_1_1base_1_1ObstacleBasedValidStateSampler.html</anchorfile>
      <anchor>a48b85695c8dce19b8d5a58ca1e3763a3</anchor>
      <arglist>(State *state, const State *near, double distance) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1base_1_1ObstacleBasedValidStateSampler.html</anchorfile>
      <anchor>a8f0d1cd96f20d25a0701bc67be8e7e1c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::OptimizationObjective</name>
    <filename>classompl_1_1base_1_1OptimizationObjective.html</filename>
    <member kind="function">
      <type></type>
      <name>OptimizationObjective</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>a5c79b6f5c761c96fb9e9989ba49a3d92</anchor>
      <arglist>(SpaceInformationPtr si)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getDescription</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>adb756b593cd1aafe1854940a05b0c8be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSatisfied</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>aa89592dabee668805094bc9fbf7024b1</anchor>
      <arglist>(Cost c) const</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>getCostThreshold</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>a8ff06c081406cbb98fcc0a2db3e34492</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCostThreshold</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>a1f133b98a94cb5b20c4b1a3a998aa7e9</anchor>
      <arglist>(Cost c)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isCostBetterThan</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>a858defbe6dc0cf969b68a92661778488</anchor>
      <arglist>(Cost c1, Cost c2) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isCostEquivalentTo</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>a31ed470f03b68e6a442d59ae03309f3c</anchor>
      <arglist>(Cost c1, Cost c2) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFinite</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>a3871177e18f3bff07f33e0d513433de7</anchor>
      <arglist>(Cost cost) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cost</type>
      <name>betterCost</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>ab3633ee95b256881190229fea48ef135</anchor>
      <arglist>(Cost c1, Cost c2) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Cost</type>
      <name>stateCost</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>a4647860abfa971c143489e7ca204b7a1</anchor>
      <arglist>(const State *s) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Cost</type>
      <name>motionCost</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>aa8dc9a1b7952491f6938ee8279d3a179</anchor>
      <arglist>(const State *s1, const State *s2) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cost</type>
      <name>combineCosts</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>a61f4766a65c6e69a437bafa31a646d39</anchor>
      <arglist>(Cost c1, Cost c2) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cost</type>
      <name>identityCost</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>a568bfb751b5c8c8e4c3cd022074c82c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cost</type>
      <name>infiniteCost</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>ac6b585b03027b7a7ef0e01d7c53d1d78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cost</type>
      <name>initialCost</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>adbb33cf45494763fdfd97fe065b17502</anchor>
      <arglist>(const State *s) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cost</type>
      <name>terminalCost</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>a63be3bf4bbf07c3c0b58e16228cf9794</anchor>
      <arglist>(const State *s) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSymmetric</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>ac5611c87839b971f03c261b1100895f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cost</type>
      <name>averageStateCost</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>a2a1c5ac5e925447f9651f3aa0fa4e048</anchor>
      <arglist>(unsigned int numStates) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCostToGoHeuristic</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>a3964de818108dd28284e49704f067b9c</anchor>
      <arglist>(const CostToGoHeuristic &amp;costToGo)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasCostToGoHeuristic</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>a2eb20b6c91e533622fdf0c1b547a060e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>costToGo</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>a02ebc3692254fd1184a807758c7ec2e5</anchor>
      <arglist>(const State *state, const Goal *goal) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cost</type>
      <name>motionCostHeuristic</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>a51de2e3ff37abb8ff481669729ba69ff</anchor>
      <arglist>(const State *s1, const State *s2) const</arglist>
    </member>
    <member kind="function">
      <type>const SpaceInformationPtr &amp;</type>
      <name>getSpaceInformation</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>a4b8a97c9b695510e8a08a57a656b4c71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InformedSamplerPtr</type>
      <name>allocInformedStateSampler</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>ae7e2ecc483c56da08fc7656152a245da</anchor>
      <arglist>(const ProblemDefinitionPtr &amp;probDefn, unsigned int maxNumberCalls) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>adbf67e62bcba8f408db9bba0b03976cc</anchor>
      <arglist>(std::ostream &amp;out) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SpaceInformationPtr</type>
      <name>si_</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>aed9801e7e2142d7c61aa586bcacea6c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>description_</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>a0782ddb1c3cd4d656e4c0bae7f2caa37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Cost</type>
      <name>threshold_</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>a4e62f03ff644f753073fc86ae7553ff1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CostToGoHeuristic</type>
      <name>costToGoFn_</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>a89cd7ce97d7b26efd7bcde24095b1fce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::OptimizationObjectivePtr</name>
    <filename>classompl_1_1base_1_1OptimizationObjectivePtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::base::OrderedInfSampler</name>
    <filename>classompl_1_1base_1_1OrderedInfSampler.html</filename>
    <base>ompl::base::InformedSampler</base>
    <member kind="function">
      <type></type>
      <name>OrderedInfSampler</name>
      <anchorfile>classompl_1_1base_1_1OrderedInfSampler.html</anchorfile>
      <anchor>a84878f8866e2875d64280e385b739079</anchor>
      <arglist>(const InformedSamplerPtr &amp;infSamplerPtr, unsigned int batchSize)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1OrderedInfSampler.html</anchorfile>
      <anchor>a193ebb05c6a56bcb3d3e877626674b99</anchor>
      <arglist>(State *statePtr, const Cost &amp;maxCost) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1OrderedInfSampler.html</anchorfile>
      <anchor>a46281a03df621a2f437f86e8ad3e8fef</anchor>
      <arglist>(State *statePtr, const Cost &amp;minCost, const Cost &amp;maxCost) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasInformedMeasure</name>
      <anchorfile>classompl_1_1base_1_1OrderedInfSampler.html</anchorfile>
      <anchor>ae70fffd413a3ff995b68c773b1040c84</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getInformedMeasure</name>
      <anchorfile>classompl_1_1base_1_1OrderedInfSampler.html</anchorfile>
      <anchor>ac0bc5d1cc978dbef275550a9930275ea</anchor>
      <arglist>(const Cost &amp;currentCost) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::ParamSet</name>
    <filename>classompl_1_1base_1_1ParamSet.html</filename>
    <member kind="function">
      <type>void</type>
      <name>declareParam</name>
      <anchorfile>classompl_1_1base_1_1ParamSet.html</anchorfile>
      <anchor>a7601fe9c29bbfb75daae602d484d2ec1</anchor>
      <arglist>(const std::string &amp;name, const typename SpecificParam&lt; T &gt;::SetterFn &amp;setter, const typename SpecificParam&lt; T &gt;::GetterFn &amp;getter=[] { return T();})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classompl_1_1base_1_1ParamSet.html</anchorfile>
      <anchor>a200630b07f2f43ec2d658f4d1d6d0ede</anchor>
      <arglist>(const GenericParamPtr &amp;param)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classompl_1_1base_1_1ParamSet.html</anchorfile>
      <anchor>afe512b0a1d4127ef6e88f2f32baf3111</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>include</name>
      <anchorfile>classompl_1_1base_1_1ParamSet.html</anchorfile>
      <anchor>a33cd1e7ae354235187393487292a5a46</anchor>
      <arglist>(const ParamSet &amp;other, const std::string &amp;prefix=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setParam</name>
      <anchorfile>classompl_1_1base_1_1ParamSet.html</anchorfile>
      <anchor>aa5db8ef79b6eafab44004b2d034b9a83</anchor>
      <arglist>(const std::string &amp;key, const std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getParam</name>
      <anchorfile>classompl_1_1base_1_1ParamSet.html</anchorfile>
      <anchor>ab89dbbe960f72ba5ae368e2736928af6</anchor>
      <arglist>(const std::string &amp;key, std::string &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setParams</name>
      <anchorfile>classompl_1_1base_1_1ParamSet.html</anchorfile>
      <anchor>a663944c14405167c22aa7d8477f39b39</anchor>
      <arglist>(const std::map&lt; std::string, std::string &gt; &amp;kv, bool ignoreUnknown=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParams</name>
      <anchorfile>classompl_1_1base_1_1ParamSet.html</anchorfile>
      <anchor>a169f03ff0e9e26496a3855877a8b8784</anchor>
      <arglist>(std::map&lt; std::string, std::string &gt; &amp;params) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParamNames</name>
      <anchorfile>classompl_1_1base_1_1ParamSet.html</anchorfile>
      <anchor>a80f8d6c0c77c0499bf355d925d12d30a</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;params) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParamValues</name>
      <anchorfile>classompl_1_1base_1_1ParamSet.html</anchorfile>
      <anchor>aed638fcbc9d7556acbe8aec522c3cf48</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;vals) const</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, GenericParamPtr &gt; &amp;</type>
      <name>getParams</name>
      <anchorfile>classompl_1_1base_1_1ParamSet.html</anchorfile>
      <anchor>a9c0dff55fa8f124757dd9a6a36577587</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const GenericParamPtr &amp;</type>
      <name>getParam</name>
      <anchorfile>classompl_1_1base_1_1ParamSet.html</anchorfile>
      <anchor>a65131ab7c5077881f396fa0f9257c2d0</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasParam</name>
      <anchorfile>classompl_1_1base_1_1ParamSet.html</anchorfile>
      <anchor>a90f96ae7f5aed0208eb2fe13b3079053</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>GenericParam &amp;</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1base_1_1ParamSet.html</anchorfile>
      <anchor>ab933c691bdd425ef342b8790b5931e87</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1base_1_1ParamSet.html</anchorfile>
      <anchor>a7b7323ea5558f4031093c44f91b5b505</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1base_1_1ParamSet.html</anchorfile>
      <anchor>a604191032ff2beebf813c6bae2e80d6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classompl_1_1base_1_1ParamSet.html</anchorfile>
      <anchor>ad90656f4ec49734e04e2ddc46ceda1ac</anchor>
      <arglist>(std::ostream &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::Path</name>
    <filename>classompl_1_1base_1_1Path.html</filename>
    <member kind="function">
      <type></type>
      <name>Path</name>
      <anchorfile>classompl_1_1base_1_1Path.html</anchorfile>
      <anchor>a511fec383dfb27723c18d2c53b2f6dc3</anchor>
      <arglist>(SpaceInformationPtr si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Path</name>
      <anchorfile>classompl_1_1base_1_1Path.html</anchorfile>
      <anchor>ab2a9e691ca10b7341e8eb81a313ff58f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>const SpaceInformationPtr &amp;</type>
      <name>getSpaceInformation</name>
      <anchorfile>classompl_1_1base_1_1Path.html</anchorfile>
      <anchor>a099b0432e85131551f490488846ee960</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>as</name>
      <anchorfile>classompl_1_1base_1_1Path.html</anchorfile>
      <anchor>af825d97785bc098aacf1aecdaf3aec45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>as</name>
      <anchorfile>classompl_1_1base_1_1Path.html</anchorfile>
      <anchor>a07b298e9c29ee82e9e2780d2d179e58d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>length</name>
      <anchorfile>classompl_1_1base_1_1Path.html</anchorfile>
      <anchor>aeff0effe4aa66fb70382a4c192cb8a31</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Cost</type>
      <name>cost</name>
      <anchorfile>classompl_1_1base_1_1Path.html</anchorfile>
      <anchor>a9c63af3bd4a94d8a3f93e6d0fe36bdb1</anchor>
      <arglist>(const OptimizationObjectivePtr &amp;obj) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>check</name>
      <anchorfile>classompl_1_1base_1_1Path.html</anchorfile>
      <anchor>a5af0d84a6044dbde963c08d0385d44ec</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classompl_1_1base_1_1Path.html</anchorfile>
      <anchor>a26d36d4c24cc36fdef442fd9c2ee4c8d</anchor>
      <arglist>(std::ostream &amp;out) const =0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SpaceInformationPtr</type>
      <name>si_</name>
      <anchorfile>classompl_1_1base_1_1Path.html</anchorfile>
      <anchor>a87250f099dbe84a3c0ba515360ac4339</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::PathLengthDirectInfSampler</name>
    <filename>classompl_1_1base_1_1PathLengthDirectInfSampler.html</filename>
    <base>ompl::base::InformedSampler</base>
    <member kind="function">
      <type></type>
      <name>PathLengthDirectInfSampler</name>
      <anchorfile>classompl_1_1base_1_1PathLengthDirectInfSampler.html</anchorfile>
      <anchor>afd6854a7310c32be02c76f066c1a857d</anchor>
      <arglist>(const ProblemDefinitionPtr &amp;probDefn, unsigned int maxNumberCalls)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1PathLengthDirectInfSampler.html</anchorfile>
      <anchor>a006f26f2d8cb6c394e6006b830cc5c6c</anchor>
      <arglist>(State *statePtr, const Cost &amp;maxCost) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1PathLengthDirectInfSampler.html</anchorfile>
      <anchor>ad55e68ec56e9e57bc85843eee09f684f</anchor>
      <arglist>(State *statePtr, const Cost &amp;minCost, const Cost &amp;maxCost) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasInformedMeasure</name>
      <anchorfile>classompl_1_1base_1_1PathLengthDirectInfSampler.html</anchorfile>
      <anchor>a41770bde39b0eff9b16e837a87388231</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getInformedMeasure</name>
      <anchorfile>classompl_1_1base_1_1PathLengthDirectInfSampler.html</anchorfile>
      <anchor>afc5d5e94e76a105704b6f6ec15c08533</anchor>
      <arglist>(const Cost &amp;currentCost) const override</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>heuristicSolnCost</name>
      <anchorfile>classompl_1_1base_1_1PathLengthDirectInfSampler.html</anchorfile>
      <anchor>afccaa3c95ac432d12ea44f6817e294d3</anchor>
      <arglist>(const State *statePtr) const override</arglist>
    </member>
    <docanchor file="classompl_1_1base_1_1PathLengthDirectInfSampler.html">gPathLengthDirectInfSampler</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::base::PathLengthOptimizationObjective</name>
    <filename>classompl_1_1base_1_1PathLengthOptimizationObjective.html</filename>
    <base>ompl::base::OptimizationObjective</base>
    <member kind="function">
      <type>Cost</type>
      <name>stateCost</name>
      <anchorfile>classompl_1_1base_1_1PathLengthOptimizationObjective.html</anchorfile>
      <anchor>a3533dff8e2298ee07d03593d380453ef</anchor>
      <arglist>(const State *s) const override</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>motionCost</name>
      <anchorfile>classompl_1_1base_1_1PathLengthOptimizationObjective.html</anchorfile>
      <anchor>ad2122f91896cbf047f7d39fb1422ab7a</anchor>
      <arglist>(const State *s1, const State *s2) const override</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>motionCostHeuristic</name>
      <anchorfile>classompl_1_1base_1_1PathLengthOptimizationObjective.html</anchorfile>
      <anchor>a455d8ea85e2a9d3224729e907c988c7b</anchor>
      <arglist>(const State *s1, const State *s2) const override</arglist>
    </member>
    <member kind="function">
      <type>InformedSamplerPtr</type>
      <name>allocInformedStateSampler</name>
      <anchorfile>classompl_1_1base_1_1PathLengthOptimizationObjective.html</anchorfile>
      <anchor>a022c0158e1b6e3b5be546c586cea60e4</anchor>
      <arglist>(const ProblemDefinitionPtr &amp;probDefn, unsigned int maxNumberCalls) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::PathPtr</name>
    <filename>classompl_1_1base_1_1PathPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::base::Planner</name>
    <filename>classompl_1_1base_1_1Planner.html</filename>
    <member kind="typedef">
      <type>std::function&lt; std::string()&gt;</type>
      <name>PlannerProgressProperty</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a33c8326d45e5c1ec99edf5f964b34f61</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, PlannerProgressProperty &gt;</type>
      <name>PlannerProgressProperties</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>adc4df80108aec5db29373302e4b8d723</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Planner</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>aeb73b615f05ecc749204b3ef029a292a</anchor>
      <arglist>(SpaceInformationPtr si, std::string name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Planner</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>ab452a5462004f3848b92b2669bc8cf89</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>as</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a2ca68a50629dd31d550632480d001c17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>as</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a7499389d5049b3eb778e841a0dfd605a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SpaceInformationPtr &amp;</type>
      <name>getSpaceInformation</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a7ebc11cf89b36261c01dd0592a350b88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ProblemDefinitionPtr &amp;</type>
      <name>getProblemDefinition</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a342fc12280631fd4cc7be46c97827250</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ProblemDefinitionPtr &amp;</type>
      <name>getProblemDefinition</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a5891ac7a3e5a39143f87745f25d74926</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PlannerInputStates &amp;</type>
      <name>getPlannerInputStates</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a260b7d28d444b115f1356d3f96c37785</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProblemDefinition</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>add968ea14f1aa3d3bffc110da3e1d031</anchor>
      <arglist>(const ProblemDefinitionPtr &amp;pdef)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>aea8c56d18a0326b10fd111872ebd674a</anchor>
      <arglist>(const PlannerTerminationCondition &amp;ptc)=0</arglist>
    </member>
    <member kind="function">
      <type>PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a46d2a6941a33dbac28e6736949375e2b</anchor>
      <arglist>(const PlannerTerminationConditionFn &amp;ptc, double checkInterval)</arglist>
    </member>
    <member kind="function">
      <type>PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a5a61ca64b36881603af880677f6445a7</anchor>
      <arglist>(double solveTime)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a7929c12020a42b679601d22fb204919a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearQuery</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>ab23058a178abf49da403826b56b72493</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>ae8af389dbcdf416e142dc2f1cf5a8829</anchor>
      <arglist>(PlannerData &amp;data) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a9bdea814a817637bd8e6f959c65ceaf9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a99bb12c016b06563aab6bba5cdbed01e</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const PlannerSpecs &amp;</type>
      <name>getSpecs</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a845e46cdde4baeda91a5f008ae15ce3a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>ab7e49fc3b3b7011d46d647d8f1603bd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkValidity</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>ab416900477cf4499139c01f35663dffb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSetup</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a00d2469147e0a4f38cee18c97f19dbfc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ParamSet &amp;</type>
      <name>params</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a9dc98f7169ae45aa0e886376f546887a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ParamSet &amp;</type>
      <name>params</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a54cd84e228b9cd88ae88cdd10cc0712b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PlannerProgressProperties &amp;</type>
      <name>getPlannerProgressProperties</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a8b03485fc36143f4f26718c050ddb928</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printProperties</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>ab41beafb015184c8e44a899debe9b5b7</anchor>
      <arglist>(std::ostream &amp;out) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printSettings</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a325bbde59a8f7bab778c33d538cc4266</anchor>
      <arglist>(std::ostream &amp;out) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>declareParam</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a6b4a1345376e3e977772c38d38d5c50c</anchor>
      <arglist>(const std::string &amp;name, const PlannerType &amp;planner, const SetterType &amp;setter, const GetterType &amp;getter, const std::string &amp;rangeSuggestion=&quot;&quot;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>declareParam</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a3f9da0d41951502ea4df1184ef5a99a6</anchor>
      <arglist>(const std::string &amp;name, const PlannerType &amp;planner, const SetterType &amp;setter, const std::string &amp;rangeSuggestion=&quot;&quot;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addPlannerProgressProperty</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a3dc481539fac465497ad158e1bdac91a</anchor>
      <arglist>(const std::string &amp;progressPropertyName, const PlannerProgressProperty &amp;prop)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SpaceInformationPtr</type>
      <name>si_</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>aa3ceb9471163b6c96f6eeadbcfd3694e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ProblemDefinitionPtr</type>
      <name>pdef_</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a6bbb3dcc3d1604977e319d52c16ef7e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PlannerInputStates</type>
      <name>pis_</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a1c6ac45d44026aae6df87f3295d67436</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a806de82eeff9ef9231963a9851524b97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PlannerSpecs</type>
      <name>specs_</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a4311ea7a0470f0e0f76cb1656d63e365</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParamSet</type>
      <name>params_</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a1cecf022e5ebac936c49b96079ba5359</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PlannerProgressProperties</type>
      <name>plannerProgressProperties_</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>ab630ca0634156172daf1a2620a01caf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>setup_</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>adba44a4ee27079c5b258a2ebed719eed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::PlannerData</name>
    <filename>classompl_1_1base_1_1PlannerData.html</filename>
    <class kind="class">ompl::base::PlannerData::Graph</class>
    <member kind="function">
      <type></type>
      <name>PlannerData</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a086299be02adc8ae0438c111e2f3ae01</anchor>
      <arglist>(SpaceInformationPtr si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PlannerData</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>aeaae435c61fbc1f4c894da0140830e68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SpaceInformationPtr &amp;</type>
      <name>getSpaceInformation</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a25bb330cab0346857dd1a40fb059f71c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasControls</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>ac361b543229e46d4dfb6d954a814fc0e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>addVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>ac61c5ab5cfd6a66a58e03b1731c1e454</anchor>
      <arglist>(const PlannerDataVertex &amp;st)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>addStartVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a2eea84456784452486aa0065af391f47</anchor>
      <arglist>(const PlannerDataVertex &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>addGoalVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a3604cb85b0402b09b319c5f1df02b12e</anchor>
      <arglist>(const PlannerDataVertex &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>markStartState</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a48ebd34b6da9efd9ec7647155f9173c9</anchor>
      <arglist>(const State *st)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>markGoalState</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a7772ac307d153831c0e7ecfc4fb1c18b</anchor>
      <arglist>(const State *st)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tagState</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a2b0b7c124dcac4f07c5f6d0ab51386a6</anchor>
      <arglist>(const State *st, int tag)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a75a2c3ad28a32136c74ad9f841727f01</anchor>
      <arglist>(const PlannerDataVertex &amp;st)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a7313c0b88697387feebff969c307193c</anchor>
      <arglist>(unsigned int vIndex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addEdge</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>ac09c21494a8c7db500ef1a66bbbb1aa7</anchor>
      <arglist>(unsigned int v1, unsigned int v2, const PlannerDataEdge &amp;edge=PlannerDataEdge(), Cost weight=Cost(1.0))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addEdge</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>ad2685cb2025517bdc0ee1ba94b9aff49</anchor>
      <arglist>(const PlannerDataVertex &amp;v1, const PlannerDataVertex &amp;v2, const PlannerDataEdge &amp;edge=PlannerDataEdge(), Cost weight=Cost(1.0))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeEdge</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a991ab62a502c3f80ae2663150e79bcea</anchor>
      <arglist>(unsigned int v1, unsigned int v2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeEdge</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>afda397cf585cc647d1e9b212b6092b0e</anchor>
      <arglist>(const PlannerDataVertex &amp;v1, const PlannerDataVertex &amp;v2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a7378bbca3f1006b70976292266277eb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>decoupleFromPlanner</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>af01506ec2ff32596dcb1bd9dfa2f8e1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numEdges</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a383876c22dd92deeed0a536c10f7ecd4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numVertices</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a877a673801134168cba0581b277cae79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numStartVertices</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a9b7c83a71e59cc10492b96c52990124d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numGoalVertices</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>acc1145957cc29ef8e8328b8f31b9216a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>vertexExists</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>acad3f862d6764941928dd3d69efa9a9c</anchor>
      <arglist>(const PlannerDataVertex &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>const PlannerDataVertex &amp;</type>
      <name>getVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>abebe83e30a20d7d79e26f18bf228e8bb</anchor>
      <arglist>(unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>PlannerDataVertex &amp;</type>
      <name>getVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a7e1f2a259a8861ee5a88e51cc52f69e5</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>const PlannerDataVertex &amp;</type>
      <name>getStartVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>ab2e140727e79440c47c275a52bfd0604</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>PlannerDataVertex &amp;</type>
      <name>getStartVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>ae01edd29349d34cd7ca62384cecf7e7d</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>const PlannerDataVertex &amp;</type>
      <name>getGoalVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>acc67731741c9990a749307fd558161c1</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>PlannerDataVertex &amp;</type>
      <name>getGoalVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a0740003f5170235f3133162db36f1f23</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getStartIndex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a1fcd8fb4d13be0c272ccf538f5372f39</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getGoalIndex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>abba488b5f384fa3dedd07dc7b974a14d</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStartVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>adc9fe3b3b96c759bcae567743d404471</anchor>
      <arglist>(unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isGoalVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a14ba153dc627b6d44c691b49a5f99c9b</anchor>
      <arglist>(unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>vertexIndex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a06792592713e6463c4b9814f2a715b4c</anchor>
      <arglist>(const PlannerDataVertex &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>edgeExists</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a0b9ec6cbf900b5c08c3a744c119181d8</anchor>
      <arglist>(unsigned int v1, unsigned int v2) const</arglist>
    </member>
    <member kind="function">
      <type>const PlannerDataEdge &amp;</type>
      <name>getEdge</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>ab1702251b05069848409efade85a3605</anchor>
      <arglist>(unsigned int v1, unsigned int v2) const</arglist>
    </member>
    <member kind="function">
      <type>PlannerDataEdge &amp;</type>
      <name>getEdge</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a42dd016470505a10e245a570e1979de3</anchor>
      <arglist>(unsigned int v1, unsigned int v2)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getEdges</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>aa459ac8581242046b24c9ee17d7b5c34</anchor>
      <arglist>(unsigned int v, std::vector&lt; unsigned int &gt; &amp;edgeList) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getEdges</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a43aabe7eb9caad37ea82d63e6f7ca78b</anchor>
      <arglist>(unsigned int v, std::map&lt; unsigned int, const PlannerDataEdge * &gt; &amp;edgeMap) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getIncomingEdges</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a81695127ac273368325eb61bd2b9b2ca</anchor>
      <arglist>(unsigned int v, std::vector&lt; unsigned int &gt; &amp;edgeList) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getIncomingEdges</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>af8c6863b24149cfe78dba15630e02c99</anchor>
      <arglist>(unsigned int v, std::map&lt; unsigned int, const PlannerDataEdge * &gt; &amp;edgeMap) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getEdgeWeight</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a0457d193b3297e8e90ee28bbe651d07e</anchor>
      <arglist>(unsigned int v1, unsigned int v2, Cost *weight) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setEdgeWeight</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a0989a6e1614d76a1f94fb54d67341f5d</anchor>
      <arglist>(unsigned int v1, unsigned int v2, Cost weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeEdgeWeights</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>abf46a3a30292549f151136489c0d7041</anchor>
      <arglist>(const OptimizationObjective &amp;opt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeEdgeWeights</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a238a60c0e598a6e60c9be24f12e044f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printGraphviz</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a184ebe75a4afc833b790b0f0ac276227</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printGraphML</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>acf9fd81c96cf255b77dabeedefff23b3</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printPLY</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>ab1784a0fba1b49dc51ce1d308420d686</anchor>
      <arglist>(std::ostream &amp;out, bool asIs=false) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extractMinimumSpanningTree</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>aa79c3e5ed946f760d452047ef41fca6d</anchor>
      <arglist>(unsigned int v, const OptimizationObjective &amp;opt, PlannerData &amp;mst) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extractReachable</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>ac3c220368ae824265498941b9f1cc3ee</anchor>
      <arglist>(unsigned int v, PlannerData &amp;data) const</arglist>
    </member>
    <member kind="function">
      <type>StateStoragePtr</type>
      <name>extractStateStorage</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a3b599476b089cdd6170e661a89c67c83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Graph &amp;</type>
      <name>toBoostGraph</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a919452f1e347b68e9331d726c85b1dad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Graph &amp;</type>
      <name>toBoostGraph</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a7d1475f191be353c1f8f983ae60fc470</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; std::string, std::string &gt;</type>
      <name>properties</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>aca9e2da9d9a46e42c516fc8b926ab65c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PlannerDataEdge</type>
      <name>NO_EDGE</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a5e9068cf84bb1c378eb2ec0823e086d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PlannerDataVertex</type>
      <name>NO_VERTEX</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a53b2294e37eb1b5468d70c04055f64c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>INVALID_INDEX</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>ab2b09299d9980783a8147e280562d5a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; const State *, unsigned int &gt;</type>
      <name>stateIndexMap_</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a1fa46fe71b0b364d1a424bb9797d8abc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>startVertexIndices_</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a5b96459e98ddbbe4882a4c2ca64738d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>goalVertexIndices_</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>abf1793ebfefa6fbaeaf6dda5431f58be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SpaceInformationPtr</type>
      <name>si_</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a9b265d3a5780cda11ba7d068953c74af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; State * &gt;</type>
      <name>decoupledStates_</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a89e967b1ae291397cc4c3ea4da7c56a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>addVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>ac61c5ab5cfd6a66a58e03b1731c1e454</anchor>
      <arglist>(const PlannerDataVertex &amp;st)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>addStartVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a2eea84456784452486aa0065af391f47</anchor>
      <arglist>(const PlannerDataVertex &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>addGoalVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a3604cb85b0402b09b319c5f1df02b12e</anchor>
      <arglist>(const PlannerDataVertex &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>markStartState</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a48ebd34b6da9efd9ec7647155f9173c9</anchor>
      <arglist>(const State *st)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>markGoalState</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a7772ac307d153831c0e7ecfc4fb1c18b</anchor>
      <arglist>(const State *st)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tagState</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a2b0b7c124dcac4f07c5f6d0ab51386a6</anchor>
      <arglist>(const State *st, int tag)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a75a2c3ad28a32136c74ad9f841727f01</anchor>
      <arglist>(const PlannerDataVertex &amp;st)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a7313c0b88697387feebff969c307193c</anchor>
      <arglist>(unsigned int vIndex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addEdge</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>ac09c21494a8c7db500ef1a66bbbb1aa7</anchor>
      <arglist>(unsigned int v1, unsigned int v2, const PlannerDataEdge &amp;edge=PlannerDataEdge(), Cost weight=Cost(1.0))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addEdge</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>ad2685cb2025517bdc0ee1ba94b9aff49</anchor>
      <arglist>(const PlannerDataVertex &amp;v1, const PlannerDataVertex &amp;v2, const PlannerDataEdge &amp;edge=PlannerDataEdge(), Cost weight=Cost(1.0))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeEdge</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a991ab62a502c3f80ae2663150e79bcea</anchor>
      <arglist>(unsigned int v1, unsigned int v2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeEdge</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>afda397cf585cc647d1e9b212b6092b0e</anchor>
      <arglist>(const PlannerDataVertex &amp;v1, const PlannerDataVertex &amp;v2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a7378bbca3f1006b70976292266277eb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>decoupleFromPlanner</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>af01506ec2ff32596dcb1bd9dfa2f8e1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numEdges</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a383876c22dd92deeed0a536c10f7ecd4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numVertices</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a877a673801134168cba0581b277cae79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numStartVertices</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a9b7c83a71e59cc10492b96c52990124d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numGoalVertices</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>acc1145957cc29ef8e8328b8f31b9216a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>vertexExists</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>acad3f862d6764941928dd3d69efa9a9c</anchor>
      <arglist>(const PlannerDataVertex &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>const PlannerDataVertex &amp;</type>
      <name>getVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>abebe83e30a20d7d79e26f18bf228e8bb</anchor>
      <arglist>(unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>PlannerDataVertex &amp;</type>
      <name>getVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a7e1f2a259a8861ee5a88e51cc52f69e5</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>const PlannerDataVertex &amp;</type>
      <name>getStartVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>ab2e140727e79440c47c275a52bfd0604</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>PlannerDataVertex &amp;</type>
      <name>getStartVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>ae01edd29349d34cd7ca62384cecf7e7d</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>const PlannerDataVertex &amp;</type>
      <name>getGoalVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>acc67731741c9990a749307fd558161c1</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>PlannerDataVertex &amp;</type>
      <name>getGoalVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a0740003f5170235f3133162db36f1f23</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getStartIndex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a1fcd8fb4d13be0c272ccf538f5372f39</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getGoalIndex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>abba488b5f384fa3dedd07dc7b974a14d</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStartVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>adc9fe3b3b96c759bcae567743d404471</anchor>
      <arglist>(unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isGoalVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a14ba153dc627b6d44c691b49a5f99c9b</anchor>
      <arglist>(unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>vertexIndex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a06792592713e6463c4b9814f2a715b4c</anchor>
      <arglist>(const PlannerDataVertex &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>edgeExists</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a0b9ec6cbf900b5c08c3a744c119181d8</anchor>
      <arglist>(unsigned int v1, unsigned int v2) const</arglist>
    </member>
    <member kind="function">
      <type>const PlannerDataEdge &amp;</type>
      <name>getEdge</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>ab1702251b05069848409efade85a3605</anchor>
      <arglist>(unsigned int v1, unsigned int v2) const</arglist>
    </member>
    <member kind="function">
      <type>PlannerDataEdge &amp;</type>
      <name>getEdge</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a42dd016470505a10e245a570e1979de3</anchor>
      <arglist>(unsigned int v1, unsigned int v2)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getEdges</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>aa459ac8581242046b24c9ee17d7b5c34</anchor>
      <arglist>(unsigned int v, std::vector&lt; unsigned int &gt; &amp;edgeList) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getEdges</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a43aabe7eb9caad37ea82d63e6f7ca78b</anchor>
      <arglist>(unsigned int v, std::map&lt; unsigned int, const PlannerDataEdge * &gt; &amp;edgeMap) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getIncomingEdges</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a81695127ac273368325eb61bd2b9b2ca</anchor>
      <arglist>(unsigned int v, std::vector&lt; unsigned int &gt; &amp;edgeList) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getIncomingEdges</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>af8c6863b24149cfe78dba15630e02c99</anchor>
      <arglist>(unsigned int v, std::map&lt; unsigned int, const PlannerDataEdge * &gt; &amp;edgeMap) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getEdgeWeight</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a0457d193b3297e8e90ee28bbe651d07e</anchor>
      <arglist>(unsigned int v1, unsigned int v2, Cost *weight) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setEdgeWeight</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a0989a6e1614d76a1f94fb54d67341f5d</anchor>
      <arglist>(unsigned int v1, unsigned int v2, Cost weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeEdgeWeights</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>abf46a3a30292549f151136489c0d7041</anchor>
      <arglist>(const OptimizationObjective &amp;opt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeEdgeWeights</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a238a60c0e598a6e60c9be24f12e044f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printGraphviz</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a184ebe75a4afc833b790b0f0ac276227</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printGraphML</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>acf9fd81c96cf255b77dabeedefff23b3</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printPLY</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>ab1784a0fba1b49dc51ce1d308420d686</anchor>
      <arglist>(std::ostream &amp;out, bool asIs=false) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extractMinimumSpanningTree</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>aa79c3e5ed946f760d452047ef41fca6d</anchor>
      <arglist>(unsigned int v, const OptimizationObjective &amp;opt, PlannerData &amp;mst) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extractReachable</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>ac3c220368ae824265498941b9f1cc3ee</anchor>
      <arglist>(unsigned int v, PlannerData &amp;data) const</arglist>
    </member>
    <member kind="function">
      <type>StateStoragePtr</type>
      <name>extractStateStorage</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a3b599476b089cdd6170e661a89c67c83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Graph &amp;</type>
      <name>toBoostGraph</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a919452f1e347b68e9331d726c85b1dad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Graph &amp;</type>
      <name>toBoostGraph</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a7d1475f191be353c1f8f983ae60fc470</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::PlannerData::Graph</name>
    <filename>classompl_1_1base_1_1PlannerData_1_1Graph.html</filename>
    <member kind="typedef">
      <type>PlannerDataGraph</type>
      <name>Type</name>
      <anchorfile>classompl_1_1base_1_1PlannerData_1_1Graph.html</anchorfile>
      <anchor>a39cb3854146428ffd4d21d85650766e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph_traits&lt; Type &gt;::vertex_descriptor</type>
      <name>Vertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData_1_1Graph.html</anchorfile>
      <anchor>a2e80a08894e7be697cfb09960aafb7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph_traits&lt; Type &gt;::edge_descriptor</type>
      <name>Edge</name>
      <anchorfile>classompl_1_1base_1_1PlannerData_1_1Graph.html</anchorfile>
      <anchor>ae72180f1d7d6abeecc61b7b12b9dcee3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph_traits&lt; Type &gt;::vertex_iterator</type>
      <name>VIterator</name>
      <anchorfile>classompl_1_1base_1_1PlannerData_1_1Graph.html</anchorfile>
      <anchor>ab6765d0a47482465da6ff2db1e2c0292</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph_traits&lt; Type &gt;::edge_iterator</type>
      <name>EIterator</name>
      <anchorfile>classompl_1_1base_1_1PlannerData_1_1Graph.html</anchorfile>
      <anchor>a26ce18c4727839f4b5415185690f0142</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph_traits&lt; Type &gt;::in_edge_iterator</type>
      <name>IEIterator</name>
      <anchorfile>classompl_1_1base_1_1PlannerData_1_1Graph.html</anchorfile>
      <anchor>adb3a3e78691af48777a11d684720841c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph_traits&lt; Type &gt;::out_edge_iterator</type>
      <name>OEIterator</name>
      <anchorfile>classompl_1_1base_1_1PlannerData_1_1Graph.html</anchorfile>
      <anchor>a6673a79bb077f8619811fef395fb69ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph_traits&lt; Type &gt;::adjacency_iterator</type>
      <name>AdjIterator</name>
      <anchorfile>classompl_1_1base_1_1PlannerData_1_1Graph.html</anchorfile>
      <anchor>ae580cefbb9408ccfe520be5baea229d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::PlannerDataEdge</name>
    <filename>classompl_1_1base_1_1PlannerDataEdge.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual PlannerDataEdge *</type>
      <name>clone</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataEdge.html</anchorfile>
      <anchor>ae7ac923824c4405fed17a25c61af149c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataEdge.html</anchorfile>
      <anchor>af76eb1f17866d268648dd76ac4bbcdb8</anchor>
      <arglist>(const PlannerDataEdge &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataEdge.html</anchorfile>
      <anchor>ae27c4b5454fd0cf663b6c83ad5138a3f</anchor>
      <arglist>(const PlannerDataEdge &amp;rhs) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::PlannerDataPtr</name>
    <filename>classompl_1_1base_1_1PlannerDataPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::base::PlannerDataStorage</name>
    <filename>classompl_1_1base_1_1PlannerDataStorage.html</filename>
    <class kind="struct">ompl::base::PlannerDataStorage::Header</class>
    <class kind="struct">ompl::base::PlannerDataStorage::PlannerDataEdgeData</class>
    <class kind="struct">ompl::base::PlannerDataStorage::PlannerDataVertexData</class>
    <member kind="function">
      <type></type>
      <name>PlannerDataStorage</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataStorage.html</anchorfile>
      <anchor>a1ff5addd39dc209e532239c8171f8ca2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PlannerDataStorage</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataStorage.html</anchorfile>
      <anchor>abc48cb7a260846e6aee4b93c1dbd2fb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>store</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataStorage.html</anchorfile>
      <anchor>ac93d5d8f887c8f5b10ffbccfb23e1e6f</anchor>
      <arglist>(const PlannerData &amp;pd, const char *filename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>store</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataStorage.html</anchorfile>
      <anchor>acf27251c1d167a1a773256c913ed5091</anchor>
      <arglist>(const PlannerData &amp;pd, std::ostream &amp;out)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>load</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataStorage.html</anchorfile>
      <anchor>aec8d4a84b7db06354f40ded3741ad026</anchor>
      <arglist>(const char *filename, PlannerData &amp;pd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>load</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataStorage.html</anchorfile>
      <anchor>a7e37b079b0f378a1be1d2f8dff2b801f</anchor>
      <arglist>(std::istream &amp;in, PlannerData &amp;pd)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>loadVertices</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataStorage.html</anchorfile>
      <anchor>a7c7ca9b7e118313b6ac991a45426a696</anchor>
      <arglist>(PlannerData &amp;pd, unsigned int numVertices, boost::archive::binary_iarchive &amp;ia)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>storeVertices</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataStorage.html</anchorfile>
      <anchor>a9482e9f4a318ded2be8e61d8565877a0</anchor>
      <arglist>(const PlannerData &amp;pd, boost::archive::binary_oarchive &amp;oa)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>loadEdges</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataStorage.html</anchorfile>
      <anchor>ac88161cd55dbad2f87d8d4663c3ff905</anchor>
      <arglist>(PlannerData &amp;pd, unsigned int numEdges, boost::archive::binary_iarchive &amp;ia)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>storeEdges</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataStorage.html</anchorfile>
      <anchor>a4d67b235c4cd420d6dc7eb8c34ec3be3</anchor>
      <arglist>(const PlannerData &amp;pd, boost::archive::binary_oarchive &amp;oa)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::base::PlannerDataStorage::Header</name>
    <filename>structompl_1_1base_1_1PlannerDataStorage_1_1Header.html</filename>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>structompl_1_1base_1_1PlannerDataStorage_1_1Header.html</anchorfile>
      <anchor>ad915aa16bc8e63f6e065c4bfbc548839</anchor>
      <arglist>(Archive &amp;ar, const unsigned int)</arglist>
    </member>
    <member kind="variable">
      <type>std::uint_fast32_t</type>
      <name>marker</name>
      <anchorfile>structompl_1_1base_1_1PlannerDataStorage_1_1Header.html</anchorfile>
      <anchor>a51f9f343b9ed7921bf70441b31a7d08b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>vertex_count</name>
      <anchorfile>structompl_1_1base_1_1PlannerDataStorage_1_1Header.html</anchorfile>
      <anchor>ac2f09759b3634319c004828f7b950175</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>edge_count</name>
      <anchorfile>structompl_1_1base_1_1PlannerDataStorage_1_1Header.html</anchorfile>
      <anchor>aadfe946a61b0495600d85036bd593fc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>signature</name>
      <anchorfile>structompl_1_1base_1_1PlannerDataStorage_1_1Header.html</anchorfile>
      <anchor>abae629adea566a2eda74fba200f551be</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::base::PlannerDataStorage::PlannerDataEdgeData</name>
    <filename>structompl_1_1base_1_1PlannerDataStorage_1_1PlannerDataEdgeData.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::base::PlannerDataStorage::PlannerDataVertexData</name>
    <filename>structompl_1_1base_1_1PlannerDataStorage_1_1PlannerDataVertexData.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::base::PlannerDataVertex</name>
    <filename>classompl_1_1base_1_1PlannerDataVertex.html</filename>
    <member kind="function">
      <type></type>
      <name>PlannerDataVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataVertex.html</anchorfile>
      <anchor>a612f975106d9cb289702f758dabf3214</anchor>
      <arglist>(const State *st, int tag=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PlannerDataVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataVertex.html</anchorfile>
      <anchor>aa546857237ac782b156004b18e9e6af8</anchor>
      <arglist>(const PlannerDataVertex &amp;rhs)=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTag</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataVertex.html</anchorfile>
      <anchor>a130651b42f06d4147b809fe85e0da586</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTag</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataVertex.html</anchorfile>
      <anchor>a4e6d6a6ecf6fdff4c4c74410be5c3596</anchor>
      <arglist>(int tag)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataVertex.html</anchorfile>
      <anchor>ac5b0bef3bc9dacf6cc11e033e770641e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PlannerDataVertex *</type>
      <name>clone</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataVertex.html</anchorfile>
      <anchor>ae7704df1d702f577d7de61a26ab225ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataVertex.html</anchorfile>
      <anchor>abf893b4187acd123f587d7a805f80a8d</anchor>
      <arglist>(const PlannerDataVertex &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataVertex.html</anchorfile>
      <anchor>a022418e77679b9906d418b35ae4d8385</anchor>
      <arglist>(const PlannerDataVertex &amp;rhs) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const State *</type>
      <name>state_</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataVertex.html</anchorfile>
      <anchor>a4f805017e2eadb495ca95f9c1d6b7177</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>tag_</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataVertex.html</anchorfile>
      <anchor>abf0257882aedf96fc9b67f7d6f882f04</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::PlannerDataVertexAnnotated</name>
    <filename>classompl_1_1base_1_1PlannerDataVertexAnnotated.html</filename>
    <base>ompl::base::PlannerDataVertex</base>
    <member kind="function" virtualness="virtual">
      <type>virtual PlannerDataVertex *</type>
      <name>clone</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataVertexAnnotated.html</anchorfile>
      <anchor>a5b396816781cd5c64ed69734a0ea26c9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ompl::base::State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataVertexAnnotated.html</anchorfile>
      <anchor>a2bdc1b4847e6e65788fc5846c0d064d2</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::PlannerInputStates</name>
    <filename>classompl_1_1base_1_1PlannerInputStates.html</filename>
    <member kind="function">
      <type></type>
      <name>PlannerInputStates</name>
      <anchorfile>classompl_1_1base_1_1PlannerInputStates.html</anchorfile>
      <anchor>a20722a602321fb2c4cc102f2d2500842</anchor>
      <arglist>(const PlannerPtr &amp;planner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PlannerInputStates</name>
      <anchorfile>classompl_1_1base_1_1PlannerInputStates.html</anchorfile>
      <anchor>a50f4b865cb2d6c9d7e834be2482f6cbf</anchor>
      <arglist>(const Planner *planner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PlannerInputStates</name>
      <anchorfile>classompl_1_1base_1_1PlannerInputStates.html</anchorfile>
      <anchor>a32329401cc447a38f3c494cc3a774884</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PlannerInputStates</name>
      <anchorfile>classompl_1_1base_1_1PlannerInputStates.html</anchorfile>
      <anchor>a1103c26d0ead2fc41764394b94b1bfbf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1base_1_1PlannerInputStates.html</anchorfile>
      <anchor>a17f6475970c635039e5118687251f644</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restart</name>
      <anchorfile>classompl_1_1base_1_1PlannerInputStates.html</anchorfile>
      <anchor>ae66b7f462e2a76da5342cdc0dbf75482</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update</name>
      <anchorfile>classompl_1_1base_1_1PlannerInputStates.html</anchorfile>
      <anchor>a986c1876d09a254a67673a0272ed355e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>use</name>
      <anchorfile>classompl_1_1base_1_1PlannerInputStates.html</anchorfile>
      <anchor>acdbad81c386b7533a4990ea9020b632d</anchor>
      <arglist>(const ProblemDefinitionPtr &amp;pdef)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>use</name>
      <anchorfile>classompl_1_1base_1_1PlannerInputStates.html</anchorfile>
      <anchor>aa96f1be538c75a8fcd2c487a5deb65dd</anchor>
      <arglist>(const ProblemDefinition *pdef)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkValidity</name>
      <anchorfile>classompl_1_1base_1_1PlannerInputStates.html</anchorfile>
      <anchor>a376ba50bc81572a2b8d79021e05213f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const State *</type>
      <name>nextStart</name>
      <anchorfile>classompl_1_1base_1_1PlannerInputStates.html</anchorfile>
      <anchor>a42a3a7bdbbe09caf937e57785ee97d51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const State *</type>
      <name>nextGoal</name>
      <anchorfile>classompl_1_1base_1_1PlannerInputStates.html</anchorfile>
      <anchor>ae8ea1c2fd3e0e92dbc289a79dd597c98</anchor>
      <arglist>(const PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function">
      <type>const State *</type>
      <name>nextGoal</name>
      <anchorfile>classompl_1_1base_1_1PlannerInputStates.html</anchorfile>
      <anchor>a6dace9a01592d0c820231f3bac444aa3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveMoreStartStates</name>
      <anchorfile>classompl_1_1base_1_1PlannerInputStates.html</anchorfile>
      <anchor>a3af0f27cc94711e6055d0221aa4f9c42</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveMoreGoalStates</name>
      <anchorfile>classompl_1_1base_1_1PlannerInputStates.html</anchorfile>
      <anchor>adfcf64da095fd8953611e739ac40af99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getSeenStartStatesCount</name>
      <anchorfile>classompl_1_1base_1_1PlannerInputStates.html</anchorfile>
      <anchor>afcc94ef11ca1e5ded63c25825daf48f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getSampledGoalsCount</name>
      <anchorfile>classompl_1_1base_1_1PlannerInputStates.html</anchorfile>
      <anchor>ac14d59a86b8e0d4a0d67ef235acac8ee</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::PlannerPtr</name>
    <filename>classompl_1_1base_1_1PlannerPtr.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::base::PlannerSolution</name>
    <filename>structompl_1_1base_1_1PlannerSolution.html</filename>
    <member kind="function">
      <type></type>
      <name>PlannerSolution</name>
      <anchorfile>structompl_1_1base_1_1PlannerSolution.html</anchorfile>
      <anchor>a034be254c19b77056fe089e83900ab2c</anchor>
      <arglist>(const PathPtr &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structompl_1_1base_1_1PlannerSolution.html</anchorfile>
      <anchor>a5dd9c6566aaa4729cd1eebce07dfec6d</anchor>
      <arglist>(const PlannerSolution &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structompl_1_1base_1_1PlannerSolution.html</anchorfile>
      <anchor>ac68900836bd46927fe55aa620ef3f87e</anchor>
      <arglist>(const PlannerSolution &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setApproximate</name>
      <anchorfile>structompl_1_1base_1_1PlannerSolution.html</anchorfile>
      <anchor>a34d3518872fc08fd9eee34e172617e84</anchor>
      <arglist>(double difference)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOptimized</name>
      <anchorfile>structompl_1_1base_1_1PlannerSolution.html</anchorfile>
      <anchor>ad80f84801bc610ac004c47cb35c58e91</anchor>
      <arglist>(const OptimizationObjectivePtr &amp;opt, Cost cost, bool meetsObjective)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlannerName</name>
      <anchorfile>structompl_1_1base_1_1PlannerSolution.html</anchorfile>
      <anchor>aa06d5e3c877a5a7a6f5160f01a2f6d89</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>index_</name>
      <anchorfile>structompl_1_1base_1_1PlannerSolution.html</anchorfile>
      <anchor>a09e5e770a22649214eb8746582845fc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PathPtr</type>
      <name>path_</name>
      <anchorfile>structompl_1_1base_1_1PlannerSolution.html</anchorfile>
      <anchor>a6c983b63da9ee94d5ea0d32a3ab7b825</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>length_</name>
      <anchorfile>structompl_1_1base_1_1PlannerSolution.html</anchorfile>
      <anchor>a953a2d1a57fd31ed9c975482babec42d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>approximate_</name>
      <anchorfile>structompl_1_1base_1_1PlannerSolution.html</anchorfile>
      <anchor>a827421553f0db86c3dcd53c1fe475c6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>difference_</name>
      <anchorfile>structompl_1_1base_1_1PlannerSolution.html</anchorfile>
      <anchor>a9707ec5a38b0a89d32f9d10c2a94f8f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>optimized_</name>
      <anchorfile>structompl_1_1base_1_1PlannerSolution.html</anchorfile>
      <anchor>a19962696ffed99b53e6422d5fcda1fd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OptimizationObjectivePtr</type>
      <name>opt_</name>
      <anchorfile>structompl_1_1base_1_1PlannerSolution.html</anchorfile>
      <anchor>a7d78d2c2cc8d8c5e05cd2232eaa6a634</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Cost</type>
      <name>cost_</name>
      <anchorfile>structompl_1_1base_1_1PlannerSolution.html</anchorfile>
      <anchor>a784f16650e8c1712680afdf01c0fc8ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>plannerName_</name>
      <anchorfile>structompl_1_1base_1_1PlannerSolution.html</anchorfile>
      <anchor>a26f5a4cd93099f755212d46f44717ee3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::base::PlannerSpecs</name>
    <filename>structompl_1_1base_1_1PlannerSpecs.html</filename>
    <member kind="variable">
      <type>GoalType</type>
      <name>recognizedGoal</name>
      <anchorfile>structompl_1_1base_1_1PlannerSpecs.html</anchorfile>
      <anchor>ac8a946673fef335d7a802d9ee8436804</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>multithreaded</name>
      <anchorfile>structompl_1_1base_1_1PlannerSpecs.html</anchorfile>
      <anchor>a7ef07a003ebc248097f479168d75a1e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>approximateSolutions</name>
      <anchorfile>structompl_1_1base_1_1PlannerSpecs.html</anchorfile>
      <anchor>ae2facc9260851b161577e36f5a4baefc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>optimizingPaths</name>
      <anchorfile>structompl_1_1base_1_1PlannerSpecs.html</anchorfile>
      <anchor>a83869b1cd49a91e29b0b926188402a0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>directed</name>
      <anchorfile>structompl_1_1base_1_1PlannerSpecs.html</anchorfile>
      <anchor>abe3ce1c340ba64c14644b0cace72907d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>provingSolutionNonExistence</name>
      <anchorfile>structompl_1_1base_1_1PlannerSpecs.html</anchorfile>
      <anchor>aedf24a2396155415195632b3586fa18c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>canReportIntermediateSolutions</name>
      <anchorfile>structompl_1_1base_1_1PlannerSpecs.html</anchorfile>
      <anchor>a83b066bf6613e8ff877e80bc382400d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::base::PlannerStatus</name>
    <filename>structompl_1_1base_1_1PlannerStatus.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>StatusType</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a5fe3825813b066b664b3dd34dd1bc8c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a5fe3825813b066b664b3dd34dd1bc8c4a69ef0526165cef29fd59ed5b08b03fc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_START</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a5fe3825813b066b664b3dd34dd1bc8c4a1f20d012b563fc223902e24a8bcd7547</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_GOAL</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a5fe3825813b066b664b3dd34dd1bc8c4a2e2b2b7e02900c4417af0ecea272c637</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNRECOGNIZED_GOAL_TYPE</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a5fe3825813b066b664b3dd34dd1bc8c4a47d769205044efa345184a640bd863ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIMEOUT</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a5fe3825813b066b664b3dd34dd1bc8c4a620a03eebe49aa307140d6a4763278fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APPROXIMATE_SOLUTION</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a5fe3825813b066b664b3dd34dd1bc8c4a5fade5f3ded9dd85ce1693c1912edaa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXACT_SOLUTION</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a5fe3825813b066b664b3dd34dd1bc8c4a20f8c901516c72e258d43d7156fe8e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CRASH</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a5fe3825813b066b664b3dd34dd1bc8c4aef20494db78a6a63e22d3ae5edc96f94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ABORT</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a5fe3825813b066b664b3dd34dd1bc8c4a0013f743bb46afbc5bf4e019de43625f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_COUNT</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a5fe3825813b066b664b3dd34dd1bc8c4ac60ae0f04326edcd4fa202cda3dddb33</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a5fe3825813b066b664b3dd34dd1bc8c4a69ef0526165cef29fd59ed5b08b03fc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_START</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a5fe3825813b066b664b3dd34dd1bc8c4a1f20d012b563fc223902e24a8bcd7547</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_GOAL</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a5fe3825813b066b664b3dd34dd1bc8c4a2e2b2b7e02900c4417af0ecea272c637</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNRECOGNIZED_GOAL_TYPE</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a5fe3825813b066b664b3dd34dd1bc8c4a47d769205044efa345184a640bd863ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIMEOUT</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a5fe3825813b066b664b3dd34dd1bc8c4a620a03eebe49aa307140d6a4763278fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APPROXIMATE_SOLUTION</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a5fe3825813b066b664b3dd34dd1bc8c4a5fade5f3ded9dd85ce1693c1912edaa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXACT_SOLUTION</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a5fe3825813b066b664b3dd34dd1bc8c4a20f8c901516c72e258d43d7156fe8e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CRASH</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a5fe3825813b066b664b3dd34dd1bc8c4aef20494db78a6a63e22d3ae5edc96f94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ABORT</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a5fe3825813b066b664b3dd34dd1bc8c4a0013f743bb46afbc5bf4e019de43625f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_COUNT</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a5fe3825813b066b664b3dd34dd1bc8c4ac60ae0f04326edcd4fa202cda3dddb33</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PlannerStatus</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>ae247055bbf41ab29cd49e96daab59b58</anchor>
      <arglist>(StatusType status=UNKNOWN)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PlannerStatus</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a731f2386ad7b74660fc6a622c17aa029</anchor>
      <arglist>(bool hasSolution, bool isApproximate)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>asString</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>ac9bdc9db7d5325710fb9ac74d27900ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>afd12b87195768d599bd92bd76df8cc5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator StatusType</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a14d621eab9a97ad8313988422d4752b0</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::PlannerTerminationCondition</name>
    <filename>classompl_1_1base_1_1PlannerTerminationCondition.html</filename>
    <member kind="function">
      <type></type>
      <name>PlannerTerminationCondition</name>
      <anchorfile>classompl_1_1base_1_1PlannerTerminationCondition.html</anchorfile>
      <anchor>a0652551a119012a21f2ee6371b1cb900</anchor>
      <arglist>(const PlannerTerminationConditionFn &amp;fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PlannerTerminationCondition</name>
      <anchorfile>classompl_1_1base_1_1PlannerTerminationCondition.html</anchorfile>
      <anchor>a6a928395a096b457a2d19d0043e52a61</anchor>
      <arglist>(const PlannerTerminationConditionFn &amp;fn, double period)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classompl_1_1base_1_1PlannerTerminationCondition.html</anchorfile>
      <anchor>a166d6cb5b06ea89bb2efe13040634869</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classompl_1_1base_1_1PlannerTerminationCondition.html</anchorfile>
      <anchor>ae48f79d0761718a8a9646d52f1022223</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>terminate</name>
      <anchorfile>classompl_1_1base_1_1PlannerTerminationCondition.html</anchorfile>
      <anchor>a85fb9853ac33bf2ddce3f0d35efe9aa1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eval</name>
      <anchorfile>classompl_1_1base_1_1PlannerTerminationCondition.html</anchorfile>
      <anchor>a152fa2dc47d52eac57063dc93882559e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::PrecomputedSequence</name>
    <filename>classompl_1_1base_1_1PrecomputedSequence.html</filename>
    <base>ompl::base::DeterministicSequence</base>
    <member kind="function">
      <type></type>
      <name>PrecomputedSequence</name>
      <anchorfile>classompl_1_1base_1_1PrecomputedSequence.html</anchorfile>
      <anchor>a5c2bf446ce273986ba9ac13000e345e0</anchor>
      <arglist>(std::string path, unsigned int dimensions, bool shuffle=false, size_t max_samples=0)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>sample</name>
      <anchorfile>classompl_1_1base_1_1PrecomputedSequence.html</anchorfile>
      <anchor>a41c3ffee4f5b922ef3886812a979d619</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::PrecomputedStateSampler</name>
    <filename>classompl_1_1base_1_1PrecomputedStateSampler.html</filename>
    <base>ompl::base::StateSampler</base>
    <member kind="function">
      <type></type>
      <name>PrecomputedStateSampler</name>
      <anchorfile>classompl_1_1base_1_1PrecomputedStateSampler.html</anchorfile>
      <anchor>a9750853c1506d91b5a854c63b82768a0</anchor>
      <arglist>(const StateSpace *space, const std::vector&lt; const State * &gt; &amp;states)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrecomputedStateSampler</name>
      <anchorfile>classompl_1_1base_1_1PrecomputedStateSampler.html</anchorfile>
      <anchor>a1ea31f3c28245777305d31d0f3da4350</anchor>
      <arglist>(const StateSpace *space, const std::vector&lt; const State * &gt; &amp;states, std::size_t minStateIndex, std::size_t maxStateIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1PrecomputedStateSampler.html</anchorfile>
      <anchor>a8accd87595e0efefd020e1bd83ab67a3</anchor>
      <arglist>(State *state) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleUniformNear</name>
      <anchorfile>classompl_1_1base_1_1PrecomputedStateSampler.html</anchorfile>
      <anchor>aae0c56bd0eb7c48fecd718749427a66a</anchor>
      <arglist>(State *state, const State *near, double distance) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleGaussian</name>
      <anchorfile>classompl_1_1base_1_1PrecomputedStateSampler.html</anchorfile>
      <anchor>a7382904bab7202d40247026ebdfcb2f4</anchor>
      <arglist>(State *state, const State *mean, double stdDev) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const std::vector&lt; const State * &gt; &amp;</type>
      <name>states_</name>
      <anchorfile>classompl_1_1base_1_1PrecomputedStateSampler.html</anchorfile>
      <anchor>ad619b9076a9dfe8c9e0315dcd2b446e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>minStateIndex_</name>
      <anchorfile>classompl_1_1base_1_1PrecomputedStateSampler.html</anchorfile>
      <anchor>a1e38b42ca6d5cfef2ff0b98099c44a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>maxStateIndex_</name>
      <anchorfile>classompl_1_1base_1_1PrecomputedStateSampler.html</anchorfile>
      <anchor>a7a80613f53425775461b42f5b623390b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::ProblemDefinition</name>
    <filename>classompl_1_1base_1_1ProblemDefinition.html</filename>
    <member kind="function">
      <type></type>
      <name>ProblemDefinition</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a9b3921b72163f519f1e4474b60a642bb</anchor>
      <arglist>(SpaceInformationPtr si)</arglist>
    </member>
    <member kind="function">
      <type>ProblemDefinitionPtr</type>
      <name>clone</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>ade29bbc8e28bac270e7bd7293a85499d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SpaceInformationPtr &amp;</type>
      <name>getSpaceInformation</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a992fbaad92f636fc1dc5d59a02197966</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addStartState</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a3120682d036099f68fd26805fee0736d</anchor>
      <arglist>(const State *state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addStartState</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a874c33b1adab325a2ebf489fa04b8099</anchor>
      <arglist>(const ScopedState&lt;&gt; &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasStartState</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a326f73358aaf6c510a8a49996a3eba1b</anchor>
      <arglist>(const State *state, unsigned int *startIndex=nullptr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearStartStates</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a6959a875ace6ebdce9024cd24324fb49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getStartStateCount</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a3288e4b3399075cc2b578ee6d3355e52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const State *</type>
      <name>getStartState</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>ab1f2d8fa8a3c50ddacc83aa74f05d5d0</anchor>
      <arglist>(unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>getStartState</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>ad9fb68d7aab6f613645cf02fa6995c52</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoal</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a039bef3abd7e8319e4ea2e4cda752ff6</anchor>
      <arglist>(const GoalPtr &amp;goal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearGoal</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>ae03b63af701fa3935d50877c53c78e80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GoalPtr &amp;</type>
      <name>getGoal</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a71e20eb387a023333f34b6761a01c64f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getInputStates</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a06bbe8e4e7ba1e019143f74c561c6a78</anchor>
      <arglist>(std::vector&lt; const State * &gt; &amp;states) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartAndGoalStates</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>ab8bac7fdb29b4ee578fc0097eb4ddcae</anchor>
      <arglist>(const State *start, const State *goal, double threshold=std::numeric_limits&lt; double &gt;::epsilon())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalState</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a1692ecead754797abae9b827072aaee0</anchor>
      <arglist>(const State *goal, double threshold=std::numeric_limits&lt; double &gt;::epsilon())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartAndGoalStates</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a5ada7160decb7894ac566615eb22633a</anchor>
      <arglist>(const ScopedState&lt;&gt; &amp;start, const ScopedState&lt;&gt; &amp;goal, const double threshold=std::numeric_limits&lt; double &gt;::epsilon())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalState</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a935f86078c4e65dd397db736c02b3c81</anchor>
      <arglist>(const ScopedState&lt;&gt; &amp;goal, const double threshold=std::numeric_limits&lt; double &gt;::epsilon())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasOptimizationObjective</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>aa67a2a8f431bd6ef73cb52a34042c27e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const OptimizationObjectivePtr &amp;</type>
      <name>getOptimizationObjective</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a7f08584141d6946545fb7cf545283e67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOptimizationObjective</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>ab2c1ea487eb353290651767435f0e74b</anchor>
      <arglist>(const OptimizationObjectivePtr &amp;optimizationObjective)</arglist>
    </member>
    <member kind="function">
      <type>const ReportIntermediateSolutionFn &amp;</type>
      <name>getIntermediateSolutionCallback</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a6d1719c601dfc32613d658d33a24b3c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIntermediateSolutionCallback</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>ad5d02593c2c26824ecaf0e29ef40e596</anchor>
      <arglist>(const ReportIntermediateSolutionFn &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTrivial</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a23854a049ce1f5793e63709e532365f4</anchor>
      <arglist>(unsigned int *startIndex=nullptr, double *distance=nullptr) const</arglist>
    </member>
    <member kind="function">
      <type>PathPtr</type>
      <name>isStraightLinePathValid</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a8e8e574ffe62142e8cda20e01b158417</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fixInvalidInputStates</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a74aa8792df6065a84f1b602db53d108c</anchor>
      <arglist>(double distStart, double distGoal, unsigned int attempts)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSolution</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>aa232fc36277f076cd6ecd4da7581b166</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasExactSolution</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a612902cacc3b1a2bcc367a9e82739132</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasApproximateSolution</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a9b78738e28269c51f0f28103675fd831</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSolutionDifference</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>aece4414743c572ba97044b12da8cc34e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasOptimizedSolution</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>ac728315c091106b709fdcd7b81d6f5e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PathPtr</type>
      <name>getSolutionPath</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>aac56933db4a17e1394b5775eefd63f19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getSolution</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>aa79631369c5a33827233c23a79a70d48</anchor>
      <arglist>(PlannerSolution &amp;solution) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSolutionPath</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a523259d1b4dcebf316409fd546318cfc</anchor>
      <arglist>(const PathPtr &amp;path, bool approximate=false, double difference=-1.0, const std::string &amp;plannerName=&quot;Unknown&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSolutionPath</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a667ba1d502412ff9f8357cacc17471ec</anchor>
      <arglist>(const PlannerSolution &amp;sol) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getSolutionCount</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a2b4142afb668fd9868d1c12904068cb7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; PlannerSolution &gt;</type>
      <name>getSolutions</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>abc0f6bb263b543840045d8789dc3374a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearSolutionPaths</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>ad60eead1eeca89efd194357977982c78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSolutionNonExistenceProof</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a9de3f4de43cc87f4c03ec7d11517be09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearSolutionNonExistenceProof</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a1916346ceb217c0db3db1b0059b54b11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SolutionNonExistenceProofPtr &amp;</type>
      <name>getSolutionNonExistenceProof</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>aacd6d95f5f2386395e1e4a1f9a3f0425</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSolutionNonExistenceProof</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a8b2d1cdeb0b4df2a1e77e6096daf1d10</anchor>
      <arglist>(const SolutionNonExistenceProofPtr &amp;nonExistenceProof)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a4df120ec0b708a2aa8c0960a53388c7a</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>fixInvalidInputState</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a4afcbeee27af97ac5eefdc40ea8ecfbe</anchor>
      <arglist>(State *state, double dist, bool start, unsigned int attempts)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SpaceInformationPtr</type>
      <name>si_</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>ac24e830b5fedc3642f3b3c4194d0decb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; State * &gt;</type>
      <name>startStates_</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>af5d08607983cfd4079df8a88351e0f55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GoalPtr</type>
      <name>goal_</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a3bdc61f288bbf3f1dece9a275cd2c113</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SolutionNonExistenceProofPtr</type>
      <name>nonExistenceProof_</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a9eb7796abd9f95bbad330669973d2664</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OptimizationObjectivePtr</type>
      <name>optimizationObjective_</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>ab9ad7eb5bcfff9223ddcc8a5dab14301</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ReportIntermediateSolutionFn</type>
      <name>intermediateSolutionCallback_</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>ac217dd5eacd9ca281b96a6cfc1c5dc5a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::ProblemDefinitionPtr</name>
    <filename>classompl_1_1base_1_1ProblemDefinitionPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::base::ProjectedStateSampler</name>
    <filename>classompl_1_1base_1_1ProjectedStateSampler.html</filename>
    <base>ompl::base::WrapperStateSampler</base>
    <member kind="function">
      <type></type>
      <name>ProjectedStateSampler</name>
      <anchorfile>classompl_1_1base_1_1ProjectedStateSampler.html</anchorfile>
      <anchor>a210f6ff4505a95ab477b4020917d7372</anchor>
      <arglist>(const ProjectedStateSpace *space, StateSamplerPtr sampler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1ProjectedStateSampler.html</anchorfile>
      <anchor>a3f6c3f9e00ea5d7307df1c4f284a23b4</anchor>
      <arglist>(State *state) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleUniformNear</name>
      <anchorfile>classompl_1_1base_1_1ProjectedStateSampler.html</anchorfile>
      <anchor>afeae8a62192a065a220d469e2a198c7a</anchor>
      <arglist>(State *state, const State *near, double distance) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleGaussian</name>
      <anchorfile>classompl_1_1base_1_1ProjectedStateSampler.html</anchorfile>
      <anchor>a41255c3cf780f61bf541afbea68429ba</anchor>
      <arglist>(State *state, const State *mean, double stdDev) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ConstraintPtr</type>
      <name>constraint_</name>
      <anchorfile>classompl_1_1base_1_1ProjectedStateSampler.html</anchorfile>
      <anchor>a6305265635ffcc1ca82451d404c436c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::ProjectedStateSpace</name>
    <filename>classompl_1_1base_1_1ProjectedStateSpace.html</filename>
    <base>ompl::base::ConstrainedStateSpace</base>
    <member kind="function">
      <type></type>
      <name>ProjectedStateSpace</name>
      <anchorfile>classompl_1_1base_1_1ProjectedStateSpace.html</anchorfile>
      <anchor>abcadcc14f480f2cd402debfed7a6fcac</anchor>
      <arglist>(const StateSpacePtr &amp;ambientSpace, const ConstraintPtr &amp;constraint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ProjectedStateSpace</name>
      <anchorfile>classompl_1_1base_1_1ProjectedStateSpace.html</anchorfile>
      <anchor>a698bc4eb23ed8ecd8f4522a35779fa02</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>StateSamplerPtr</type>
      <name>allocDefaultStateSampler</name>
      <anchorfile>classompl_1_1base_1_1ProjectedStateSpace.html</anchorfile>
      <anchor>a5e97dcbe21a79f0a9c109b9b57f46a4b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>StateSamplerPtr</type>
      <name>allocStateSampler</name>
      <anchorfile>classompl_1_1base_1_1ProjectedStateSpace.html</anchorfile>
      <anchor>a50e26a24f0242133527f17a3b7daa437</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>discreteGeodesic</name>
      <anchorfile>classompl_1_1base_1_1ProjectedStateSpace.html</anchorfile>
      <anchor>a051255c19ce63b8ca1709dc5965aa815</anchor>
      <arglist>(const State *from, const State *to, bool interpolate=false, std::vector&lt; State * &gt; *geodesic=nullptr) const override</arglist>
    </member>
    <docanchor file="classompl_1_1base_1_1ProjectedStateSpace.html">gProject</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::base::ProjectionEvaluator</name>
    <filename>classompl_1_1base_1_1ProjectionEvaluator.html</filename>
    <member kind="function">
      <type></type>
      <name>ProjectionEvaluator</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>ac34c2c0327a221e0b382bb39e0d84ad4</anchor>
      <arglist>(const StateSpace *space)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProjectionEvaluator</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>a9d34d1618b4a23bc0a3785fbe15f6fda</anchor>
      <arglist>(const StateSpacePtr &amp;space)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>a1f0dda6f86ea99915688c4d59bb12042</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>project</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>aabaf42c4d51b8da6537261e64e9d6996</anchor>
      <arglist>(const State *state, Eigen::Ref&lt; Eigen::VectorXd &gt; projection) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCellSizes</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>a159e26be9f83a75a001ad2d3ba477f71</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;cellSizes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCellSizes</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>a4de0e4ca8520aa105d5d345f3e76a2ac</anchor>
      <arglist>(unsigned int dim, double cellSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mulCellSizes</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>a203fee1c17bc3e1d60d85407fc2fe791</anchor>
      <arglist>(double factor)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>userConfigured</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>a09ff940107ec504f5ebdb56833a9b28f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>getCellSizes</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>ae3fafba58f2c04a2cd383a679fd1feab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCellSizes</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>a744b89dd58906210cf44ec64d36bc83a</anchor>
      <arglist>(unsigned int dim) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkCellSizes</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>aa5000d2d4e802a1f4d712cecb5ba74cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inferCellSizes</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>a6990f14246d47c9321f883b34fdf531f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>defaultCellSizes</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>a1a0598137c82fdbedb7a191184d30de1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkBounds</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>aa9a54888b65193281e15292511b54e81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasBounds</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>a0468d9b81366809753ba9aedf3c8a95f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBounds</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>a0b8ac8c10fadde8c8792db04a2dfc41f</anchor>
      <arglist>(const RealVectorBounds &amp;bounds)</arglist>
    </member>
    <member kind="function">
      <type>const RealVectorBounds &amp;</type>
      <name>getBounds</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>a4f2cd2c01deb03f2adb03f9211928b8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inferBounds</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>ac11df5e004d74905fbaa240c4d99ca68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>af40dd2632f9c9e19be07d56532476496</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeCoordinates</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>af0cfc4b596b44abcd9d4c8cac204e917</anchor>
      <arglist>(const Eigen::Ref&lt; Eigen::VectorXd &gt; &amp;projection, Eigen::Ref&lt; Eigen::VectorXi &gt; coord) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeCoordinates</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>aff05d62991d7dc8ba3b68151fb8ce4a4</anchor>
      <arglist>(const State *state, Eigen::Ref&lt; Eigen::VectorXi &gt; coord) const</arglist>
    </member>
    <member kind="function">
      <type>ParamSet &amp;</type>
      <name>params</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>aa15a7ce6c94ca8fb9ea99965d7a3be9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ParamSet &amp;</type>
      <name>params</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>add9802b3e581cb14f891361f9c7290de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printSettings</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>a3ae7ca1a0d93b03fef251f489e9530a5</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printProjection</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>a6ea02f32e6ea9e68951655f14cb714a7</anchor>
      <arglist>(const Eigen::Ref&lt; Eigen::VectorXd &gt; &amp;projection, std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>estimateBounds</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>a8473159a6d845feeb0efd89787137d46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const StateSpace *</type>
      <name>space_</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>a5ecdb9c29409173a34c2efb7eed221a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>cellSizes_</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>afdc4796fe612cf83f74d4b313c664443</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealVectorBounds</type>
      <name>bounds_</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>a3bb101a20dcb4f3f0033092b6def1b13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealVectorBounds</type>
      <name>estimatedBounds_</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>af371bf797f305b43f1bb35cf26b1f2d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>defaultCellSizes_</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>a43fb61982ce66f9e431ebf3b9d0448b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cellSizesWereInferred_</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>aeb34ed364e5eb616fc7b099477a86e89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParamSet</type>
      <name>params_</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>a718e2f2e548a3b5cea3197b5b0c852e3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::ProjectionEvaluatorPtr</name>
    <filename>classompl_1_1base_1_1ProjectionEvaluatorPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::base::ProjectionMatrix</name>
    <filename>classompl_1_1base_1_1ProjectionMatrix.html</filename>
    <member kind="typedef">
      <type>Eigen::MatrixXd</type>
      <name>Matrix</name>
      <anchorfile>classompl_1_1base_1_1ProjectionMatrix.html</anchorfile>
      <anchor>ad2a0425a8572ea23245424c734bddeea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeRandom</name>
      <anchorfile>classompl_1_1base_1_1ProjectionMatrix.html</anchorfile>
      <anchor>a4b1237eab3223b3131bdad392282c333</anchor>
      <arglist>(unsigned int from, unsigned int to, const std::vector&lt; double &gt; &amp;scale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeRandom</name>
      <anchorfile>classompl_1_1base_1_1ProjectionMatrix.html</anchorfile>
      <anchor>afc3b80d72927d215ca0b70c18859a968</anchor>
      <arglist>(unsigned int from, unsigned int to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>project</name>
      <anchorfile>classompl_1_1base_1_1ProjectionMatrix.html</anchorfile>
      <anchor>a2ad28b25b7f2423a6b87b55f9ab99721</anchor>
      <arglist>(const double *from, Eigen::Ref&lt; Eigen::VectorXd &gt; to) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classompl_1_1base_1_1ProjectionMatrix.html</anchorfile>
      <anchor>acfeb50f1de1659f0664f0c4a38935647</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>ComputeRandom</name>
      <anchorfile>classompl_1_1base_1_1ProjectionMatrix.html</anchorfile>
      <anchor>af799d9ba46e3bc2934efc58efc22dbc1</anchor>
      <arglist>(unsigned int from, unsigned int to, const std::vector&lt; double &gt; &amp;scale)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>ComputeRandom</name>
      <anchorfile>classompl_1_1base_1_1ProjectionMatrix.html</anchorfile>
      <anchor>a2e424c635ee5cf1f18fcba7d44f63a67</anchor>
      <arglist>(unsigned int from, unsigned int to)</arglist>
    </member>
    <member kind="variable">
      <type>Matrix</type>
      <name>mat</name>
      <anchorfile>classompl_1_1base_1_1ProjectionMatrix.html</anchorfile>
      <anchor>a0852751bba6e533c0e08792be5c55444</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::RealVectorBounds</name>
    <filename>classompl_1_1base_1_1RealVectorBounds.html</filename>
    <member kind="function">
      <type></type>
      <name>RealVectorBounds</name>
      <anchorfile>classompl_1_1base_1_1RealVectorBounds.html</anchorfile>
      <anchor>a8da7c7270bda6393663ffcad5a712dff</anchor>
      <arglist>(unsigned int dim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLow</name>
      <anchorfile>classompl_1_1base_1_1RealVectorBounds.html</anchorfile>
      <anchor>a6f63c8d793a056e2160e5d9d85c27a58</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHigh</name>
      <anchorfile>classompl_1_1base_1_1RealVectorBounds.html</anchorfile>
      <anchor>a756253c602ddc6bd299dc9c870fadfee</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLow</name>
      <anchorfile>classompl_1_1base_1_1RealVectorBounds.html</anchorfile>
      <anchor>a24a3b3bb10acfeda7fabbf25c618fb09</anchor>
      <arglist>(unsigned int index, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHigh</name>
      <anchorfile>classompl_1_1base_1_1RealVectorBounds.html</anchorfile>
      <anchor>a2786ec8d6d7683c67e578021ee9fadba</anchor>
      <arglist>(unsigned int index, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classompl_1_1base_1_1RealVectorBounds.html</anchorfile>
      <anchor>a94d66b44a5fc0f12aea312a89b86c83d</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVolume</name>
      <anchorfile>classompl_1_1base_1_1RealVectorBounds.html</anchorfile>
      <anchor>a45a5d092455628d05513d0e08a6a7ccc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>getDifference</name>
      <anchorfile>classompl_1_1base_1_1RealVectorBounds.html</anchorfile>
      <anchor>a41c854b6c565f765eb710e11f026de20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>check</name>
      <anchorfile>classompl_1_1base_1_1RealVectorBounds.html</anchorfile>
      <anchor>ac4b65b598e078f2c9c7ec32225604aa8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>low</name>
      <anchorfile>classompl_1_1base_1_1RealVectorBounds.html</anchorfile>
      <anchor>a36ebebb6a9e116093581afbd07425baa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>high</name>
      <anchorfile>classompl_1_1base_1_1RealVectorBounds.html</anchorfile>
      <anchor>a06827561804a768d6ee86a20a664153c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::RealVectorDeterministicStateSampler</name>
    <filename>classompl_1_1base_1_1RealVectorDeterministicStateSampler.html</filename>
    <base>ompl::base::DeterministicStateSampler</base>
    <member kind="function">
      <type></type>
      <name>RealVectorDeterministicStateSampler</name>
      <anchorfile>classompl_1_1base_1_1RealVectorDeterministicStateSampler.html</anchorfile>
      <anchor>a0ca9132d1179a07a5688e13c5b72d41e</anchor>
      <arglist>(const StateSpace *space, DeterministicSamplerType type=DeterministicSamplerType::HALTON)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealVectorDeterministicStateSampler</name>
      <anchorfile>classompl_1_1base_1_1RealVectorDeterministicStateSampler.html</anchorfile>
      <anchor>a25f4179edda21f4bcb3c6de9b363b588</anchor>
      <arglist>(const StateSpace *space, std::shared_ptr&lt; DeterministicSequence &gt; sequence_ptr, bool stretch=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1RealVectorDeterministicStateSampler.html</anchorfile>
      <anchor>a8b7df15a83a119772d4abc263aa1a40b</anchor>
      <arglist>(State *state) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleUniformNear</name>
      <anchorfile>classompl_1_1base_1_1RealVectorDeterministicStateSampler.html</anchorfile>
      <anchor>a2a7814d2b63a38fa666e3e553f5e27be</anchor>
      <arglist>(State *state, const State *near, double distance) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleGaussian</name>
      <anchorfile>classompl_1_1base_1_1RealVectorDeterministicStateSampler.html</anchorfile>
      <anchor>a35e01a9dc8468c8b6a2b23ff14618924</anchor>
      <arglist>(State *state, const State *mean, double stdDev) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::RealVectorIdentityProjectionEvaluator</name>
    <filename>classompl_1_1base_1_1RealVectorIdentityProjectionEvaluator.html</filename>
    <base>ompl::base::ProjectionEvaluator</base>
    <member kind="function">
      <type></type>
      <name>RealVectorIdentityProjectionEvaluator</name>
      <anchorfile>classompl_1_1base_1_1RealVectorIdentityProjectionEvaluator.html</anchorfile>
      <anchor>ae3e16c0a046fc65e07ef6ea5b0b14cdf</anchor>
      <arglist>(const StateSpace *space, const std::vector&lt; double &gt; &amp;cellSizes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealVectorIdentityProjectionEvaluator</name>
      <anchorfile>classompl_1_1base_1_1RealVectorIdentityProjectionEvaluator.html</anchorfile>
      <anchor>a5863e1c1ad256af0ab994e004ee6803c</anchor>
      <arglist>(const StateSpacePtr &amp;space, const std::vector&lt; double &gt; &amp;cellSizes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealVectorIdentityProjectionEvaluator</name>
      <anchorfile>classompl_1_1base_1_1RealVectorIdentityProjectionEvaluator.html</anchorfile>
      <anchor>acb78c07ffa0e9c4168e3c3dcc1e7fa9f</anchor>
      <arglist>(const StateSpace *space)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealVectorIdentityProjectionEvaluator</name>
      <anchorfile>classompl_1_1base_1_1RealVectorIdentityProjectionEvaluator.html</anchorfile>
      <anchor>afa2da8616bef27bfdc2a68b86fe66700</anchor>
      <arglist>(const StateSpacePtr &amp;space)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1base_1_1RealVectorIdentityProjectionEvaluator.html</anchorfile>
      <anchor>a11c6ca084b870a69aad8e1b4af088bb3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>defaultCellSizes</name>
      <anchorfile>classompl_1_1base_1_1RealVectorIdentityProjectionEvaluator.html</anchorfile>
      <anchor>a644561c7d81563b6b612d4224dd9a19e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1base_1_1RealVectorIdentityProjectionEvaluator.html</anchorfile>
      <anchor>aa0636347baf5991c335fca734c85861a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>project</name>
      <anchorfile>classompl_1_1base_1_1RealVectorIdentityProjectionEvaluator.html</anchorfile>
      <anchor>a5f83dd9e4be33f03e90a9e8470e1886b</anchor>
      <arglist>(const State *state, Eigen::Ref&lt; Eigen::VectorXd &gt; projection) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::RealVectorLinearProjectionEvaluator</name>
    <filename>classompl_1_1base_1_1RealVectorLinearProjectionEvaluator.html</filename>
    <base>ompl::base::ProjectionEvaluator</base>
    <member kind="function">
      <type></type>
      <name>RealVectorLinearProjectionEvaluator</name>
      <anchorfile>classompl_1_1base_1_1RealVectorLinearProjectionEvaluator.html</anchorfile>
      <anchor>a946eba69ff8d55f401bd0b4cb1effec2</anchor>
      <arglist>(const StateSpace *space, const std::vector&lt; double &gt; &amp;cellSizes, const ProjectionMatrix::Matrix &amp;projection)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealVectorLinearProjectionEvaluator</name>
      <anchorfile>classompl_1_1base_1_1RealVectorLinearProjectionEvaluator.html</anchorfile>
      <anchor>ac5e7af0faca4f18988429ed652004ef2</anchor>
      <arglist>(const StateSpacePtr &amp;space, const std::vector&lt; double &gt; &amp;cellSizes, const ProjectionMatrix::Matrix &amp;projection)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealVectorLinearProjectionEvaluator</name>
      <anchorfile>classompl_1_1base_1_1RealVectorLinearProjectionEvaluator.html</anchorfile>
      <anchor>a20910c41a78a5cdb0e4d509bd4ceee02</anchor>
      <arglist>(const StateSpace *space, const ProjectionMatrix::Matrix &amp;projection)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealVectorLinearProjectionEvaluator</name>
      <anchorfile>classompl_1_1base_1_1RealVectorLinearProjectionEvaluator.html</anchorfile>
      <anchor>a15447ba55c7448f739f4c3a0be796081</anchor>
      <arglist>(const StateSpacePtr &amp;space, const ProjectionMatrix::Matrix &amp;projection)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1base_1_1RealVectorLinearProjectionEvaluator.html</anchorfile>
      <anchor>a9a653029b313ff50dc9baa84142cd06c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>project</name>
      <anchorfile>classompl_1_1base_1_1RealVectorLinearProjectionEvaluator.html</anchorfile>
      <anchor>a7a7f2b9055002247c3aca4ee178e99a6</anchor>
      <arglist>(const State *state, Eigen::Ref&lt; Eigen::VectorXd &gt; projection) const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ProjectionMatrix</type>
      <name>projection_</name>
      <anchorfile>classompl_1_1base_1_1RealVectorLinearProjectionEvaluator.html</anchorfile>
      <anchor>a787c82b4b59d7fa379040b1a65a82f8a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::RealVectorOrthogonalProjectionEvaluator</name>
    <filename>classompl_1_1base_1_1RealVectorOrthogonalProjectionEvaluator.html</filename>
    <base>ompl::base::ProjectionEvaluator</base>
    <member kind="function">
      <type></type>
      <name>RealVectorOrthogonalProjectionEvaluator</name>
      <anchorfile>classompl_1_1base_1_1RealVectorOrthogonalProjectionEvaluator.html</anchorfile>
      <anchor>a1f7ec8067efd154f51c0fd7aac2807fb</anchor>
      <arglist>(const StateSpace *space, const std::vector&lt; double &gt; &amp;cellSizes, std::vector&lt; unsigned int &gt; components)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealVectorOrthogonalProjectionEvaluator</name>
      <anchorfile>classompl_1_1base_1_1RealVectorOrthogonalProjectionEvaluator.html</anchorfile>
      <anchor>aaedaa979910b30535c3375e74bb320f1</anchor>
      <arglist>(const StateSpacePtr &amp;space, const std::vector&lt; double &gt; &amp;cellSizes, std::vector&lt; unsigned int &gt; components)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealVectorOrthogonalProjectionEvaluator</name>
      <anchorfile>classompl_1_1base_1_1RealVectorOrthogonalProjectionEvaluator.html</anchorfile>
      <anchor>a1f183e93f08c60d2aed64bc1bf283165</anchor>
      <arglist>(const StateSpace *space, std::vector&lt; unsigned int &gt; components)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealVectorOrthogonalProjectionEvaluator</name>
      <anchorfile>classompl_1_1base_1_1RealVectorOrthogonalProjectionEvaluator.html</anchorfile>
      <anchor>af37693d0ba7039f0b1cba2fb5dd284f8</anchor>
      <arglist>(const StateSpacePtr &amp;space, std::vector&lt; unsigned int &gt; components)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1base_1_1RealVectorOrthogonalProjectionEvaluator.html</anchorfile>
      <anchor>a0d4e15dabeb1de6a03bb0843b3979349</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>defaultCellSizes</name>
      <anchorfile>classompl_1_1base_1_1RealVectorOrthogonalProjectionEvaluator.html</anchorfile>
      <anchor>a2fd24ecf062cbe3348eb3f6170fde1b5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>project</name>
      <anchorfile>classompl_1_1base_1_1RealVectorOrthogonalProjectionEvaluator.html</anchorfile>
      <anchor>ac6bfca52b57782e41bd044c3222d3da5</anchor>
      <arglist>(const State *state, Eigen::Ref&lt; Eigen::VectorXd &gt; projection) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>copyBounds</name>
      <anchorfile>classompl_1_1base_1_1RealVectorOrthogonalProjectionEvaluator.html</anchorfile>
      <anchor>ab170786ef29b2f224b5ac52dbffbf329</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>components_</name>
      <anchorfile>classompl_1_1base_1_1RealVectorOrthogonalProjectionEvaluator.html</anchorfile>
      <anchor>a0d7d60d956eca6610bb8102164ec502a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::RealVectorRandomLinearProjectionEvaluator</name>
    <filename>classompl_1_1base_1_1RealVectorRandomLinearProjectionEvaluator.html</filename>
    <base>ompl::base::RealVectorLinearProjectionEvaluator</base>
    <member kind="function">
      <type></type>
      <name>RealVectorRandomLinearProjectionEvaluator</name>
      <anchorfile>classompl_1_1base_1_1RealVectorRandomLinearProjectionEvaluator.html</anchorfile>
      <anchor>a566a72305f24ad756006096745e553ad</anchor>
      <arglist>(const StateSpace *space, const std::vector&lt; double &gt; &amp;cellSizes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealVectorRandomLinearProjectionEvaluator</name>
      <anchorfile>classompl_1_1base_1_1RealVectorRandomLinearProjectionEvaluator.html</anchorfile>
      <anchor>a5539f597a77221057145270ce5c7774a</anchor>
      <arglist>(const StateSpacePtr &amp;space, const std::vector&lt; double &gt; &amp;cellSizes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealVectorRandomLinearProjectionEvaluator</name>
      <anchorfile>classompl_1_1base_1_1RealVectorRandomLinearProjectionEvaluator.html</anchorfile>
      <anchor>a1f7c683afb977a5f1b3a5c0ff91cfde4</anchor>
      <arglist>(const StateSpace *space, unsigned int dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealVectorRandomLinearProjectionEvaluator</name>
      <anchorfile>classompl_1_1base_1_1RealVectorRandomLinearProjectionEvaluator.html</anchorfile>
      <anchor>a81f612abf40ec2b04aeaf3325639edbe</anchor>
      <arglist>(const StateSpacePtr &amp;space, unsigned int dim)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::RealVectorStateSampler</name>
    <filename>classompl_1_1base_1_1RealVectorStateSampler.html</filename>
    <base>ompl::base::StateSampler</base>
    <member kind="function">
      <type></type>
      <name>RealVectorStateSampler</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSampler.html</anchorfile>
      <anchor>a2e895e10de2cb054c0a50ffe7e99e7bf</anchor>
      <arglist>(const StateSpace *space)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSampler.html</anchorfile>
      <anchor>ae7d1d91781162abff650773f310b7dd8</anchor>
      <arglist>(State *state) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleUniformNear</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSampler.html</anchorfile>
      <anchor>ab5fc83d7ad977dbf63de819d47aaf16e</anchor>
      <arglist>(State *state, const State *near, double distance) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleGaussian</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSampler.html</anchorfile>
      <anchor>a2648da566d6aef9b4255959840eb1534</anchor>
      <arglist>(State *state, const State *mean, double stdDev) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::RealVectorStateSpace</name>
    <filename>classompl_1_1base_1_1RealVectorStateSpace.html</filename>
    <base>ompl::base::StateSpace</base>
    <class kind="class">ompl::base::RealVectorStateSpace::StateType</class>
    <member kind="function">
      <type></type>
      <name>RealVectorStateSpace</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a345793d578ff70b4de5fb5c3a8e0a93c</anchor>
      <arglist>(unsigned int dim=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDimension</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a2893436790633b216ed31123b3cf1634</anchor>
      <arglist>(double minBound=0.0, double maxBound=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDimension</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a03b7187e42e78e2874db062dc88a1bd0</anchor>
      <arglist>(const std::string &amp;name, double minBound=0.0, double maxBound=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBounds</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>ab53c0ef2a517e34f4c387785dd3f8956</anchor>
      <arglist>(const RealVectorBounds &amp;bounds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBounds</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a592f658c4d3c546d96342146d18b5d13</anchor>
      <arglist>(double low, double high)</arglist>
    </member>
    <member kind="function">
      <type>const RealVectorBounds &amp;</type>
      <name>getBounds</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>aeb6e1a0d0ba39ba3cd65cd9e4f15fc91</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a7fd8f4639bb51b0b6914516a4fd77c13</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getDimensionName</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>ac7a5a48f118ce1ff44be88910e687a10</anchor>
      <arglist>(unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDimensionIndex</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>acd2e6ca5ea18b3b504c02e8c0977cb80</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimensionName</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a2d387a4a02fafea56315ddd449703847</anchor>
      <arglist>(unsigned int index, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a63e660bc9e2cbf07790ceba724cd0d30</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMeasure</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a5387cc1159eeb664908a672cd8abb101</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enforceBounds</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a091353fe203537d37f6f7edb5f470b08</anchor>
      <arglist>(State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a43bb919ec8cc04d8d76d1f89d9c2b4a1</anchor>
      <arglist>(const State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyState</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>ae25f0a2a19b9c3279206504980162a58</anchor>
      <arglist>(State *destination, const State *source) const override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getSerializationLength</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a9945ecae6103ca3f11d23319d36318a6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a218d3eeab9390b79097f805a134c33ef</anchor>
      <arglist>(void *serialization, const State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserialize</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>abd6fbbab1e4d3554a8209dd85921f806</anchor>
      <arglist>(State *state, const void *serialization) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a8226c880e4799cb219cadab1e601938b</anchor>
      <arglist>(const State *state1, const State *state2) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalStates</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a127e291136bc13163f31df38fa063249</anchor>
      <arglist>(const State *state1, const State *state2) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a51a2197e5e5d8135bb3e1f8345d10e3e</anchor>
      <arglist>(const State *from, const State *to, double t, State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>StateSamplerPtr</type>
      <name>allocDefaultStateSampler</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>afc1dfe21fb1c14bfe22134fb94ce7f7e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>allocState</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a4cc723eec1cb8991e2fdaac90c211d6e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeState</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a9299690720e9ea1b168c44e4ed7f45d8</anchor>
      <arglist>(State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getValueAddressAtIndex</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a3f603aecff4022fc21ef025c0a1e8ba4</anchor>
      <arglist>(State *state, unsigned int index) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printState</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>ae6b3a68ea2fd2fd5513ff2a3e612d234</anchor>
      <arglist>(const State *state, std::ostream &amp;out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printSettings</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a3d498284ea590cbee4342fde78625af7</anchor>
      <arglist>(std::ostream &amp;out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerProjections</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a60c1816893f4f3602b831b7ebc7cb0b7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>ae1a7cdc499b0f5d2ee7c1c36756a5ffd</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>dimension_</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a1d187d416ce5c4d0bc101912e6e7ae7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealVectorBounds</type>
      <name>bounds_</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a09ec78ff21dcbec292a4694da8f8ab92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>dimensionNames_</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a58d503f751e68f0ae946b48b526444f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, unsigned int &gt;</type>
      <name>dimensionIndex_</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>abc8aaf3fdd92ce6d9006c1095deeb705</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::RealVectorStateSpace::StateType</name>
    <filename>classompl_1_1base_1_1RealVectorStateSpace_1_1StateType.html</filename>
    <base>ompl::base::State</base>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace_1_1StateType.html</anchorfile>
      <anchor>a7d61d13c268dbee8d77eac5bdfee8c02</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace_1_1StateType.html</anchorfile>
      <anchor>a8efe5303cf53d309c12fe3b406ccd97c</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>values</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace_1_1StateType.html</anchorfile>
      <anchor>a916575eb76687da3b47a2d9699128498</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::ReedsSheppMotionValidator</name>
    <filename>classompl_1_1base_1_1ReedsSheppMotionValidator.html</filename>
    <base>ompl::base::MotionValidator</base>
    <member kind="function">
      <type>bool</type>
      <name>checkMotion</name>
      <anchorfile>classompl_1_1base_1_1ReedsSheppMotionValidator.html</anchorfile>
      <anchor>a82b6fdef960ee03d0114a50fa5b18e14</anchor>
      <arglist>(const State *s1, const State *s2) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkMotion</name>
      <anchorfile>classompl_1_1base_1_1ReedsSheppMotionValidator.html</anchorfile>
      <anchor>a6740ba74e90b9f0d5f72073a22932af9</anchor>
      <arglist>(const State *s1, const State *s2, std::pair&lt; State *, double &gt; &amp;lastValid) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::ReedsSheppStateSpace</name>
    <filename>classompl_1_1base_1_1ReedsSheppStateSpace.html</filename>
    <base>ompl::base::SE2StateSpace</base>
    <class kind="class">ompl::base::ReedsSheppStateSpace::ReedsSheppPath</class>
    <member kind="enumeration">
      <type></type>
      <name>ReedsSheppPathSegmentType</name>
      <anchorfile>classompl_1_1base_1_1ReedsSheppStateSpace.html</anchorfile>
      <anchor>a2b3e89dd4d89098fc1cfc2e38c27827d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classompl_1_1base_1_1ReedsSheppStateSpace.html</anchorfile>
      <anchor>ad4aa0dbcb96d74927ccd89860a72434c</anchor>
      <arglist>(const State *state1, const State *state2) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1base_1_1ReedsSheppStateSpace.html</anchorfile>
      <anchor>aa155c1bd29a9e685daf136dd13c28201</anchor>
      <arglist>(const State *from, const State *to, double t, State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sanityChecks</name>
      <anchorfile>classompl_1_1base_1_1ReedsSheppStateSpace.html</anchorfile>
      <anchor>a21ad5824d83b1241a37c33eb4cd5c761</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>ReedsSheppPath</type>
      <name>reedsShepp</name>
      <anchorfile>classompl_1_1base_1_1ReedsSheppStateSpace.html</anchorfile>
      <anchor>a9d067ed98fdd84037500b0f34b410aa5</anchor>
      <arglist>(const State *state1, const State *state2) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ReedsSheppPathSegmentType</type>
      <name>reedsSheppPathType</name>
      <anchorfile>classompl_1_1base_1_1ReedsSheppStateSpace.html</anchorfile>
      <anchor>aec046690209af17a5072c7072739fdbb</anchor>
      <arglist>[18][5]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>rho_</name>
      <anchorfile>classompl_1_1base_1_1ReedsSheppStateSpace.html</anchorfile>
      <anchor>ab7fc1510910e2d5bc28bff7d3287576e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::ReedsSheppStateSpace::ReedsSheppPath</name>
    <filename>classompl_1_1base_1_1ReedsSheppStateSpace_1_1ReedsSheppPath.html</filename>
    <member kind="variable">
      <type>const ReedsSheppPathSegmentType *</type>
      <name>type_</name>
      <anchorfile>classompl_1_1base_1_1ReedsSheppStateSpace_1_1ReedsSheppPath.html</anchorfile>
      <anchor>af887ee3c44dc99376f4ca49f879af1f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>length_</name>
      <anchorfile>classompl_1_1base_1_1ReedsSheppStateSpace_1_1ReedsSheppPath.html</anchorfile>
      <anchor>a1e3048dd0037002f0f24c6f75797a631</anchor>
      <arglist>[5]</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>totalLength_</name>
      <anchorfile>classompl_1_1base_1_1ReedsSheppStateSpace_1_1ReedsSheppPath.html</anchorfile>
      <anchor>a120653c4e931d9f5bd8920dad5a33332</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::RejectionInfSampler</name>
    <filename>classompl_1_1base_1_1RejectionInfSampler.html</filename>
    <base>ompl::base::InformedSampler</base>
    <member kind="function">
      <type></type>
      <name>RejectionInfSampler</name>
      <anchorfile>classompl_1_1base_1_1RejectionInfSampler.html</anchorfile>
      <anchor>a53d96a4c09e66342654f016b63c82ee7</anchor>
      <arglist>(const ProblemDefinitionPtr &amp;probDefn, unsigned int maxNumberCalls)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1RejectionInfSampler.html</anchorfile>
      <anchor>acb07878e9604bace24232f7c79662eb3</anchor>
      <arglist>(State *statePtr, const Cost &amp;maxCost) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1RejectionInfSampler.html</anchorfile>
      <anchor>ae1bdf28788d1e9aa6bd9876b6c5616e3</anchor>
      <arglist>(State *statePtr, const Cost &amp;minCost, const Cost &amp;maxCost) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasInformedMeasure</name>
      <anchorfile>classompl_1_1base_1_1RejectionInfSampler.html</anchorfile>
      <anchor>a85d0e8e8e0dab1aadea51b0a430b9b9a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getInformedMeasure</name>
      <anchorfile>classompl_1_1base_1_1RejectionInfSampler.html</anchorfile>
      <anchor>af19fc2bd258f6081c8b9821fe86e6547</anchor>
      <arglist>(const Cost &amp;) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getInformedMeasure</name>
      <anchorfile>classompl_1_1base_1_1RejectionInfSampler.html</anchorfile>
      <anchor>a54f4367347614a0b809bb78612e2a14b</anchor>
      <arglist>(const Cost &amp;, const Cost &amp;) const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::base::SamplerSelector</name>
    <filename>structompl_1_1base_1_1SamplerSelector.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>ompl::base::ScopedState</name>
    <filename>classompl_1_1base_1_1ScopedState.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename T::StateType</type>
      <name>StateType</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a2bd93acc81c5828655ac80e20fad14ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScopedState</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a7d5d0be9ab08141bdc4b896f6a0fcbfd</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScopedState</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a7d3325975ba18511c645621cbc174a3b</anchor>
      <arglist>(StateSpacePtr space)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScopedState</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>aa6f35a339ef5e31b0a163a829f80f5b1</anchor>
      <arglist>(const ScopedState&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScopedState</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a7eee444e73183e9d2d4872a80ec4169d</anchor>
      <arglist>(const ScopedState&lt; O &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScopedState</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>af68278b9641db78ff5c0655b73853aef</anchor>
      <arglist>(StateSpacePtr space, const State *state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScopedState</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a12a01012a255416cefd52ceda1ae452a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StateSpacePtr &amp;</type>
      <name>getSpace</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>ad830e8623923b00e9135d7e12d251e69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ScopedState&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>ac4fb27b32ef5e413b1a2ad8cfc84f7a4</anchor>
      <arglist>(const ScopedState&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ScopedState&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>af81845da48cd2995b0786c1a2135e6a6</anchor>
      <arglist>(const State *other)</arglist>
    </member>
    <member kind="function">
      <type>ScopedState&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a2a942938fd27f567e50c882448a36249</anchor>
      <arglist>(const State &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ScopedState&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a8c98dd91417107ba3d116859ea430437</anchor>
      <arglist>(const ScopedState&lt; O &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ScopedState&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a483e5d636b2955b73f4642e6b90cda9f</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;reals)</arglist>
    </member>
    <member kind="function">
      <type>ScopedState&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a50cbd5b4ee7fca852b2e6279f0980f8a</anchor>
      <arglist>(const double value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a64cf171ef0bab3b2ba48d4a439b0a0fe</anchor>
      <arglist>(const ScopedState&lt; O &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>aa1412eb18ccbc845962b44c943b657c1</anchor>
      <arglist>(const ScopedState&lt; O &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const ScopedState</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a0ca01b06ec4c07697b786b15dde16331</anchor>
      <arglist>(const StateSpacePtr &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a58359e139ad823db181bc12fbcf3aafd</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a37b4c3c3b7b4784312088cfabca2acc6</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>acf1b49e5236b3a6630322f590eb7dee0</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a4ddc8daee19b68a1cac40347213c5dc2</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a89a8340b6b2ee65f2e368b8725c52a7c</anchor>
      <arglist>(const ScopedState&lt; O &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>ad915d57cc0e37d7c8eeab8d763308e70</anchor>
      <arglist>(const State *state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>random</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a34c0bab0e18eb1c000d0e0f0ab3dd917</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enforceBounds</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a5472cf72580aa57fb4f39311094226b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a2ff2bb095f10a3675b01483681afe8e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>reals</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>ae9d9cbef04113f2ff83e69743abfcf05</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a08d80c75d55d80915198bdb5a16a7c7d</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>StateType &amp;</type>
      <name>operator*</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a19512f301d4e91fbd132fcf3d69b2b22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StateType &amp;</type>
      <name>operator*</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>aed69a968eed180737332efe4b7e69017</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StateType *</type>
      <name>operator-&gt;</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a833278352214f2d71d40f6ef8b11895e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StateType *</type>
      <name>operator-&gt;</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a913cf0bba19b7d41883c6d35e7fc6011</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StateType *</type>
      <name>get</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a055e6b97092ffbc0f5e485f661db0e49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StateType *</type>
      <name>get</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a01d7da6bccd9693940df78105e11c46d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StateType *</type>
      <name>operator()</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a4c73b2920b2a18549dc95ce4e9f3afcc</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::SE2DeterministicStateSampler</name>
    <filename>classompl_1_1base_1_1SE2DeterministicStateSampler.html</filename>
    <base>ompl::base::DeterministicStateSampler</base>
    <member kind="function">
      <type></type>
      <name>SE2DeterministicStateSampler</name>
      <anchorfile>classompl_1_1base_1_1SE2DeterministicStateSampler.html</anchorfile>
      <anchor>ad5a7b30ef79cd0a238f97a61bca586ac</anchor>
      <arglist>(const StateSpace *space, DeterministicSamplerType type=DeterministicSamplerType::HALTON)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SE2DeterministicStateSampler</name>
      <anchorfile>classompl_1_1base_1_1SE2DeterministicStateSampler.html</anchorfile>
      <anchor>a4bec727d2331b27c05a868cd4fa71f3f</anchor>
      <arglist>(const StateSpace *space, std::shared_ptr&lt; DeterministicSequence &gt; sequence_ptr, bool stretch_rv=true, bool stretch_so2=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1SE2DeterministicStateSampler.html</anchorfile>
      <anchor>af388cf69dfed350b2e075c07805f8d4b</anchor>
      <arglist>(State *state) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleUniformNear</name>
      <anchorfile>classompl_1_1base_1_1SE2DeterministicStateSampler.html</anchorfile>
      <anchor>a4cfb60e9d8a633e55d454414a727f589</anchor>
      <arglist>(State *state, const State *near, double distance) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleGaussian</name>
      <anchorfile>classompl_1_1base_1_1SE2DeterministicStateSampler.html</anchorfile>
      <anchor>a2186224213fd1b4fb77101e3c0c87409</anchor>
      <arglist>(State *state, const State *mean, double stdDev) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::SE2StateSpace</name>
    <filename>classompl_1_1base_1_1SE2StateSpace.html</filename>
    <base>ompl::base::CompoundStateSpace</base>
    <class kind="class">ompl::base::SE2StateSpace::StateType</class>
    <member kind="function">
      <type>void</type>
      <name>setBounds</name>
      <anchorfile>classompl_1_1base_1_1SE2StateSpace.html</anchorfile>
      <anchor>aa39665e7053e3fcc9f26d1cc557914f8</anchor>
      <arglist>(const RealVectorBounds &amp;bounds)</arglist>
    </member>
    <member kind="function">
      <type>const RealVectorBounds &amp;</type>
      <name>getBounds</name>
      <anchorfile>classompl_1_1base_1_1SE2StateSpace.html</anchorfile>
      <anchor>a0d16f84351203cc329b5c2a02f69a85a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>allocState</name>
      <anchorfile>classompl_1_1base_1_1SE2StateSpace.html</anchorfile>
      <anchor>a244fe4273f3dabb2d69e17d5d3640799</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeState</name>
      <anchorfile>classompl_1_1base_1_1SE2StateSpace.html</anchorfile>
      <anchor>a53b49a591ef0b1a9a6446ce04a63bcb0</anchor>
      <arglist>(State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerProjections</name>
      <anchorfile>classompl_1_1base_1_1SE2StateSpace.html</anchorfile>
      <anchor>a3f297a6556d678778d60a9448461adf5</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::SE2StateSpace::StateType</name>
    <filename>classompl_1_1base_1_1SE2StateSpace_1_1StateType.html</filename>
    <base>ompl::base::CompoundState</base>
    <member kind="function">
      <type>double</type>
      <name>getX</name>
      <anchorfile>classompl_1_1base_1_1SE2StateSpace_1_1StateType.html</anchorfile>
      <anchor>aeefa0c836230f9a8a77df770661bf046</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getY</name>
      <anchorfile>classompl_1_1base_1_1SE2StateSpace_1_1StateType.html</anchorfile>
      <anchor>a8f9fc816133b37557b4f3f1fde60ceea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getYaw</name>
      <anchorfile>classompl_1_1base_1_1SE2StateSpace_1_1StateType.html</anchorfile>
      <anchor>a5cc254d71682618fb8cd7006c9e07d09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setX</name>
      <anchorfile>classompl_1_1base_1_1SE2StateSpace_1_1StateType.html</anchorfile>
      <anchor>a9df0f4ee9efab3c90148bec5080e1dc8</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setY</name>
      <anchorfile>classompl_1_1base_1_1SE2StateSpace_1_1StateType.html</anchorfile>
      <anchor>a4dd59df1ffc4f868556d0e507984a07b</anchor>
      <arglist>(double y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setXY</name>
      <anchorfile>classompl_1_1base_1_1SE2StateSpace_1_1StateType.html</anchorfile>
      <anchor>a404c1c0e98be35ce2b35885e8180a616</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setYaw</name>
      <anchorfile>classompl_1_1base_1_1SE2StateSpace_1_1StateType.html</anchorfile>
      <anchor>abc32a6219bee45cf35d0323d2deb7de3</anchor>
      <arglist>(double yaw)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::SE3StateSpace</name>
    <filename>classompl_1_1base_1_1SE3StateSpace.html</filename>
    <base>ompl::base::CompoundStateSpace</base>
    <class kind="class">ompl::base::SE3StateSpace::StateType</class>
    <member kind="function">
      <type>void</type>
      <name>setBounds</name>
      <anchorfile>classompl_1_1base_1_1SE3StateSpace.html</anchorfile>
      <anchor>acf17c0f33c6f3bb57d27625b406d5167</anchor>
      <arglist>(const RealVectorBounds &amp;bounds)</arglist>
    </member>
    <member kind="function">
      <type>const RealVectorBounds &amp;</type>
      <name>getBounds</name>
      <anchorfile>classompl_1_1base_1_1SE3StateSpace.html</anchorfile>
      <anchor>a038bf0c7f70272066c8a625294ab6a25</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>allocState</name>
      <anchorfile>classompl_1_1base_1_1SE3StateSpace.html</anchorfile>
      <anchor>a201b5485e91f5474354ea9bea0011f89</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeState</name>
      <anchorfile>classompl_1_1base_1_1SE3StateSpace.html</anchorfile>
      <anchor>adcaa4d813142580fb1acdfd83d7c267f</anchor>
      <arglist>(State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerProjections</name>
      <anchorfile>classompl_1_1base_1_1SE3StateSpace.html</anchorfile>
      <anchor>aea3b07c232e5006f6331357cffeb23f0</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::SE3StateSpace::StateType</name>
    <filename>classompl_1_1base_1_1SE3StateSpace_1_1StateType.html</filename>
    <base>ompl::base::CompoundState</base>
    <member kind="function">
      <type>double</type>
      <name>getX</name>
      <anchorfile>classompl_1_1base_1_1SE3StateSpace_1_1StateType.html</anchorfile>
      <anchor>ac1d12bf61adb73ba4d9d2278b154fc8d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getY</name>
      <anchorfile>classompl_1_1base_1_1SE3StateSpace_1_1StateType.html</anchorfile>
      <anchor>a8b18e5db49304345c83c571c3152af31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getZ</name>
      <anchorfile>classompl_1_1base_1_1SE3StateSpace_1_1StateType.html</anchorfile>
      <anchor>a1a3fe36f174510a17a7838dc5dc9dc82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SO3StateSpace::StateType &amp;</type>
      <name>rotation</name>
      <anchorfile>classompl_1_1base_1_1SE3StateSpace_1_1StateType.html</anchorfile>
      <anchor>a9ba67d5c6386c83ec054ed067922c7af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SO3StateSpace::StateType &amp;</type>
      <name>rotation</name>
      <anchorfile>classompl_1_1base_1_1SE3StateSpace_1_1StateType.html</anchorfile>
      <anchor>a0240250e44f901f70214dce34ce4dbb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setX</name>
      <anchorfile>classompl_1_1base_1_1SE3StateSpace_1_1StateType.html</anchorfile>
      <anchor>a0751796d34a2d0de27c2103093345aea</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setY</name>
      <anchorfile>classompl_1_1base_1_1SE3StateSpace_1_1StateType.html</anchorfile>
      <anchor>a4858f00d5ba6b03f85e59e6de7a2cd08</anchor>
      <arglist>(double y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZ</name>
      <anchorfile>classompl_1_1base_1_1SE3StateSpace_1_1StateType.html</anchorfile>
      <anchor>ab478a95c3f0c06c4e095b7ac859f1410</anchor>
      <arglist>(double z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setXYZ</name>
      <anchorfile>classompl_1_1base_1_1SE3StateSpace_1_1StateType.html</anchorfile>
      <anchor>a31582a7c0aa334e70d07f9b57939269e</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::SO2DeterministicStateSampler</name>
    <filename>classompl_1_1base_1_1SO2DeterministicStateSampler.html</filename>
    <base>ompl::base::DeterministicStateSampler</base>
    <member kind="function">
      <type></type>
      <name>SO2DeterministicStateSampler</name>
      <anchorfile>classompl_1_1base_1_1SO2DeterministicStateSampler.html</anchorfile>
      <anchor>aa2c0e91dfe99c140594a593aa230640a</anchor>
      <arglist>(const StateSpace *space, DeterministicSamplerType type=DeterministicSamplerType::HALTON)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SO2DeterministicStateSampler</name>
      <anchorfile>classompl_1_1base_1_1SO2DeterministicStateSampler.html</anchorfile>
      <anchor>a9afd9418cfb9ed0b10c2ffd39726b296</anchor>
      <arglist>(const StateSpace *space, std::shared_ptr&lt; DeterministicSequence &gt; sequence_ptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1SO2DeterministicStateSampler.html</anchorfile>
      <anchor>af66abeb1a7493132a7fd75c6fe225c7b</anchor>
      <arglist>(State *state) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleUniformNear</name>
      <anchorfile>classompl_1_1base_1_1SO2DeterministicStateSampler.html</anchorfile>
      <anchor>aa6a2b4521cea1335c0710cd2f4a0a6b0</anchor>
      <arglist>(State *state, const State *near, double distance) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleGaussian</name>
      <anchorfile>classompl_1_1base_1_1SO2DeterministicStateSampler.html</anchorfile>
      <anchor>a17c4eb6a6f6f2d26832bff2d42743e6f</anchor>
      <arglist>(State *state, const State *mean, double stdDev) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::SO2StateSampler</name>
    <filename>classompl_1_1base_1_1SO2StateSampler.html</filename>
    <base>ompl::base::StateSampler</base>
    <member kind="function">
      <type></type>
      <name>SO2StateSampler</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSampler.html</anchorfile>
      <anchor>a38da55bf187b5a2d747206ebdeb36176</anchor>
      <arglist>(const StateSpace *space)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSampler.html</anchorfile>
      <anchor>a91169249f664edd27000f0b2991161bb</anchor>
      <arglist>(State *state) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleUniformNear</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSampler.html</anchorfile>
      <anchor>a20f9ef52a23068327a35ecdeca6b1d25</anchor>
      <arglist>(State *state, const State *near, double distance) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleGaussian</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSampler.html</anchorfile>
      <anchor>a0fb7fbc67be1c5f7dfa8e9a5276781db</anchor>
      <arglist>(State *state, const State *mean, double stdDev) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::SO2StateSpace</name>
    <filename>classompl_1_1base_1_1SO2StateSpace.html</filename>
    <base>ompl::base::StateSpace</base>
    <class kind="class">ompl::base::SO2StateSpace::StateType</class>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSpace.html</anchorfile>
      <anchor>a989ae43c4ef36ca46ebd0029527ec907</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSpace.html</anchorfile>
      <anchor>a0dc0916618a2b4979d07a7b12e404209</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMeasure</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSpace.html</anchorfile>
      <anchor>a156c0527646a67601963962e4bb02f94</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enforceBounds</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSpace.html</anchorfile>
      <anchor>a013fe532d358904fb79078416cc8f92a</anchor>
      <arglist>(State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSpace.html</anchorfile>
      <anchor>aa2e776ab1437be86ec43040baad42c01</anchor>
      <arglist>(const State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyState</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSpace.html</anchorfile>
      <anchor>aaff40e92bd688e393d1ae39cc5318217</anchor>
      <arglist>(State *destination, const State *source) const override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getSerializationLength</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSpace.html</anchorfile>
      <anchor>a26075047444642d8b1a0fc05f821fd85</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSpace.html</anchorfile>
      <anchor>a8a630e744fd8641c0c75e0ce1254baa9</anchor>
      <arglist>(void *serialization, const State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserialize</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSpace.html</anchorfile>
      <anchor>ab04ffc0d48346fbe332922ffb40e07d9</anchor>
      <arglist>(State *state, const void *serialization) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSpace.html</anchorfile>
      <anchor>aea0f90c15a15ebb504ac80c31cf07915</anchor>
      <arglist>(const State *state1, const State *state2) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalStates</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSpace.html</anchorfile>
      <anchor>ae6f3a5c76d077b6e6ae24b0be073789b</anchor>
      <arglist>(const State *state1, const State *state2) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSpace.html</anchorfile>
      <anchor>a1bfa6b98c7d5c249e4b3599be50e4f2c</anchor>
      <arglist>(const State *from, const State *to, double t, State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>StateSamplerPtr</type>
      <name>allocDefaultStateSampler</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSpace.html</anchorfile>
      <anchor>a6df2a2671cab6911290e31651dfb81a5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>allocState</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSpace.html</anchorfile>
      <anchor>a9288405787ce73a42e6f43af46eac596</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeState</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSpace.html</anchorfile>
      <anchor>a65bd49be3e3023c7c0eabed0103a5060</anchor>
      <arglist>(State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getValueAddressAtIndex</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSpace.html</anchorfile>
      <anchor>a59ea4fa83e5bbdd1c8ba74cc7dd96f6c</anchor>
      <arglist>(State *state, unsigned int index) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printState</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSpace.html</anchorfile>
      <anchor>a9259f68c108358e2e727646ac17b3878</anchor>
      <arglist>(const State *state, std::ostream &amp;out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printSettings</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSpace.html</anchorfile>
      <anchor>a76f007f5061dd6d8af10b37d8b55c250</anchor>
      <arglist>(std::ostream &amp;out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerProjections</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSpace.html</anchorfile>
      <anchor>aa6fd498613dc774a148a1a66920d0f26</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::SO2StateSpace::StateType</name>
    <filename>classompl_1_1base_1_1SO2StateSpace_1_1StateType.html</filename>
    <base>ompl::base::State</base>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSpace_1_1StateType.html</anchorfile>
      <anchor>ae81640c240cc0e8f37c6f48a96cee0b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>value</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSpace_1_1StateType.html</anchorfile>
      <anchor>af918005e3a0679ed8ff2c9d1252f6bd5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::SO3StateSampler</name>
    <filename>classompl_1_1base_1_1SO3StateSampler.html</filename>
    <base>ompl::base::StateSampler</base>
    <member kind="function">
      <type></type>
      <name>SO3StateSampler</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSampler.html</anchorfile>
      <anchor>a64e5298f5b710e1fb03428339c2a0ee2</anchor>
      <arglist>(const StateSpace *space)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSampler.html</anchorfile>
      <anchor>ae73d8e8f67297547178c6a4edcefe382</anchor>
      <arglist>(State *state) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleUniformNear</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSampler.html</anchorfile>
      <anchor>a61b9a2c995dbbf622c5224e8e0aa63cc</anchor>
      <arglist>(State *state, const State *near, double distance) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleGaussian</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSampler.html</anchorfile>
      <anchor>a38422e925e0c473eee3d2193d439e29f</anchor>
      <arglist>(State *state, const State *mean, double stdDev) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::SO3StateSpace</name>
    <filename>classompl_1_1base_1_1SO3StateSpace.html</filename>
    <base>ompl::base::StateSpace</base>
    <class kind="class">ompl::base::SO3StateSpace::StateType</class>
    <member kind="function">
      <type>double</type>
      <name>norm</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace.html</anchorfile>
      <anchor>a1f77a50908ae0e60418287c42536ec05</anchor>
      <arglist>(const StateType *state) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace.html</anchorfile>
      <anchor>a5d7da3b1dd39bb865cf38fc19d6b11e8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace.html</anchorfile>
      <anchor>a79de9c2244f901b69962ee6fe26eb2bd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMeasure</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace.html</anchorfile>
      <anchor>a9ce6c63b557f6fa8e937198994f3e8b5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enforceBounds</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace.html</anchorfile>
      <anchor>a986034ceebbc859163bcba7a845b868a</anchor>
      <arglist>(State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace.html</anchorfile>
      <anchor>adf0a2ab93327e38fba651f8f86532cfc</anchor>
      <arglist>(const State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyState</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace.html</anchorfile>
      <anchor>a03192b233afc23e22c930e4edc5816b5</anchor>
      <arglist>(State *destination, const State *source) const override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getSerializationLength</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace.html</anchorfile>
      <anchor>a0f1b521eeae510e78a43bedd952c446d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace.html</anchorfile>
      <anchor>a4d58059b78f830c9586645d19ee7dc62</anchor>
      <arglist>(void *serialization, const State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserialize</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace.html</anchorfile>
      <anchor>ab0c9bcb98177021dbfb68bebf4985250</anchor>
      <arglist>(State *state, const void *serialization) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace.html</anchorfile>
      <anchor>a4c5cc559c882ba27abe0d0d625ed8bcc</anchor>
      <arglist>(const State *state1, const State *state2) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalStates</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace.html</anchorfile>
      <anchor>a6ddc4bff557d8d11095a756f30ebe860</anchor>
      <arglist>(const State *state1, const State *state2) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace.html</anchorfile>
      <anchor>acfd1d442f1090d922a66c3fa051a4e7b</anchor>
      <arglist>(const State *from, const State *to, double t, State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>StateSamplerPtr</type>
      <name>allocDefaultStateSampler</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace.html</anchorfile>
      <anchor>a4130061f5b7b547037b967eab27ed7fc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>allocState</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace.html</anchorfile>
      <anchor>a12edb291c11d18f073709d57b42d968c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeState</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace.html</anchorfile>
      <anchor>abe22993a926d70eb5dcee4e5d428d44a</anchor>
      <arglist>(State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getValueAddressAtIndex</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace.html</anchorfile>
      <anchor>a75c2e2c0c7f3e08177f2a845d577a424</anchor>
      <arglist>(State *state, unsigned int index) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printState</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace.html</anchorfile>
      <anchor>a8626e60c209704654ce0e303610416b0</anchor>
      <arglist>(const State *state, std::ostream &amp;out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printSettings</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace.html</anchorfile>
      <anchor>a31b3151e5a883107e2b5a2a3e5f799cb</anchor>
      <arglist>(std::ostream &amp;out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerProjections</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace.html</anchorfile>
      <anchor>a4211d99be7d628d930a22bad6fa46286</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::SO3StateSpace::StateType</name>
    <filename>classompl_1_1base_1_1SO3StateSpace_1_1StateType.html</filename>
    <base>ompl::base::State</base>
    <member kind="function">
      <type>void</type>
      <name>setAxisAngle</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace_1_1StateType.html</anchorfile>
      <anchor>af5a4d02906007a810e3bbe2b442d7a2f</anchor>
      <arglist>(double ax, double ay, double az, double angle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace_1_1StateType.html</anchorfile>
      <anchor>ae726df77940bbbe93bd351308e997a68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>x</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace_1_1StateType.html</anchorfile>
      <anchor>a525d64ca3f68c8e6492c6e26199d4717</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>y</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace_1_1StateType.html</anchorfile>
      <anchor>ae9e99008a6b4448e6a5e53ba42430bcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>z</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace_1_1StateType.html</anchorfile>
      <anchor>ae4b1013f96d9ad164e54c758711377d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>w</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace_1_1StateType.html</anchorfile>
      <anchor>a819bd3faba4f19b9f2f58c310c5d6e3c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::SolutionNonExistenceProof</name>
    <filename>classompl_1_1base_1_1SolutionNonExistenceProof.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::base::SolutionNonExistenceProofPtr</name>
    <filename>classompl_1_1base_1_1SolutionNonExistenceProofPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::base::SpaceInformation</name>
    <filename>classompl_1_1base_1_1SpaceInformation.html</filename>
    <member kind="function">
      <type></type>
      <name>SpaceInformation</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a4023e56c43557eb50ca4187f961353fa</anchor>
      <arglist>(StateSpacePtr space)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>af911f59919a3044963cd0ae5c0e2627f</anchor>
      <arglist>(const State *state) const</arglist>
    </member>
    <member kind="function">
      <type>const StateSpacePtr &amp;</type>
      <name>getStateSpace</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a2438e5e02c579f164b58394990b99690</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getStateDimension</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ac44f5707a961480cb1ad1089283dafe9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSpaceMeasure</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ac365e0cae059ce3fcd54a8472a7381b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalStates</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a337a0c8f81c8f30b89eb9bde813c691b</anchor>
      <arglist>(const State *state1, const State *state2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a5a83eda50d1099f27115c9eaef3e72b9</anchor>
      <arglist>(const State *state) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a604815a30c0d5827f8ae85359afba7f1</anchor>
      <arglist>(const State *state1, const State *state2) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enforceBounds</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a7aefa8722b9783c25bf20d35ff56cf07</anchor>
      <arglist>(State *state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printState</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a4e636204e1572b8fe4ddea8ab9127397</anchor>
      <arglist>(const State *state, std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateValidityChecker</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a0449ec0893e02aca2bdfc63323b624e5</anchor>
      <arglist>(const StateValidityCheckerPtr &amp;svc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateValidityChecker</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ac60c96cd6f8450bf8cd1a3a08ed1dee6</anchor>
      <arglist>(const StateValidityCheckerFn &amp;svc)</arglist>
    </member>
    <member kind="function">
      <type>const StateValidityCheckerPtr &amp;</type>
      <name>getStateValidityChecker</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ac6d23843c9489c59e8faad6e1d4faf29</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMotionValidator</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a69e58548f91db3e30ac7f41c87459279</anchor>
      <arglist>(const MotionValidatorPtr &amp;mv)</arglist>
    </member>
    <member kind="function">
      <type>const MotionValidatorPtr &amp;</type>
      <name>getMotionValidator</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>af0258348f3cb78cddbdafde3a3d3f0c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MotionValidatorPtr &amp;</type>
      <name>getMotionValidator</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a510bb9dac6417d570ed91abc3047362e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateValidityCheckingResolution</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a2bcd47fd9b7cf54b086d2122646736bf</anchor>
      <arglist>(double resolution)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getStateValidityCheckingResolution</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a8f08d51c191b43a5c039b92fa25caa8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>allocState</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a9853da6c28a1a1fd5f543013546a0f4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocStates</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ac9c998c4063f342bfb272d51fc59ad57</anchor>
      <arglist>(std::vector&lt; State * &gt; &amp;states) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeState</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a178583601cea48741ba3fa972b3204a5</anchor>
      <arglist>(State *state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeStates</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a75ea3297e3e30e2f75645baba2b86a1b</anchor>
      <arglist>(std::vector&lt; State * &gt; &amp;states) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyState</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ace85769316418c8108e9fc7ebf5932b9</anchor>
      <arglist>(State *destination, const State *source) const</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>cloneState</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a70b06614abf6cec4f32abf0fd638377f</anchor>
      <arglist>(const State *source) const</arglist>
    </member>
    <member kind="function">
      <type>StateSamplerPtr</type>
      <name>allocStateSampler</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a7b50b1e32e378ca72d373de94c338d2b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ValidStateSamplerPtr</type>
      <name>allocValidStateSampler</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>adb136d78ca86bff17a8233023cc32ba1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValidStateSamplerAllocator</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ae6391771fc74984a3266f986cfe07780</anchor>
      <arglist>(const ValidStateSamplerAllocator &amp;vssa)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearValidStateSamplerAllocator</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ae805bde7621a7fd6c9022f6890645bd4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ad9eb49f54887c96e86549f5c48712054</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>searchValidNearby</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a614eca796ab4a8867c67906b85370346</anchor>
      <arglist>(State *state, const State *near, double distance, unsigned int attempts) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>searchValidNearby</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a232205840dbfd893f4484e25f74e0268</anchor>
      <arglist>(const ValidStateSamplerPtr &amp;sampler, State *state, const State *near, double distance) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>randomBounceMotion</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ad9a9da658cfafed46ee7d17c0e3a37b5</anchor>
      <arglist>(const StateSamplerPtr &amp;sss, const State *start, unsigned int steps, std::vector&lt; State * &gt; &amp;states, bool alloc) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkMotion</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>afd0cb435a39b89d2d5ac1587a1cf9408</anchor>
      <arglist>(const State *s1, const State *s2, std::pair&lt; State *, double &gt; &amp;lastValid) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkMotion</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a026f22cb8f4a6e7648990f11c3acad7c</anchor>
      <arglist>(const State *s1, const State *s2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkMotion</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>abe948a4b3a3582bffee708219e65abbb</anchor>
      <arglist>(const std::vector&lt; State * &gt; &amp;states, unsigned int count, unsigned int &amp;firstInvalidStateIndex) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkMotion</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a63ecfb831275291ecec78c0c17b2fef3</anchor>
      <arglist>(const std::vector&lt; State * &gt; &amp;states, unsigned int count) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getMotionStates</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a39e763f083d06db4b364d1bc0034ea38</anchor>
      <arglist>(const State *s1, const State *s2, std::vector&lt; State * &gt; &amp;states, unsigned int count, bool endpoints, bool alloc) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getCheckedMotionCount</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a14b9e1488f71995fddacd99ecde88fa4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalStates</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a337a0c8f81c8f30b89eb9bde813c691b</anchor>
      <arglist>(const State *state1, const State *state2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a5a83eda50d1099f27115c9eaef3e72b9</anchor>
      <arglist>(const State *state) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a604815a30c0d5827f8ae85359afba7f1</anchor>
      <arglist>(const State *state1, const State *state2) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enforceBounds</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a7aefa8722b9783c25bf20d35ff56cf07</anchor>
      <arglist>(State *state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printState</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a4e636204e1572b8fe4ddea8ab9127397</anchor>
      <arglist>(const State *state, std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateValidityChecker</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a0449ec0893e02aca2bdfc63323b624e5</anchor>
      <arglist>(const StateValidityCheckerPtr &amp;svc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateValidityChecker</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ac60c96cd6f8450bf8cd1a3a08ed1dee6</anchor>
      <arglist>(const StateValidityCheckerFn &amp;svc)</arglist>
    </member>
    <member kind="function">
      <type>const StateValidityCheckerPtr &amp;</type>
      <name>getStateValidityChecker</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ac6d23843c9489c59e8faad6e1d4faf29</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMotionValidator</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a69e58548f91db3e30ac7f41c87459279</anchor>
      <arglist>(const MotionValidatorPtr &amp;mv)</arglist>
    </member>
    <member kind="function">
      <type>const MotionValidatorPtr &amp;</type>
      <name>getMotionValidator</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>af0258348f3cb78cddbdafde3a3d3f0c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MotionValidatorPtr &amp;</type>
      <name>getMotionValidator</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a510bb9dac6417d570ed91abc3047362e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateValidityCheckingResolution</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a2bcd47fd9b7cf54b086d2122646736bf</anchor>
      <arglist>(double resolution)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getStateValidityCheckingResolution</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a8f08d51c191b43a5c039b92fa25caa8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>allocState</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a9853da6c28a1a1fd5f543013546a0f4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocStates</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ac9c998c4063f342bfb272d51fc59ad57</anchor>
      <arglist>(std::vector&lt; State * &gt; &amp;states) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeState</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a178583601cea48741ba3fa972b3204a5</anchor>
      <arglist>(State *state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeStates</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a75ea3297e3e30e2f75645baba2b86a1b</anchor>
      <arglist>(std::vector&lt; State * &gt; &amp;states) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyState</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ace85769316418c8108e9fc7ebf5932b9</anchor>
      <arglist>(State *destination, const State *source) const</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>cloneState</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a70b06614abf6cec4f32abf0fd638377f</anchor>
      <arglist>(const State *source) const</arglist>
    </member>
    <member kind="function">
      <type>StateSamplerPtr</type>
      <name>allocStateSampler</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a7b50b1e32e378ca72d373de94c338d2b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ValidStateSamplerPtr</type>
      <name>allocValidStateSampler</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>adb136d78ca86bff17a8233023cc32ba1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValidStateSamplerAllocator</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ae6391771fc74984a3266f986cfe07780</anchor>
      <arglist>(const ValidStateSamplerAllocator &amp;vssa)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearValidStateSamplerAllocator</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ae805bde7621a7fd6c9022f6890645bd4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ad9eb49f54887c96e86549f5c48712054</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>searchValidNearby</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a614eca796ab4a8867c67906b85370346</anchor>
      <arglist>(State *state, const State *near, double distance, unsigned int attempts) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>searchValidNearby</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a232205840dbfd893f4484e25f74e0268</anchor>
      <arglist>(const ValidStateSamplerPtr &amp;sampler, State *state, const State *near, double distance) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>randomBounceMotion</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ad9a9da658cfafed46ee7d17c0e3a37b5</anchor>
      <arglist>(const StateSamplerPtr &amp;sss, const State *start, unsigned int steps, std::vector&lt; State * &gt; &amp;states, bool alloc) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkMotion</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>afd0cb435a39b89d2d5ac1587a1cf9408</anchor>
      <arglist>(const State *s1, const State *s2, std::pair&lt; State *, double &gt; &amp;lastValid) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkMotion</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a026f22cb8f4a6e7648990f11c3acad7c</anchor>
      <arglist>(const State *s1, const State *s2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkMotion</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>abe948a4b3a3582bffee708219e65abbb</anchor>
      <arglist>(const std::vector&lt; State * &gt; &amp;states, unsigned int count, unsigned int &amp;firstInvalidStateIndex) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkMotion</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a63ecfb831275291ecec78c0c17b2fef3</anchor>
      <arglist>(const std::vector&lt; State * &gt; &amp;states, unsigned int count) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getMotionStates</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a39e763f083d06db4b364d1bc0034ea38</anchor>
      <arglist>(const State *s1, const State *s2, std::vector&lt; State * &gt; &amp;states, unsigned int count, bool endpoints, bool alloc) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getCheckedMotionCount</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a14b9e1488f71995fddacd99ecde88fa4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StateSpacePtr</type>
      <name>stateSpace_</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ab7d8d572b76a5899b6c3816a544abe7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StateValidityCheckerPtr</type>
      <name>stateValidityChecker_</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a03cab04f748eb6637fb5a088f21cead9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MotionValidatorPtr</type>
      <name>motionValidator_</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ace9276cca898e91739b7e8b0b2daafb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>setup_</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>af5dd22573e611e150d15af2081dd26c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValidStateSamplerAllocator</type>
      <name>vssa_</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ad20bb9ec674edd4d4dbb2d13b2d89abd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParamSet</type>
      <name>params_</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>aa9dd30fdbe4e702930f465d73f692427</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>probabilityOfValidState</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a66c76a83cf1fbb521e0b6ed92e367f21</anchor>
      <arglist>(unsigned int attempts) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>averageValidMotionLength</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a8324758cb376b64cd07fe64b62ca1d45</anchor>
      <arglist>(unsigned int attempts) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>samplesPerSecond</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a4bf93b3b7e3f12c1b2f88fb4528ed33d</anchor>
      <arglist>(double &amp;uniform, double &amp;near, double &amp;gaussian, unsigned int attempts) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printSettings</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>aaafcf07fda025a0ebb21844563d8b2ef</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printProperties</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ab2ba1de508425d3a19f7b6b1a42d683e</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>ParamSet &amp;</type>
      <name>params</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a879fb1ffcac0bf54aab292f2b933f881</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ParamSet &amp;</type>
      <name>params</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ad09d9e9ca9f34d46edf1dcb4567176c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a6e8c41f946c3c04d126983e145404ad4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSetup</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>aad514fc49811498bf56de4a3e9db7d0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setDefaultMotionValidator</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a1d0c51561f5372ade7720a7e76d8546f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::SpaceInformationPtr</name>
    <filename>classompl_1_1base_1_1SpaceInformationPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::base::SpecificParam</name>
    <filename>classompl_1_1base_1_1SpecificParam.html</filename>
    <templarg></templarg>
    <base>ompl::base::GenericParam</base>
    <member kind="typedef">
      <type>std::function&lt; void(T)&gt;</type>
      <name>SetterFn</name>
      <anchorfile>classompl_1_1base_1_1SpecificParam.html</anchorfile>
      <anchor>a0e0f36a26246a840bf5494a3dea64f38</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; T()&gt;</type>
      <name>GetterFn</name>
      <anchorfile>classompl_1_1base_1_1SpecificParam.html</anchorfile>
      <anchor>aeb13326ad2aaa4ea5da246fa825ba19b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpecificParam</name>
      <anchorfile>classompl_1_1base_1_1SpecificParam.html</anchorfile>
      <anchor>aab4289f990a8a857b9761242490d6fe0</anchor>
      <arglist>(const std::string &amp;name, SetterFn setter, GetterFn getter=GetterFn())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setValue</name>
      <anchorfile>classompl_1_1base_1_1SpecificParam.html</anchorfile>
      <anchor>abe73a192e0580997043e102a660d40eb</anchor>
      <arglist>(const std::string &amp;value) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getValue</name>
      <anchorfile>classompl_1_1base_1_1SpecificParam.html</anchorfile>
      <anchor>a57f4d59f883dad7e5cdba2bd4945952e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getValue</name>
      <anchorfile>classompl_1_1base_1_1SpecificParam.html</anchorfile>
      <anchor>ab101104d20d8c601bb3d832de88f06bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getValue</name>
      <anchorfile>classompl_1_1base_1_1SpecificParam.html</anchorfile>
      <anchor>a21bc90982d4cb3bf42c43089c36b5de0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getValue</name>
      <anchorfile>classompl_1_1base_1_1SpecificParam.html</anchorfile>
      <anchor>a241f30194c11152790828a886624605f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getValue</name>
      <anchorfile>classompl_1_1base_1_1SpecificParam.html</anchorfile>
      <anchor>a31ba70d91bbe6665807a10ab0e1a4c8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>T</type>
      <name>lexical_cast</name>
      <anchorfile>classompl_1_1base_1_1SpecificParam.html</anchorfile>
      <anchor>a1eacd11acf5f4800880e220b6b99796f</anchor>
      <arglist>(const std::string &amp;value) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SetterFn</type>
      <name>setter_</name>
      <anchorfile>classompl_1_1base_1_1SpecificParam.html</anchorfile>
      <anchor>a10b96ca4213c941f72705c24b3c5bb17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GetterFn</type>
      <name>getter_</name>
      <anchorfile>classompl_1_1base_1_1SpecificParam.html</anchorfile>
      <anchor>a49851acea9ec2a9f22c0765a11a41bfa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::State</name>
    <filename>classompl_1_1base_1_1State.html</filename>
    <member kind="function">
      <type>const T *</type>
      <name>as</name>
      <anchorfile>classompl_1_1base_1_1State.html</anchorfile>
      <anchor>a6178474307b3f364184db9999a639af1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>as</name>
      <anchorfile>classompl_1_1base_1_1State.html</anchorfile>
      <anchor>ace9774faf8793299dc105292f8557987</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::StateCostIntegralObjective</name>
    <filename>classompl_1_1base_1_1StateCostIntegralObjective.html</filename>
    <base>ompl::base::OptimizationObjective</base>
    <member kind="function">
      <type></type>
      <name>StateCostIntegralObjective</name>
      <anchorfile>classompl_1_1base_1_1StateCostIntegralObjective.html</anchorfile>
      <anchor>a233ce347bdf449ab64e3b16ccd4630dc</anchor>
      <arglist>(const SpaceInformationPtr &amp;si, bool enableMotionCostInterpolation=false)</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>stateCost</name>
      <anchorfile>classompl_1_1base_1_1StateCostIntegralObjective.html</anchorfile>
      <anchor>ad8e2fb06a89783826cfb62e706e125f0</anchor>
      <arglist>(const State *s) const override</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>motionCost</name>
      <anchorfile>classompl_1_1base_1_1StateCostIntegralObjective.html</anchorfile>
      <anchor>a5ddcf2a7e285f28b51ddaa86b35a8dff</anchor>
      <arglist>(const State *s1, const State *s2) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMotionCostInterpolationEnabled</name>
      <anchorfile>classompl_1_1base_1_1StateCostIntegralObjective.html</anchorfile>
      <anchor>afe15b503e185ab836fc47e1373473ebb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Cost</type>
      <name>trapezoid</name>
      <anchorfile>classompl_1_1base_1_1StateCostIntegralObjective.html</anchorfile>
      <anchor>ae943155e03088c8c2f98a0d08c485d72</anchor>
      <arglist>(Cost c1, Cost c2, double dist) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>interpolateMotionCost_</name>
      <anchorfile>classompl_1_1base_1_1StateCostIntegralObjective.html</anchorfile>
      <anchor>a286d6cf805714f6ba3d7e8d6d8864d42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::StatePropagatorPtr</name>
    <filename>classompl_1_1base_1_1StatePropagatorPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::base::StateSampler</name>
    <filename>classompl_1_1base_1_1StateSampler.html</filename>
    <member kind="function">
      <type></type>
      <name>StateSampler</name>
      <anchorfile>classompl_1_1base_1_1StateSampler.html</anchorfile>
      <anchor>a1b7e6623b9ee8f4dc16b88b5a2c62248</anchor>
      <arglist>(const StateSpace *space)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1StateSampler.html</anchorfile>
      <anchor>ae34c29e2eaefc49bab4dee255a782b71</anchor>
      <arglist>(State *state)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sampleUniformNear</name>
      <anchorfile>classompl_1_1base_1_1StateSampler.html</anchorfile>
      <anchor>a4cfa7cb3eed59fa2e2e7049ca9c34e03</anchor>
      <arglist>(State *state, const State *near, double distance)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sampleGaussian</name>
      <anchorfile>classompl_1_1base_1_1StateSampler.html</anchorfile>
      <anchor>aa52bb1f8b70c28b50779a5607e929db8</anchor>
      <arglist>(State *state, const State *mean, double stdDev)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const StateSpace *</type>
      <name>space_</name>
      <anchorfile>classompl_1_1base_1_1StateSampler.html</anchorfile>
      <anchor>ade7594512889b577995b3479c71f3b6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1base_1_1StateSampler.html</anchorfile>
      <anchor>ad8b2f106c42eaa4788bb6914cd5371fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::StateSamplerArray</name>
    <filename>classompl_1_1base_1_1StateSamplerArray.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename SamplerSelector&lt; T &gt;::SamplerPtr</type>
      <name>SamplerPtr</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>a7a9d75d8d7b40996bde5642fea18dc29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename SamplerSelector&lt; T &gt;::Sampler</type>
      <name>Sampler</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>aca7f99bda51091573e4eaf377f867d49</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateSamplerArray</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>a5d9c7fc2ef129b81f4f4b350b4c1faf8</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateSamplerArray</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>a4b2695cf7992fe63c9364b7df8ef18d3</anchor>
      <arglist>(const SpaceInformation *si)</arglist>
    </member>
    <member kind="function">
      <type>Sampler *</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>ab8bf640ce48d3071435a37a9b090566c</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>aee87211c80826b2fddf610bf213f0a9e</anchor>
      <arglist>(std::size_t count)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>ab524ec36b8574db4d1dde92496974a28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>a8d28df7c315cfec6047dc60dcb78b8f7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::StateSamplerPtr</name>
    <filename>classompl_1_1base_1_1StateSamplerPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::base::StateSpace</name>
    <filename>classompl_1_1base_1_1StateSpace.html</filename>
    <class kind="struct">ompl::base::StateSpace::SubstateLocation</class>
    <class kind="struct">ompl::base::StateSpace::ValueLocation</class>
    <member kind="enumeration">
      <type></type>
      <name>SanityChecks</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a64feddc33bb3b7459c4f589e6cd9d17e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATESPACE_DISTANCE_DIFFERENT_STATES</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a64feddc33bb3b7459c4f589e6cd9d17ea044307209c21e4830272ca52945a3062</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATESPACE_DISTANCE_SYMMETRIC</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a64feddc33bb3b7459c4f589e6cd9d17ea5acf49ce656838100e44ed7ee7321ab6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATESPACE_INTERPOLATION</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a64feddc33bb3b7459c4f589e6cd9d17ea26a108232d6265a1cc8bcc642216a6cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATESPACE_TRIANGLE_INEQUALITY</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a64feddc33bb3b7459c4f589e6cd9d17ea54e30ec7ef77f42f255951ac6be08f97</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATESPACE_DISTANCE_BOUND</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a64feddc33bb3b7459c4f589e6cd9d17ea0134f2a38473e775c3037fde1c336d3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATESPACE_RESPECT_BOUNDS</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a64feddc33bb3b7459c4f589e6cd9d17ea3c050038b3403113c40e3485398a9b18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATESPACE_ENFORCE_BOUNDS_NO_OP</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a64feddc33bb3b7459c4f589e6cd9d17eafb4e9823a65ace5477bcc1cfc267b3fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATESPACE_SERIALIZATION</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a64feddc33bb3b7459c4f589e6cd9d17ea88b4708168876d0b1b010e40285c1cc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ompl::base::State</type>
      <name>StateType</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a358860aabda701b73fb0fe01cbdfb0d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATESPACE_DISTANCE_DIFFERENT_STATES</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a64feddc33bb3b7459c4f589e6cd9d17ea044307209c21e4830272ca52945a3062</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATESPACE_DISTANCE_SYMMETRIC</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a64feddc33bb3b7459c4f589e6cd9d17ea5acf49ce656838100e44ed7ee7321ab6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATESPACE_INTERPOLATION</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a64feddc33bb3b7459c4f589e6cd9d17ea26a108232d6265a1cc8bcc642216a6cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATESPACE_TRIANGLE_INEQUALITY</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a64feddc33bb3b7459c4f589e6cd9d17ea54e30ec7ef77f42f255951ac6be08f97</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATESPACE_DISTANCE_BOUND</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a64feddc33bb3b7459c4f589e6cd9d17ea0134f2a38473e775c3037fde1c336d3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATESPACE_RESPECT_BOUNDS</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a64feddc33bb3b7459c4f589e6cd9d17ea3c050038b3403113c40e3485398a9b18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATESPACE_ENFORCE_BOUNDS_NO_OP</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a64feddc33bb3b7459c4f589e6cd9d17eafb4e9823a65ace5477bcc1cfc267b3fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATESPACE_SERIALIZATION</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a64feddc33bb3b7459c4f589e6cd9d17ea88b4708168876d0b1b010e40285c1cc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateSpace</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>acfcc534e7c16c163ef33a05f195a0305</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>as</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>afd88dea5b056dae47158f22edb21e562</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>as</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a15002af1dc7d5827a174517baf39947d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a92ca030ac21b5aa209241febcfbae2e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isCompound</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a776ecd4d7ba042f549e4fb18c4755558</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDiscrete</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a8b53e2150c387718a91046af20817724</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isHybrid</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a9561271be70c7a437d793316d40d1b8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMetricSpace</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a86776683449978dedfe3213f57637cba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasSymmetricDistance</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a117467017c37377ed1a59056a8082a1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasSymmetricInterpolate</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a0a9a294715dbdd51c9014d8580ae6706</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>aded3990bc51b8ee45f50c9d83bbbf853</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ad12cc022ef531dcb563f6d3d13b847ad</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getType</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a37c517e239e9305bb6b3cda3678ee19d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>includes</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ad4134f747e9e1a40fa47f3e27145820d</anchor>
      <arglist>(const StateSpacePtr &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>includes</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ab3d8da328c3bb5f7800e7ee144a55023</anchor>
      <arglist>(const StateSpace *other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>covers</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a65f7eab18b20c3b896a30ee4c2e30af7</anchor>
      <arglist>(const StateSpacePtr &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>covers</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a83a1af41d2e5561e40158a3c6d3227f3</anchor>
      <arglist>(const StateSpace *other) const</arglist>
    </member>
    <member kind="function">
      <type>ParamSet &amp;</type>
      <name>params</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a9d9fee742c4811d13f236aecd6b9d901</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ParamSet &amp;</type>
      <name>params</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a4305a944c0a18976e23f0954aef93b4c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getLongestValidSegmentFraction</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a2415182e4c4409dd70a773a4481429b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLongestValidSegmentFraction</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ad8e6450ad306d272df39751aa7e690b8</anchor>
      <arglist>(double segmentFraction)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>validSegmentCount</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a44d83288d6636eb134b3335bb1c57fcf</anchor>
      <arglist>(const State *state1, const State *state2) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValidSegmentCountFactor</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a9babd71497fc6a6f82fe97f699531ceb</anchor>
      <arglist>(unsigned int factor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getValidSegmentCountFactor</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a8625bcb46400d25fb40d58bcb3c4da53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getLongestValidSegmentLength</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a60054b052ee942683a81850623350068</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeSignature</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a3f898b0945c804596a30bc5f309e817e</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;signature) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a7cfc88ad641d95adbc20c7b6c6b4151d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>af7a72168397b61ee33c0f2bf98ced2e5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getMeasure</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a5dd95b39e49cf6a251ce650cbf35c399</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>enforceBounds</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a7a52d4000174091df038c603078add78</anchor>
      <arglist>(State *state) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a07deb46127836f5795a8c0ceca1a1209</anchor>
      <arglist>(const State *state) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>copyState</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>abff3478c3fc4da03c94d6f929f6ca7f9</anchor>
      <arglist>(State *destination, const State *source) const =0</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>cloneState</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>aca89451f148cad4627c3c6887e0186e4</anchor>
      <arglist>(const State *source) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>distance</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>acb781becdcdf8770d61c218632c71bd5</anchor>
      <arglist>(const State *state1, const State *state2) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSerializationLength</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>aae75da59014845fbfe63dd369451278c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ac61d8940e9fffe481781aedc6c8adf52</anchor>
      <arglist>(void *serialization, const State *state) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deserialize</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>af4dfc734812424a2159b14c9f8e3d92b</anchor>
      <arglist>(State *state, const void *serialization) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>equalStates</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a6babf3addb5ed9608800b7460a20da39</anchor>
      <arglist>(const State *state1, const State *state2) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ae64df33ebaaddb1cd64c555be90d099d</anchor>
      <arglist>(const State *from, const State *to, double t, State *state) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual StateSamplerPtr</type>
      <name>allocDefaultStateSampler</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a85423c93ff1f5dfca07d3b27ef58ef61</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StateSamplerPtr</type>
      <name>allocStateSampler</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>acf6113d233f38fd0c5f86aa0349bb081</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateSamplerAllocator</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>aa88e8a85586b93866ef3b2a6fb31c114</anchor>
      <arglist>(const StateSamplerAllocator &amp;ssa)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearStateSamplerAllocator</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>abd0c1c40dcb3687c024629119e2d905d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual State *</type>
      <name>allocState</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ae86d2a2401044774fa4de3345a29d408</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>freeState</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>aeb75db7a7ef3d05f13632b7ccc67e6b9</anchor>
      <arglist>(State *state) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double *</type>
      <name>getValueAddressAtIndex</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a3b4b4123fa98346459f434e92aad3b8f</anchor>
      <arglist>(State *state, unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getValueAddressAtIndex</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a26ca6c025f57f50d4e3b10f82a3a0a07</anchor>
      <arglist>(const State *state, unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; ValueLocation &gt; &amp;</type>
      <name>getValueLocations</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>addf8580ca115602848ab2c5f40c5816d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, ValueLocation &gt; &amp;</type>
      <name>getValueLocationsByName</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a90ec872a6de60b51b54800b21d771a92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getValueAddressAtLocation</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>aafd87a4ade6b3c9daae315db34bc367e</anchor>
      <arglist>(State *state, const ValueLocation &amp;loc) const</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getValueAddressAtLocation</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a96b5c9d85c14df014d7be9e2910180a7</anchor>
      <arglist>(const State *state, const ValueLocation &amp;loc) const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getValueAddressAtName</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a52c7ce8228f85e47eaf4731cfd2c9884</anchor>
      <arglist>(State *state, const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getValueAddressAtName</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a5f04fc5bd81cc8498fdc411b50abc3fa</anchor>
      <arglist>(const State *state, const std::string &amp;name) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyToReals</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ac5e6b9f828da8d02338d55857ca74fda</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;reals, const State *source) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFromReals</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a762ef767d52b8d9df49333ed423ae23e</anchor>
      <arglist>(State *destination, const std::vector&lt; double &gt; &amp;reals) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerProjection</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a309f2cdc5412ff16d31b87fec92b3595</anchor>
      <arglist>(const std::string &amp;name, const ProjectionEvaluatorPtr &amp;projection)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerDefaultProjection</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ac79f6342fb2d85f1c2c87bfff812fbbf</anchor>
      <arglist>(const ProjectionEvaluatorPtr &amp;projection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>registerProjections</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a9d83398ca1647e06036d9e69ebad7cf8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ProjectionEvaluatorPtr</type>
      <name>getProjection</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>adf84b7aa4f46da81705b996ca4eb995e</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>ProjectionEvaluatorPtr</type>
      <name>getDefaultProjection</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a2669ac13d055b7165c62b031757448fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasProjection</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>afe8bd7ede43fadaa2daf619bbe3ba38a</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasDefaultProjection</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>abc6814104ec21e73d67c60499a6572bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, ProjectionEvaluatorPtr &gt; &amp;</type>
      <name>getRegisteredProjections</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ad4f013cc6932e409a9ab088f784fcc77</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StateSamplerPtr</type>
      <name>allocSubspaceStateSampler</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a866a3c84c923ac0f8766113e3122d51b</anchor>
      <arglist>(const StateSpacePtr &amp;subspace) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StateSamplerPtr</type>
      <name>allocSubspaceStateSampler</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>afe6b15319c4faf358bb47052bf8f0bf6</anchor>
      <arglist>(const StateSpace *subspace) const</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>getSubstateAtLocation</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>aa16af79216ae39837e988e5dac41eae6</anchor>
      <arglist>(State *state, const SubstateLocation &amp;loc) const</arglist>
    </member>
    <member kind="function">
      <type>const State *</type>
      <name>getSubstateAtLocation</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a74b485fbb6a0a110f054e714a4e5f392</anchor>
      <arglist>(const State *state, const SubstateLocation &amp;loc) const</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, SubstateLocation &gt; &amp;</type>
      <name>getSubstateLocationsByName</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a9585ccf7f931ed36301740c52a0a2d9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCommonSubspaces</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a9dd0643944575e55cc59c8b0c1e7773d</anchor>
      <arglist>(const StateSpacePtr &amp;other, std::vector&lt; std::string &gt; &amp;subspaces) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCommonSubspaces</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a6e464d4bb8fca774c16db00401fe078a</anchor>
      <arglist>(const StateSpace *other, std::vector&lt; std::string &gt; &amp;subspaces) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeLocations</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a1866860e11fb0eb759453df70ba68ae2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>type_</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a68556edd816136a66a0d81544baef08c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StateSamplerAllocator</type>
      <name>ssa_</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a2db3152c4edbac084af3ec6962107ddb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxExtent_</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>af139d63d7b1067a70cb6e744e85fef96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>longestValidSegmentFraction_</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>aeaba86765fbfc6686312e50934edfd70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>longestValidSegment_</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a8967afde4dc99333aef63eb85554bf81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>longestValidSegmentCountFactor_</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>aa3fbdc24d4e07283890eb68f49bc1467</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, ProjectionEvaluatorPtr &gt;</type>
      <name>projections_</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ab32be9ff082fcb2926cbc8166613e09a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParamSet</type>
      <name>params_</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a11b0b30f238bff63ecb43542aee6ebf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ValueLocation &gt;</type>
      <name>valueLocationsInOrder_</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ac0f6c83355692e7f40d4ead85b9f225b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, ValueLocation &gt;</type>
      <name>valueLocationsByName_</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ac24c368e6e9130b505d89c824a9ec1e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, SubstateLocation &gt;</type>
      <name>substateLocationsByName_</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a23aa4613b3ef62e88fbfc23fb6757e34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const std::string</type>
      <name>DEFAULT_PROJECTION_NAME</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a45e65cf86a2c5cb1e4394dd8aafb4d3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isCompound</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a776ecd4d7ba042f549e4fb18c4755558</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDiscrete</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a8b53e2150c387718a91046af20817724</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isHybrid</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a9561271be70c7a437d793316d40d1b8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMetricSpace</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a86776683449978dedfe3213f57637cba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasSymmetricDistance</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a117467017c37377ed1a59056a8082a1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasSymmetricInterpolate</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a0a9a294715dbdd51c9014d8580ae6706</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>aded3990bc51b8ee45f50c9d83bbbf853</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ad12cc022ef531dcb563f6d3d13b847ad</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getType</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a37c517e239e9305bb6b3cda3678ee19d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>includes</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ad4134f747e9e1a40fa47f3e27145820d</anchor>
      <arglist>(const StateSpacePtr &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>includes</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ab3d8da328c3bb5f7800e7ee144a55023</anchor>
      <arglist>(const StateSpace *other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>covers</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a65f7eab18b20c3b896a30ee4c2e30af7</anchor>
      <arglist>(const StateSpacePtr &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>covers</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a83a1af41d2e5561e40158a3c6d3227f3</anchor>
      <arglist>(const StateSpace *other) const</arglist>
    </member>
    <member kind="function">
      <type>ParamSet &amp;</type>
      <name>params</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a9d9fee742c4811d13f236aecd6b9d901</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ParamSet &amp;</type>
      <name>params</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a4305a944c0a18976e23f0954aef93b4c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getLongestValidSegmentFraction</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a2415182e4c4409dd70a773a4481429b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLongestValidSegmentFraction</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ad8e6450ad306d272df39751aa7e690b8</anchor>
      <arglist>(double segmentFraction)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>validSegmentCount</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a44d83288d6636eb134b3335bb1c57fcf</anchor>
      <arglist>(const State *state1, const State *state2) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValidSegmentCountFactor</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a9babd71497fc6a6f82fe97f699531ceb</anchor>
      <arglist>(unsigned int factor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getValidSegmentCountFactor</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a8625bcb46400d25fb40d58bcb3c4da53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getLongestValidSegmentLength</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a60054b052ee942683a81850623350068</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeSignature</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a3f898b0945c804596a30bc5f309e817e</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;signature) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a7cfc88ad641d95adbc20c7b6c6b4151d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>af7a72168397b61ee33c0f2bf98ced2e5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getMeasure</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a5dd95b39e49cf6a251ce650cbf35c399</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>enforceBounds</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a7a52d4000174091df038c603078add78</anchor>
      <arglist>(State *state) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a07deb46127836f5795a8c0ceca1a1209</anchor>
      <arglist>(const State *state) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>copyState</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>abff3478c3fc4da03c94d6f929f6ca7f9</anchor>
      <arglist>(State *destination, const State *source) const =0</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>cloneState</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>aca89451f148cad4627c3c6887e0186e4</anchor>
      <arglist>(const State *source) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>distance</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>acb781becdcdf8770d61c218632c71bd5</anchor>
      <arglist>(const State *state1, const State *state2) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSerializationLength</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>aae75da59014845fbfe63dd369451278c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ac61d8940e9fffe481781aedc6c8adf52</anchor>
      <arglist>(void *serialization, const State *state) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deserialize</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>af4dfc734812424a2159b14c9f8e3d92b</anchor>
      <arglist>(State *state, const void *serialization) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>equalStates</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a6babf3addb5ed9608800b7460a20da39</anchor>
      <arglist>(const State *state1, const State *state2) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ae64df33ebaaddb1cd64c555be90d099d</anchor>
      <arglist>(const State *from, const State *to, double t, State *state) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual StateSamplerPtr</type>
      <name>allocDefaultStateSampler</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a85423c93ff1f5dfca07d3b27ef58ef61</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StateSamplerPtr</type>
      <name>allocStateSampler</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>acf6113d233f38fd0c5f86aa0349bb081</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateSamplerAllocator</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>aa88e8a85586b93866ef3b2a6fb31c114</anchor>
      <arglist>(const StateSamplerAllocator &amp;ssa)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearStateSamplerAllocator</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>abd0c1c40dcb3687c024629119e2d905d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual State *</type>
      <name>allocState</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ae86d2a2401044774fa4de3345a29d408</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>freeState</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>aeb75db7a7ef3d05f13632b7ccc67e6b9</anchor>
      <arglist>(State *state) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double *</type>
      <name>getValueAddressAtIndex</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a3b4b4123fa98346459f434e92aad3b8f</anchor>
      <arglist>(State *state, unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getValueAddressAtIndex</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a26ca6c025f57f50d4e3b10f82a3a0a07</anchor>
      <arglist>(const State *state, unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; ValueLocation &gt; &amp;</type>
      <name>getValueLocations</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>addf8580ca115602848ab2c5f40c5816d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, ValueLocation &gt; &amp;</type>
      <name>getValueLocationsByName</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a90ec872a6de60b51b54800b21d771a92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getValueAddressAtLocation</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>aafd87a4ade6b3c9daae315db34bc367e</anchor>
      <arglist>(State *state, const ValueLocation &amp;loc) const</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getValueAddressAtLocation</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a96b5c9d85c14df014d7be9e2910180a7</anchor>
      <arglist>(const State *state, const ValueLocation &amp;loc) const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getValueAddressAtName</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a52c7ce8228f85e47eaf4731cfd2c9884</anchor>
      <arglist>(State *state, const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getValueAddressAtName</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a5f04fc5bd81cc8498fdc411b50abc3fa</anchor>
      <arglist>(const State *state, const std::string &amp;name) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyToReals</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ac5e6b9f828da8d02338d55857ca74fda</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;reals, const State *source) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyFromReals</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a762ef767d52b8d9df49333ed423ae23e</anchor>
      <arglist>(State *destination, const std::vector&lt; double &gt; &amp;reals) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerProjection</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a309f2cdc5412ff16d31b87fec92b3595</anchor>
      <arglist>(const std::string &amp;name, const ProjectionEvaluatorPtr &amp;projection)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerDefaultProjection</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ac79f6342fb2d85f1c2c87bfff812fbbf</anchor>
      <arglist>(const ProjectionEvaluatorPtr &amp;projection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>registerProjections</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a9d83398ca1647e06036d9e69ebad7cf8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ProjectionEvaluatorPtr</type>
      <name>getProjection</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>adf84b7aa4f46da81705b996ca4eb995e</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>ProjectionEvaluatorPtr</type>
      <name>getDefaultProjection</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a2669ac13d055b7165c62b031757448fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasProjection</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>afe8bd7ede43fadaa2daf619bbe3ba38a</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasDefaultProjection</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>abc6814104ec21e73d67c60499a6572bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, ProjectionEvaluatorPtr &gt; &amp;</type>
      <name>getRegisteredProjections</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ad4f013cc6932e409a9ab088f784fcc77</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printState</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a1f75d03a8b948abc11b5c29239868e4d</anchor>
      <arglist>(const State *state, std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printSettings</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>abb4150d3a12920c543cc6da78fe872e8</anchor>
      <arglist>(std::ostream &amp;out) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printProjections</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a38635f6a0b6498e0c2026c260f126a3d</anchor>
      <arglist>(std::ostream &amp;out) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sanityChecks</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a105bac649945b8de692a4d4ad3892860</anchor>
      <arglist>(double zero, double eps, unsigned int flags) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sanityChecks</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a800eb71d641ffb4e5354a9f09a11f1dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>diagram</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>afd5f6a63d2a549baeefe6a8ef05681d3</anchor>
      <arglist>(std::ostream &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>list</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a63ee1011a43e1e212aeff709e9552364</anchor>
      <arglist>(std::ostream &amp;out) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Diagram</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a925ed4f0e97f137b4c2128afe9f36b2f</anchor>
      <arglist>(std::ostream &amp;out)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>List</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ad3ab5334644d6c9f8538f59a21bec854</anchor>
      <arglist>(std::ostream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>StateSamplerPtr</type>
      <name>allocSubspaceStateSampler</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a866a3c84c923ac0f8766113e3122d51b</anchor>
      <arglist>(const StateSpacePtr &amp;subspace) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StateSamplerPtr</type>
      <name>allocSubspaceStateSampler</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>afe6b15319c4faf358bb47052bf8f0bf6</anchor>
      <arglist>(const StateSpace *subspace) const</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>getSubstateAtLocation</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>aa16af79216ae39837e988e5dac41eae6</anchor>
      <arglist>(State *state, const SubstateLocation &amp;loc) const</arglist>
    </member>
    <member kind="function">
      <type>const State *</type>
      <name>getSubstateAtLocation</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a74b485fbb6a0a110f054e714a4e5f392</anchor>
      <arglist>(const State *state, const SubstateLocation &amp;loc) const</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, SubstateLocation &gt; &amp;</type>
      <name>getSubstateLocationsByName</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a9585ccf7f931ed36301740c52a0a2d9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCommonSubspaces</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a9dd0643944575e55cc59c8b0c1e7773d</anchor>
      <arglist>(const StateSpacePtr &amp;other, std::vector&lt; std::string &gt; &amp;subspaces) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCommonSubspaces</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a6e464d4bb8fca774c16db00401fe078a</anchor>
      <arglist>(const StateSpace *other, std::vector&lt; std::string &gt; &amp;subspaces) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeLocations</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a1866860e11fb0eb759453df70ba68ae2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::base::StateSpace::SubstateLocation</name>
    <filename>structompl_1_1base_1_1StateSpace_1_1SubstateLocation.html</filename>
    <member kind="variable">
      <type>std::vector&lt; std::size_t &gt;</type>
      <name>chain</name>
      <anchorfile>structompl_1_1base_1_1StateSpace_1_1SubstateLocation.html</anchorfile>
      <anchor>a793dcd59e0151d3bdea581d4bf3f48fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const StateSpace *</type>
      <name>space</name>
      <anchorfile>structompl_1_1base_1_1StateSpace_1_1SubstateLocation.html</anchorfile>
      <anchor>a64a291ab4cabdae9e8df3e942449fa62</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::base::StateSpace::ValueLocation</name>
    <filename>structompl_1_1base_1_1StateSpace_1_1ValueLocation.html</filename>
    <member kind="variable">
      <type>SubstateLocation</type>
      <name>stateLocation</name>
      <anchorfile>structompl_1_1base_1_1StateSpace_1_1ValueLocation.html</anchorfile>
      <anchor>a457de2e8f9c14218785b7a30312ef6c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>index</name>
      <anchorfile>structompl_1_1base_1_1StateSpace_1_1ValueLocation.html</anchorfile>
      <anchor>ad1df8970e82c7b3c93204868505e7746</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::StateSpacePtr</name>
    <filename>classompl_1_1base_1_1StateSpacePtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::base::StateStorage</name>
    <filename>classompl_1_1base_1_1StateStorage.html</filename>
    <class kind="struct">ompl::base::StateStorage::Header</class>
    <member kind="function">
      <type></type>
      <name>StateStorage</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>addf755567a0adaac81baa169e2fec359</anchor>
      <arglist>(StateSpacePtr space)</arglist>
    </member>
    <member kind="function">
      <type>const StateSpacePtr &amp;</type>
      <name>getStateSpace</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>af5330ea7e721095591ffad260fd18d99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>a4db3b5045f9107a1f5185941aa163eda</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>load</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>aff774060c40e7c9b5296c1feaa9b10a6</anchor>
      <arglist>(std::istream &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>store</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>ae1419e59cd3566da325cf10855a11457</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>store</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>a9821196ec356c0126836b66d3b24ef5b</anchor>
      <arglist>(std::ostream &amp;out)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addState</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>a938f84b6ebe2183b129f3aae208c94ec</anchor>
      <arglist>(const State *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>generateSamples</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>a12921311a320c9e25648228ab334b12e</anchor>
      <arglist>(unsigned int count)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>a966f5f9f4fef9ead94d7ec203a203c15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>a0dfbf12bd5f9e1d5f59795ce3f2fe4b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const State * &gt; &amp;</type>
      <name>getStates</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>ad8004b1e6f2476bf8f474f14faa483d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>ac9bcadde6f6d98433fc67e5310439709</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>const State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>a549f449d9125c4e5dc26a1b610da4b5b</anchor>
      <arglist>(unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMetadata</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>a5091b3df46efb20380d18d0f6c7df7ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>afbb00541c40cf715e2625c3150f428dc</anchor>
      <arglist>(const std::function&lt; bool(const State *, const State *)&gt; &amp;op)</arglist>
    </member>
    <member kind="function">
      <type>StateSamplerAllocator</type>
      <name>getStateSamplerAllocator</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>a0acdbdeeb523a654afb94b9c2de9b6eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StateSamplerAllocator</type>
      <name>getStateSamplerAllocatorRangeUntil</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>a7c910520aee0b21254400f070cbf4d00</anchor>
      <arglist>(std::size_t until) const</arglist>
    </member>
    <member kind="function">
      <type>StateSamplerAllocator</type>
      <name>getStateSamplerAllocatorRangeAfter</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>a2c0ddf1fa3f46a8112aa7668be13c765</anchor>
      <arglist>(std::size_t after) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StateSamplerAllocator</type>
      <name>getStateSamplerAllocatorRange</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>ae5939dac4bce03baed74a1dec8dd720c</anchor>
      <arglist>(std::size_t from, std::size_t to) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>a2a1e9f48c90bc972678a1aeaea1f6c46</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>loadStates</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>a2a7645e1be9b7fbafea18efe6e9ec668</anchor>
      <arglist>(const Header &amp;h, boost::archive::binary_iarchive &amp;ia)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>loadMetadata</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>ad9b55829a0c149c699861d962f865b7e</anchor>
      <arglist>(const Header &amp;h, boost::archive::binary_iarchive &amp;ia)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>storeStates</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>a65d548219ee3be541508ef59092010c2</anchor>
      <arglist>(const Header &amp;h, boost::archive::binary_oarchive &amp;oa)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>storeMetadata</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>ad8601e37c27135a51b8af9e69c1b3bdc</anchor>
      <arglist>(const Header &amp;h, boost::archive::binary_oarchive &amp;oa)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>ae5bd812f772394584e527178750d15a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StateSpacePtr</type>
      <name>space_</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>ac8cea7a2266a29d7cb4d354c93bf25e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; const State * &gt;</type>
      <name>states_</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>aec3df09ecdcc4bd65f00204a58ed9aa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>hasMetadata_</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>a195e161dffd85bfe1c6a5027982c47b3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::base::StateStorage::Header</name>
    <filename>structompl_1_1base_1_1StateStorage_1_1Header.html</filename>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>structompl_1_1base_1_1StateStorage_1_1Header.html</anchorfile>
      <anchor>ad83c5b066ccb885f5bf678f52c4aa282</anchor>
      <arglist>(Archive &amp;ar, const unsigned int)</arglist>
    </member>
    <member kind="variable">
      <type>std::uint_fast32_t</type>
      <name>marker</name>
      <anchorfile>structompl_1_1base_1_1StateStorage_1_1Header.html</anchorfile>
      <anchor>afa49667a83d83b6d54f36255ec6db7ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>state_count</name>
      <anchorfile>structompl_1_1base_1_1StateStorage_1_1Header.html</anchorfile>
      <anchor>a0ae07fd5c650eab2264c3613b2e1bc91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>signature</name>
      <anchorfile>structompl_1_1base_1_1StateStorage_1_1Header.html</anchorfile>
      <anchor>ab8a6d9e7b4bc48730b1a8c29ce89a6aa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::StateStorageWithMetadata</name>
    <filename>classompl_1_1base_1_1StateStorageWithMetadata.html</filename>
    <templarg></templarg>
    <base>ompl::base::StateStorage</base>
    <member kind="typedef">
      <type>M</type>
      <name>MetadataType</name>
      <anchorfile>classompl_1_1base_1_1StateStorageWithMetadata.html</anchorfile>
      <anchor>a5144bd065e9a9344cf1205f621b9befa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateStorageWithMetadata</name>
      <anchorfile>classompl_1_1base_1_1StateStorageWithMetadata.html</anchorfile>
      <anchor>a91ecfc1d568cfa3844107f904b75c6de</anchor>
      <arglist>(const StateSpacePtr &amp;space)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addState</name>
      <anchorfile>classompl_1_1base_1_1StateStorageWithMetadata.html</anchorfile>
      <anchor>a1bb0576c7540f1f01df22cf9efee26f5</anchor>
      <arglist>(const State *state) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addState</name>
      <anchorfile>classompl_1_1base_1_1StateStorageWithMetadata.html</anchorfile>
      <anchor>ab55dc6dc746107d0b2f7b639ac7d272a</anchor>
      <arglist>(const State *state, const M &amp;metadata)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1base_1_1StateStorageWithMetadata.html</anchorfile>
      <anchor>aca61117ec573f5b0439ef1b65128307e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>const M &amp;</type>
      <name>getMetadata</name>
      <anchorfile>classompl_1_1base_1_1StateStorageWithMetadata.html</anchorfile>
      <anchor>ac553b3ef678afa15f9cebb0a34d26661</anchor>
      <arglist>(unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>M &amp;</type>
      <name>getMetadata</name>
      <anchorfile>classompl_1_1base_1_1StateStorageWithMetadata.html</anchorfile>
      <anchor>a2823f12dc99173a08109600958b04efc</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>loadMetadata</name>
      <anchorfile>classompl_1_1base_1_1StateStorageWithMetadata.html</anchorfile>
      <anchor>a9395750f1850384bf897630d872b5eda</anchor>
      <arglist>(const Header &amp;, boost::archive::binary_iarchive &amp;ia) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>storeMetadata</name>
      <anchorfile>classompl_1_1base_1_1StateStorageWithMetadata.html</anchorfile>
      <anchor>adbb6ac8878cd61cb908117592486999b</anchor>
      <arglist>(const Header &amp;, boost::archive::binary_oarchive &amp;oa) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; M &gt;</type>
      <name>metadata_</name>
      <anchorfile>classompl_1_1base_1_1StateStorageWithMetadata.html</anchorfile>
      <anchor>a86da79c284b5a9048b10603f6f3dc988</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::StateValidityChecker</name>
    <filename>classompl_1_1base_1_1StateValidityChecker.html</filename>
    <member kind="function">
      <type></type>
      <name>StateValidityChecker</name>
      <anchorfile>classompl_1_1base_1_1StateValidityChecker.html</anchorfile>
      <anchor>aa195ab177c3a7fe27641377e46354f1f</anchor>
      <arglist>(SpaceInformation *si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateValidityChecker</name>
      <anchorfile>classompl_1_1base_1_1StateValidityChecker.html</anchorfile>
      <anchor>a0fc97f8f1402e69a317cef0abd8385de</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isValid</name>
      <anchorfile>classompl_1_1base_1_1StateValidityChecker.html</anchorfile>
      <anchor>a1e70a8c8c51e42c81408c5eae6108a4b</anchor>
      <arglist>(const State *state) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isValid</name>
      <anchorfile>classompl_1_1base_1_1StateValidityChecker.html</anchorfile>
      <anchor>a5ac60c795bc7dfad2d90a6962271abac</anchor>
      <arglist>(const State *state, double &amp;dist) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isValid</name>
      <anchorfile>classompl_1_1base_1_1StateValidityChecker.html</anchorfile>
      <anchor>affaa42c73a10c007270d643a5ad8d361</anchor>
      <arglist>(const State *state, double &amp;dist, State *validState, bool &amp;validStateAvailable) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>clearance</name>
      <anchorfile>classompl_1_1base_1_1StateValidityChecker.html</anchorfile>
      <anchor>a3b81207d576bb32e44057d15e1c895ab</anchor>
      <arglist>(const State *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>clearance</name>
      <anchorfile>classompl_1_1base_1_1StateValidityChecker.html</anchorfile>
      <anchor>ae9c74c8310d297aa6750b42db7e1681c</anchor>
      <arglist>(const State *state, State *, bool &amp;validStateAvailable) const</arglist>
    </member>
    <member kind="function">
      <type>const StateValidityCheckerSpecs &amp;</type>
      <name>getSpecs</name>
      <anchorfile>classompl_1_1base_1_1StateValidityChecker.html</anchorfile>
      <anchor>abc6607382750b389f7d40ebcd2ef417f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SpaceInformation *</type>
      <name>si_</name>
      <anchorfile>classompl_1_1base_1_1StateValidityChecker.html</anchorfile>
      <anchor>af2c66e45895871b67a253db783df6982</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StateValidityCheckerSpecs</type>
      <name>specs_</name>
      <anchorfile>classompl_1_1base_1_1StateValidityChecker.html</anchorfile>
      <anchor>aa2433d86dcb77c0dc67e99f6fa8d1e01</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::StateValidityCheckerPtr</name>
    <filename>classompl_1_1base_1_1StateValidityCheckerPtr.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::base::StateValidityCheckerSpecs</name>
    <filename>structompl_1_1base_1_1StateValidityCheckerSpecs.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>ClearanceComputationType</name>
      <anchorfile>structompl_1_1base_1_1StateValidityCheckerSpecs.html</anchorfile>
      <anchor>a986ca638de363299cf59527821c41715</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONE</name>
      <anchorfile>structompl_1_1base_1_1StateValidityCheckerSpecs.html</anchorfile>
      <anchor>a986ca638de363299cf59527821c41715a2d877fb4236539ab02156d6032445410</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXACT</name>
      <anchorfile>structompl_1_1base_1_1StateValidityCheckerSpecs.html</anchorfile>
      <anchor>a986ca638de363299cf59527821c41715afd5a3122c18b46a5f9fbec3f3d47975d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APPROXIMATE</name>
      <anchorfile>structompl_1_1base_1_1StateValidityCheckerSpecs.html</anchorfile>
      <anchor>a986ca638de363299cf59527821c41715a3bf1cd52612a2ad15ca513e293668e01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOUNDED_APPROXIMATE</name>
      <anchorfile>structompl_1_1base_1_1StateValidityCheckerSpecs.html</anchorfile>
      <anchor>a986ca638de363299cf59527821c41715ac0b22ba9ef80d27870ab2de7d231116c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONE</name>
      <anchorfile>structompl_1_1base_1_1StateValidityCheckerSpecs.html</anchorfile>
      <anchor>a986ca638de363299cf59527821c41715a2d877fb4236539ab02156d6032445410</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXACT</name>
      <anchorfile>structompl_1_1base_1_1StateValidityCheckerSpecs.html</anchorfile>
      <anchor>a986ca638de363299cf59527821c41715afd5a3122c18b46a5f9fbec3f3d47975d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APPROXIMATE</name>
      <anchorfile>structompl_1_1base_1_1StateValidityCheckerSpecs.html</anchorfile>
      <anchor>a986ca638de363299cf59527821c41715a3bf1cd52612a2ad15ca513e293668e01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOUNDED_APPROXIMATE</name>
      <anchorfile>structompl_1_1base_1_1StateValidityCheckerSpecs.html</anchorfile>
      <anchor>a986ca638de363299cf59527821c41715ac0b22ba9ef80d27870ab2de7d231116c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ClearanceComputationType</type>
      <name>clearanceComputationType</name>
      <anchorfile>structompl_1_1base_1_1StateValidityCheckerSpecs.html</anchorfile>
      <anchor>a48bfb73e86b5950dec03bddb31e1d5d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasValidDirectionComputation</name>
      <anchorfile>structompl_1_1base_1_1StateValidityCheckerSpecs.html</anchorfile>
      <anchor>a290fe2709dc7eb085c04f86af56429e7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::SubspaceProjectionEvaluator</name>
    <filename>classompl_1_1base_1_1SubspaceProjectionEvaluator.html</filename>
    <base>ompl::base::ProjectionEvaluator</base>
    <member kind="function">
      <type></type>
      <name>SubspaceProjectionEvaluator</name>
      <anchorfile>classompl_1_1base_1_1SubspaceProjectionEvaluator.html</anchorfile>
      <anchor>a3a18f28b58401747cbb010bfd24f8239</anchor>
      <arglist>(const StateSpace *space, unsigned int index, ProjectionEvaluatorPtr projToUse=ProjectionEvaluatorPtr())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1base_1_1SubspaceProjectionEvaluator.html</anchorfile>
      <anchor>a17e3c38499b2994b48db53e4324b01c8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1base_1_1SubspaceProjectionEvaluator.html</anchorfile>
      <anchor>ae3cbc1264371b712e55c160348e61dc9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>project</name>
      <anchorfile>classompl_1_1base_1_1SubspaceProjectionEvaluator.html</anchorfile>
      <anchor>a3bc64e30bf8e9ce1d696f2cab287b42c</anchor>
      <arglist>(const State *state, Eigen::Ref&lt; Eigen::VectorXd &gt; projection) const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>index_</name>
      <anchorfile>classompl_1_1base_1_1SubspaceProjectionEvaluator.html</anchorfile>
      <anchor>a0096bf8cee26212911813b6fc09d5f0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ProjectionEvaluatorPtr</type>
      <name>proj_</name>
      <anchorfile>classompl_1_1base_1_1SubspaceProjectionEvaluator.html</anchorfile>
      <anchor>a5ee12ab4e4a5b8f87fed740ef272238b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ProjectionEvaluatorPtr</type>
      <name>specifiedProj_</name>
      <anchorfile>classompl_1_1base_1_1SubspaceProjectionEvaluator.html</anchorfile>
      <anchor>a7dbda72b9736c275bbc1f657b1d8f285</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::SubspaceStateSampler</name>
    <filename>classompl_1_1base_1_1SubspaceStateSampler.html</filename>
    <base>ompl::base::StateSampler</base>
    <member kind="function">
      <type></type>
      <name>SubspaceStateSampler</name>
      <anchorfile>classompl_1_1base_1_1SubspaceStateSampler.html</anchorfile>
      <anchor>ac5d7d1f6dd4fcb1c6339c28036f97fcb</anchor>
      <arglist>(const StateSpace *space, const StateSpace *subspace, double weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1SubspaceStateSampler.html</anchorfile>
      <anchor>adceaa282e8f7fe2ea144907b4cd646d5</anchor>
      <arglist>(State *state) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleUniformNear</name>
      <anchorfile>classompl_1_1base_1_1SubspaceStateSampler.html</anchorfile>
      <anchor>a5b6905097c22e18079486012a0e59632</anchor>
      <arglist>(State *state, const State *near, double distance) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleGaussian</name>
      <anchorfile>classompl_1_1base_1_1SubspaceStateSampler.html</anchorfile>
      <anchor>a724b2abd599820adb7d69c013cd15a8c</anchor>
      <arglist>(State *state, const State *mean, double stdDev) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const StateSpace *</type>
      <name>subspace_</name>
      <anchorfile>classompl_1_1base_1_1SubspaceStateSampler.html</anchorfile>
      <anchor>a211601f6099807e25cca97863919175d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StateSamplerPtr</type>
      <name>subspaceSampler_</name>
      <anchorfile>classompl_1_1base_1_1SubspaceStateSampler.html</anchorfile>
      <anchor>ab7e22e7c495a1ac6afe2048aa721f8db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>weight_</name>
      <anchorfile>classompl_1_1base_1_1SubspaceStateSampler.html</anchorfile>
      <anchor>adc627ced8c5dbb5b3053b14162d77981</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>subspaces_</name>
      <anchorfile>classompl_1_1base_1_1SubspaceStateSampler.html</anchorfile>
      <anchor>abd9c33f3e41a03863aad8567dc6fac49</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::TangentBundleSpaceInformation</name>
    <filename>classompl_1_1base_1_1TangentBundleSpaceInformation.html</filename>
    <base>ompl::base::ConstrainedSpaceInformation</base>
    <member kind="function">
      <type></type>
      <name>TangentBundleSpaceInformation</name>
      <anchorfile>classompl_1_1base_1_1TangentBundleSpaceInformation.html</anchorfile>
      <anchor>ac16f5b2448064e6f8ebb045ac05d986b</anchor>
      <arglist>(StateSpacePtr space)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMotionStates</name>
      <anchorfile>classompl_1_1base_1_1TangentBundleSpaceInformation.html</anchorfile>
      <anchor>a2253f756749cbbcc58d752a12238378a</anchor>
      <arglist>(const State *s1, const State *s2, std::vector&lt; State * &gt; &amp;states, unsigned int, bool, bool) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkMotion</name>
      <anchorfile>classompl_1_1base_1_1TangentBundleSpaceInformation.html</anchorfile>
      <anchor>ac7b0046d6d6d17521a5ca25a39242960</anchor>
      <arglist>(const State *s1, const State *s2, std::pair&lt; State *, double &gt; &amp;lastValid) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::TangentBundleStateSpace</name>
    <filename>classompl_1_1base_1_1TangentBundleStateSpace.html</filename>
    <base>ompl::base::AtlasStateSpace</base>
    <member kind="function">
      <type>void</type>
      <name>sanityChecks</name>
      <anchorfile>classompl_1_1base_1_1TangentBundleStateSpace.html</anchorfile>
      <anchor>a04d4bda1e17177a4cfe6b6ddbcae96b8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>discreteGeodesic</name>
      <anchorfile>classompl_1_1base_1_1TangentBundleStateSpace.html</anchorfile>
      <anchor>a5eea92d4eacac3d7b8b4734d8e7cb3c8</anchor>
      <arglist>(const State *from, const State *to, bool interpolate=false, std::vector&lt; State * &gt; *geodesic=nullptr) const override</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>geodesicInterpolate</name>
      <anchorfile>classompl_1_1base_1_1TangentBundleStateSpace.html</anchorfile>
      <anchor>aa413d2cf2002fa522aca8bb00580e47f</anchor>
      <arglist>(const std::vector&lt; State * &gt; &amp;geodesic, double t) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>project</name>
      <anchorfile>classompl_1_1base_1_1TangentBundleStateSpace.html</anchorfile>
      <anchor>ad51f0259bd53b0c8db0a37b51c606654</anchor>
      <arglist>(State *state) const</arglist>
    </member>
    <docanchor file="classompl_1_1base_1_1TangentBundleStateSpace.html">gTangentBundle</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::base::ThunderRetrieveRepairPtr</name>
    <filename>classompl_1_1base_1_1ThunderRetrieveRepairPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::base::TimeStateSampler</name>
    <filename>classompl_1_1base_1_1TimeStateSampler.html</filename>
    <base>ompl::base::StateSampler</base>
    <member kind="function">
      <type></type>
      <name>TimeStateSampler</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSampler.html</anchorfile>
      <anchor>aa9f1631dc3d71d96493070ecd90a8fc8</anchor>
      <arglist>(const StateSpace *space)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSampler.html</anchorfile>
      <anchor>a5f675a254e8f6b5450469f282654a084</anchor>
      <arglist>(State *state) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleUniformNear</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSampler.html</anchorfile>
      <anchor>abcd8b1e4caff6160c5608262dd13de0f</anchor>
      <arglist>(State *state, const State *near, double distance) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleGaussian</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSampler.html</anchorfile>
      <anchor>a42d5468dd62fc4f502a52060484afaf6</anchor>
      <arglist>(State *state, const State *mean, double stdDev) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::TimeStateSpace</name>
    <filename>classompl_1_1base_1_1TimeStateSpace.html</filename>
    <base>ompl::base::StateSpace</base>
    <class kind="class">ompl::base::TimeStateSpace::StateType</class>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>a9c3557e1607094fa3461edbb6f7bdadb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>ac2a803430f9572eb1f584b35f241449a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMeasure</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>a04a5140f7ce42a81222b3f1d41ce161a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBounds</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>a3c51355b0e7e620ba7da19c85cac93ee</anchor>
      <arglist>(double minTime, double maxTime)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMinTimeBound</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>ac14d3d355bd9d7a8eca70e66882a4308</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaxTimeBound</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>a4be48c6e2a0e76c51565712d1b16fc4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBounded</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>a34eda726ecc4000eff1e5b521753202b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enforceBounds</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>aff534c8e8dff15a5e59b3d5f8b0565ec</anchor>
      <arglist>(State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>a2bca408a7dbafe47c97d170315713f38</anchor>
      <arglist>(const State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyState</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>a2bd51920e33d716a2be53ddadf7cf8e3</anchor>
      <arglist>(State *destination, const State *source) const override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getSerializationLength</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>a5f6650dad27a153d3a8bafdc750ca7a2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>ad0cc546de90bf0d43a0b3292dc8520aa</anchor>
      <arglist>(void *serialization, const State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserialize</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>af0b43e5357de3fa75108fa50d1cd9293</anchor>
      <arglist>(State *state, const void *serialization) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>afd4f390e6d77b1f6045da53412665138</anchor>
      <arglist>(const State *state1, const State *state2) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalStates</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>a902f3a13cfcda102b7e9914f4a0bc3c7</anchor>
      <arglist>(const State *state1, const State *state2) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>a5247fe9f2f621c893cbe210c5b992855</anchor>
      <arglist>(const State *from, const State *to, double t, State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>StateSamplerPtr</type>
      <name>allocDefaultStateSampler</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>a3380b51a869a63f847600237a7011fc3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>allocState</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>ab92728922913107d887277d57c2e5724</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeState</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>a9815daa00154b55641534f81020740c7</anchor>
      <arglist>(State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getValueAddressAtIndex</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>a9c16f9148303b3f3817d6f7f8431e40a</anchor>
      <arglist>(State *state, unsigned int index) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printState</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>aedd6a7136eb0ec93fd45ada3257c42c9</anchor>
      <arglist>(const State *state, std::ostream &amp;out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printSettings</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>a4e1a084dae0cb258f289a90c9c67ebc4</anchor>
      <arglist>(std::ostream &amp;out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerProjections</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>a51e9ac55627ecdb723c85d8adcf04ed5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>bounded_</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>a3db8870edad098617d42451c82d08246</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>minTime_</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>a73663499e3657506e3f76d8979ed4cbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxTime_</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>a40cc110f6c4295f575a33cbc27c96eba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::TimeStateSpace::StateType</name>
    <filename>classompl_1_1base_1_1TimeStateSpace_1_1StateType.html</filename>
    <base>ompl::base::State</base>
    <member kind="variable">
      <type>double</type>
      <name>position</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace_1_1StateType.html</anchorfile>
      <anchor>ae9e66e0d2dd7ee6aec6442cbd6c147ca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::TypedSpaceInformation</name>
    <filename>classompl_1_1base_1_1TypedSpaceInformation.html</filename>
    <templarg></templarg>
    <base>ompl::base::SpaceInformation</base>
    <member kind="typedef">
      <type>SpaceType_</type>
      <name>SpaceType</name>
      <anchorfile>classompl_1_1base_1_1TypedSpaceInformation.html</anchorfile>
      <anchor>ad7e706625125e4a02ee0f6cfae132c7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename SpaceType::StateType</type>
      <name>StateType</name>
      <anchorfile>classompl_1_1base_1_1TypedSpaceInformation.html</anchorfile>
      <anchor>a0119f3c8370a3b2fdef4ed330b79381e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScopedState&lt; SpaceType &gt;</type>
      <name>ScopedStateType</name>
      <anchorfile>classompl_1_1base_1_1TypedSpaceInformation.html</anchorfile>
      <anchor>a9ddeb55dc86ed9f767bf9c50c2648456</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; SpaceType &gt;</type>
      <name>SpacePtr</name>
      <anchorfile>classompl_1_1base_1_1TypedSpaceInformation.html</anchorfile>
      <anchor>a549e276b9a6e68e9d66cafd132f96aa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TypedSpaceInformation&lt; SpaceType &gt; &gt;</type>
      <name>Ptr</name>
      <anchorfile>classompl_1_1base_1_1TypedSpaceInformation.html</anchorfile>
      <anchor>ac85c66befef64c830a54ec51fd74bf36</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypedSpaceInformation</name>
      <anchorfile>classompl_1_1base_1_1TypedSpaceInformation.html</anchorfile>
      <anchor>a82d7deca20e8241a8e7aca9bfd9e45af</anchor>
      <arglist>(const SpacePtr &amp;space)</arglist>
    </member>
    <member kind="function">
      <type>const SpaceType *</type>
      <name>getTypedStateSpace</name>
      <anchorfile>classompl_1_1base_1_1TypedSpaceInformation.html</anchorfile>
      <anchor>a501b62a337e32593903f7db3f9685e5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SpaceType *</type>
      <name>getTypedStateSpace</name>
      <anchorfile>classompl_1_1base_1_1TypedSpaceInformation.html</anchorfile>
      <anchor>ad003c54f7699e8831bd576704ebf92f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StateType *</type>
      <name>allocTypedState</name>
      <anchorfile>classompl_1_1base_1_1TypedSpaceInformation.html</anchorfile>
      <anchor>a02a788c37bf159e67bcf341bcda27cdc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocTypedStates</name>
      <anchorfile>classompl_1_1base_1_1TypedSpaceInformation.html</anchorfile>
      <anchor>a751c68156a048da36fd2c9843c098780</anchor>
      <arglist>(std::vector&lt; StateType * &gt; &amp;states) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeTypedState</name>
      <anchorfile>classompl_1_1base_1_1TypedSpaceInformation.html</anchorfile>
      <anchor>a1ab63bd0f20de136346bef24425cb54d</anchor>
      <arglist>(StateType *state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeTypedStates</name>
      <anchorfile>classompl_1_1base_1_1TypedSpaceInformation.html</anchorfile>
      <anchor>aede5dd612b4931222adae9d7b568be15</anchor>
      <arglist>(std::vector&lt; StateType * &gt; &amp;states) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyTypedState</name>
      <anchorfile>classompl_1_1base_1_1TypedSpaceInformation.html</anchorfile>
      <anchor>a955945fb517e51c78d2dfc0051ee0267</anchor>
      <arglist>(StateType *destination, const StateType *source) const</arglist>
    </member>
    <member kind="function">
      <type>StateType *</type>
      <name>cloneTypedState</name>
      <anchorfile>classompl_1_1base_1_1TypedSpaceInformation.html</anchorfile>
      <anchor>abde1def23149ed7ca225bff49780d6d1</anchor>
      <arglist>(const StateType *source) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::TypedStateValidityChecker</name>
    <filename>classompl_1_1base_1_1TypedStateValidityChecker.html</filename>
    <templarg></templarg>
    <base>ompl::base::StateValidityChecker</base>
  </compound>
  <compound kind="class">
    <name>ompl::base::UniformValidStateSampler</name>
    <filename>classompl_1_1base_1_1UniformValidStateSampler.html</filename>
    <base>ompl::base::ValidStateSampler</base>
    <member kind="function">
      <type></type>
      <name>UniformValidStateSampler</name>
      <anchorfile>classompl_1_1base_1_1UniformValidStateSampler.html</anchorfile>
      <anchor>a1c0f3f6b13aa29e6e593f73e391e5201</anchor>
      <arglist>(const SpaceInformation *si)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sample</name>
      <anchorfile>classompl_1_1base_1_1UniformValidStateSampler.html</anchorfile>
      <anchor>acc70ccf8fd8ce033e2a71c8ef38c4b2c</anchor>
      <arglist>(State *state) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sampleNear</name>
      <anchorfile>classompl_1_1base_1_1UniformValidStateSampler.html</anchorfile>
      <anchor>aef5fcfabb5cd60c1c502e1944cdcea27</anchor>
      <arglist>(State *state, const State *near, double distance) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1base_1_1UniformValidStateSampler.html</anchorfile>
      <anchor>a0d4b3a5afd2d7e2149d40cad3ae34a9b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::ValidStateSampler</name>
    <filename>classompl_1_1base_1_1ValidStateSampler.html</filename>
    <member kind="function">
      <type></type>
      <name>ValidStateSampler</name>
      <anchorfile>classompl_1_1base_1_1ValidStateSampler.html</anchorfile>
      <anchor>a5893d51bbce7621ab0d00306d066496c</anchor>
      <arglist>(const SpaceInformation *si)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classompl_1_1base_1_1ValidStateSampler.html</anchorfile>
      <anchor>ae52a0372c786461f827cfa24e29176b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classompl_1_1base_1_1ValidStateSampler.html</anchorfile>
      <anchor>a03d9547f1d25a7f2f6f60edb5adfe56d</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>sample</name>
      <anchorfile>classompl_1_1base_1_1ValidStateSampler.html</anchorfile>
      <anchor>a011ee3910d747d806b00ff71bb66e1ea</anchor>
      <arglist>(State *state)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>sampleNear</name>
      <anchorfile>classompl_1_1base_1_1ValidStateSampler.html</anchorfile>
      <anchor>a95d713277bb999148843e736a6925601</anchor>
      <arglist>(State *state, const State *near, double distance)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNrAttempts</name>
      <anchorfile>classompl_1_1base_1_1ValidStateSampler.html</anchorfile>
      <anchor>aa134892ca5a8ae0c5ec2e37693787090</anchor>
      <arglist>(unsigned int attempts)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNrAttempts</name>
      <anchorfile>classompl_1_1base_1_1ValidStateSampler.html</anchorfile>
      <anchor>afb5af0ef448f5bde5d1171739d483400</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ParamSet &amp;</type>
      <name>params</name>
      <anchorfile>classompl_1_1base_1_1ValidStateSampler.html</anchorfile>
      <anchor>ac634bcfcf5c61c1bae21315d298caf29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ParamSet &amp;</type>
      <name>params</name>
      <anchorfile>classompl_1_1base_1_1ValidStateSampler.html</anchorfile>
      <anchor>aee8d358a1a454279632681addaa014bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const SpaceInformation *</type>
      <name>si_</name>
      <anchorfile>classompl_1_1base_1_1ValidStateSampler.html</anchorfile>
      <anchor>a66930cdb64d8d71e3b6ba5a5a1aee223</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>attempts_</name>
      <anchorfile>classompl_1_1base_1_1ValidStateSampler.html</anchorfile>
      <anchor>acb624beff24c591763f5d9fc8e38037f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>classompl_1_1base_1_1ValidStateSampler.html</anchorfile>
      <anchor>aa81e8e1aac6d0c7a114aaa69b33a6631</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParamSet</type>
      <name>params_</name>
      <anchorfile>classompl_1_1base_1_1ValidStateSampler.html</anchorfile>
      <anchor>a33ed9e5acc2c48fb8509ffe5f549139e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::ValidStateSamplerPtr</name>
    <filename>classompl_1_1base_1_1ValidStateSamplerPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::base::VFMechanicalWorkOptimizationObjective</name>
    <filename>classompl_1_1base_1_1VFMechanicalWorkOptimizationObjective.html</filename>
    <base>ompl::base::MechanicalWorkOptimizationObjective</base>
    <member kind="function">
      <type></type>
      <name>VFMechanicalWorkOptimizationObjective</name>
      <anchorfile>classompl_1_1base_1_1VFMechanicalWorkOptimizationObjective.html</anchorfile>
      <anchor>a9ddf0c58c75562bcec9a23b291794444</anchor>
      <arglist>(const ompl::base::SpaceInformationPtr &amp;si, geometric::VFRRT::VectorField vf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>classompl_1_1base_1_1VFMechanicalWorkOptimizationObjective.html</anchorfile>
      <anchor>a7c6dca1cec24bc2638151c7f0fa3fd79</anchor>
      <arglist>(ompl::base::Cost) const override</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::Cost</type>
      <name>motionCost</name>
      <anchorfile>classompl_1_1base_1_1VFMechanicalWorkOptimizationObjective.html</anchorfile>
      <anchor>a06f85298eac70c79e5592a5a04bbef9a</anchor>
      <arglist>(const ompl::base::State *s1, const ompl::base::State *s2) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSymmetric</name>
      <anchorfile>classompl_1_1base_1_1VFMechanicalWorkOptimizationObjective.html</anchorfile>
      <anchor>aa59bfc8eff4cd8c0959c034b7170483b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>geometric::VFRRT::VectorField</type>
      <name>vf_</name>
      <anchorfile>classompl_1_1base_1_1VFMechanicalWorkOptimizationObjective.html</anchorfile>
      <anchor>a7e1d58a1ddffd21e0d74de11ae3e1164</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::VFUpstreamCriterionOptimizationObjective</name>
    <filename>classompl_1_1base_1_1VFUpstreamCriterionOptimizationObjective.html</filename>
    <base>ompl::base::OptimizationObjective</base>
    <member kind="function">
      <type></type>
      <name>VFUpstreamCriterionOptimizationObjective</name>
      <anchorfile>classompl_1_1base_1_1VFUpstreamCriterionOptimizationObjective.html</anchorfile>
      <anchor>a0bf841f2122ca6734b152df203adf26c</anchor>
      <arglist>(const ompl::base::SpaceInformationPtr &amp;si, geometric::VFRRT::VectorField vf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>classompl_1_1base_1_1VFUpstreamCriterionOptimizationObjective.html</anchorfile>
      <anchor>acd866bb5cdb59482a1336770d3f55821</anchor>
      <arglist>(ompl::base::Cost) const override</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>stateCost</name>
      <anchorfile>classompl_1_1base_1_1VFUpstreamCriterionOptimizationObjective.html</anchorfile>
      <anchor>a0f6dfdd2719d078766f222550b6a72e8</anchor>
      <arglist>(const State *) const override</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::Cost</type>
      <name>motionCost</name>
      <anchorfile>classompl_1_1base_1_1VFUpstreamCriterionOptimizationObjective.html</anchorfile>
      <anchor>a2ce4b8deb86308dd4c03b13a10991347</anchor>
      <arglist>(const State *s1, const State *s2) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSymmetric</name>
      <anchorfile>classompl_1_1base_1_1VFUpstreamCriterionOptimizationObjective.html</anchorfile>
      <anchor>adbd899677de89130ccc4128c8dab377f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>geometric::VFRRT::VectorField</type>
      <name>vf_</name>
      <anchorfile>classompl_1_1base_1_1VFUpstreamCriterionOptimizationObjective.html</anchorfile>
      <anchor>ad90fdf828c7080c1104308933600e941</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::WrapperProjectionEvaluator</name>
    <filename>classompl_1_1base_1_1WrapperProjectionEvaluator.html</filename>
    <base>ompl::base::ProjectionEvaluator</base>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1base_1_1WrapperProjectionEvaluator.html</anchorfile>
      <anchor>ab31ec822cd625bd939b8f8ba2ca89a9d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1base_1_1WrapperProjectionEvaluator.html</anchorfile>
      <anchor>a138e77a8b1081962d2bbd6070a440f42</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>project</name>
      <anchorfile>classompl_1_1base_1_1WrapperProjectionEvaluator.html</anchorfile>
      <anchor>a4ac3bd79149d4adf7c148644c2d5f69d</anchor>
      <arglist>(const State *state, Eigen::Ref&lt; Eigen::VectorXd &gt; projection) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::WrapperStateSampler</name>
    <filename>classompl_1_1base_1_1WrapperStateSampler.html</filename>
    <base>ompl::base::StateSampler</base>
    <member kind="function">
      <type></type>
      <name>WrapperStateSampler</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSampler.html</anchorfile>
      <anchor>aeb1404828b044aff9932ff0c0da99542</anchor>
      <arglist>(const StateSpace *space, StateSamplerPtr sampler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSampler.html</anchorfile>
      <anchor>a311163085cd894c9e064b8f642c29b37</anchor>
      <arglist>(State *state) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleUniformNear</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSampler.html</anchorfile>
      <anchor>a21b5c778e2ffc9058a0f8fc48fb95881</anchor>
      <arglist>(State *state, const State *near, double distance) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleGaussian</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSampler.html</anchorfile>
      <anchor>ade8c9340c29302c18a61177991b83812</anchor>
      <arglist>(State *state, const State *mean, double stdDev) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSampler.html</anchorfile>
      <anchor>a301df186cebe553b8205c7f07a3dbfe1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::WrapperStateSpace</name>
    <filename>classompl_1_1base_1_1WrapperStateSpace.html</filename>
    <base>ompl::base::StateSpace</base>
    <class kind="class">ompl::base::WrapperStateSpace::StateType</class>
    <member kind="function">
      <type>bool</type>
      <name>isCompound</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace.html</anchorfile>
      <anchor>ab08859ce916d451303bb51e6b00983ea</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDiscrete</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace.html</anchorfile>
      <anchor>a86bda085ff9d5c49334f7b293efb9fae</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isHybrid</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace.html</anchorfile>
      <anchor>af9a19afb47d685a7a5ad78a97c7c7fd7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMetricSpace</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace.html</anchorfile>
      <anchor>ac04b15e440ecf2dc6fdc2c4843256918</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSymmetricDistance</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace.html</anchorfile>
      <anchor>ae6fb525e50507a509af4778f5defeb33</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSymmetricInterpolate</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace.html</anchorfile>
      <anchor>a1cf5905cf6894cef772bd2d8be6f4e1a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const ParamSet &amp;</type>
      <name>params</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace.html</anchorfile>
      <anchor>aa2858f74610b3a340f02e226341d6a88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLongestValidSegmentFraction</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace.html</anchorfile>
      <anchor>a19371b5621d56989d89b0c9a68540c4d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLongestValidSegmentFraction</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace.html</anchorfile>
      <anchor>a4ec23c478547aee7e46f5c3c57b581ce</anchor>
      <arglist>(double segmentFraction) override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>validSegmentCount</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace.html</anchorfile>
      <anchor>a5c0de05e7bf5c51bcc7164c762913d99</anchor>
      <arglist>(const State *state1, const State *state2) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValidSegmentCountFactor</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace.html</anchorfile>
      <anchor>a36d553247c1ad87770592f0da6cbf2a9</anchor>
      <arglist>(unsigned int factor) override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getValidSegmentCountFactor</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace.html</anchorfile>
      <anchor>a8b9d0b0af3c1f05e7cee76c2ec6f8e41</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLongestValidSegmentLength</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace.html</anchorfile>
      <anchor>a93b0e2d9bd417b1e1c49b5369e247ba4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeSignature</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace.html</anchorfile>
      <anchor>a935487a02046908411be1a42a2d2ed80</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;signature) const override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace.html</anchorfile>
      <anchor>ad4c55cf67596c8dd0861ef6380178f24</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace.html</anchorfile>
      <anchor>a437934384ef980c4353a2211806258fc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMeasure</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace.html</anchorfile>
      <anchor>a2b0360ea61bb45ab9c492426cbba27d4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enforceBounds</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace.html</anchorfile>
      <anchor>a5bb6986ee8ff457f432d746d871d3fa6</anchor>
      <arglist>(State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace.html</anchorfile>
      <anchor>a272774ebdb45f2666d0b9c6bde7718ca</anchor>
      <arglist>(const State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyState</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace.html</anchorfile>
      <anchor>a5cee21956f8dcd825c45cb502f3bfb50</anchor>
      <arglist>(State *destination, const State *source) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace.html</anchorfile>
      <anchor>ada6102cb4e47614f270b160b0ba70402</anchor>
      <arglist>(const State *state1, const State *state2) const override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getSerializationLength</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace.html</anchorfile>
      <anchor>a14dbe362f6467a1b909c44c39b427478</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace.html</anchorfile>
      <anchor>a84cf620115f1e17832548042d6f569a2</anchor>
      <arglist>(void *serialization, const State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserialize</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace.html</anchorfile>
      <anchor>a01e07dc899ec470df42a7141badcf44e</anchor>
      <arglist>(State *state, const void *serialization) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalStates</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace.html</anchorfile>
      <anchor>ae476aa3d9985edf80ed0178cfc7f090b</anchor>
      <arglist>(const State *state1, const State *state2) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace.html</anchorfile>
      <anchor>a030bafb01be0e4bd751d499c9f788dd6</anchor>
      <arglist>(const State *from, const State *to, double t, State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>StateSamplerPtr</type>
      <name>allocDefaultStateSampler</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace.html</anchorfile>
      <anchor>acb6fffe4b0f57c4e8e1f6efc95e408c0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>allocState</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace.html</anchorfile>
      <anchor>a065d25987b6287515f3b88391a265db7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeState</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace.html</anchorfile>
      <anchor>a7e23b962c847a2707314bb9d44cd91f7</anchor>
      <arglist>(State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getValueAddressAtIndex</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace.html</anchorfile>
      <anchor>a9b27f4b6f21ddb60520f1fe72fa50b52</anchor>
      <arglist>(State *state, unsigned int index) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyToReals</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace.html</anchorfile>
      <anchor>a0eeef771c7f122185f9fc0670a213d31</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;reals, const State *source) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromReals</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace.html</anchorfile>
      <anchor>a3480123701c89dd38f28001a92c0122d</anchor>
      <arglist>(State *destination, const std::vector&lt; double &gt; &amp;reals) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerProjections</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace.html</anchorfile>
      <anchor>ab456c667cbaa6f79cb1f6873215a8140</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printState</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace.html</anchorfile>
      <anchor>a9068795ace372e914d7efabf4656481a</anchor>
      <arglist>(const State *state, std::ostream &amp;out=std::cout) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printSettings</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace.html</anchorfile>
      <anchor>aa8a57aa1e8589afa444720ae59b86048</anchor>
      <arglist>(std::ostream &amp;out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printProjections</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace.html</anchorfile>
      <anchor>af31457e5dac3540b56b2cf3603d1ccd1</anchor>
      <arglist>(std::ostream &amp;out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sanityChecks</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace.html</anchorfile>
      <anchor>a596ddfdd73bdee22e69485899a82ea07</anchor>
      <arglist>(double zero, double eps, unsigned int flags) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sanityChecks</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace.html</anchorfile>
      <anchor>a53c0b03012edc93952ea53d8152cd4fe</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>StateSamplerPtr</type>
      <name>allocSubspaceStateSampler</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace.html</anchorfile>
      <anchor>a32333b7cd0360428dd1bab2436d5e8fe</anchor>
      <arglist>(const StateSpace *subspace) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocations</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace.html</anchorfile>
      <anchor>a132191ea6f5349c89f0f1862c9fbb203</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace.html</anchorfile>
      <anchor>a36cec500fbec7250b9aa6c91ff3f8892</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::WrapperStateSpace::StateType</name>
    <filename>classompl_1_1base_1_1WrapperStateSpace_1_1StateType.html</filename>
    <base>ompl::base::State</base>
    <member kind="function">
      <type></type>
      <name>StateType</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace_1_1StateType.html</anchorfile>
      <anchor>a73e603ce2a987c1518ebca0d115cc16c</anchor>
      <arglist>(State *state)</arglist>
    </member>
    <member kind="function">
      <type>const State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace_1_1StateType.html</anchorfile>
      <anchor>a7b2dac06f05dd15507197e89a46e7c0f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace_1_1StateType.html</anchorfile>
      <anchor>a961511edc9cdf1cc2e762a169731713f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>State *</type>
      <name>state_</name>
      <anchorfile>classompl_1_1base_1_1WrapperStateSpace_1_1StateType.html</anchorfile>
      <anchor>a9cc4bc0d6cb4f0f304e0f246b13d2954</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::BinaryHeap</name>
    <filename>classompl_1_1BinaryHeap.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="class">ompl::BinaryHeap::Element</class>
    <member kind="typedef">
      <type>void(*)(Element *, void *)</type>
      <name>EventAfterInsert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ae2e2ef4ecd57edb2cd78e3c41a5a9dfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*)(Element *, void *)</type>
      <name>EventBeforeRemove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a06e78b10045dc0bd8d8556c0dd95c961</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onAfterInsert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>adb5a517c064a3844a47cc873fddea796</anchor>
      <arglist>(EventAfterInsert event, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onBeforeRemove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a5a6368ea8193cdbf545f8a57dbaf02f5</anchor>
      <arglist>(EventBeforeRemove event, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>addf7a2e9d0cc43dd05659686f58d695f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>top</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a5d1ecb7a7d154ad44df98a5109738697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a178e694e35e7864834d765a2819256f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a56848811174698cd9a907e1128e6ce02</anchor>
      <arglist>(Element *element)</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>insert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a7712c8909b596a4d12e0080960bd0274</anchor>
      <arglist>(const _T &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a275aa4aab2088b38df1fa2fd2827fffe</anchor>
      <arglist>(const std::vector&lt; _T &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildFrom</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ac8d1b64b5b7d50cd09380bfa14bbc45d</anchor>
      <arglist>(const std::vector&lt; _T &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rebuild</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>acb0b1a3d8a1f5e7852aec45bae1960dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a8114dc53c4239fe0e199106386898ce3</anchor>
      <arglist>(Element *element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a442b00d357e3c2859c40169ed0817b92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>af624f87ff25d2e31f08afb6b4c1b4fc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getContent</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ac7bc9e22fbcbad4ea5dfd20b34ef348f</anchor>
      <arglist>(std::vector&lt; _T &gt; &amp;content) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ad782d92c652443841ebc310d778a22f0</anchor>
      <arglist>(std::vector&lt; _T &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>LessThan &amp;</type>
      <name>getComparisonOperator</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a99e2aec266c1746cf0f16aa763d00d7f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::BinaryHeap::Element</name>
    <filename>classompl_1_1BinaryHeap_1_1Element.html</filename>
    <member kind="variable">
      <type>_T</type>
      <name>data</name>
      <anchorfile>classompl_1_1BinaryHeap_1_1Element.html</anchorfile>
      <anchor>a824930edad6908382484b0aacf62abb4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::Automaton</name>
    <filename>classompl_1_1control_1_1Automaton.html</filename>
    <class kind="struct">ompl::control::Automaton::TransitionMap</class>
    <member kind="function">
      <type></type>
      <name>Automaton</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>a07c814c84b38b4ed46fab2d91b4a8b48</anchor>
      <arglist>(unsigned int numProps, unsigned int numStates=0)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>addState</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>a462aa48d3acdae939d7eef3877077a70</anchor>
      <arglist>(bool accepting=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAccepting</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>ae290fef5beab81c4aac1036458f84e81</anchor>
      <arglist>(unsigned int s, bool a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAccepting</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>a51700e864535ff24e2ca38b5f25e61af</anchor>
      <arglist>(unsigned int s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartState</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>a8cac10052e609bd2a54dc4087e509175</anchor>
      <arglist>(unsigned int s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getStartState</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>abd0f2820386689f580e960a7e74e3d06</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTransition</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>abf76004d623e528a123d7dc62ff11d6c</anchor>
      <arglist>(unsigned int src, const World &amp;w, unsigned int dest)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>ae6dc792403a31bd096846ab9636fabe7</anchor>
      <arglist>(const std::vector&lt; World &gt; &amp;trace) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>step</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>ab94b84b95d81f630f53f1d0fa6f83c5d</anchor>
      <arglist>(int state, const World &amp;w) const</arglist>
    </member>
    <member kind="function">
      <type>TransitionMap &amp;</type>
      <name>getTransitions</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>ab6c20046b4c9191cc7429c99b9b7a6e6</anchor>
      <arglist>(unsigned int src)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numStates</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>ad3c024ca5e81d599fc58b742525cf948</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numTransitions</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>a0f95fe1e8d57398e4575b787086af2cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numProps</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>a9619a784cb665e7948ab432d3efe936c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>a81ef5045e570f5a80647351f6a1014e4</anchor>
      <arglist>(std::ostream &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>distFromAccepting</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>ac3cea694cb01b9ced68ea129cc1945af</anchor>
      <arglist>(unsigned int s) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AutomatonPtr</type>
      <name>AcceptingAutomaton</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>aaf844ea902ba46a974d84b941428f246</anchor>
      <arglist>(unsigned int numProps)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AutomatonPtr</type>
      <name>CoverageAutomaton</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>aa439e97d635fcacda3079034ae9a0ca2</anchor>
      <arglist>(unsigned int numProps, const std::vector&lt; unsigned int &gt; &amp;covProps)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AutomatonPtr</type>
      <name>SequenceAutomaton</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>ae6c5b5d8aa7c829a46a96e73459bc3b1</anchor>
      <arglist>(unsigned int numProps, const std::vector&lt; unsigned int &gt; &amp;seqProps)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AutomatonPtr</type>
      <name>DisjunctionAutomaton</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>aedbb2474399445319acd41776e466976</anchor>
      <arglist>(unsigned int numProps, const std::vector&lt; unsigned int &gt; &amp;disjProps)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AutomatonPtr</type>
      <name>AvoidanceAutomaton</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>a0e52ba1e2636bf3281cb4cab9f671ec1</anchor>
      <arglist>(unsigned int numProps, const std::vector&lt; unsigned int &gt; &amp;avoidProps)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AutomatonPtr</type>
      <name>CoverageAutomaton</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>af64d36ba25147ae103f2baa1f1e25b53</anchor>
      <arglist>(unsigned int numProps)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AutomatonPtr</type>
      <name>SequenceAutomaton</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>a08b189166cc3f07060e32f1410ed7042</anchor>
      <arglist>(unsigned int numProps)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AutomatonPtr</type>
      <name>DisjunctionAutomaton</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>ac379679e779699ba04063146960c2f4a</anchor>
      <arglist>(unsigned int numProps)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::control::Automaton::TransitionMap</name>
    <filename>structompl_1_1control_1_1Automaton_1_1TransitionMap.html</filename>
    <member kind="function">
      <type>int</type>
      <name>eval</name>
      <anchorfile>structompl_1_1control_1_1Automaton_1_1TransitionMap.html</anchorfile>
      <anchor>aee7782bc90c0d9053e1af7494081c540</anchor>
      <arglist>(const World &amp;w) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::AutomatonPtr</name>
    <filename>classompl_1_1control_1_1AutomatonPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::control::CompoundControl</name>
    <filename>classompl_1_1control_1_1CompoundControl.html</filename>
    <base>ompl::control::Control</base>
    <member kind="function">
      <type>const T *</type>
      <name>as</name>
      <anchorfile>classompl_1_1control_1_1CompoundControl.html</anchorfile>
      <anchor>a4c4eb708c75618fcb1d1424b0caaabbe</anchor>
      <arglist>(unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>as</name>
      <anchorfile>classompl_1_1control_1_1CompoundControl.html</anchorfile>
      <anchor>ae2ac9926add8272ac1ceff098910cac8</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>Control *</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1control_1_1CompoundControl.html</anchorfile>
      <anchor>ad76d3078c278f76412be86a7620f33c4</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="variable">
      <type>Control **</type>
      <name>components</name>
      <anchorfile>classompl_1_1control_1_1CompoundControl.html</anchorfile>
      <anchor>a1cbfebc0fa1f536935c86376a6c0f703</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::CompoundControlSampler</name>
    <filename>classompl_1_1control_1_1CompoundControlSampler.html</filename>
    <base>ompl::control::ControlSampler</base>
    <member kind="function">
      <type></type>
      <name>CompoundControlSampler</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSampler.html</anchorfile>
      <anchor>ac54b1bec066cc5c008fa775862259b26</anchor>
      <arglist>(const ControlSpace *space)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CompoundControlSampler</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSampler.html</anchorfile>
      <anchor>ae9b0e5cd393eda207232bf6ca80ed06a</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addSampler</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSampler.html</anchorfile>
      <anchor>a52d2e68db2f9b1531de74a35ff9a7e8b</anchor>
      <arglist>(const ControlSamplerPtr &amp;sampler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sample</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSampler.html</anchorfile>
      <anchor>aea72a800d40fde1ec2fd0f7245fe0dd1</anchor>
      <arglist>(Control *control) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sample</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSampler.html</anchorfile>
      <anchor>ab4e76602a2c4176b744328ab6e33bfc1</anchor>
      <arglist>(Control *control, const base::State *state) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleNext</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSampler.html</anchorfile>
      <anchor>a44796668db2ea7ebced3c46449e19c77</anchor>
      <arglist>(Control *control, const Control *previous) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleNext</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSampler.html</anchorfile>
      <anchor>aecdada8396196485bf516ccdb27fd01e</anchor>
      <arglist>(Control *control, const Control *previous, const base::State *state) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ControlSamplerPtr &gt;</type>
      <name>samplers_</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSampler.html</anchorfile>
      <anchor>ab2ac5717ef0a8cfd0b2641496d9218e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::CompoundControlSpace</name>
    <filename>classompl_1_1control_1_1CompoundControlSpace.html</filename>
    <base>ompl::control::ControlSpace</base>
    <member kind="typedef">
      <type>ompl::control::CompoundControl</type>
      <name>ControlType</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>ae823376c93dd222d632961ca2bd14daf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompoundControlSpace</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>aecf151ee04bb4cefac7d3891a7ae1214</anchor>
      <arglist>(const base::StateSpacePtr &amp;stateSpace)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>as</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>ada0d00ffe6a26d4ef3afce2652252a67</anchor>
      <arglist>(const unsigned int index) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addSubspace</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>a97f6c0cb2ae71155e710fedf64f07c70</anchor>
      <arglist>(const ControlSpacePtr &amp;component)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getSubspaceCount</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>a002a87ce1e4b2ea01ea9d5b47750c213</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ControlSpacePtr &amp;</type>
      <name>getSubspace</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>ad28947f3701c3da06c31f388c243faa1</anchor>
      <arglist>(unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>const ControlSpacePtr &amp;</type>
      <name>getSubspace</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>aeef5f22000bdb2cc1208b3ff2fbc23ae</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>a5e721ccefd5049b94147acd4acf8e95f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Control *</type>
      <name>allocControl</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>a69891186af0b0838064bf693568e0604</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeControl</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>a76048894ec70f6a0b62de7c8b6dae12f</anchor>
      <arglist>(Control *control) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyControl</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>a2410ccc7c104e08605dda3311312ad68</anchor>
      <arglist>(Control *destination, const Control *source) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalControls</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>a15a3cb9ee25073a66f424f8d19dd9622</anchor>
      <arglist>(const Control *control1, const Control *control2) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nullControl</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>a423508ba66866d4331ececabc1801beb</anchor>
      <arglist>(Control *control) const override</arglist>
    </member>
    <member kind="function">
      <type>ControlSamplerPtr</type>
      <name>allocDefaultControlSampler</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>a2d9f4b6552f90536cc2d5417c6e72613</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getValueAddressAtIndex</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>a1292eab0403fdb4d0262267324428b3e</anchor>
      <arglist>(Control *control, unsigned int index) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printControl</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>ab81413ec2332e2a27c604be1fba38316</anchor>
      <arglist>(const Control *control, std::ostream &amp;out=std::cout) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printSettings</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>a3f41a1873dc9a1bccac523d739bc1452</anchor>
      <arglist>(std::ostream &amp;out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>a76689a2db8bb4152e63a4d2afa14f4b2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getSerializationLength</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>a2634bf6401da8297a9fb8b4c86ed32de</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>a5f4d31dec228c8e7d1714b21d6d68f0b</anchor>
      <arglist>(void *serialization, const Control *ctrl) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserialize</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>aaa50d0a87aeafc1eb9b85a6ac858008d</anchor>
      <arglist>(Control *ctrl, const void *serialization) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompound</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>a644e9cb40c45b065c02059789d71d12f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>a0289ef7951c86aa50de720253c4b72a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ControlSpacePtr &gt;</type>
      <name>components_</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>a27e33f86e7f378220485bf137f5f8f50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>componentCount_</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>ab26054f5b3b19bdbff38de768f7637e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>locked_</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>a10fa7793c1fa25f548a3e72872dfb1df</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::Control</name>
    <filename>classompl_1_1control_1_1Control.html</filename>
    <member kind="function">
      <type>const T *</type>
      <name>as</name>
      <anchorfile>classompl_1_1control_1_1Control.html</anchorfile>
      <anchor>ad1818cadd7f02aed4c4d1948ebbca581</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>as</name>
      <anchorfile>classompl_1_1control_1_1Control.html</anchorfile>
      <anchor>a3e1865673e7705959c98315866df8ced</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::ControlSampler</name>
    <filename>classompl_1_1control_1_1ControlSampler.html</filename>
    <member kind="function">
      <type></type>
      <name>ControlSampler</name>
      <anchorfile>classompl_1_1control_1_1ControlSampler.html</anchorfile>
      <anchor>abec1f454396ca8e673384c85401b2681</anchor>
      <arglist>(const ControlSpace *space)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sample</name>
      <anchorfile>classompl_1_1control_1_1ControlSampler.html</anchorfile>
      <anchor>a7a03d0a64571c397ef6fa3646c002614</anchor>
      <arglist>(Control *control)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sample</name>
      <anchorfile>classompl_1_1control_1_1ControlSampler.html</anchorfile>
      <anchor>a77d53f1753437f4e0e5b99b0e5480389</anchor>
      <arglist>(Control *control, const base::State *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleNext</name>
      <anchorfile>classompl_1_1control_1_1ControlSampler.html</anchorfile>
      <anchor>a0a57ad73f9db82b17d933cb504efdbf6</anchor>
      <arglist>(Control *control, const Control *previous)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleNext</name>
      <anchorfile>classompl_1_1control_1_1ControlSampler.html</anchorfile>
      <anchor>a5e268c8c0619786358269cb9a9e16831</anchor>
      <arglist>(Control *control, const Control *previous, const base::State *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>sampleStepCount</name>
      <anchorfile>classompl_1_1control_1_1ControlSampler.html</anchorfile>
      <anchor>a17b7122806113cad38db04340eab10ef</anchor>
      <arglist>(unsigned int minSteps, unsigned int maxSteps)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ControlSpace *</type>
      <name>space_</name>
      <anchorfile>classompl_1_1control_1_1ControlSampler.html</anchorfile>
      <anchor>a42eb7a87665ead1c77e3c986244bbcf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1control_1_1ControlSampler.html</anchorfile>
      <anchor>af00c73c0f92f0b8169945b557b1ca84a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::ControlSamplerPtr</name>
    <filename>classompl_1_1control_1_1ControlSamplerPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::control::ControlSpace</name>
    <filename>classompl_1_1control_1_1ControlSpace.html</filename>
    <member kind="function">
      <type></type>
      <name>ControlSpace</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>a551099d69baddb5c1a140b6e94a80485</anchor>
      <arglist>(base::StateSpacePtr stateSpace)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>as</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>ad493371248cdfb29afd658994ed9416f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>as</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>a3055b0f0bcab954fa3509495ca813885</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>a8d4d96f52eb5ef8af387234def055005</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>ae7138a1a3dd3b2dba3e222538707e15d</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getType</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>a640948a1a126edf2e6ecd341f1607b6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const base::StateSpacePtr &amp;</type>
      <name>getStateSpace</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>a0187ec3ccc38ab6ddc2dfc37107b7a62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>ac0db4716c6e243ee303e5273da9e6794</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Control *</type>
      <name>allocControl</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>a68756fe8e6fc9d3d2dc48540ee4afdcd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>freeControl</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>a86a442ebb728b2e7920de2875d479711</anchor>
      <arglist>(Control *control) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>copyControl</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>aed44e8a509283145434ae40fd2a3daee</anchor>
      <arglist>(Control *destination, const Control *source) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>equalControls</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>ad17fe532b56a3ffb3282cdc02b32cee8</anchor>
      <arglist>(const Control *control1, const Control *control2) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nullControl</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>ab0d214352867b65976297b2f0bc6e57f</anchor>
      <arglist>(Control *control) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ControlSamplerPtr</type>
      <name>allocDefaultControlSampler</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>a92ec45728c99bcbc2d8dce127687fa89</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ControlSamplerPtr</type>
      <name>allocControlSampler</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>a317bb364496fad19fd792253f9780938</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setControlSamplerAllocator</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>aff9f2582768673ba3c2091c960294115</anchor>
      <arglist>(const ControlSamplerAllocator &amp;csa)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearControlSamplerAllocator</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>ad47a72cbf62af06147a324c906cf394e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double *</type>
      <name>getValueAddressAtIndex</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>adbb27f9ea57bcd3b8ad91fe8ef5d2a42</anchor>
      <arglist>(Control *control, unsigned int index) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printControl</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>ac0733020cf25ff2cd6aedc979d50e187</anchor>
      <arglist>(const Control *control, std::ostream &amp;out) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printSettings</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>a5446589551d62815158e62a7cb78346b</anchor>
      <arglist>(std::ostream &amp;out) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>a1d21669ebe1a4d0d68936ab459af9a1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSerializationLength</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>af62de8cc9293911df87cf2cb2ae4bbc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>a5bbdb02a33cc6ed480262778da1a99b2</anchor>
      <arglist>(void *serialization, const Control *ctrl) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deserialize</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>adcd3724c133be477c59c5e435a437049</anchor>
      <arglist>(Control *ctrl, const void *serialization) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeSignature</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>a715b01e3b40da2aee6a9ded70f3efccf</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;signature) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isCompound</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>a47dd7e7b2523816ca9be02de84a66c5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>type_</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>a81070174fae65611ce0779673c5a60df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSpacePtr</type>
      <name>stateSpace_</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>a8998ac5d1f469f7e3113b4e69d8de1cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ControlSamplerAllocator</type>
      <name>csa_</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>aafc829af78b3a32e549bd6ed8f0bc8b0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::ControlSpacePtr</name>
    <filename>classompl_1_1control_1_1ControlSpacePtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::control::Decomposition</name>
    <filename>classompl_1_1control_1_1Decomposition.html</filename>
    <member kind="function">
      <type></type>
      <name>Decomposition</name>
      <anchorfile>classompl_1_1control_1_1Decomposition.html</anchorfile>
      <anchor>a2bedc19c6aeb219165cc79cd679f4cab</anchor>
      <arglist>(int dim, const base::RealVectorBounds &amp;b)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumRegions</name>
      <anchorfile>classompl_1_1control_1_1Decomposition.html</anchorfile>
      <anchor>a09f234a2451312ca4b5a2c3157709c5c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1control_1_1Decomposition.html</anchorfile>
      <anchor>a6a22910e4dead5a084bc8af78f195b71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const base::RealVectorBounds &amp;</type>
      <name>getBounds</name>
      <anchorfile>classompl_1_1control_1_1Decomposition.html</anchorfile>
      <anchor>a2ea56080e016fe52b59482c835207fec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getRegionVolume</name>
      <anchorfile>classompl_1_1control_1_1Decomposition.html</anchorfile>
      <anchor>ad99d77fc02e64b203df6555c3e631066</anchor>
      <arglist>(int rid)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>locateRegion</name>
      <anchorfile>classompl_1_1control_1_1Decomposition.html</anchorfile>
      <anchor>ab8bfa3e82bc107123bd7afbbec080998</anchor>
      <arglist>(const base::State *s) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>project</name>
      <anchorfile>classompl_1_1control_1_1Decomposition.html</anchorfile>
      <anchor>a6c2047c196577528e94a75628a19c7cb</anchor>
      <arglist>(const base::State *s, std::vector&lt; double &gt; &amp;coord) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getNeighbors</name>
      <anchorfile>classompl_1_1control_1_1Decomposition.html</anchorfile>
      <anchor>a968c870eabc8bd99eeec0ed0580a1d4b</anchor>
      <arglist>(int rid, std::vector&lt; int &gt; &amp;neighbors) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sampleFromRegion</name>
      <anchorfile>classompl_1_1control_1_1Decomposition.html</anchorfile>
      <anchor>af0654d79439a21fe73e6dd30075256fe</anchor>
      <arglist>(int rid, RNG &amp;rng, std::vector&lt; double &gt; &amp;coord) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sampleFullState</name>
      <anchorfile>classompl_1_1control_1_1Decomposition.html</anchorfile>
      <anchor>a2a3f516dedc7fb4a67bfff570c30e975</anchor>
      <arglist>(const base::StateSamplerPtr &amp;sampler, const std::vector&lt; double &gt; &amp;coord, base::State *s) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::DecompositionPtr</name>
    <filename>classompl_1_1control_1_1DecompositionPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::control::DirectedControlSampler</name>
    <filename>classompl_1_1control_1_1DirectedControlSampler.html</filename>
    <member kind="function">
      <type></type>
      <name>DirectedControlSampler</name>
      <anchorfile>classompl_1_1control_1_1DirectedControlSampler.html</anchorfile>
      <anchor>ac402e5eafe25b66071ed315e4c425a48</anchor>
      <arglist>(const SpaceInformation *si)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>sampleTo</name>
      <anchorfile>classompl_1_1control_1_1DirectedControlSampler.html</anchorfile>
      <anchor>ab5886063e486fe8fe933c788ddd241d2</anchor>
      <arglist>(Control *control, const base::State *source, base::State *dest)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>sampleTo</name>
      <anchorfile>classompl_1_1control_1_1DirectedControlSampler.html</anchorfile>
      <anchor>ad79aad83bc09ca34195301f3d0c155be</anchor>
      <arglist>(Control *control, const Control *previous, const base::State *source, base::State *dest)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const SpaceInformation *</type>
      <name>si_</name>
      <anchorfile>classompl_1_1control_1_1DirectedControlSampler.html</anchorfile>
      <anchor>ad22b7af4756d1c6334a025856aabaf98</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::DirectedControlSamplerPtr</name>
    <filename>classompl_1_1control_1_1DirectedControlSamplerPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::control::DiscreteControlSampler</name>
    <filename>classompl_1_1control_1_1DiscreteControlSampler.html</filename>
    <base>ompl::control::ControlSampler</base>
    <member kind="function">
      <type></type>
      <name>DiscreteControlSampler</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSampler.html</anchorfile>
      <anchor>a8319be31ab8a82fdcae0b21f24f3cf7e</anchor>
      <arglist>(const ControlSpace *space)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sample</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSampler.html</anchorfile>
      <anchor>aea2a378d8afdff1202609097048dbf7f</anchor>
      <arglist>(Control *control) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::DiscreteControlSpace</name>
    <filename>classompl_1_1control_1_1DiscreteControlSpace.html</filename>
    <base>ompl::control::ControlSpace</base>
    <class kind="class">ompl::control::DiscreteControlSpace::ControlType</class>
    <member kind="function">
      <type></type>
      <name>DiscreteControlSpace</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSpace.html</anchorfile>
      <anchor>a80da123dffe4632a3210a56be9100431</anchor>
      <arglist>(const base::StateSpacePtr &amp;stateSpace, int lowerBound, int upperBound)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSpace.html</anchorfile>
      <anchor>a4363505f8f17e168108f3d725063c442</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyControl</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSpace.html</anchorfile>
      <anchor>abfadde47c333563f120eeac4a46b1678</anchor>
      <arglist>(Control *destination, const Control *source) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalControls</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSpace.html</anchorfile>
      <anchor>a00bf14fee79a49922ccf34d01c0889d9</anchor>
      <arglist>(const Control *control1, const Control *control2) const override</arglist>
    </member>
    <member kind="function">
      <type>ControlSamplerPtr</type>
      <name>allocDefaultControlSampler</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSpace.html</anchorfile>
      <anchor>aea4e5f4805efd48be156d0ea6459e97b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Control *</type>
      <name>allocControl</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSpace.html</anchorfile>
      <anchor>a7a941f6b230f3c8f16609526f8e84f5e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeControl</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSpace.html</anchorfile>
      <anchor>a4c608ccb7bd751d755f19dc90df56fda</anchor>
      <arglist>(Control *control) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nullControl</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSpace.html</anchorfile>
      <anchor>aecf7ad5017478664f770a0c24578940c</anchor>
      <arglist>(Control *control) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printControl</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSpace.html</anchorfile>
      <anchor>a06cdaaee1e9e108cb6baeb34ababb3a5</anchor>
      <arglist>(const Control *control, std::ostream &amp;out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printSettings</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSpace.html</anchorfile>
      <anchor>a044a16472da4067912b171801e7c7d65</anchor>
      <arglist>(std::ostream &amp;out) const override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getControlCount</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSpace.html</anchorfile>
      <anchor>aaef9dfe692222a40d05e4bf37d429796</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLowerBound</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSpace.html</anchorfile>
      <anchor>ae714e50141ecd314d815a22e2c68385c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getUpperBound</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSpace.html</anchorfile>
      <anchor>a1b9870bb9377f36598220250aafdbc0d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBounds</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSpace.html</anchorfile>
      <anchor>afdc013d63070fedf861e9cfcbeb2c5a3</anchor>
      <arglist>(int lowerBound, int upperBound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSpace.html</anchorfile>
      <anchor>a719ccae495ead8bd2625173c44dbd427</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getSerializationLength</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSpace.html</anchorfile>
      <anchor>a356e71c82f84acc78411414068ecc499</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSpace.html</anchorfile>
      <anchor>a539da481eecb23a693f064d17eb2638f</anchor>
      <arglist>(void *serialization, const Control *ctrl) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserialize</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSpace.html</anchorfile>
      <anchor>a19fe1e252aaaa44cbd685d23a2360782</anchor>
      <arglist>(Control *ctrl, const void *serialization) const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lowerBound_</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSpace.html</anchorfile>
      <anchor>a1671b8ee01b03ea68ea0d055634f3c95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperBound_</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSpace.html</anchorfile>
      <anchor>a4c3f06041561d56746804424c40c2ef1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::DiscreteControlSpace::ControlType</name>
    <filename>classompl_1_1control_1_1DiscreteControlSpace_1_1ControlType.html</filename>
    <base>ompl::control::Control</base>
    <member kind="variable">
      <type>int</type>
      <name>value</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSpace_1_1ControlType.html</anchorfile>
      <anchor>a95e9a37e5ff77c44c088d368a201cc5d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::EST</name>
    <filename>classompl_1_1control_1_1EST.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::control::EST::Motion</class>
    <class kind="struct">ompl::control::EST::MotionInfo</class>
    <class kind="struct">ompl::control::EST::TreeData</class>
    <member kind="function">
      <type></type>
      <name>EST</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>a66fb5bce7530899cdbaa56e48eec73ae</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>a693e0645de3302a042107d1414bcd5c0</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>ab2df32af76908d66bb2852b85d65c9ec</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalBias</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>ae5197190ea18f94884d8d2797bda3cca</anchor>
      <arglist>(double goalBias)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoalBias</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>a50817bc74a223d819739004cd96ec08f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>aa193bf970814f18376875dfea5a26333</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>a5a1dc1f6a3c85e8f1ca6dffa508727d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>afaf51ca4c9a1a3a5c470612f87ae94e0</anchor>
      <arglist>(const base::ProjectionEvaluatorPtr &amp;projectionEvaluator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>ad1fcb4dd85835ac60aa2a5cc8e2816a5</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const base::ProjectionEvaluatorPtr &amp;</type>
      <name>getProjectionEvaluator</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>ac85c1a1e3d791cae65bb468d42867f67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>aaf3bba4aab5fb7e99e41948cdab2e959</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>abb02b6d70ed08e5315a03e467312a31d</anchor>
      <arglist>(base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Grid&lt; MotionInfo &gt;::Cell</type>
      <name>GridCell</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>a03ec24db78f4ce8beb226b6bf86c4a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>PDF&lt; GridCell * &gt;</type>
      <name>CellPDF</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>a7c9cf82e67f9eecebe34e8563c011db2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>a24e9fb79690be51f3ede63519d8b22ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addMotion</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>a52646e3c508d2f207e9ad039907e8564</anchor>
      <arglist>(Motion *motion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Motion *</type>
      <name>selectMotion</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>ae5bc86c3341e45b77f6b98401cf5ef89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ValidStateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>a997a64961c89458de561095f1fde98ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DirectedControlSamplerPtr</type>
      <name>controlSampler_</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>a6d45791538053d7d86264c0c8c9d5f03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const SpaceInformation *</type>
      <name>siC_</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>a09063efa62204e8d738de33561a03667</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TreeData</type>
      <name>tree_</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>aed881c54954130413437f9e2de2db18e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ProjectionEvaluatorPtr</type>
      <name>projectionEvaluator_</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>a8127a3b1bf811cabd8d5056684c64d17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>goalBias_</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>a1c447a3ee2a3a1b88c59fdd19ab768e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistance_</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>a51d3b55da539079f8c7fd9f538f57a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>a94897a7862ca85612f462f3be662f437</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CellPDF</type>
      <name>pdf_</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>a33a936a06183e5f7242afc9840d81cf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>lastGoalMotion_</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>a5992d1d27b66ad7349c03ff68124b7dd</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1control_1_1EST.html">cEST</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::control::EST::Motion</name>
    <filename>classompl_1_1control_1_1EST_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1control_1_1EST_1_1Motion.html</anchorfile>
      <anchor>a58cf5ef08d28a90c8ed44c33c874c2b7</anchor>
      <arglist>(const SpaceInformation *si)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state</name>
      <anchorfile>classompl_1_1control_1_1EST_1_1Motion.html</anchorfile>
      <anchor>a1f294270c62f215855ff89215b97ddb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Control *</type>
      <name>control</name>
      <anchorfile>classompl_1_1control_1_1EST_1_1Motion.html</anchorfile>
      <anchor>a40a42597063b6c235dc05e2d39ef7d7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>steps</name>
      <anchorfile>classompl_1_1control_1_1EST_1_1Motion.html</anchorfile>
      <anchor>a0678953c6c2d54ff0408ff22735f8610</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent</name>
      <anchorfile>classompl_1_1control_1_1EST_1_1Motion.html</anchorfile>
      <anchor>a6fcd46db5b0c963629f07cb86e06e80f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::control::EST::MotionInfo</name>
    <filename>structompl_1_1control_1_1EST_1_1MotionInfo.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::control::EST::TreeData</name>
    <filename>structompl_1_1control_1_1EST_1_1TreeData.html</filename>
    <member kind="variable">
      <type>Grid&lt; MotionInfo &gt;</type>
      <name>grid</name>
      <anchorfile>structompl_1_1control_1_1EST_1_1TreeData.html</anchorfile>
      <anchor>a32ee86b13edc9f432c68c32241b8b23d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>structompl_1_1control_1_1EST_1_1TreeData.html</anchorfile>
      <anchor>a7ceec53e68cfae735061fe5566f57133</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::GridDecomposition</name>
    <filename>classompl_1_1control_1_1GridDecomposition.html</filename>
    <base>ompl::control::Decomposition</base>
    <member kind="function">
      <type></type>
      <name>GridDecomposition</name>
      <anchorfile>classompl_1_1control_1_1GridDecomposition.html</anchorfile>
      <anchor>ade2b9370ba014e3bebe8c70deb1636e2</anchor>
      <arglist>(int len, int dim, const base::RealVectorBounds &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumRegions</name>
      <anchorfile>classompl_1_1control_1_1GridDecomposition.html</anchorfile>
      <anchor>aee44108548173acd970384973599097e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRegionVolume</name>
      <anchorfile>classompl_1_1control_1_1GridDecomposition.html</anchorfile>
      <anchor>a0238b59e34bb4189edcf6ee23895eaee</anchor>
      <arglist>(int) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getNeighbors</name>
      <anchorfile>classompl_1_1control_1_1GridDecomposition.html</anchorfile>
      <anchor>ad93e169e76df7f66383871371a4f9539</anchor>
      <arglist>(int rid, std::vector&lt; int &gt; &amp;neighbors) const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>locateRegion</name>
      <anchorfile>classompl_1_1control_1_1GridDecomposition.html</anchorfile>
      <anchor>a289d286d43d1c348480f736b1016b915</anchor>
      <arglist>(const base::State *s) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleFromRegion</name>
      <anchorfile>classompl_1_1control_1_1GridDecomposition.html</anchorfile>
      <anchor>a8c7ec480775b3593e2a012b445ba6463</anchor>
      <arglist>(int rid, RNG &amp;rng, std::vector&lt; double &gt; &amp;coord) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const base::RealVectorBounds &amp;</type>
      <name>getRegionBounds</name>
      <anchorfile>classompl_1_1control_1_1GridDecomposition.html</anchorfile>
      <anchor>aee69579ddd14816326a89553c51f243a</anchor>
      <arglist>(int rid) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>regionToGridCoord</name>
      <anchorfile>classompl_1_1control_1_1GridDecomposition.html</anchorfile>
      <anchor>a81de9df0e0e6b7c27183d8ad703de4b2</anchor>
      <arglist>(int rid, std::vector&lt; int &gt; &amp;coord) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>gridCoordToRegion</name>
      <anchorfile>classompl_1_1control_1_1GridDecomposition.html</anchorfile>
      <anchor>a35e3fd2df0d111fc82872df86334994c</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;coord) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>coordToRegion</name>
      <anchorfile>classompl_1_1control_1_1GridDecomposition.html</anchorfile>
      <anchor>a4d7e57f8b68fe58ebc05546da4b07cc5</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;coord) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>coordToGridCoord</name>
      <anchorfile>classompl_1_1control_1_1GridDecomposition.html</anchorfile>
      <anchor>afcaa6f1aef4adff8dc1effc538456431</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;coord, std::vector&lt; int &gt; &amp;gridCoord) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeGridNeighbors</name>
      <anchorfile>classompl_1_1control_1_1GridDecomposition.html</anchorfile>
      <anchor>a0447cc6799aae941eba4c57320a739eb</anchor>
      <arglist>(int rid, std::vector&lt; int &gt; &amp;neighbors) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeGridNeighborsSub</name>
      <anchorfile>classompl_1_1control_1_1GridDecomposition.html</anchorfile>
      <anchor>a0ef65acaf18320e080e66e9b53cc52f7</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;coord, std::vector&lt; int &gt; &amp;neighbors, int dim, std::vector&lt; int &gt; &amp;candidate) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::KPIECE1</name>
    <filename>classompl_1_1control_1_1KPIECE1.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="struct">ompl::control::KPIECE1::CellData</class>
    <class kind="struct">ompl::control::KPIECE1::CloseSample</class>
    <class kind="struct">ompl::control::KPIECE1::CloseSamples</class>
    <class kind="struct">ompl::control::KPIECE1::Motion</class>
    <class kind="struct">ompl::control::KPIECE1::OrderCellsByImportance</class>
    <class kind="struct">ompl::control::KPIECE1::TreeData</class>
    <member kind="function">
      <type></type>
      <name>KPIECE1</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a87c0b2ee46e47c9a1801145b0daebc02</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a779f15db22af5d4e6f7ef0b1309f02b6</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>aabea86312ff63642463cce13db51c49a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalBias</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a7ae0dcc65f65227a9b1f5311df603048</anchor>
      <arglist>(double goalBias)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoalBias</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a2130ef0af2e2c8e1dd10b2600c92551e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderFraction</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a4988400ad57005ea77f248966102a0bf</anchor>
      <arglist>(double bp)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBorderFraction</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a5da70640a274ef724bcc271deb09dfad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCellScoreFactor</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>ac53ac0fbc5c66acc6bfde7e9cbe79b1a</anchor>
      <arglist>(double good, double bad)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBadCellScoreFactor</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>ac2c7f4e2d8c879832fdd2a621409007f</anchor>
      <arglist>(double bad)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoodCellScoreFactor</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a06baf6993612056dc7b21e893084088d</anchor>
      <arglist>(double good)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoodCellScoreFactor</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a62bc9a6d25460ae3b6af4dd4800640c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBadCellScoreFactor</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a284037ca82a7d8babfbbccbbaabe212e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxCloseSamplesCount</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a272e5bf7d23fd6f64d75296b8d62c459</anchor>
      <arglist>(unsigned int nCloseSamples)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMaxCloseSamplesCount</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a0adc9ef9369aa8fde98334068f2efdce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>ad4335a199d26c963954d2327b3a41e55</anchor>
      <arglist>(const base::ProjectionEvaluatorPtr &amp;projectionEvaluator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a473c623e87dcc01f62a05d67e7d9d079</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const base::ProjectionEvaluatorPtr &amp;</type>
      <name>getProjectionEvaluator</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>af54ed28359f46a375862f83abb46d110</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a39bbc95c22443dbb55103acf6adca1db</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>ab9ee90c1dfb7bfa234d9417bfbd72768</anchor>
      <arglist>(base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GridB&lt; CellData *, OrderCellsByImportance &gt;</type>
      <name>Grid</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>af27ceac42005d24324d8852d65181b69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a5e431cee483956f50a3d0cf6250c9db1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeGridMotions</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>aec771aaaa50e1496e6fd9c23b83329c1</anchor>
      <arglist>(Grid &amp;grid)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeCellData</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>aeb06ee1915eb20b77051fe2c748543cb</anchor>
      <arglist>(CellData *cdata)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMotion</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>aae241d048cceab3783d403ecf5a07ff6</anchor>
      <arglist>(Motion *motion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Grid::Cell *</type>
      <name>addMotion</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a06a2eec0db4a8ba9d44e57bb9395043b</anchor>
      <arglist>(Motion *motion, double dist)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>selectMotion</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>aafdef92d11259e650f28615b921f22e3</anchor>
      <arglist>(Motion *&amp;smotion, Grid::Cell *&amp;scell)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned int</type>
      <name>findNextMotion</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>ad0174932ec4a02461cb900b8937cb5e2</anchor>
      <arglist>(const std::vector&lt; Grid::Coord &gt; &amp;coords, unsigned int index, unsigned int count)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>computeImportance</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a2ebe6aabe8320df6dd05715830b9a8f6</anchor>
      <arglist>(Grid::Cell *cell, void *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ControlSamplerPtr</type>
      <name>controlSampler_</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a604b39fdd3616f208bbee56608db9028</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TreeData</type>
      <name>tree_</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a1b01940872b5850fa2b7ba1bf0e361b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const SpaceInformation *</type>
      <name>siC_</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a36a9d68f59822ab36d22555f03c21bb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ProjectionEvaluatorPtr</type>
      <name>projectionEvaluator_</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a70c6382ee0b1a777a9e51f0a5b37873e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>goodScoreFactor_</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a658be23e1f8f18d6ca40bf8ea8379a73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>badScoreFactor_</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>aad6c54edab2467b1cf8f9d264f2a12ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>nCloseSamples_</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a12b68e7a82159ca213853292d3cff537</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>selectBorderFraction_</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a82d7b8f19142433b9f9998035ab05d99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>goalBias_</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>ab2c9045ae1dea39ec8902c8db6dc5fba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a4ebcf5ecd31311092b2e69a43698879f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>lastGoalMotion_</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>af73d426edace041a5cd0fdb7cd56d496</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1control_1_1KPIECE1.html">cKPIECE1</docanchor>
  </compound>
  <compound kind="struct">
    <name>ompl::control::KPIECE1::CellData</name>
    <filename>structompl_1_1control_1_1KPIECE1_1_1CellData.html</filename>
    <member kind="variable">
      <type>std::vector&lt; Motion * &gt;</type>
      <name>motions</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1CellData.html</anchorfile>
      <anchor>a2268bd51da33b58a6c662b0556dcca00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>coverage</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1CellData.html</anchorfile>
      <anchor>a531cdcbac68c1a3fbb7f2ac56801039e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>selections</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1CellData.html</anchorfile>
      <anchor>a01b88d8a637b048ca9d109b461269e2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>score</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1CellData.html</anchorfile>
      <anchor>aca42e758ded07ce32667187d7dd7b4d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>iteration</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1CellData.html</anchorfile>
      <anchor>ae63f5e3119484afb8596664674d51f55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>importance</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1CellData.html</anchorfile>
      <anchor>a283ef0009818505dac610b6bbc25968c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::control::KPIECE1::CloseSample</name>
    <filename>structompl_1_1control_1_1KPIECE1_1_1CloseSample.html</filename>
    <member kind="function">
      <type></type>
      <name>CloseSample</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1CloseSample.html</anchorfile>
      <anchor>afb293ee16b551768ecd97082abab5273</anchor>
      <arglist>(Grid::Cell *c, Motion *m, double d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1CloseSample.html</anchorfile>
      <anchor>ac442c83904b5d5292dbe65809e91abc2</anchor>
      <arglist>(const CloseSample &amp;other) const</arglist>
    </member>
    <member kind="variable">
      <type>Grid::Cell *</type>
      <name>cell</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1CloseSample.html</anchorfile>
      <anchor>a45ab9285bc2bb91069a3e32e0b8ba25a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>motion</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1CloseSample.html</anchorfile>
      <anchor>a294eb16d2c240b1c128ad742dfa4aef1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>distance</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1CloseSample.html</anchorfile>
      <anchor>a3a0e10fa636211192ab9bc409d603956</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::control::KPIECE1::CloseSamples</name>
    <filename>structompl_1_1control_1_1KPIECE1_1_1CloseSamples.html</filename>
    <member kind="function">
      <type></type>
      <name>CloseSamples</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1CloseSamples.html</anchorfile>
      <anchor>a00b4a458d197bcfe828f77e8fecda9f5</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>consider</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1CloseSamples.html</anchorfile>
      <anchor>a66405fda7ce9ca4c06eb1f9e12b5589b</anchor>
      <arglist>(Grid::Cell *cell, Motion *motion, double distance)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>selectMotion</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1CloseSamples.html</anchorfile>
      <anchor>a9b909ea64b900cf5ee3dea7aece7ecde</anchor>
      <arglist>(Motion *&amp;smotion, Grid::Cell *&amp;scell)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canSample</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1CloseSamples.html</anchorfile>
      <anchor>a42e49bfcccb27de69d76c85ca5406094</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>maxSize</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1CloseSamples.html</anchorfile>
      <anchor>a3114c01101069dcddc15aff3d62d344e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::set&lt; CloseSample &gt;</type>
      <name>samples</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1CloseSamples.html</anchorfile>
      <anchor>ab7c97105a696566d4ed22bf429eadffa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::control::KPIECE1::Motion</name>
    <filename>structompl_1_1control_1_1KPIECE1_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1Motion.html</anchorfile>
      <anchor>a5c1f4b334723fd0481bf1699ddae6063</anchor>
      <arglist>(const SpaceInformation *si)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1Motion.html</anchorfile>
      <anchor>a3db210dbb25ceaadb701c5438e58aba8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Control *</type>
      <name>control</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1Motion.html</anchorfile>
      <anchor>a836b3d7b3e4124c4d68217010b0532d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>steps</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1Motion.html</anchorfile>
      <anchor>ab14529232da27f7615c62729cd2cf616</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1Motion.html</anchorfile>
      <anchor>a73d2e565dc1a88298f14bf3f0ba379fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::control::KPIECE1::OrderCellsByImportance</name>
    <filename>structompl_1_1control_1_1KPIECE1_1_1OrderCellsByImportance.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::control::KPIECE1::TreeData</name>
    <filename>structompl_1_1control_1_1KPIECE1_1_1TreeData.html</filename>
    <member kind="variable">
      <type>Grid</type>
      <name>grid</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1TreeData.html</anchorfile>
      <anchor>adc7ec645bceae45e2a46b4204f41ea06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1TreeData.html</anchorfile>
      <anchor>aaa3be4422f1dd0ce9e05f29e0b1989dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>iteration</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1TreeData.html</anchorfile>
      <anchor>aa7f9ba5f20aea73fc97e568f67415292</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::LTLPlanner</name>
    <filename>classompl_1_1control_1_1LTLPlanner.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="struct">ompl::control::LTLPlanner::Motion</class>
    <class kind="struct">ompl::control::LTLPlanner::ProductGraphStateInfo</class>
    <member kind="function">
      <type></type>
      <name>LTLPlanner</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>a8dcf902a94c41cc8006578d00551b0db</anchor>
      <arglist>(const LTLSpaceInformationPtr &amp;si, ProductGraphPtr a, double exploreTime=0.5)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LTLPlanner</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>ab69a1fb51d40de5e28ce09159c68f13c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTree</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>ae64f78af27138428947b32a45598cc49</anchor>
      <arglist>(std::vector&lt; base::State * &gt; &amp;tree) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ProductGraph::State * &gt;</type>
      <name>getHighLevelPath</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>aec9a54325ee9c0b0bc0426603d33043c</anchor>
      <arglist>(const std::vector&lt; base::State * &gt; &amp;path, ProductGraph::State *start=nullptr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>ae5ab8e9e1978101b8a1ac184dddfbbfc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>a8a8d530b3b61ee923d31378bc74e2c82</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>a6de2fb7628677aa1798c799660a762eb</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>updateWeight</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>a89deb77d1b529104ab7b4ea5e44c616d</anchor>
      <arglist>(ProductGraph::State *as)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initAbstractInfo</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>a437e1411ec1e6a2943da05f9c97e19df</anchor>
      <arglist>(ProductGraph::State *as)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>buildAvail</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>aa960ed258c58c90915021a8cf50e1fbd</anchor>
      <arglist>(const std::vector&lt; ProductGraph::State * &gt; &amp;lead)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>explore</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>a74c30d1c13b68108811b457ec6fbfd87</anchor>
      <arglist>(const std::vector&lt; ProductGraph::State * &gt; &amp;lead, Motion *&amp;soln, double duration)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>abstractEdgeWeight</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>a487a7ff76d1eacd7f9865f896b74fa10</anchor>
      <arglist>(ProductGraph::State *a, ProductGraph::State *b) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>a528bcee36159dc9452d1bca7f26da26a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ControlSamplerPtr</type>
      <name>controlSampler_</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>afa238ad3eac7e6ad327432646d001996</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const LTLSpaceInformation *</type>
      <name>ltlsi_</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>ac3c97a4ca739deb93d61b624c89f5d9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ProductGraphPtr</type>
      <name>abstraction_</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>adfc0b29ea71e0017bc6ba7a9546372cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PDF&lt; ProductGraph::State * &gt;</type>
      <name>availDist_</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>af43bde20fe5755cad8366defc8fb8f28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>a3ab35591e7638e8ecbbed927a9734f16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Motion * &gt;</type>
      <name>motions_</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>ab0a4657f54ba1608937b6c75f1355c62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ProductGraph::State *</type>
      <name>prodStart_</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>a41dc17a229cb9b2bfa9258b179694990</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>exploreTime_</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>a265376d13acd1ce6e07a8a32b5e993b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; ProductGraph::State *, ProductGraphStateInfo &gt;</type>
      <name>abstractInfo_</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>a27444308c73b93420f42d19f03a3f760</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>ae5ab8e9e1978101b8a1ac184dddfbbfc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>a8a8d530b3b61ee923d31378bc74e2c82</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>a6de2fb7628677aa1798c799660a762eb</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <docanchor file="classompl_1_1control_1_1LTLPlanner.html">cLTLPlanner</docanchor>
  </compound>
  <compound kind="struct">
    <name>ompl::control::LTLPlanner::Motion</name>
    <filename>structompl_1_1control_1_1LTLPlanner_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>structompl_1_1control_1_1LTLPlanner_1_1Motion.html</anchorfile>
      <anchor>ac489e087c643968ad059998b96ccdaf1</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>structompl_1_1control_1_1LTLPlanner_1_1Motion.html</anchorfile>
      <anchor>a1ad7cddd0a97b46f8526e6a7d36202e8</anchor>
      <arglist>(const SpaceInformation *si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Motion</name>
      <anchorfile>structompl_1_1control_1_1LTLPlanner_1_1Motion.html</anchorfile>
      <anchor>a7f21a868dfc310313764096e5b024daa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state</name>
      <anchorfile>structompl_1_1control_1_1LTLPlanner_1_1Motion.html</anchorfile>
      <anchor>a331874d57f6d1d0e1c0c584de639e96f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Control *</type>
      <name>control</name>
      <anchorfile>structompl_1_1control_1_1LTLPlanner_1_1Motion.html</anchorfile>
      <anchor>a432477f4e1f02f21955e67504de7b43a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent</name>
      <anchorfile>structompl_1_1control_1_1LTLPlanner_1_1Motion.html</anchorfile>
      <anchor>a96aca4e90ed379782688874b2e7e5c67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>steps</name>
      <anchorfile>structompl_1_1control_1_1LTLPlanner_1_1Motion.html</anchorfile>
      <anchor>a98bcc1eaf3ba112a2d6202f51174f109</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ProductGraph::State *</type>
      <name>abstractState</name>
      <anchorfile>structompl_1_1control_1_1LTLPlanner_1_1Motion.html</anchorfile>
      <anchor>a97d2a306f90f137e417c2d74131bd5ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::control::LTLPlanner::ProductGraphStateInfo</name>
    <filename>structompl_1_1control_1_1LTLPlanner_1_1ProductGraphStateInfo.html</filename>
    <member kind="function">
      <type></type>
      <name>ProductGraphStateInfo</name>
      <anchorfile>structompl_1_1control_1_1LTLPlanner_1_1ProductGraphStateInfo.html</anchorfile>
      <anchor>a2acd739af2c56a969fa7c515eda950e8</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMotion</name>
      <anchorfile>structompl_1_1control_1_1LTLPlanner_1_1ProductGraphStateInfo.html</anchorfile>
      <anchor>a6516a1ccb5154de3678987c7dddaf294</anchor>
      <arglist>(Motion *m)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::LTLProblemDefinition</name>
    <filename>classompl_1_1control_1_1LTLProblemDefinition.html</filename>
    <base>ompl::base::ProblemDefinition</base>
  </compound>
  <compound kind="class">
    <name>ompl::control::LTLProblemDefinitionPtr</name>
    <filename>classompl_1_1control_1_1LTLProblemDefinitionPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::control::LTLSpaceInformation</name>
    <filename>classompl_1_1control_1_1LTLSpaceInformation.html</filename>
    <base>ompl::control::SpaceInformation</base>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1control_1_1LTLSpaceInformation.html</anchorfile>
      <anchor>a98c04e05e186eef8d9cacb5b9652a67d</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::LTLSpaceInformationPtr</name>
    <filename>classompl_1_1control_1_1LTLSpaceInformationPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::control::MorseControlSpace</name>
    <filename>classompl_1_1control_1_1MorseControlSpace.html</filename>
    <base>ompl::control::RealVectorControlSpace</base>
    <member kind="function">
      <type></type>
      <name>MorseControlSpace</name>
      <anchorfile>classompl_1_1control_1_1MorseControlSpace.html</anchorfile>
      <anchor>a0e0df8f6a72790c1bd072d65566814a6</anchor>
      <arglist>(const base::StateSpacePtr &amp;stateSpace)</arglist>
    </member>
    <member kind="function">
      <type>const base::MorseEnvironmentPtr &amp;</type>
      <name>getEnvironment</name>
      <anchorfile>classompl_1_1control_1_1MorseControlSpace.html</anchorfile>
      <anchor>ac84f37279d817a2b200c0d6a7ef9e4e5</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::MorseSimpleSetup</name>
    <filename>classompl_1_1control_1_1MorseSimpleSetup.html</filename>
    <base>ompl::control::SimpleSetup</base>
    <member kind="function">
      <type></type>
      <name>MorseSimpleSetup</name>
      <anchorfile>classompl_1_1control_1_1MorseSimpleSetup.html</anchorfile>
      <anchor>a9c48dbb8117025295939232657484647</anchor>
      <arglist>(const base::MorseEnvironmentPtr &amp;env)</arglist>
    </member>
    <member kind="function">
      <type>const base::MorseEnvironmentPtr &amp;</type>
      <name>getEnvironment</name>
      <anchorfile>classompl_1_1control_1_1MorseSimpleSetup.html</anchorfile>
      <anchor>a6183029a926922c5b2aa49b9ec738278</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>base::ScopedState&lt; base::MorseStateSpace &gt;</type>
      <name>getCurrentState</name>
      <anchorfile>classompl_1_1control_1_1MorseSimpleSetup.html</anchorfile>
      <anchor>a2555d2d261354977677028549baeb4e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentState</name>
      <anchorfile>classompl_1_1control_1_1MorseSimpleSetup.html</anchorfile>
      <anchor>a4715fbd9a5ad223fdfffba4cc012ac85</anchor>
      <arglist>(const base::ScopedState&lt;&gt; &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentState</name>
      <anchorfile>classompl_1_1control_1_1MorseSimpleSetup.html</anchorfile>
      <anchor>a4f093385d53a447d7c9c209d38df2302</anchor>
      <arglist>(const base::State *state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1control_1_1MorseSimpleSetup.html</anchorfile>
      <anchor>a9bf9007e10dbd37d94bf45b85f6a6708</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1control_1_1MorseSimpleSetup.html</anchorfile>
      <anchor>a14c2c625e0d9e1bfe4184cfcc7283036</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>playPath</name>
      <anchorfile>classompl_1_1control_1_1MorseSimpleSetup.html</anchorfile>
      <anchor>ae5fc295eaee98f677f83c69abd53acd5</anchor>
      <arglist>(const base::PathPtr &amp;path) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>playSolutionPath</name>
      <anchorfile>classompl_1_1control_1_1MorseSimpleSetup.html</anchorfile>
      <anchor>adfb5bdf39fa19a9bc247630fc5bdb69e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>base::PathPtr</type>
      <name>simulateControl</name>
      <anchorfile>classompl_1_1control_1_1MorseSimpleSetup.html</anchorfile>
      <anchor>aeed91c2b6b639529df6481c64ddf3769</anchor>
      <arglist>(const double *control, unsigned int steps) const</arglist>
    </member>
    <member kind="function">
      <type>base::PathPtr</type>
      <name>simulateControl</name>
      <anchorfile>classompl_1_1control_1_1MorseSimpleSetup.html</anchorfile>
      <anchor>a44614c08a6294546363f4b8c95739e64</anchor>
      <arglist>(const Control *control, unsigned int steps) const</arglist>
    </member>
    <member kind="function">
      <type>base::PathPtr</type>
      <name>simulate</name>
      <anchorfile>classompl_1_1control_1_1MorseSimpleSetup.html</anchorfile>
      <anchor>acc9203d7b753fe372f341b3411b7c826</anchor>
      <arglist>(unsigned int steps) const</arglist>
    </member>
    <member kind="variable">
      <type>const base::MorseEnvironmentPtr</type>
      <name>env_</name>
      <anchorfile>classompl_1_1control_1_1MorseSimpleSetup.html</anchorfile>
      <anchor>a9646737c5501b3ed32e449c7d2597e67</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::MorseStatePropagator</name>
    <filename>classompl_1_1control_1_1MorseStatePropagator.html</filename>
    <base>ompl::control::StatePropagator</base>
    <member kind="function">
      <type></type>
      <name>MorseStatePropagator</name>
      <anchorfile>classompl_1_1control_1_1MorseStatePropagator.html</anchorfile>
      <anchor>a118862537ad6d427d19cef3a7d155086</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>const base::MorseEnvironmentPtr &amp;</type>
      <name>getEnvironment</name>
      <anchorfile>classompl_1_1control_1_1MorseStatePropagator.html</anchorfile>
      <anchor>a10080637eecaf9bfe0f0f7c57bcdf7d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canPropagateBackward</name>
      <anchorfile>classompl_1_1control_1_1MorseStatePropagator.html</anchorfile>
      <anchor>a771eabbe87da511beeaf1ec9711e5449</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>propagate</name>
      <anchorfile>classompl_1_1control_1_1MorseStatePropagator.html</anchorfile>
      <anchor>abaabc2221847eee8ddfbb3a45d5a9a28</anchor>
      <arglist>(const base::State *state, const Control *control, double duration, base::State *result) const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::MorseEnvironmentPtr</type>
      <name>env_</name>
      <anchorfile>classompl_1_1control_1_1MorseStatePropagator.html</anchorfile>
      <anchor>a6c4e3ffb10683681b6f7a162f9355ecb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::ODEAdaptiveSolver</name>
    <filename>classompl_1_1control_1_1ODEAdaptiveSolver.html</filename>
    <templarg></templarg>
    <base>ompl::control::ODESolver</base>
    <member kind="function">
      <type></type>
      <name>ODEAdaptiveSolver</name>
      <anchorfile>classompl_1_1control_1_1ODEAdaptiveSolver.html</anchorfile>
      <anchor>af21f859bf4668dfaf236512f28dc7a14</anchor>
      <arglist>(const SpaceInformationPtr &amp;si, const ODESolver::ODE &amp;ode, double intStep=1e-2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaximumError</name>
      <anchorfile>classompl_1_1control_1_1ODEAdaptiveSolver.html</anchorfile>
      <anchor>ae63b6b021ca3f04b55bba3809c4a882d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaximumError</name>
      <anchorfile>classompl_1_1control_1_1ODEAdaptiveSolver.html</anchorfile>
      <anchor>ad9337a13cadd0ec81c8eac2355646d19</anchor>
      <arglist>(double error)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaximumEpsilonError</name>
      <anchorfile>classompl_1_1control_1_1ODEAdaptiveSolver.html</anchorfile>
      <anchor>a4f57ec10d804c8e78c8da2084b5871dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaximumEpsilonError</name>
      <anchorfile>classompl_1_1control_1_1ODEAdaptiveSolver.html</anchorfile>
      <anchor>a94aadad9b8e05d13bbbf291181d93747</anchor>
      <arglist>(double error)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>solve</name>
      <anchorfile>classompl_1_1control_1_1ODEAdaptiveSolver.html</anchorfile>
      <anchor>a34ed31a47125d6df03fe54b964b67869</anchor>
      <arglist>(StateType &amp;state, const Control *control, double duration) const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxError_</name>
      <anchorfile>classompl_1_1control_1_1ODEAdaptiveSolver.html</anchorfile>
      <anchor>a20ebb4b51aa812b15c4bf4fbf7ea94aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxEpsilonError_</name>
      <anchorfile>classompl_1_1control_1_1ODEAdaptiveSolver.html</anchorfile>
      <anchor>a6ee8ed7e3f2575d4625f1dec33694cf2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::ODEBasicSolver</name>
    <filename>classompl_1_1control_1_1ODEBasicSolver.html</filename>
    <templarg></templarg>
    <base>ompl::control::ODESolver</base>
    <member kind="function">
      <type></type>
      <name>ODEBasicSolver</name>
      <anchorfile>classompl_1_1control_1_1ODEBasicSolver.html</anchorfile>
      <anchor>a214aea0912538a3fb617e7fbd0b19e85</anchor>
      <arglist>(const SpaceInformationPtr &amp;si, const ODESolver::ODE &amp;ode, double intStep=1e-2)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>solve</name>
      <anchorfile>classompl_1_1control_1_1ODEBasicSolver.html</anchorfile>
      <anchor>acce50d9f3195d073cc62736e19618c15</anchor>
      <arglist>(StateType &amp;state, const Control *control, double duration) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::ODEErrorSolver</name>
    <filename>classompl_1_1control_1_1ODEErrorSolver.html</filename>
    <templarg></templarg>
    <base>ompl::control::ODESolver</base>
    <member kind="function">
      <type></type>
      <name>ODEErrorSolver</name>
      <anchorfile>classompl_1_1control_1_1ODEErrorSolver.html</anchorfile>
      <anchor>a04a2db0a9684971cb3ce15d48cb97a27</anchor>
      <arglist>(const SpaceInformationPtr &amp;si, const ODESolver::ODE &amp;ode, double intStep=1e-2)</arglist>
    </member>
    <member kind="function">
      <type>ODESolver::StateType</type>
      <name>getError</name>
      <anchorfile>classompl_1_1control_1_1ODEErrorSolver.html</anchorfile>
      <anchor>a3d0fbb2f47ce9c61f92a373d483cd5d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>solve</name>
      <anchorfile>classompl_1_1control_1_1ODEErrorSolver.html</anchorfile>
      <anchor>ad863c77d6df6d03e889d09c8b9ffa689</anchor>
      <arglist>(StateType &amp;state, const Control *control, double duration) const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ODESolver::StateType</type>
      <name>error_</name>
      <anchorfile>classompl_1_1control_1_1ODEErrorSolver.html</anchorfile>
      <anchor>a96513ba9e6e149937fb778cb38876c9f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::ODESolver</name>
    <filename>classompl_1_1control_1_1ODESolver.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>StateType</name>
      <anchorfile>classompl_1_1control_1_1ODESolver.html</anchorfile>
      <anchor>a5503d6e71f840329e7ffc905d1b1436b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(const StateType &amp;, const Control *, StateType &amp;)&gt;</type>
      <name>ODE</name>
      <anchorfile>classompl_1_1control_1_1ODESolver.html</anchorfile>
      <anchor>a2bcc4ba6673a87ddc3d5d8398a180750</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(const base::State *, const Control *, double, base::State *)&gt;</type>
      <name>PostPropagationEvent</name>
      <anchorfile>classompl_1_1control_1_1ODESolver.html</anchorfile>
      <anchor>ad597f6514240006b25ba5a4c92ffcfc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ODESolver</name>
      <anchorfile>classompl_1_1control_1_1ODESolver.html</anchorfile>
      <anchor>afcc0cdea0a3ff1c1bf1f637ec4182b7c</anchor>
      <arglist>(SpaceInformationPtr si, ODE ode, double intStep)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ODESolver</name>
      <anchorfile>classompl_1_1control_1_1ODESolver.html</anchorfile>
      <anchor>a2c25c5d8023f9934e909523fcd8801e8</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setODE</name>
      <anchorfile>classompl_1_1control_1_1ODESolver.html</anchorfile>
      <anchor>a52b3602810f416987ac93c0cc058f613</anchor>
      <arglist>(const ODE &amp;ode)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getIntegrationStepSize</name>
      <anchorfile>classompl_1_1control_1_1ODESolver.html</anchorfile>
      <anchor>a593a0d576b8e865d140d755f86ba4ac7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIntegrationStepSize</name>
      <anchorfile>classompl_1_1control_1_1ODESolver.html</anchorfile>
      <anchor>a6cb4e5fb8b5dc009726e16dcaf4e43a1</anchor>
      <arglist>(double intStep)</arglist>
    </member>
    <member kind="function">
      <type>const SpaceInformationPtr &amp;</type>
      <name>getSpaceInformation</name>
      <anchorfile>classompl_1_1control_1_1ODESolver.html</anchorfile>
      <anchor>a3a1e719deac9b8e33a378a978d2ef886</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StatePropagatorPtr</type>
      <name>getStatePropagator</name>
      <anchorfile>classompl_1_1control_1_1ODESolver.html</anchorfile>
      <anchor>a78bf19ebd7fe10d724db7d22d51e5ec5</anchor>
      <arglist>(ODESolverPtr solver, const PostPropagationEvent &amp;postEvent=nullptr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>solve</name>
      <anchorfile>classompl_1_1control_1_1ODESolver.html</anchorfile>
      <anchor>a2934e19d2cd8c9a69e739f1dc30dc4ea</anchor>
      <arglist>(StateType &amp;state, const Control *control, double duration) const =0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const SpaceInformationPtr</type>
      <name>si_</name>
      <anchorfile>classompl_1_1control_1_1ODESolver.html</anchorfile>
      <anchor>a3f386d0befe4848b47c15f229acbeeb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ODE</type>
      <name>ode_</name>
      <anchorfile>classompl_1_1control_1_1ODESolver.html</anchorfile>
      <anchor>a20164181bfd568ee1cd4ab83be32a734</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>intStep_</name>
      <anchorfile>classompl_1_1control_1_1ODESolver.html</anchorfile>
      <anchor>a089438a31ab20c9aef54103f3b16642d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::ODESolverPtr</name>
    <filename>classompl_1_1control_1_1ODESolverPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::control::OpenDEControlSpace</name>
    <filename>classompl_1_1control_1_1OpenDEControlSpace.html</filename>
    <base>ompl::control::RealVectorControlSpace</base>
    <member kind="function">
      <type></type>
      <name>OpenDEControlSpace</name>
      <anchorfile>classompl_1_1control_1_1OpenDEControlSpace.html</anchorfile>
      <anchor>af2426f2714e63cf72f55629c0eda8c93</anchor>
      <arglist>(const base::StateSpacePtr &amp;stateSpace)</arglist>
    </member>
    <member kind="function">
      <type>const OpenDEEnvironmentPtr &amp;</type>
      <name>getEnvironment</name>
      <anchorfile>classompl_1_1control_1_1OpenDEControlSpace.html</anchorfile>
      <anchor>a3309acd9b0bedd14895169e3f6e2c0ec</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::OpenDEEnvironment</name>
    <filename>classompl_1_1control_1_1OpenDEEnvironment.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>getControlDimension</name>
      <anchorfile>classompl_1_1control_1_1OpenDEEnvironment.html</anchorfile>
      <anchor>a0994d6fa4d70b28cbd3eae8cb2577948</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getControlBounds</name>
      <anchorfile>classompl_1_1control_1_1OpenDEEnvironment.html</anchorfile>
      <anchor>a208a0759c53940f5e288871d48769927</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;lower, std::vector&lt; double &gt; &amp;upper) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>applyControl</name>
      <anchorfile>classompl_1_1control_1_1OpenDEEnvironment.html</anchorfile>
      <anchor>a30641ec217fd2081602f6047dfea4015</anchor>
      <arglist>(const double *control) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isValidCollision</name>
      <anchorfile>classompl_1_1control_1_1OpenDEEnvironment.html</anchorfile>
      <anchor>a8ddf56c026482fe2b48534bae530814c</anchor>
      <arglist>(dGeomID geom1, dGeomID geom2, const dContact &amp;contact) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getMaxContacts</name>
      <anchorfile>classompl_1_1control_1_1OpenDEEnvironment.html</anchorfile>
      <anchor>ace004f39217319dbd32520448006d817</anchor>
      <arglist>(dGeomID geom1, dGeomID geom2) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setupContact</name>
      <anchorfile>classompl_1_1control_1_1OpenDEEnvironment.html</anchorfile>
      <anchor>ab58cbd1dee9200d3ecb8c450fce4cb0d</anchor>
      <arglist>(dGeomID geom1, dGeomID geom2, dContact &amp;contact) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getGeomName</name>
      <anchorfile>classompl_1_1control_1_1OpenDEEnvironment.html</anchorfile>
      <anchor>af7f07d4aa701ae8e8530cd0d037984af</anchor>
      <arglist>(dGeomID geom) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGeomName</name>
      <anchorfile>classompl_1_1control_1_1OpenDEEnvironment.html</anchorfile>
      <anchor>a44fd1edd7616a86112126e3069b06092</anchor>
      <arglist>(dGeomID geom, const std::string &amp;name)</arglist>
    </member>
    <member kind="variable">
      <type>dWorldID</type>
      <name>world_</name>
      <anchorfile>classompl_1_1control_1_1OpenDEEnvironment.html</anchorfile>
      <anchor>a7f8480f62626520d959418c16d2c4e05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; dSpaceID &gt;</type>
      <name>collisionSpaces_</name>
      <anchorfile>classompl_1_1control_1_1OpenDEEnvironment.html</anchorfile>
      <anchor>ab62cd0d0653e681f7c3a6a0a4edebaf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; dBodyID &gt;</type>
      <name>stateBodies_</name>
      <anchorfile>classompl_1_1control_1_1OpenDEEnvironment.html</anchorfile>
      <anchor>aab0205d1102ef92272c1234ad36bdff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; dGeomID, std::string &gt;</type>
      <name>geomNames_</name>
      <anchorfile>classompl_1_1control_1_1OpenDEEnvironment.html</anchorfile>
      <anchor>aa1e8a98094a94d5da6928625b9d07e6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>verboseContacts_</name>
      <anchorfile>classompl_1_1control_1_1OpenDEEnvironment.html</anchorfile>
      <anchor>a8e3f1e00a184ea7d62e6a0545874e491</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>dJointGroupID</type>
      <name>contactGroup_</name>
      <anchorfile>classompl_1_1control_1_1OpenDEEnvironment.html</anchorfile>
      <anchor>a7c52b4d76f2055906a2af520329304c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>maxContacts_</name>
      <anchorfile>classompl_1_1control_1_1OpenDEEnvironment.html</anchorfile>
      <anchor>a607c3e7736e0f92beed55dbdf42720ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>stepSize_</name>
      <anchorfile>classompl_1_1control_1_1OpenDEEnvironment.html</anchorfile>
      <anchor>afec4696c126e412a8111a3186cb70e55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>maxControlSteps_</name>
      <anchorfile>classompl_1_1control_1_1OpenDEEnvironment.html</anchorfile>
      <anchor>a54e0dac50dfd2a548fe19e39092a158b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>minControlSteps_</name>
      <anchorfile>classompl_1_1control_1_1OpenDEEnvironment.html</anchorfile>
      <anchor>a7cae8111f08b5f233d09a692d333d98c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::mutex</type>
      <name>mutex_</name>
      <anchorfile>classompl_1_1control_1_1OpenDEEnvironment.html</anchorfile>
      <anchor>a761edac8350458593e80d5e439144ba2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::OpenDEEnvironmentPtr</name>
    <filename>classompl_1_1control_1_1OpenDEEnvironmentPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::control::OpenDESimpleSetup</name>
    <filename>classompl_1_1control_1_1OpenDESimpleSetup.html</filename>
    <base>ompl::control::SimpleSetup</base>
    <member kind="function">
      <type></type>
      <name>OpenDESimpleSetup</name>
      <anchorfile>classompl_1_1control_1_1OpenDESimpleSetup.html</anchorfile>
      <anchor>ae22f1e95ecc6a4d47cf4ed880d33485a</anchor>
      <arglist>(const ControlSpacePtr &amp;space)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OpenDESimpleSetup</name>
      <anchorfile>classompl_1_1control_1_1OpenDESimpleSetup.html</anchorfile>
      <anchor>a241a69b4bd138fa99971961267b0f30c</anchor>
      <arglist>(const base::StateSpacePtr &amp;space)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OpenDESimpleSetup</name>
      <anchorfile>classompl_1_1control_1_1OpenDESimpleSetup.html</anchorfile>
      <anchor>a6420c4b8ad830da61cef5aace71d83ee</anchor>
      <arglist>(const OpenDEEnvironmentPtr &amp;env)</arglist>
    </member>
    <member kind="function">
      <type>const OpenDEEnvironmentPtr &amp;</type>
      <name>getEnvironment</name>
      <anchorfile>classompl_1_1control_1_1OpenDESimpleSetup.html</anchorfile>
      <anchor>a70cbab0c96af50ddf2e18e1c297bc09a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>base::ScopedState&lt; OpenDEStateSpace &gt;</type>
      <name>getCurrentState</name>
      <anchorfile>classompl_1_1control_1_1OpenDESimpleSetup.html</anchorfile>
      <anchor>ab7711060905d00cbbfe92a874834c8f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentState</name>
      <anchorfile>classompl_1_1control_1_1OpenDESimpleSetup.html</anchorfile>
      <anchor>af14bf25c31f88efd2e0195ddfe42517d</anchor>
      <arglist>(const base::ScopedState&lt;&gt; &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentState</name>
      <anchorfile>classompl_1_1control_1_1OpenDESimpleSetup.html</anchorfile>
      <anchor>abe54242c95e96c0068e4d769ecf82d62</anchor>
      <arglist>(const base::State *state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVolumeBounds</name>
      <anchorfile>classompl_1_1control_1_1OpenDESimpleSetup.html</anchorfile>
      <anchor>a57920dec7d78f9b00f7503a7c3ad0f16</anchor>
      <arglist>(const base::RealVectorBounds &amp;bounds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinearVelocityBounds</name>
      <anchorfile>classompl_1_1control_1_1OpenDESimpleSetup.html</anchorfile>
      <anchor>ade10a182ad22d2f83aa6a6f3cb18e58d</anchor>
      <arglist>(const base::RealVectorBounds &amp;bounds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngularVelocityBounds</name>
      <anchorfile>classompl_1_1control_1_1OpenDESimpleSetup.html</anchorfile>
      <anchor>a37fd0026909480866b82f5a233653139</anchor>
      <arglist>(const base::RealVectorBounds &amp;bounds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>playPath</name>
      <anchorfile>classompl_1_1control_1_1OpenDESimpleSetup.html</anchorfile>
      <anchor>a3c49e80d040031fc317461389436f04f</anchor>
      <arglist>(const base::PathPtr &amp;path, double timeFactor=1.0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>playSolutionPath</name>
      <anchorfile>classompl_1_1control_1_1OpenDESimpleSetup.html</anchorfile>
      <anchor>ad10796b14edecade8252aa1fe7eac47f</anchor>
      <arglist>(double timeFactor=1.0) const</arglist>
    </member>
    <member kind="function">
      <type>base::PathPtr</type>
      <name>simulateControl</name>
      <anchorfile>classompl_1_1control_1_1OpenDESimpleSetup.html</anchorfile>
      <anchor>a4d0b12298f2fea19735ca0e9483b21f5</anchor>
      <arglist>(const double *control, unsigned int steps) const</arglist>
    </member>
    <member kind="function">
      <type>base::PathPtr</type>
      <name>simulateControl</name>
      <anchorfile>classompl_1_1control_1_1OpenDESimpleSetup.html</anchorfile>
      <anchor>a7922365f3f3d9f9909bd4433e08a34f4</anchor>
      <arglist>(const Control *control, unsigned int steps) const</arglist>
    </member>
    <member kind="function">
      <type>base::PathPtr</type>
      <name>simulate</name>
      <anchorfile>classompl_1_1control_1_1OpenDESimpleSetup.html</anchorfile>
      <anchor>a746ff733681a1470c5f984ffc5b23883</anchor>
      <arglist>(unsigned int steps) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1control_1_1OpenDESimpleSetup.html</anchorfile>
      <anchor>a9b8aec37f259bd8536567da7b03bdd5f</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::OpenDEStatePropagator</name>
    <filename>classompl_1_1control_1_1OpenDEStatePropagator.html</filename>
    <base>ompl::control::StatePropagator</base>
    <member kind="function">
      <type></type>
      <name>OpenDEStatePropagator</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStatePropagator.html</anchorfile>
      <anchor>a469efadcffd88e923efac6864335e0d3</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>const OpenDEEnvironmentPtr &amp;</type>
      <name>getEnvironment</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStatePropagator.html</anchorfile>
      <anchor>a9bec0b9ef3b112f87d7c1d6966b28eb8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canPropagateBackward</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStatePropagator.html</anchorfile>
      <anchor>a2a5355c7602f9b2211b323e44001051c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>propagate</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStatePropagator.html</anchorfile>
      <anchor>a45a5561fca024c24a00d6494bffe2fb2</anchor>
      <arglist>(const base::State *state, const Control *control, double duration, base::State *result) const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OpenDEEnvironmentPtr</type>
      <name>env_</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStatePropagator.html</anchorfile>
      <anchor>a3e137900dec56319ce7bc48076724830</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::OpenDEStateSpace</name>
    <filename>classompl_1_1control_1_1OpenDEStateSpace.html</filename>
    <base>ompl::base::CompoundStateSpace</base>
    <class kind="class">ompl::control::OpenDEStateSpace::StateType</class>
    <member kind="enumvalue">
      <name>STATE_COLLISION_KNOWN_BIT</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>a2952bf8638854bd1e33e597713f13b29aaaaf494d5dcb4ad2a2dfa118bb928cc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_COLLISION_VALUE_BIT</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>a2952bf8638854bd1e33e597713f13b29a4aad4bf4c984a0a54251c6326ebc342b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_VALIDITY_KNOWN_BIT</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>a2952bf8638854bd1e33e597713f13b29a5218d6e48f2d205c2adeb1c62a836f0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_VALIDITY_VALUE_BIT</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>a2952bf8638854bd1e33e597713f13b29a217e97a10f0ed7704d9a9123c39d9047</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_COLLISION_KNOWN_BIT</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>a2952bf8638854bd1e33e597713f13b29aaaaf494d5dcb4ad2a2dfa118bb928cc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_COLLISION_VALUE_BIT</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>a2952bf8638854bd1e33e597713f13b29a4aad4bf4c984a0a54251c6326ebc342b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_VALIDITY_KNOWN_BIT</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>a2952bf8638854bd1e33e597713f13b29a5218d6e48f2d205c2adeb1c62a836f0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_VALIDITY_VALUE_BIT</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>a2952bf8638854bd1e33e597713f13b29a217e97a10f0ed7704d9a9123c39d9047</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OpenDEStateSpace</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>a9d01b1c78ca9be5210dbb317d6d74c0c</anchor>
      <arglist>(OpenDEEnvironmentPtr env, double positionWeight=1.0, double linVelWeight=0.5, double angVelWeight=0.5, double orientationWeight=1.0)</arglist>
    </member>
    <member kind="function">
      <type>const OpenDEEnvironmentPtr &amp;</type>
      <name>getEnvironment</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>a3c9ef3906fc16f9c0658333ae0c25082</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNrBodies</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>ac50682db77f94f8394a186c7c9f85a3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultBounds</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>a508a49bf7883600347f7cdcae4665897</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVolumeBounds</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>a7f7d274f8765e67c330abd2006d5f659</anchor>
      <arglist>(const base::RealVectorBounds &amp;bounds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinearVelocityBounds</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>af921c16e942950ea704d4bfecf7442c3</anchor>
      <arglist>(const base::RealVectorBounds &amp;bounds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngularVelocityBounds</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>ab82d2f60bcad6893be7669efe16e4fc7</anchor>
      <arglist>(const base::RealVectorBounds &amp;bounds)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>readState</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>a8fb391d9dc7c9f4525139d9d03ebc6c0</anchor>
      <arglist>(base::State *state) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeState</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>a2e0c8de1740b0039f34012d480edcf4f</anchor>
      <arglist>(const base::State *state) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesBoundsExceptRotation</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>a83afc53dec6cf79c750793a3b426d88d</anchor>
      <arglist>(const StateType *state) const</arglist>
    </member>
    <member kind="function">
      <type>base::State *</type>
      <name>allocState</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>a763705fd9665f3598e153c22bf2cfc63</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeState</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>aac77ba5907665c98fd5f22a9de57d2aa</anchor>
      <arglist>(base::State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyState</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>ab60b6cb8bd98f36734b0b458877f3087</anchor>
      <arglist>(base::State *destination, const base::State *source) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>a15c50bb1eb9604efb9e1c32f69124c9a</anchor>
      <arglist>(const base::State *from, const base::State *to, double t, base::State *state) const override</arglist>
    </member>
    <member kind="function">
      <type>base::StateSamplerPtr</type>
      <name>allocDefaultStateSampler</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>a79a331eaa4f3876e9cee5ae099474c7e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>base::StateSamplerPtr</type>
      <name>allocStateSampler</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>aece9470c7ae544b1aff03b8dd3b8ce5e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluateCollision</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>af5ccdc0a6ff68a6e9da8a012b960c0bc</anchor>
      <arglist>(const base::State *state) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OpenDEEnvironmentPtr</type>
      <name>env_</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>ae83d9fb6b1e5cda6f0f3650014838085</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::OpenDEStateSpace::StateType</name>
    <filename>classompl_1_1control_1_1OpenDEStateSpace_1_1StateType.html</filename>
    <base>ompl::base::CompoundState</base>
    <member kind="function">
      <type>const double *</type>
      <name>getBodyPosition</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace_1_1StateType.html</anchorfile>
      <anchor>addb8836fc8490f8784393d98af543a06</anchor>
      <arglist>(unsigned int body) const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getBodyPosition</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace_1_1StateType.html</anchorfile>
      <anchor>acd8ea0866b9964615b7f359cea72dc42</anchor>
      <arglist>(unsigned int body)</arglist>
    </member>
    <member kind="function">
      <type>const base::SO3StateSpace::StateType &amp;</type>
      <name>getBodyRotation</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace_1_1StateType.html</anchorfile>
      <anchor>a954b8b5b6b1597e86b0145ac066a9f5b</anchor>
      <arglist>(unsigned int body) const</arglist>
    </member>
    <member kind="function">
      <type>base::SO3StateSpace::StateType &amp;</type>
      <name>getBodyRotation</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace_1_1StateType.html</anchorfile>
      <anchor>a9dddc43042fadbeee54d82579669c546</anchor>
      <arglist>(unsigned int body)</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getBodyLinearVelocity</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace_1_1StateType.html</anchorfile>
      <anchor>af8b7fcfedb6a9b06f012ec84d0d5c234</anchor>
      <arglist>(unsigned int body) const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getBodyLinearVelocity</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace_1_1StateType.html</anchorfile>
      <anchor>a556fa8bd77fc850e6a0f9a98e086bb51</anchor>
      <arglist>(unsigned int body)</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getBodyAngularVelocity</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace_1_1StateType.html</anchorfile>
      <anchor>a4422e39c48bc458306f63e23d7d3caaa</anchor>
      <arglist>(unsigned int body) const</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getBodyAngularVelocity</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace_1_1StateType.html</anchorfile>
      <anchor>ae951cfb3121caf1aea66f6938306836a</anchor>
      <arglist>(unsigned int body)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>collision</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace_1_1StateType.html</anchorfile>
      <anchor>a4f1a462807534944ca791f1314a42fa8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::OpenDEStateValidityChecker</name>
    <filename>classompl_1_1control_1_1OpenDEStateValidityChecker.html</filename>
    <base>ompl::base::StateValidityChecker</base>
    <member kind="function">
      <type></type>
      <name>OpenDEStateValidityChecker</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateValidityChecker.html</anchorfile>
      <anchor>a77f937139679b66a547db61a1727589d</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateValidityChecker.html</anchorfile>
      <anchor>a4b33964ebf69545f789bde0f1d1e0555</anchor>
      <arglist>(const base::State *state) const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OpenDEStateSpace *</type>
      <name>osm_</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateValidityChecker.html</anchorfile>
      <anchor>aaa529345ccfb55b31dde65a8cb65d6f4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::PathControl</name>
    <filename>classompl_1_1control_1_1PathControl.html</filename>
    <base>ompl::base::Path</base>
    <member kind="function">
      <type></type>
      <name>PathControl</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>acad02bde7b3869b242e5bf7f2b9d9546</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PathControl</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>a52e694c4f5e5d0acddda7e3053c2d6eb</anchor>
      <arglist>(const PathControl &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>PathControl &amp;</type>
      <name>operator=</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>aae38b0401aa76d832ad9098d51065130</anchor>
      <arglist>(const PathControl &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>base::Cost</type>
      <name>cost</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>a4a2788fd5f7e0d28be0ba4a81919a010</anchor>
      <arglist>(const base::OptimizationObjectivePtr &amp;opt) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>length</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>ac45bbac7a4567666f0ab58fac6b5530f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>check</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>a42e9392b18f3b56a95d8548e2790bb47</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>a382babbe685e27f9f677860407cfe449</anchor>
      <arglist>(std::ostream &amp;out) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printAsMatrix</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>ac6a0c9a65fc726a2e49b88a3230ec9aa</anchor>
      <arglist>(std::ostream &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>geometric::PathGeometric</type>
      <name>asGeometric</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>aef65c5719d57101f7733a631a5cdc61a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>aa81092a35fc88ea1a490a4e1e8444edc</anchor>
      <arglist>(const base::State *state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>a429ad467cda1b1e6c3f3ecaad32fc3af</anchor>
      <arglist>(const base::State *state, const Control *control, double duration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>aff4f8651ac48daa0d8f58fb378767305</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>random</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>aaa8ab5be65cb921092b5c94b99226c56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>randomValid</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>aa7f230dba3a6f6e2e7a59130fd4dd795</anchor>
      <arglist>(unsigned int attempts)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; base::State * &gt; &amp;</type>
      <name>getStates</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>a23e09dedef25b3daa148244235e45ce1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Control * &gt; &amp;</type>
      <name>getControls</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>acc99539806fbd3248aa317b171ec85b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt; &amp;</type>
      <name>getControlDurations</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>a85a46abb71ed4dbc98053b8679de13b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>base::State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>acc1a559c0c2f7f913391e6cbde7c4b30</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>const base::State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>a91f60bd764cb52fb848c13ea1521fb18</anchor>
      <arglist>(unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>Control *</type>
      <name>getControl</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>a6b34f21745348621a3d2780325e69ea9</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>const Control *</type>
      <name>getControl</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>a470bf74cb009e9f60e580b831bcbba14</anchor>
      <arglist>(unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getControlDuration</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>a311d7033de46f7b7c812dc4db67d53c8</anchor>
      <arglist>(unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getStateCount</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>aa459d189b6a70074409910a561d948b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getControlCount</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>aea0e03146843ba60ef6b82c2bf82ebcd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>ad8078ff0543cfed88b7ab83e51b96118</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>copyFrom</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>aba52a0ae46c87f57a8a4e9f75855cbc2</anchor>
      <arglist>(const PathControl &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; base::State * &gt;</type>
      <name>states_</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>aee4acddb2b46b03fa27b8ff8dbef0e3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Control * &gt;</type>
      <name>controls_</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>aeed07a3f2b4fef87d93d225060b022b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>controlDurations_</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>ad2d2983c2b89dd7aa7ae74393172e7b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>aa81092a35fc88ea1a490a4e1e8444edc</anchor>
      <arglist>(const base::State *state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>a429ad467cda1b1e6c3f3ecaad32fc3af</anchor>
      <arglist>(const base::State *state, const Control *control, double duration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>aff4f8651ac48daa0d8f58fb378767305</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>random</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>aaa8ab5be65cb921092b5c94b99226c56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>randomValid</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>aa7f230dba3a6f6e2e7a59130fd4dd795</anchor>
      <arglist>(unsigned int attempts)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; base::State * &gt; &amp;</type>
      <name>getStates</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>a23e09dedef25b3daa148244235e45ce1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Control * &gt; &amp;</type>
      <name>getControls</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>acc99539806fbd3248aa317b171ec85b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt; &amp;</type>
      <name>getControlDurations</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>a85a46abb71ed4dbc98053b8679de13b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>base::State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>acc1a559c0c2f7f913391e6cbde7c4b30</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>const base::State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>a91f60bd764cb52fb848c13ea1521fb18</anchor>
      <arglist>(unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>Control *</type>
      <name>getControl</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>a6b34f21745348621a3d2780325e69ea9</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>const Control *</type>
      <name>getControl</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>a470bf74cb009e9f60e580b831bcbba14</anchor>
      <arglist>(unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getControlDuration</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>a311d7033de46f7b7c812dc4db67d53c8</anchor>
      <arglist>(unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getStateCount</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>aa459d189b6a70074409910a561d948b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getControlCount</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>aea0e03146843ba60ef6b82c2bf82ebcd</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::PDST</name>
    <filename>classompl_1_1control_1_1PDST.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="struct">ompl::control::PDST::Cell</class>
    <class kind="struct">ompl::control::PDST::Motion</class>
    <class kind="struct">ompl::control::PDST::MotionCompare</class>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>abcda145ef6596282b645e71eeeed07b9</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>ab7e0f395fa765484da8baf7505db9167</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>a17a91f183949b2f521f1c3ded9116ce5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>a94501592a9de47ccf34da35fb7ca4c37</anchor>
      <arglist>(base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>af03602a48c919370dca949170ddb18d8</anchor>
      <arglist>(const base::ProjectionEvaluatorPtr &amp;projectionEvaluator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>a2de627448d1d36cc21fd8f4d14bc5ae2</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const base::ProjectionEvaluatorPtr &amp;</type>
      <name>getProjectionEvaluator</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>a53215fd03e3a25c0ef8c810d13537b94</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalBias</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>a376782c8389edc677193592551de95a2</anchor>
      <arglist>(double goalBias)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoalBias</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>a75faee9fffe5fb8a9a819fd5d7d8bdb0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addMotion</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>ad74e6e5dd5f36f59fdb27b76e7f017f0</anchor>
      <arglist>(Motion *motion, Cell *cell, base::State *, base::State *, Eigen::Ref&lt; Eigen::VectorXd &gt;, Eigen::Ref&lt; Eigen::VectorXd &gt;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateHeapElement</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>aa079dc290b283995153ae607953cb9f1</anchor>
      <arglist>(Motion *motion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Motion *</type>
      <name>propagateFrom</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>a1d200c83edc3e1500a2acbd9897995d4</anchor>
      <arglist>(Motion *motion, base::State *, base::State *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned int</type>
      <name>findDurationAndAncestor</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>a118d9c06f3bcf44c6aa1ad0103298ffd</anchor>
      <arglist>(Motion *motion, base::State *state, base::State *scratch, Motion *&amp;ancestor) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>a44c0bef425e4358b8c471da5ac0a163b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DirectedControlSamplerPtr</type>
      <name>controlSampler_</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>a007b33339c277e78199b2b7cb0e975d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const SpaceInformation *</type>
      <name>siC_</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>a873d819c188d3cb70d9200d2d0603e99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Motion * &gt;</type>
      <name>startMotions_</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>ac120507ac51c58f58bad4222e89a6582</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BinaryHeap&lt; Motion *, MotionCompare &gt;</type>
      <name>priorityQueue_</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>a33df99067d8f2eaafd036d807d1037e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Cell *</type>
      <name>bsp_</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>ab7a7a54861e89c3535d292cd7008705b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ProjectionEvaluatorPtr</type>
      <name>projectionEvaluator_</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>ab6295db4b1a4833deee858a75fac876b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>goalBias_</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>aaa1e05ca677ce438b960ccc696421323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::GoalSampleableRegion *</type>
      <name>goalSampler_</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>a5dcf50bd87b21f89ec45300817bacf09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>iteration_</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>a587c2dbdf4a5487719acf5220462d159</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>lastGoalMotion_</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>a64510e8439cf756516a1b49df98c5ed1</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1control_1_1PDST.html">cPDST</docanchor>
  </compound>
  <compound kind="struct">
    <name>ompl::control::PDST::Cell</name>
    <filename>structompl_1_1control_1_1PDST_1_1Cell.html</filename>
    <member kind="function">
      <type>void</type>
      <name>subdivide</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>a54f7d2983d7b36341a1f7299737c119d</anchor>
      <arglist>(unsigned int spaceDimension)</arglist>
    </member>
    <member kind="function">
      <type>Cell *</type>
      <name>stab</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>abb7df99e766a98adc914263fd70b4eb2</anchor>
      <arglist>(const Eigen::Ref&lt; Eigen::VectorXd &gt; &amp;projection) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMotion</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>a85edeaabe2fcc01a13e7b1433e804178</anchor>
      <arglist>(Motion *motion)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>aa49675cc91196372d477088ef22f9466</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>volume_</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>a02a7ffd3a1fcd9650faff5651d7d9112</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>splitDimension_</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>a317e57ad23a279cdd6bf935f336065d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>splitValue_</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>ad6af8d7e40f9dfaf82ccab206377778f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Cell *</type>
      <name>left_</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>a3df9edb315698036fbf2c5f9600dc416</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Cell *</type>
      <name>right_</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>a6337b19c0dbd3e298689d1e9e4945ae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>base::RealVectorBounds</type>
      <name>bounds_</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>a97d78c34c5cc242093a2f0dfb6dcc27f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Motion * &gt;</type>
      <name>motions_</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>a8e074a17021bdd43cf186f19a584b73c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::control::PDST::Motion</name>
    <filename>structompl_1_1control_1_1PDST_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Motion.html</anchorfile>
      <anchor>ac160ee1d6399114cd80772bd49dc0f1f</anchor>
      <arglist>(base::State *state)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>score</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Motion.html</anchorfile>
      <anchor>ac4d288d7ce6db8c93fd7655b4c21a950</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>startState_</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Motion.html</anchorfile>
      <anchor>a33824f2aa2476bcffc2dad6dafd19827</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>endState_</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Motion.html</anchorfile>
      <anchor>a86924a606bc657930610b4f97ca37925</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>control::Control *</type>
      <name>control_</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Motion.html</anchorfile>
      <anchor>aa98d81ae1038695da52fce6e987eb401</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>controlDuration_</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Motion.html</anchorfile>
      <anchor>afefe572cd9f43f1598c361b84104a654</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>priority_</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Motion.html</anchorfile>
      <anchor>aa00ec3d3728b2d12b5fcda1ea1267280</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent_</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Motion.html</anchorfile>
      <anchor>a0322a2e03780ee2b1d1aac32b1deaa81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Cell *</type>
      <name>cell_</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Motion.html</anchorfile>
      <anchor>a9bc738ede1dada52205853232a240aa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BinaryHeap&lt; Motion *, MotionCompare &gt;::Element *</type>
      <name>heapElement_</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Motion.html</anchorfile>
      <anchor>ae37f538a9ba7be9995bf440f13efa63a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isSplit_</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Motion.html</anchorfile>
      <anchor>a662f84767c6a621443e16b9ef2c2b44d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::control::PDST::MotionCompare</name>
    <filename>structompl_1_1control_1_1PDST_1_1MotionCompare.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1MotionCompare.html</anchorfile>
      <anchor>ab8dd2c222604eb604247e558e411fef0</anchor>
      <arglist>(Motion *p1, Motion *p2) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::PlannerData</name>
    <filename>classompl_1_1control_1_1PlannerData.html</filename>
    <base>ompl::base::PlannerData</base>
    <member kind="function">
      <type></type>
      <name>PlannerData</name>
      <anchorfile>classompl_1_1control_1_1PlannerData.html</anchorfile>
      <anchor>a5dd9ed6679f6be99a8dac9bb8b518f0a</anchor>
      <arglist>(const SpaceInformationPtr &amp;siC)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PlannerData</name>
      <anchorfile>classompl_1_1control_1_1PlannerData.html</anchorfile>
      <anchor>ae3d3a44f14bacb30bc00d41d0980baf5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeVertex</name>
      <anchorfile>classompl_1_1control_1_1PlannerData.html</anchorfile>
      <anchor>a2c2aa89498dcca737a667c3c41a496bd</anchor>
      <arglist>(const base::PlannerDataVertex &amp;st) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeVertex</name>
      <anchorfile>classompl_1_1control_1_1PlannerData.html</anchorfile>
      <anchor>abcdd694bec6eda9f2e884541c6388d5a</anchor>
      <arglist>(unsigned int vIndex) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEdge</name>
      <anchorfile>classompl_1_1control_1_1PlannerData.html</anchorfile>
      <anchor>af40219f4a5d04634eef4929156d6d017</anchor>
      <arglist>(unsigned int v1, unsigned int v2) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEdge</name>
      <anchorfile>classompl_1_1control_1_1PlannerData.html</anchorfile>
      <anchor>a55dae1f3862e41126d4f65152cc69ae3</anchor>
      <arglist>(const base::PlannerDataVertex &amp;v1, const base::PlannerDataVertex &amp;v2) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1control_1_1PlannerData.html</anchorfile>
      <anchor>a66ad68fc2c8262138d6b244be474fa3d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decoupleFromPlanner</name>
      <anchorfile>classompl_1_1control_1_1PlannerData.html</anchorfile>
      <anchor>a64de419d8be128ba2e71c71b79a6517a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>const SpaceInformationPtr &amp;</type>
      <name>getSpaceInformation</name>
      <anchorfile>classompl_1_1control_1_1PlannerData.html</anchorfile>
      <anchor>a6cce3fb2f7275f439919c37dab89320b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasControls</name>
      <anchorfile>classompl_1_1control_1_1PlannerData.html</anchorfile>
      <anchor>aa00f38b78ba54efb088a52195da095c7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SpaceInformationPtr</type>
      <name>siC_</name>
      <anchorfile>classompl_1_1control_1_1PlannerData.html</anchorfile>
      <anchor>af2c137590e2a049d47723ae5388d5a6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; Control * &gt;</type>
      <name>decoupledControls_</name>
      <anchorfile>classompl_1_1control_1_1PlannerData.html</anchorfile>
      <anchor>a4b4bbb30faf0f71b9885ba3005349147</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::PlannerDataEdgeControl</name>
    <filename>classompl_1_1control_1_1PlannerDataEdgeControl.html</filename>
    <base>ompl::base::PlannerDataEdge</base>
    <member kind="function">
      <type></type>
      <name>PlannerDataEdgeControl</name>
      <anchorfile>classompl_1_1control_1_1PlannerDataEdgeControl.html</anchorfile>
      <anchor>aeed9d3f69fcc19bf7007f6752895108b</anchor>
      <arglist>(const Control *c, double duration)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PlannerDataEdgeControl</name>
      <anchorfile>classompl_1_1control_1_1PlannerDataEdgeControl.html</anchorfile>
      <anchor>ae6be83c08cb60bbdff9ac5f62f43d2d9</anchor>
      <arglist>(const PlannerDataEdgeControl &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerDataEdge *</type>
      <name>clone</name>
      <anchorfile>classompl_1_1control_1_1PlannerDataEdgeControl.html</anchorfile>
      <anchor>a05bc73adc9af940e9023b63684ae7206</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const Control *</type>
      <name>getControl</name>
      <anchorfile>classompl_1_1control_1_1PlannerDataEdgeControl.html</anchorfile>
      <anchor>a14af71c26e68cc4acea0c313e4013fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDuration</name>
      <anchorfile>classompl_1_1control_1_1PlannerDataEdgeControl.html</anchorfile>
      <anchor>a6b0563fb2ac7d9d7d41f3f21857a2c93</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::PlannerDataStorage</name>
    <filename>classompl_1_1control_1_1PlannerDataStorage.html</filename>
    <base>ompl::base::PlannerDataStorage</base>
    <member kind="function">
      <type></type>
      <name>PlannerDataStorage</name>
      <anchorfile>classompl_1_1control_1_1PlannerDataStorage.html</anchorfile>
      <anchor>aa6834e9260350f378a3915234bf8bdc0</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PlannerDataStorage</name>
      <anchorfile>classompl_1_1control_1_1PlannerDataStorage.html</anchorfile>
      <anchor>a22149c2714de24650e7c85dfaff2249a</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>classompl_1_1control_1_1PlannerDataStorage.html</anchorfile>
      <anchor>a5559ece647a551a8c1192c3e3451e269</anchor>
      <arglist>(const char *filename, base::PlannerData &amp;pd) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>classompl_1_1control_1_1PlannerDataStorage.html</anchorfile>
      <anchor>ad8bb03e7978bde70f584544b5774c800</anchor>
      <arglist>(std::istream &amp;in, base::PlannerData &amp;pd) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>store</name>
      <anchorfile>classompl_1_1control_1_1PlannerDataStorage.html</anchorfile>
      <anchor>a00781bff1f5bf8db88c5eb676e877449</anchor>
      <arglist>(const base::PlannerData &amp;pd, const char *filename) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>store</name>
      <anchorfile>classompl_1_1control_1_1PlannerDataStorage.html</anchorfile>
      <anchor>aebf663b7ec53bbf717dc94e189d86983</anchor>
      <arglist>(const base::PlannerData &amp;pd, std::ostream &amp;out) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>loadEdges</name>
      <anchorfile>classompl_1_1control_1_1PlannerDataStorage.html</anchorfile>
      <anchor>ae9a9048db0fad1be25e986b858afee93</anchor>
      <arglist>(base::PlannerData &amp;pd, unsigned int numEdges, boost::archive::binary_iarchive &amp;ia) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>storeEdges</name>
      <anchorfile>classompl_1_1control_1_1PlannerDataStorage.html</anchorfile>
      <anchor>acb0b51c3984d5a7d1cd3e7c2c46cab69</anchor>
      <arglist>(const base::PlannerData &amp;pd, boost::archive::binary_oarchive &amp;oa) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::ProductGraph</name>
    <filename>classompl_1_1control_1_1ProductGraph.html</filename>
    <class kind="struct">ompl::control::ProductGraph::Edge</class>
    <class kind="class">ompl::control::ProductGraph::State</class>
    <member kind="function">
      <type></type>
      <name>ProductGraph</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph.html</anchorfile>
      <anchor>aec58e573340b537c0a350cf2b4cc6a97</anchor>
      <arglist>(PropositionalDecompositionPtr decomp, AutomatonPtr cosafetyAut, AutomatonPtr safetyAut)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProductGraph</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph.html</anchorfile>
      <anchor>a88109c513022a690586dd88b58f2a43d</anchor>
      <arglist>(const PropositionalDecompositionPtr &amp;decomp, AutomatonPtr cosafetyAut)</arglist>
    </member>
    <member kind="function">
      <type>const PropositionalDecompositionPtr &amp;</type>
      <name>getDecomp</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph.html</anchorfile>
      <anchor>a386483970b585e164427fe410071a68d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const AutomatonPtr &amp;</type>
      <name>getCosafetyAutom</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph.html</anchorfile>
      <anchor>ad64a4e63780af2e6cee858300671a852</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const AutomatonPtr &amp;</type>
      <name>getSafetyAutom</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph.html</anchorfile>
      <anchor>aa5aecff18afa50be9dfe723c4a2e03d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; State * &gt;</type>
      <name>computeLead</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph.html</anchorfile>
      <anchor>a8c6576d2e291931b783e690d97f73ba2</anchor>
      <arglist>(State *start, const std::function&lt; double(State *, State *)&gt; &amp;edgeWeight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph.html</anchorfile>
      <anchor>a9e91325fc18add6f8e4032a4811613e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildGraph</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph.html</anchorfile>
      <anchor>aeccce738041e5ccd6db1116170e7dfbc</anchor>
      <arglist>(State *start, const std::function&lt; void(State *)&gt; &amp;initialize=[](State *){})</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSolution</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph.html</anchorfile>
      <anchor>a02f922971f374e1ae4d7976ab9ded021</anchor>
      <arglist>(const State *s) const</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>getStartState</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph.html</anchorfile>
      <anchor>a085970e1cdba0ba7a3697753613ae7a1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRegionVolume</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph.html</anchorfile>
      <anchor>ad400ea5e4bb4fb47ad0c5fc63c49650b</anchor>
      <arglist>(const State *s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCosafeAutDistance</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph.html</anchorfile>
      <anchor>afa1ddff49a74cf5acd23fbfed5d45925</anchor>
      <arglist>(const State *s) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSafeAutDistance</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph.html</anchorfile>
      <anchor>a431d6793270e5bf3b69ec39fab788c4c</anchor>
      <arglist>(const State *s) const</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph.html</anchorfile>
      <anchor>a1d44d1c5abad77e7877c6cff2292e15e</anchor>
      <arglist>(const base::State *cs) const</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph.html</anchorfile>
      <anchor>ab6bdc2864ca23eb2f5a0e68b5be257ac</anchor>
      <arglist>(const base::State *cs, int cosafe, int safe) const</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph.html</anchorfile>
      <anchor>af5b83da06afc3b837b8319dab86530a9</anchor>
      <arglist>(const State *parent, int nextRegion) const</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph.html</anchorfile>
      <anchor>ae56403f138d986da6c64bacf13deb9d7</anchor>
      <arglist>(const State *parent, const base::State *cs) const</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph.html</anchorfile>
      <anchor>af2eb891b1b37850e965ddde3516f6aeb</anchor>
      <arglist>(int region, int cosafe, int safe) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::control::ProductGraph::Edge</name>
    <filename>structompl_1_1control_1_1ProductGraph_1_1Edge.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::control::ProductGraph::State</name>
    <filename>classompl_1_1control_1_1ProductGraph_1_1State.html</filename>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph_1_1State.html</anchorfile>
      <anchor>ac07cfaa6f0d4c5fb07d42680ecc206e5</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph_1_1State.html</anchorfile>
      <anchor>ab9e9418d207d3001495eff1a7a9ed0a5</anchor>
      <arglist>(const State &amp;s)=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph_1_1State.html</anchorfile>
      <anchor>a69435c6c87e191185f11acc90572c506</anchor>
      <arglist>(const State &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph_1_1State.html</anchorfile>
      <anchor>a6b4c7c19fe9515d265159e8503f9b117</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDecompRegion</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph_1_1State.html</anchorfile>
      <anchor>a56db414bd2a0a28f850c8a9b440f990a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCosafeState</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph_1_1State.html</anchorfile>
      <anchor>a8667baf0c71512ed798ab521250cca51</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSafeState</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph_1_1State.html</anchorfile>
      <anchor>af975de68c9efa29bfccc6b5713cb2842</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph_1_1State.html</anchorfile>
      <anchor>a5878285c4952d0c8073c5b27c4e2ce1d</anchor>
      <arglist>(std::ostream &amp;out, const State &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::ProductGraphPtr</name>
    <filename>classompl_1_1control_1_1ProductGraphPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::control::PropositionalDecomposition</name>
    <filename>classompl_1_1control_1_1PropositionalDecomposition.html</filename>
    <base>ompl::control::Decomposition</base>
    <member kind="function">
      <type></type>
      <name>PropositionalDecomposition</name>
      <anchorfile>classompl_1_1control_1_1PropositionalDecomposition.html</anchorfile>
      <anchor>afa093aaa37411f45a03da31c751ea841</anchor>
      <arglist>(const DecompositionPtr &amp;decomp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PropositionalDecomposition</name>
      <anchorfile>classompl_1_1control_1_1PropositionalDecomposition.html</anchorfile>
      <anchor>aeea93f4e027fd2e865b02a86435fa540</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual World</type>
      <name>worldAtRegion</name>
      <anchorfile>classompl_1_1control_1_1PropositionalDecomposition.html</anchorfile>
      <anchor>aab6a90b0083de432493948f8ce6d01fe</anchor>
      <arglist>(int rid)=0</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumRegions</name>
      <anchorfile>classompl_1_1control_1_1PropositionalDecomposition.html</anchorfile>
      <anchor>a9ade8bf6ca8c22772c89d765a9caa759</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumProps</name>
      <anchorfile>classompl_1_1control_1_1PropositionalDecomposition.html</anchorfile>
      <anchor>a35b1cce2c841b41539b71c0f495d5787</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRegionVolume</name>
      <anchorfile>classompl_1_1control_1_1PropositionalDecomposition.html</anchorfile>
      <anchor>a875d5f3f4f874fd1b52d6ab52dcd88e6</anchor>
      <arglist>(int rid) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>locateRegion</name>
      <anchorfile>classompl_1_1control_1_1PropositionalDecomposition.html</anchorfile>
      <anchor>ae2a083a22283f0078838a947fe0afdb7</anchor>
      <arglist>(const base::State *s) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>project</name>
      <anchorfile>classompl_1_1control_1_1PropositionalDecomposition.html</anchorfile>
      <anchor>ad0c2f91059def71b55c8f914f7c8e233</anchor>
      <arglist>(const base::State *s, std::vector&lt; double &gt; &amp;coord) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getNeighbors</name>
      <anchorfile>classompl_1_1control_1_1PropositionalDecomposition.html</anchorfile>
      <anchor>a6529d918754a6844cdc7cad5b0512bc3</anchor>
      <arglist>(int rid, std::vector&lt; int &gt; &amp;neighbors) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleFromRegion</name>
      <anchorfile>classompl_1_1control_1_1PropositionalDecomposition.html</anchorfile>
      <anchor>acebef0a91ec3cb29d1db217103a0b12f</anchor>
      <arglist>(int rid, RNG &amp;rng, std::vector&lt; double &gt; &amp;coord) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleFullState</name>
      <anchorfile>classompl_1_1control_1_1PropositionalDecomposition.html</anchorfile>
      <anchor>a1f43f129edd7860a26fc5715352105c8</anchor>
      <arglist>(const base::StateSamplerPtr &amp;sampler, const std::vector&lt; double &gt; &amp;coord, base::State *s) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::PropositionalDecompositionPtr</name>
    <filename>classompl_1_1control_1_1PropositionalDecompositionPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::control::PropositionalTriangularDecomposition</name>
    <filename>classompl_1_1control_1_1PropositionalTriangularDecomposition.html</filename>
    <base>ompl::control::PropositionalDecomposition</base>
    <member kind="function">
      <type></type>
      <name>PropositionalTriangularDecomposition</name>
      <anchorfile>classompl_1_1control_1_1PropositionalTriangularDecomposition.html</anchorfile>
      <anchor>a9feaa5b7c2db2428b79e4ff3a80a0691</anchor>
      <arglist>(const base::RealVectorBounds &amp;bounds, const std::vector&lt; Polygon &gt; &amp;holes=std::vector&lt; Polygon &gt;(), const std::vector&lt; Polygon &gt; &amp;props=std::vector&lt; Polygon &gt;())</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumProps</name>
      <anchorfile>classompl_1_1control_1_1PropositionalTriangularDecomposition.html</anchorfile>
      <anchor>a6979ac36ec59b85ce63b5765176dcb5e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>World</type>
      <name>worldAtRegion</name>
      <anchorfile>classompl_1_1control_1_1PropositionalTriangularDecomposition.html</anchorfile>
      <anchor>af28ea899eee7450e194c478c7b303fa2</anchor>
      <arglist>(int triID) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::RealVectorControlSpace</name>
    <filename>classompl_1_1control_1_1RealVectorControlSpace.html</filename>
    <base>ompl::control::ControlSpace</base>
    <class kind="class">ompl::control::RealVectorControlSpace::ControlType</class>
    <member kind="function">
      <type></type>
      <name>RealVectorControlSpace</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace.html</anchorfile>
      <anchor>a0bacd31455e2745eb5efd291210482a8</anchor>
      <arglist>(const base::StateSpacePtr &amp;stateSpace, unsigned int dim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBounds</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace.html</anchorfile>
      <anchor>ab21eee94cc69d207ab578b69a423660c</anchor>
      <arglist>(const base::RealVectorBounds &amp;bounds)</arglist>
    </member>
    <member kind="function">
      <type>const base::RealVectorBounds &amp;</type>
      <name>getBounds</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace.html</anchorfile>
      <anchor>aa2a46af98565c7577b3980829335a2d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace.html</anchorfile>
      <anchor>ae069639e8986cb74c5a902c5bb7d37dd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyControl</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace.html</anchorfile>
      <anchor>ac2ae94944e335e81f5e5b70aeb53d416</anchor>
      <arglist>(Control *destination, const Control *source) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalControls</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace.html</anchorfile>
      <anchor>af3dfada4e810dc10f802a893a6480797</anchor>
      <arglist>(const Control *control1, const Control *control2) const override</arglist>
    </member>
    <member kind="function">
      <type>ControlSamplerPtr</type>
      <name>allocDefaultControlSampler</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace.html</anchorfile>
      <anchor>a455c9a9948faf67cf46b3a0542c7e479</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Control *</type>
      <name>allocControl</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace.html</anchorfile>
      <anchor>aab3b9e061f1546be721d5731e6cbd6ae</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeControl</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace.html</anchorfile>
      <anchor>a118fb8ad65f972c669936b2842c9dddc</anchor>
      <arglist>(Control *control) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nullControl</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace.html</anchorfile>
      <anchor>af7be2f81caaf94206cd86be2edcb317d</anchor>
      <arglist>(Control *control) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printControl</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace.html</anchorfile>
      <anchor>a3aa1a8675bc1b4ec269b528138328f50</anchor>
      <arglist>(const Control *control, std::ostream &amp;out) const override</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getValueAddressAtIndex</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace.html</anchorfile>
      <anchor>a3a0a5f49ecb92aaa5780e7ea71755080</anchor>
      <arglist>(Control *control, unsigned int index) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printSettings</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace.html</anchorfile>
      <anchor>a0c7aaed0af4a1b2d94eb046afdcac1a7</anchor>
      <arglist>(std::ostream &amp;out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace.html</anchorfile>
      <anchor>ab631ea2040e69697b97c7786fcee3bd4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getSerializationLength</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace.html</anchorfile>
      <anchor>ae4b3ac579aab36cbd2e83346ea0a231f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace.html</anchorfile>
      <anchor>af12e6f3533e09151e7a02fc95ba6e6c6</anchor>
      <arglist>(void *serialization, const Control *ctrl) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserialize</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace.html</anchorfile>
      <anchor>ae2e062afd431067f4991049fe518d6ef</anchor>
      <arglist>(Control *ctrl, const void *serialization) const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>dimension_</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace.html</anchorfile>
      <anchor>a176e9568fbe1c7fd557e8890360d7be9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::RealVectorBounds</type>
      <name>bounds_</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace.html</anchorfile>
      <anchor>aa2f518294c75aab253d63237605bf9ff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::RealVectorControlSpace::ControlType</name>
    <filename>classompl_1_1control_1_1RealVectorControlSpace_1_1ControlType.html</filename>
    <base>ompl::control::Control</base>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace_1_1ControlType.html</anchorfile>
      <anchor>a263f79ec906305694af8f8011520e4e8</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace_1_1ControlType.html</anchorfile>
      <anchor>a8a63cc6084f77a7a531bf52981f541ba</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>values</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace_1_1ControlType.html</anchorfile>
      <anchor>a86ad53793fd0661faf0732f1cc5de9bd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::RealVectorControlUniformSampler</name>
    <filename>classompl_1_1control_1_1RealVectorControlUniformSampler.html</filename>
    <base>ompl::control::ControlSampler</base>
    <member kind="function">
      <type></type>
      <name>RealVectorControlUniformSampler</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlUniformSampler.html</anchorfile>
      <anchor>a048a5763d24a5bddbf7ad4692ff1b17a</anchor>
      <arglist>(const ControlSpace *space)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sample</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlUniformSampler.html</anchorfile>
      <anchor>af8113b255e5e6d280987eed8a1907c71</anchor>
      <arglist>(Control *control) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::RRT</name>
    <filename>classompl_1_1control_1_1RRT.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::control::RRT::Motion</class>
    <member kind="function">
      <type></type>
      <name>RRT</name>
      <anchorfile>classompl_1_1control_1_1RRT.html</anchorfile>
      <anchor>ad74aa3374c2a2ecbf29eb9462a229e19</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1control_1_1RRT.html</anchorfile>
      <anchor>a917b5201c6fe0467ea3d4578416066aa</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1control_1_1RRT.html</anchorfile>
      <anchor>ab471a378659c91512a3059eea37ed75f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalBias</name>
      <anchorfile>classompl_1_1control_1_1RRT.html</anchorfile>
      <anchor>a068bcfdd1b0ec3ea9d1a4923610496e5</anchor>
      <arglist>(double goalBias)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoalBias</name>
      <anchorfile>classompl_1_1control_1_1RRT.html</anchorfile>
      <anchor>aa5e0e36e2af3c0ce652bcc11d0ac7b6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIntermediateStates</name>
      <anchorfile>classompl_1_1control_1_1RRT.html</anchorfile>
      <anchor>a310498f4c8038906e7884a91e04bd375</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIntermediateStates</name>
      <anchorfile>classompl_1_1control_1_1RRT.html</anchorfile>
      <anchor>a71a3f8ae7ca8cf9e60000f59d71b7296</anchor>
      <arglist>(bool addIntermediateStates)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1control_1_1RRT.html</anchorfile>
      <anchor>ab73730bd59befa57a5ddbfeaf96c4e07</anchor>
      <arglist>(base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>classompl_1_1control_1_1RRT.html</anchorfile>
      <anchor>a69b6ff9eca9409574fc064561a2f900f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1control_1_1RRT.html</anchorfile>
      <anchor>aea6ee2d963d475c3f50ee65ac963914a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1control_1_1RRT.html</anchorfile>
      <anchor>a55a6e3390306cbf5b0c08efdf592351d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1control_1_1RRT.html</anchorfile>
      <anchor>a80f06a272d354a0bb020218c88edd544</anchor>
      <arglist>(const Motion *a, const Motion *b) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1control_1_1RRT.html</anchorfile>
      <anchor>ace2d0aba3b22399f36e0af8f7ec80f5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DirectedControlSamplerPtr</type>
      <name>controlSampler_</name>
      <anchorfile>classompl_1_1control_1_1RRT.html</anchorfile>
      <anchor>ad81d866c035b1fb7ef8e2255545c13ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const SpaceInformation *</type>
      <name>siC_</name>
      <anchorfile>classompl_1_1control_1_1RRT.html</anchorfile>
      <anchor>a61945ccf4115deee7b71a3c680d5dfc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Motion * &gt; &gt;</type>
      <name>nn_</name>
      <anchorfile>classompl_1_1control_1_1RRT.html</anchorfile>
      <anchor>af8a9f0229260dd3cfa9481f823dc71fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>goalBias_</name>
      <anchorfile>classompl_1_1control_1_1RRT.html</anchorfile>
      <anchor>a40bc23cf94258f44dfe9abc572504443</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>addIntermediateStates_</name>
      <anchorfile>classompl_1_1control_1_1RRT.html</anchorfile>
      <anchor>a8cc1cc939a5aaf64e0b92a5844f5109b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1control_1_1RRT.html</anchorfile>
      <anchor>a0373aa7c0340db91bfdfdcc2551a97a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>lastGoalMotion_</name>
      <anchorfile>classompl_1_1control_1_1RRT.html</anchorfile>
      <anchor>ad4393ce358725ccef7bc36dcff860deb</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1control_1_1RRT.html">cRRT</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::control::RRT::Motion</name>
    <filename>classompl_1_1control_1_1RRT_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1control_1_1RRT_1_1Motion.html</anchorfile>
      <anchor>a6ddfa22cb20652db133e3429987ce5a4</anchor>
      <arglist>(const SpaceInformation *si)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state</name>
      <anchorfile>classompl_1_1control_1_1RRT_1_1Motion.html</anchorfile>
      <anchor>a98d79745792b9b98a9a4b61cc75ca57a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Control *</type>
      <name>control</name>
      <anchorfile>classompl_1_1control_1_1RRT_1_1Motion.html</anchorfile>
      <anchor>ac6d68ad5b0174b36493d0c3e32b7614c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>steps</name>
      <anchorfile>classompl_1_1control_1_1RRT_1_1Motion.html</anchorfile>
      <anchor>a8ca8aef83495822505a83ef5d047404b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent</name>
      <anchorfile>classompl_1_1control_1_1RRT_1_1Motion.html</anchorfile>
      <anchor>af00f73a35b1000529fbd1aea6a52385d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::SimpleDirectedControlSampler</name>
    <filename>classompl_1_1control_1_1SimpleDirectedControlSampler.html</filename>
    <base>ompl::control::DirectedControlSampler</base>
    <member kind="function">
      <type></type>
      <name>SimpleDirectedControlSampler</name>
      <anchorfile>classompl_1_1control_1_1SimpleDirectedControlSampler.html</anchorfile>
      <anchor>a5b67a4e8d9b43241bc1418681fcd9879</anchor>
      <arglist>(const SpaceInformation *si, unsigned int k=1)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumControlSamples</name>
      <anchorfile>classompl_1_1control_1_1SimpleDirectedControlSampler.html</anchorfile>
      <anchor>a47e59aa360d76c62e3d3df1a9ec0405f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumControlSamples</name>
      <anchorfile>classompl_1_1control_1_1SimpleDirectedControlSampler.html</anchorfile>
      <anchor>a0d3759b6a290d2aa7fc88ccde3f0c301</anchor>
      <arglist>(unsigned int numSamples)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>sampleTo</name>
      <anchorfile>classompl_1_1control_1_1SimpleDirectedControlSampler.html</anchorfile>
      <anchor>a8b5e52f361972bf0ac9740c18140d892</anchor>
      <arglist>(Control *control, const base::State *source, base::State *dest) override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>sampleTo</name>
      <anchorfile>classompl_1_1control_1_1SimpleDirectedControlSampler.html</anchorfile>
      <anchor>a0f8ed1f374b9e9c770874269b67390ef</anchor>
      <arglist>(Control *control, const Control *previous, const base::State *source, base::State *dest) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getBestControl</name>
      <anchorfile>classompl_1_1control_1_1SimpleDirectedControlSampler.html</anchorfile>
      <anchor>a5bf8358689565fb91453b0eab2bb1379</anchor>
      <arglist>(Control *control, const base::State *source, base::State *dest, const Control *previous)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ControlSamplerPtr</type>
      <name>cs_</name>
      <anchorfile>classompl_1_1control_1_1SimpleDirectedControlSampler.html</anchorfile>
      <anchor>a7af1eaa764c37a6a49c960d5699d68ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numControlSamples_</name>
      <anchorfile>classompl_1_1control_1_1SimpleDirectedControlSampler.html</anchorfile>
      <anchor>a01d78153fbc4db8a17dcca0fd493bd3f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::SimpleSetup</name>
    <filename>classompl_1_1control_1_1SimpleSetup.html</filename>
    <member kind="function">
      <type></type>
      <name>SimpleSetup</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a94ed2d6cb6cf803c99465db24e4700cf</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleSetup</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>ad6cb6079ac1d67a90ff88fcdd4e1a56d</anchor>
      <arglist>(const ControlSpacePtr &amp;space)</arglist>
    </member>
    <member kind="function">
      <type>const SpaceInformationPtr &amp;</type>
      <name>getSpaceInformation</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>ab55081f197f666e8f0e4232bedaa14e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const base::ProblemDefinitionPtr &amp;</type>
      <name>getProblemDefinition</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a381a67cc16b87553f4cfe889bcf2d49f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>base::ProblemDefinitionPtr &amp;</type>
      <name>getProblemDefinition</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>ac06a23940f50a002a07c01dafa541643</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const base::StateSpacePtr &amp;</type>
      <name>getStateSpace</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>aa22426021c9d852dd4401be8a8a2bd8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ControlSpacePtr &amp;</type>
      <name>getControlSpace</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a0e795b2d95d697f8222f9677f6d00da5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const base::StateValidityCheckerPtr &amp;</type>
      <name>getStateValidityChecker</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>ac842ff8731bc2ffe74f100e40ae46325</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const StatePropagatorPtr &amp;</type>
      <name>getStatePropagator</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a4b2fa2d7c4b550a091df137eb5a404f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const base::GoalPtr &amp;</type>
      <name>getGoal</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>aa3899bbc87ec6ccfd11b202f7baee131</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const base::PlannerPtr &amp;</type>
      <name>getPlanner</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a3169ff43dfc205dedf4080718d6e29ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const base::PlannerAllocator &amp;</type>
      <name>getPlannerAllocator</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>ae01049fbc728f90c8baef6e2988e097f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveExactSolutionPath</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a39fbb7665f1524176a5e70b36e55653a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveSolutionPath</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a14248648449bff3b46fab550528d10b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PathControl &amp;</type>
      <name>getSolutionPath</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a75d11629297e72ca440f3a67daee4092</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>ac1ca95cf8e1121ce121c92c12200e306</anchor>
      <arglist>(base::PlannerData &amp;pd) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateValidityChecker</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a83836265f90c0d650edcb72610e4f690</anchor>
      <arglist>(const base::StateValidityCheckerPtr &amp;svc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateValidityChecker</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a415e21e0b3a793a880b4c297c92599eb</anchor>
      <arglist>(const base::StateValidityCheckerFn &amp;svc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStatePropagator</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>ac43f41929f8bed01e61ef9b8d3ad7aed</anchor>
      <arglist>(const StatePropagatorFn &amp;sp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStatePropagator</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a55dec29f164862b0493b8981439506e9</anchor>
      <arglist>(const StatePropagatorPtr &amp;sp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOptimizationObjective</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>ae2d01ad209900cfc51e47028fcfbecfa</anchor>
      <arglist>(const base::OptimizationObjectivePtr &amp;optimizationObjective)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartAndGoalStates</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a9ad38c8d4fa369fb8adb82e07840d81c</anchor>
      <arglist>(const base::ScopedState&lt;&gt; &amp;start, const base::ScopedState&lt;&gt; &amp;goal, const double threshold=std::numeric_limits&lt; double &gt;::epsilon())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalState</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a4fbdf2637f503a03e39bbc7ab637b687</anchor>
      <arglist>(const base::ScopedState&lt;&gt; &amp;goal, const double threshold=std::numeric_limits&lt; double &gt;::epsilon())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addStartState</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a10cbfb4aff914e9c7ec71f4e1e2cf546</anchor>
      <arglist>(const base::ScopedState&lt;&gt; &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearStartStates</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>ad20714e7d402f4a502fb138551b71329</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartState</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a310f28cce26733d75f9388a5026a6382</anchor>
      <arglist>(const base::ScopedState&lt;&gt; &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoal</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>ac72f0ae91f54d455afb385f770870091</anchor>
      <arglist>(const base::GoalPtr &amp;goal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlanner</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a09bcf889f9bf5d96fbc0c995535e4706</anchor>
      <arglist>(const base::PlannerPtr &amp;planner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlannerAllocator</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>aad0b69f028201b65bac027ba080146aa</anchor>
      <arglist>(const base::PlannerAllocator &amp;pa)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a96856d1bd7c75108d1c27cdf34f6c49a</anchor>
      <arglist>(double time=1.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a974cb6f913b00429704a57b139274e8b</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>getLastPlannerStatus</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a4815b21dc1d10140cadb348265f6df67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLastPlanComputationTime</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>add2e6467f01b818477b176645d7b3a59</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>ac8026f3016cf0d9ee7fb503452d09e25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>abecf3b29410d379101311e5692d433d5</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a4b9bf3d60bcebfc794efb3e9463c8fa8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SpaceInformationPtr</type>
      <name>si_</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>ae40aeef5f330422fe81117bf3039df80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ProblemDefinitionPtr</type>
      <name>pdef_</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a0da5fd5aa172bafe9b3c6ec77ec417bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::PlannerPtr</type>
      <name>planner_</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a1c65fbeb69b22217bbfdd3ec4d7afb9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::PlannerAllocator</type>
      <name>pa_</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a1cf42df203befd44e0d27ea0fa697191</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>configured_</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a07e2cf7b8077d90ae8ce4f6c30a49cd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>planTime_</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>af5402de1220a497b5b1fc901f6452689</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::PlannerStatus</type>
      <name>last_status_</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>ab2b7a088e803ffe120be0bb0e2f9d3b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::SimpleSetupPtr</name>
    <filename>classompl_1_1control_1_1SimpleSetupPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::control::SpaceInformation</name>
    <filename>classompl_1_1control_1_1SpaceInformation.html</filename>
    <base>ompl::base::SpaceInformation</base>
    <member kind="function">
      <type></type>
      <name>SpaceInformation</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a124d7fdd14374f47a3003174e1e651e5</anchor>
      <arglist>(const base::StateSpacePtr &amp;stateSpace, ControlSpacePtr controlSpace)</arglist>
    </member>
    <member kind="function">
      <type>const ControlSpacePtr &amp;</type>
      <name>getControlSpace</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a9d7ac0a63e4b7ab3ed20b78e0dfb4153</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printSettings</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a381807f067fd010cd98b1d9ed94035f0</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a751a2b6c7f36ab5763ee269fb9f48f50</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Control *</type>
      <name>allocControl</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a5624207742ed134bbaf894ad1d5cc9f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeControl</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a8f10754b503dc556677ae319777c68cf</anchor>
      <arglist>(Control *control) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyControl</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>aef008cb189e118d809b2dd5a32650ff5</anchor>
      <arglist>(Control *destination, const Control *source) const</arglist>
    </member>
    <member kind="function">
      <type>Control *</type>
      <name>cloneControl</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a302a772abd7356756089f7b4d4fe16ee</anchor>
      <arglist>(const Control *source) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printControl</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>ab585d145ebc0886be9a4b4ded988994c</anchor>
      <arglist>(const Control *control, std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalControls</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>aac934ebbb9cb71c8088907066d62a907</anchor>
      <arglist>(const Control *control1, const Control *control2) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nullControl</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a3b487d7128d8f6f89cbe5e7ee80b49d1</anchor>
      <arglist>(Control *control) const</arglist>
    </member>
    <member kind="function">
      <type>ControlSamplerPtr</type>
      <name>allocControlSampler</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a6f99bd26e289fb1cc89d99ff0b234910</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinMaxControlDuration</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>add99716475bc660f87e1e459c0e50e27</anchor>
      <arglist>(unsigned int minSteps, unsigned int maxSteps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinControlDuration</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>af5deee6a5cd56947e4296db3cfe465f9</anchor>
      <arglist>(unsigned int minSteps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxControlDuration</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>acf49b204ed6e4acf460ad7b243ef30ec</anchor>
      <arglist>(unsigned int maxSteps)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMinControlDuration</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a52c440563913b6197d12d70a0a8db45f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMaxControlDuration</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>ad70e988c591e7636e84c24618d9d1c6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DirectedControlSamplerPtr</type>
      <name>allocDirectedControlSampler</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a31e8e80c279b150006411f2c25909137</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDirectedControlSamplerAllocator</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>ab70ba4f5a01d80b3ba56b0ad05fd0bd8</anchor>
      <arglist>(const DirectedControlSamplerAllocator &amp;dcsa)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearDirectedSamplerAllocator</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>ad29d60161e2ffd3956c9ee5992a55d38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StatePropagatorPtr &amp;</type>
      <name>getStatePropagator</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>ada47e8e91423541c3c91edfbc8ec15b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStatePropagator</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a701c9be56b69d156708f3f05aa580389</anchor>
      <arglist>(const StatePropagatorFn &amp;fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStatePropagator</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a8c1713628e1d52e2ed74a0c5de6b83a5</anchor>
      <arglist>(const StatePropagatorPtr &amp;sp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPropagationStepSize</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a88a07cf97a3faca60e1b60bf58079cef</anchor>
      <arglist>(double stepSize)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPropagationStepSize</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a74923b2b103f258e273d2f5398d23355</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>propagate</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>ac782275d5da2a32fe7a769b836d60353</anchor>
      <arglist>(const base::State *state, const Control *control, int steps, base::State *result) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canPropagateBackward</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>abd3baaca5129e90713aa9912242f9071</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>propagateWhileValid</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>af3d87a18ce94425b34d49dee6d5f0d98</anchor>
      <arglist>(const base::State *state, const Control *control, int steps, base::State *result) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>propagate</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a64afad5f0a2332ac18ba2fed1446fa2f</anchor>
      <arglist>(const base::State *state, const Control *control, int steps, std::vector&lt; base::State * &gt; &amp;result, bool alloc) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>propagateWhileValid</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a19bb9052369da55d2b8bf112c2abf69b</anchor>
      <arglist>(const base::State *state, const Control *control, int steps, std::vector&lt; base::State * &gt; &amp;result, bool alloc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>declareParams</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>af2cb6a23bd9b9f9e6997761d100b062c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ControlSpacePtr</type>
      <name>controlSpace_</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a8c16336c760f8dc8ce1788b26597e4b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StatePropagatorPtr</type>
      <name>statePropagator_</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>adece5657085df810c3f4383b3ea89120</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>minSteps_</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a3f6e0db4e2931d756e134e7c7cdbb7c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxSteps_</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>ac07df9763e12abc1d0a0a1826076b2c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DirectedControlSamplerAllocator</type>
      <name>dcsa_</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a51855ba14510bace703e73617c47ac2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>stepSize_</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>aee74d445451a7229524f76c0ad2b0ef7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Control *</type>
      <name>allocControl</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a5624207742ed134bbaf894ad1d5cc9f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeControl</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a8f10754b503dc556677ae319777c68cf</anchor>
      <arglist>(Control *control) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyControl</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>aef008cb189e118d809b2dd5a32650ff5</anchor>
      <arglist>(Control *destination, const Control *source) const</arglist>
    </member>
    <member kind="function">
      <type>Control *</type>
      <name>cloneControl</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a302a772abd7356756089f7b4d4fe16ee</anchor>
      <arglist>(const Control *source) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printControl</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>ab585d145ebc0886be9a4b4ded988994c</anchor>
      <arglist>(const Control *control, std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalControls</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>aac934ebbb9cb71c8088907066d62a907</anchor>
      <arglist>(const Control *control1, const Control *control2) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nullControl</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a3b487d7128d8f6f89cbe5e7ee80b49d1</anchor>
      <arglist>(Control *control) const</arglist>
    </member>
    <member kind="function">
      <type>ControlSamplerPtr</type>
      <name>allocControlSampler</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a6f99bd26e289fb1cc89d99ff0b234910</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinMaxControlDuration</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>add99716475bc660f87e1e459c0e50e27</anchor>
      <arglist>(unsigned int minSteps, unsigned int maxSteps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinControlDuration</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>af5deee6a5cd56947e4296db3cfe465f9</anchor>
      <arglist>(unsigned int minSteps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxControlDuration</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>acf49b204ed6e4acf460ad7b243ef30ec</anchor>
      <arglist>(unsigned int maxSteps)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMinControlDuration</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a52c440563913b6197d12d70a0a8db45f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMaxControlDuration</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>ad70e988c591e7636e84c24618d9d1c6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DirectedControlSamplerPtr</type>
      <name>allocDirectedControlSampler</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a31e8e80c279b150006411f2c25909137</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDirectedControlSamplerAllocator</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>ab70ba4f5a01d80b3ba56b0ad05fd0bd8</anchor>
      <arglist>(const DirectedControlSamplerAllocator &amp;dcsa)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearDirectedSamplerAllocator</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>ad29d60161e2ffd3956c9ee5992a55d38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StatePropagatorPtr &amp;</type>
      <name>getStatePropagator</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>ada47e8e91423541c3c91edfbc8ec15b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStatePropagator</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a701c9be56b69d156708f3f05aa580389</anchor>
      <arglist>(const StatePropagatorFn &amp;fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStatePropagator</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a8c1713628e1d52e2ed74a0c5de6b83a5</anchor>
      <arglist>(const StatePropagatorPtr &amp;sp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPropagationStepSize</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a88a07cf97a3faca60e1b60bf58079cef</anchor>
      <arglist>(double stepSize)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPropagationStepSize</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a74923b2b103f258e273d2f5398d23355</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>propagate</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>ac782275d5da2a32fe7a769b836d60353</anchor>
      <arglist>(const base::State *state, const Control *control, int steps, base::State *result) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canPropagateBackward</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>abd3baaca5129e90713aa9912242f9071</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>propagateWhileValid</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>af3d87a18ce94425b34d49dee6d5f0d98</anchor>
      <arglist>(const base::State *state, const Control *control, int steps, base::State *result) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>propagate</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a64afad5f0a2332ac18ba2fed1446fa2f</anchor>
      <arglist>(const base::State *state, const Control *control, int steps, std::vector&lt; base::State * &gt; &amp;result, bool alloc) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>propagateWhileValid</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a19bb9052369da55d2b8bf112c2abf69b</anchor>
      <arglist>(const base::State *state, const Control *control, int steps, std::vector&lt; base::State * &gt; &amp;result, bool alloc) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::SpaceInformationPtr</name>
    <filename>classompl_1_1control_1_1SpaceInformationPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::control::SST</name>
    <filename>classompl_1_1control_1_1SST.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::control::SST::Motion</class>
    <class kind="class">ompl::control::SST::Witness</class>
    <member kind="function">
      <type></type>
      <name>SST</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>a48716b0beb7b2959455012adf49918dc</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>a6d931931943b8d65c82be1d41f12e6aa</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>a7ad6a3822c17c0f32e2b2671d67301c7</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>a17e6abf9b82e63015fb461af6254415f</anchor>
      <arglist>(base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>af7a579d79b99df7e3e3d0b76b485e7f2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalBias</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>a101933772a3bd16e4c9861ac354d802c</anchor>
      <arglist>(double goalBias)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoalBias</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>a6002456820e29ab286b28ac12c0e25c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSelectionRadius</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>a1977e33638fede3ccca649cb611fed3f</anchor>
      <arglist>(double selectionRadius)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSelectionRadius</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>a9a3ee4f0d2f9b6c0ac0e0dd8290ee32e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPruningRadius</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>ad66558f8fc3d755062ff4cf2fc6c09e1</anchor>
      <arglist>(double pruningRadius)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPruningRadius</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>ad0b996d28f617adf6b5c236c12ba61cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>ad496ff4d4c1f9ca50c10ed0a16121d8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Motion *</type>
      <name>selectNode</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>a99c97b6a3f93616e25bd80334f3a10a2</anchor>
      <arglist>(Motion *sample)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Witness *</type>
      <name>findClosestWitness</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>afa4ac6e3905ce0469fd746195f1ab30b</anchor>
      <arglist>(Motion *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>a6c303ab5767fe4ea7597905b13c8e575</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>a95a7a56df1300f2252b968a8921de742</anchor>
      <arglist>(const Motion *a, const Motion *b) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>a3c0400c77a95e1ee6cfbe6b77a2746d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ControlSamplerPtr</type>
      <name>controlSampler_</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>a0ac4c4841497b25d444567ba136c5e2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const SpaceInformation *</type>
      <name>siC_</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>a934475e7a99052ba16b0df40a347b3d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Motion * &gt; &gt;</type>
      <name>nn_</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>ab3d8a2f714286d64f525929c2d23f8d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Motion * &gt; &gt;</type>
      <name>witnesses_</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>abdd9186759a56d0a2bf285f18cb300b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>goalBias_</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>a8fa28ef1145df8ae7c4db706638d8fe3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>selectionRadius_</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>a6e9dafb48ffb89d03a7bbcf8fb50f6ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>pruningRadius_</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>a72e1337d7b42cade044bbfb1c3f9accf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>a105f98e9ee8b39a1199c49483555bf7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; base::State * &gt;</type>
      <name>prevSolution_</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>adc56a3bb77209d72a63773e11632297a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::Cost</type>
      <name>prevSolutionCost_</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>a80dc72f2a643e07afb446d79ae38459b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::OptimizationObjectivePtr</type>
      <name>opt_</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>ab60239e1980a6e3d0537894389fb8eb5</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1control_1_1SST.html">cSST</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::control::SST::Motion</name>
    <filename>classompl_1_1control_1_1SST_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1control_1_1SST_1_1Motion.html</anchorfile>
      <anchor>ab731029e9900e2b9043660b4e23cac56</anchor>
      <arglist>(const SpaceInformation *si)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state_</name>
      <anchorfile>classompl_1_1control_1_1SST_1_1Motion.html</anchorfile>
      <anchor>a076543633f5d3f6ef9fdc7cf63fe2df9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Control *</type>
      <name>control_</name>
      <anchorfile>classompl_1_1control_1_1SST_1_1Motion.html</anchorfile>
      <anchor>acbcc72d714fe1bfdb8cdb90096e4dd8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>steps_</name>
      <anchorfile>classompl_1_1control_1_1SST_1_1Motion.html</anchorfile>
      <anchor>aecc14346ec30552bd2292b3aee462b02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent_</name>
      <anchorfile>classompl_1_1control_1_1SST_1_1Motion.html</anchorfile>
      <anchor>af22f9b1736958e8050ee482e94d8159d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>numChildren_</name>
      <anchorfile>classompl_1_1control_1_1SST_1_1Motion.html</anchorfile>
      <anchor>aaa1f00f1960990e86b1a19384794cc35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>inactive_</name>
      <anchorfile>classompl_1_1control_1_1SST_1_1Motion.html</anchorfile>
      <anchor>af238c8dd0e25818084996473e7ddcc6d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::SST::Witness</name>
    <filename>classompl_1_1control_1_1SST_1_1Witness.html</filename>
    <base>ompl::control::SST::Motion</base>
    <member kind="variable">
      <type>Motion *</type>
      <name>rep_</name>
      <anchorfile>classompl_1_1control_1_1SST_1_1Witness.html</anchorfile>
      <anchor>ae071df2832c6a7187239e1191692969d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::StatePropagator</name>
    <filename>classompl_1_1control_1_1StatePropagator.html</filename>
    <member kind="function">
      <type></type>
      <name>StatePropagator</name>
      <anchorfile>classompl_1_1control_1_1StatePropagator.html</anchorfile>
      <anchor>a53dff01b0f6a8fe74591f79eecb5a1b0</anchor>
      <arglist>(SpaceInformation *si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StatePropagator</name>
      <anchorfile>classompl_1_1control_1_1StatePropagator.html</anchorfile>
      <anchor>a983b7f976166c2369c76c2332f585eb9</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>propagate</name>
      <anchorfile>classompl_1_1control_1_1StatePropagator.html</anchorfile>
      <anchor>a4bf54becfce458e1e8abfa4a37ae8dff</anchor>
      <arglist>(const base::State *state, const Control *control, double duration, base::State *result) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canPropagateBackward</name>
      <anchorfile>classompl_1_1control_1_1StatePropagator.html</anchorfile>
      <anchor>ad624aaa0ca5b9254fa4c9e0ac0da8aa3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>steer</name>
      <anchorfile>classompl_1_1control_1_1StatePropagator.html</anchorfile>
      <anchor>acc52d20ab1da84b020aa3dbe5579769e</anchor>
      <arglist>(const base::State *, const base::State *, Control *, double &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canSteer</name>
      <anchorfile>classompl_1_1control_1_1StatePropagator.html</anchorfile>
      <anchor>adec7afc666eee8c3d7b09646d5644087</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SpaceInformation *</type>
      <name>si_</name>
      <anchorfile>classompl_1_1control_1_1StatePropagator.html</anchorfile>
      <anchor>a4458a51bcf9ee437fc6bb2d23cca40d1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::SteeredControlSampler</name>
    <filename>classompl_1_1control_1_1SteeredControlSampler.html</filename>
    <base>ompl::control::DirectedControlSampler</base>
    <member kind="function">
      <type></type>
      <name>SteeredControlSampler</name>
      <anchorfile>classompl_1_1control_1_1SteeredControlSampler.html</anchorfile>
      <anchor>aef5e606c4cb425c9da8389e9493552c4</anchor>
      <arglist>(const SpaceInformation *si)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>sampleTo</name>
      <anchorfile>classompl_1_1control_1_1SteeredControlSampler.html</anchorfile>
      <anchor>a53f0e51e4343ec8d8ef05c5dc43e01bc</anchor>
      <arglist>(Control *control, const base::State *source, base::State *dest) override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>sampleTo</name>
      <anchorfile>classompl_1_1control_1_1SteeredControlSampler.html</anchorfile>
      <anchor>a19a2e96bc46b0bf51125b162cc44665c</anchor>
      <arglist>(Control *control, const Control *, const base::State *source, base::State *dest) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::Syclop</name>
    <filename>classompl_1_1control_1_1Syclop.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::control::Syclop::Adjacency</class>
    <class kind="struct">ompl::control::Syclop::Defaults</class>
    <class kind="class">ompl::control::Syclop::Motion</class>
    <class kind="class">ompl::control::Syclop::Region</class>
    <member kind="typedef">
      <type>std::function&lt; double(int, int)&gt;</type>
      <name>EdgeCostFactorFn</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a62c438ceec228c2568c5805fada7954b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(int, int, std::vector&lt; int &gt; &amp;)&gt;</type>
      <name>LeadComputeFn</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>ad5bc689a88070926bc09a114a7a9afab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Syclop</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a6b617c719e3be7a41fcef24b1a615214</anchor>
      <arglist>(const SpaceInformationPtr &amp;si, DecompositionPtr d, const std::string &amp;plannerName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a0e7a1b98e2344668c99d7afba94154db</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a6460e8f08fbd5d160426f16ce93c962a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>af3111a07ff865174cf46d8acf5537e11</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLeadComputeFn</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>aea58c8ca3a6ac54a9ad27b2e2e8ab5d8</anchor>
      <arglist>(const LeadComputeFn &amp;compute)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEdgeCostFactor</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a6bf4663e4fbc674d330ce1b71f88d484</anchor>
      <arglist>(const EdgeCostFactorFn &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearEdgeCostFactors</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a6b50f7c0ccd5c11a31f73f29b7b44a45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumFreeVolumeSamples</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>aa27e85d0950148b40d80c4e4eab14451</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumFreeVolumeSamples</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a3137638571714face5406a83421c8f0a</anchor>
      <arglist>(int numSamples)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getProbShortestPathLead</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>aac9b681f294394155888dadca16cf694</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProbShortestPathLead</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a441ac35fa1923d3c6c78d13d03eeff56</anchor>
      <arglist>(double probability)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getProbAddingToAvailableRegions</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a7fe5cac6092f6af1c5673da99d1ce9f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProbAddingToAvailableRegions</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>aa7db5af2e525007068bf9d387c980194</anchor>
      <arglist>(double probability)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumRegionExpansions</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>afab8fe4bbc48eae215cc2d5310c82fb3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumRegionExpansions</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>aacd3f945a23cf0564cae132c7d8cbe88</anchor>
      <arglist>(int regionExpansions)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTreeExpansions</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>ad27e11df4334dcb2b974d4eb768d7e16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumTreeExpansions</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a2390834194d6a2ca720d5d5b3678500f</anchor>
      <arglist>(int treeExpansions)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getProbAbandonLeadEarly</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a23009569d4c9694bcb9b589c1f748406</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProbAbandonLeadEarly</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>ae2a7e44e886dff1b48f626e6aabb57a6</anchor>
      <arglist>(double probability)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual Motion *</type>
      <name>addRoot</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a3c2cd9b1827418a0064eb7d5a7aa6435</anchor>
      <arglist>(const base::State *s)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>selectAndExtend</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a6a079c078fda34de8342b573ac0475fc</anchor>
      <arglist>(Region &amp;region, std::vector&lt; Motion * &gt; &amp;newMotions)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Region &amp;</type>
      <name>getRegionFromIndex</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a69e71bc7fc2d9de03c977a81c78b7e26</anchor>
      <arglist>(const int rid) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numFreeVolSamples_</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>aea90b6750343b06ee23906f13cf95bc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>probShortestPath_</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a6538062ba65fe1f003d10f19abe99717</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>probKeepAddingToAvail_</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a65109c2475eaf3cb29dd904f863dd1f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numRegionExpansions_</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>abd499bf21f57c342b539b10c65aaaad1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numTreeSelections_</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a7b94f7e024b811555a11da15efaf15a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>probAbandonLeadEarly_</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>aa0c97a2d04b3d9552bdff1575ef7d27a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const SpaceInformation *</type>
      <name>siC_</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a377d79970aab57a05c9b8630aab4e21a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DecompositionPtr</type>
      <name>decomp_</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>af088dc8660099abca33984025e4e40fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>acf70200cbbbc2955d3569e7151c51b2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a0e7a1b98e2344668c99d7afba94154db</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a6460e8f08fbd5d160426f16ce93c962a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>af3111a07ff865174cf46d8acf5537e11</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLeadComputeFn</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>aea58c8ca3a6ac54a9ad27b2e2e8ab5d8</anchor>
      <arglist>(const LeadComputeFn &amp;compute)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEdgeCostFactor</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a6bf4663e4fbc674d330ce1b71f88d484</anchor>
      <arglist>(const EdgeCostFactorFn &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearEdgeCostFactors</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a6b50f7c0ccd5c11a31f73f29b7b44a45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumFreeVolumeSamples</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>aa27e85d0950148b40d80c4e4eab14451</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumFreeVolumeSamples</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a3137638571714face5406a83421c8f0a</anchor>
      <arglist>(int numSamples)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getProbShortestPathLead</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>aac9b681f294394155888dadca16cf694</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProbShortestPathLead</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a441ac35fa1923d3c6c78d13d03eeff56</anchor>
      <arglist>(double probability)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getProbAddingToAvailableRegions</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a7fe5cac6092f6af1c5673da99d1ce9f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProbAddingToAvailableRegions</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>aa7db5af2e525007068bf9d387c980194</anchor>
      <arglist>(double probability)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumRegionExpansions</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>afab8fe4bbc48eae215cc2d5310c82fb3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumRegionExpansions</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>aacd3f945a23cf0564cae132c7d8cbe88</anchor>
      <arglist>(int regionExpansions)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTreeExpansions</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>ad27e11df4334dcb2b974d4eb768d7e16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumTreeExpansions</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a2390834194d6a2ca720d5d5b3678500f</anchor>
      <arglist>(int treeExpansions)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getProbAbandonLeadEarly</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a23009569d4c9694bcb9b589c1f748406</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProbAbandonLeadEarly</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>ae2a7e44e886dff1b48f626e6aabb57a6</anchor>
      <arglist>(double probability)</arglist>
    </member>
    <docanchor file="classompl_1_1control_1_1Syclop.html">cSyclop</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::control::Syclop::Adjacency</name>
    <filename>classompl_1_1control_1_1Syclop_1_1Adjacency.html</filename>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Adjacency.html</anchorfile>
      <anchor>adf14d28fc72bcfcdc36469ca1b2cc2d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::set&lt; int &gt;</type>
      <name>covGridCells</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Adjacency.html</anchorfile>
      <anchor>a317b65ecba780aaa2175ffeb40323a4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Region *</type>
      <name>source</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Adjacency.html</anchorfile>
      <anchor>ac2f8c2bda9947a4dc04415e7bc4ef6c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Region *</type>
      <name>target</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Adjacency.html</anchorfile>
      <anchor>a6eb92575d383c337a7d8e7d0e81ab9bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>cost</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Adjacency.html</anchorfile>
      <anchor>ac0fd340e1d70ac712418e6d70d00c073</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numLeadInclusions</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Adjacency.html</anchorfile>
      <anchor>aa4d4a45ce752700a17b2b94a2324ff7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numSelections</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Adjacency.html</anchorfile>
      <anchor>acbda37c9d6a5f141649ca39491dce1ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Adjacency.html</anchorfile>
      <anchor>a7f8426944737b32a9bb79519a058317c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::control::Syclop::Defaults</name>
    <filename>structompl_1_1control_1_1Syclop_1_1Defaults.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::control::Syclop::Motion</name>
    <filename>classompl_1_1control_1_1Syclop_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Motion.html</anchorfile>
      <anchor>a3c8d8228942cf1ed18dd78c39bbc4925</anchor>
      <arglist>(const SpaceInformation *si)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Motion.html</anchorfile>
      <anchor>a82bc505a7cb4712f0730444474434c34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Control *</type>
      <name>control</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Motion.html</anchorfile>
      <anchor>a94c8e4e3f3dee52c25a5256a2a20b21a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Motion *</type>
      <name>parent</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Motion.html</anchorfile>
      <anchor>a6921b51db240b5ffaf30bdbdfdbd1ead</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>steps</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Motion.html</anchorfile>
      <anchor>a1d5bdc499fbbe214c283769241bef95d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::Syclop::Region</name>
    <filename>classompl_1_1control_1_1Syclop_1_1Region.html</filename>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Region.html</anchorfile>
      <anchor>a054176616d7891c5674c774814683720</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::set&lt; int &gt;</type>
      <name>covGridCells</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Region.html</anchorfile>
      <anchor>a0a51e0ca6e451304096a41151b6105f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Motion * &gt;</type>
      <name>motions</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Region.html</anchorfile>
      <anchor>a06343cd4e7bf85758f66c73cb639d37e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>volume</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Region.html</anchorfile>
      <anchor>a028b8d9aa311613785241e33f5fffb1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>freeVolume</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Region.html</anchorfile>
      <anchor>ac38dd3b4df37da3ed7ca4c546114585c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>percentValidCells</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Region.html</anchorfile>
      <anchor>a0369d01b105c4f7e3cdbfe7573e93e24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>weight</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Region.html</anchorfile>
      <anchor>a986ac16be96359e2bae2f181eedc657f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>alpha</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Region.html</anchorfile>
      <anchor>a7e9f27d6279b8d7c892a015bc2608d03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>index</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Region.html</anchorfile>
      <anchor>ae02ddca454aad1a9d62a57cf77615012</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>numSelections</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Region.html</anchorfile>
      <anchor>aab314ecd96233f7287ffec1c66c96e43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PDF&lt; int &gt;::Element *</type>
      <name>pdfElem</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Region.html</anchorfile>
      <anchor>a20eb39322810e547afdac129084398ff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::SyclopEST</name>
    <filename>classompl_1_1control_1_1SyclopEST.html</filename>
    <base>ompl::control::Syclop</base>
    <member kind="function">
      <type></type>
      <name>SyclopEST</name>
      <anchorfile>classompl_1_1control_1_1SyclopEST.html</anchorfile>
      <anchor>ac1c59c7e6c9b3607c5490187e156dbb3</anchor>
      <arglist>(const SpaceInformationPtr &amp;si, const DecompositionPtr &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1control_1_1SyclopEST.html</anchorfile>
      <anchor>acde7dc0c68c31f1f6255c5957029e353</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1control_1_1SyclopEST.html</anchorfile>
      <anchor>acf9aceab93355c104641fb29c31235d8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1control_1_1SyclopEST.html</anchorfile>
      <anchor>a6848fe2eb6b4d0aa96d6303bc344af6b</anchor>
      <arglist>(base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Syclop::Motion *</type>
      <name>addRoot</name>
      <anchorfile>classompl_1_1control_1_1SyclopEST.html</anchorfile>
      <anchor>a92a3a86bb69589d33ee0ba1ed47d8cc7</anchor>
      <arglist>(const base::State *s) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>selectAndExtend</name>
      <anchorfile>classompl_1_1control_1_1SyclopEST.html</anchorfile>
      <anchor>a27723b1e77a25f650a7cca836c723937</anchor>
      <arglist>(Region &amp;region, std::vector&lt; Motion * &gt; &amp;newMotions) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1control_1_1SyclopEST.html</anchorfile>
      <anchor>a32846f1c94f988dd7402a2821518f677</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>lastGoalMotion_</name>
      <anchorfile>classompl_1_1control_1_1SyclopEST.html</anchorfile>
      <anchor>a747796199659bbb54b733df59fce5943</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="/Users/mmoll/omplapp/ompl/src/ompl/control/planners/syclop/SyclopEST.h">cSyclopEST</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::control::SyclopRRT</name>
    <filename>classompl_1_1control_1_1SyclopRRT.html</filename>
    <base>ompl::control::Syclop</base>
    <member kind="function">
      <type></type>
      <name>SyclopRRT</name>
      <anchorfile>classompl_1_1control_1_1SyclopRRT.html</anchorfile>
      <anchor>ad559b223d09d0791895d3c3b82104299</anchor>
      <arglist>(const SpaceInformationPtr &amp;si, const DecompositionPtr &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1control_1_1SyclopRRT.html</anchorfile>
      <anchor>ad8842a9acc5614ab59103c4a3adb1a51</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1control_1_1SyclopRRT.html</anchorfile>
      <anchor>a3dcdce6a1c875a32b05302ce498a46af</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1control_1_1SyclopRRT.html</anchorfile>
      <anchor>a084fc687d5454b9c9f2c102c962f53ee</anchor>
      <arglist>(base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRegionalNearestNeighbors</name>
      <anchorfile>classompl_1_1control_1_1SyclopRRT.html</anchorfile>
      <anchor>ae0bce3ff08c564942a04ccc104a645e1</anchor>
      <arglist>(bool enabled)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>classompl_1_1control_1_1SyclopRRT.html</anchorfile>
      <anchor>a15fcc0c4e91a6b6c796c18a5e9d12f84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Syclop::Motion *</type>
      <name>addRoot</name>
      <anchorfile>classompl_1_1control_1_1SyclopRRT.html</anchorfile>
      <anchor>aac9dd1f00639081d74234c26b65faa4d</anchor>
      <arglist>(const base::State *s) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>selectAndExtend</name>
      <anchorfile>classompl_1_1control_1_1SyclopRRT.html</anchorfile>
      <anchor>a453083a65bf2bc48517413e6cb1ef83b</anchor>
      <arglist>(Region &amp;region, std::vector&lt; Motion * &gt; &amp;newMotions) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1control_1_1SyclopRRT.html</anchorfile>
      <anchor>afe0b04d9e1b9cb80e77afa11647de5a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1control_1_1SyclopRRT.html</anchorfile>
      <anchor>acd16973619b4a2d64f996ca1addf50a1</anchor>
      <arglist>(const Motion *a, const Motion *b) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>lastGoalMotion_</name>
      <anchorfile>classompl_1_1control_1_1SyclopRRT.html</anchorfile>
      <anchor>a0bb7f61c9bca43a0a5124a0660c75f7c</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="/Users/mmoll/omplapp/ompl/src/ompl/control/planners/syclop/SyclopRRT.h">cSyclopRRT</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::control::TriangularDecomposition</name>
    <filename>classompl_1_1control_1_1TriangularDecomposition.html</filename>
    <base>ompl::control::Decomposition</base>
    <class kind="struct">ompl::control::TriangularDecomposition::Polygon</class>
    <class kind="struct">ompl::control::TriangularDecomposition::Triangle</class>
    <class kind="struct">ompl::control::TriangularDecomposition::Vertex</class>
    <member kind="function">
      <type></type>
      <name>TriangularDecomposition</name>
      <anchorfile>classompl_1_1control_1_1TriangularDecomposition.html</anchorfile>
      <anchor>a1e026dcf174fde5543096d545257a668</anchor>
      <arglist>(const base::RealVectorBounds &amp;bounds, std::vector&lt; Polygon &gt; holes=std::vector&lt; Polygon &gt;(), std::vector&lt; Polygon &gt; intRegs=std::vector&lt; Polygon &gt;())</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumRegions</name>
      <anchorfile>classompl_1_1control_1_1TriangularDecomposition.html</anchorfile>
      <anchor>a9be5f27cc05538bd4e7d67d4ae931302</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRegionVolume</name>
      <anchorfile>classompl_1_1control_1_1TriangularDecomposition.html</anchorfile>
      <anchor>a82e06b8cca06c66f69e6a8ca5e84e3db</anchor>
      <arglist>(int triID) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getNeighbors</name>
      <anchorfile>classompl_1_1control_1_1TriangularDecomposition.html</anchorfile>
      <anchor>a7af06af5eef9a49d0bd2b7a466ebbc6a</anchor>
      <arglist>(int triID, std::vector&lt; int &gt; &amp;neighbors) const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>locateRegion</name>
      <anchorfile>classompl_1_1control_1_1TriangularDecomposition.html</anchorfile>
      <anchor>a52ebddeaa08bc4e61de123d043b5089c</anchor>
      <arglist>(const base::State *s) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleFromRegion</name>
      <anchorfile>classompl_1_1control_1_1TriangularDecomposition.html</anchorfile>
      <anchor>a7aa89d7b34f9b73a72fac2e0c4f7b95b</anchor>
      <arglist>(int triID, RNG &amp;rng, std::vector&lt; double &gt; &amp;coord) const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRegionOfInterestAt</name>
      <anchorfile>classompl_1_1control_1_1TriangularDecomposition.html</anchorfile>
      <anchor>a77fa65e06ccf65b6fdab449d966388a4</anchor>
      <arglist>(int triID) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>createTriangles</name>
      <anchorfile>classompl_1_1control_1_1TriangularDecomposition.html</anchorfile>
      <anchor>a56d507dad4636ad8d8b46c0cc797ef10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>intRegInfo_</name>
      <anchorfile>classompl_1_1control_1_1TriangularDecomposition.html</anchorfile>
      <anchor>a7796fd4dd2cf0a397dde77f09d32bfc4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::control::TriangularDecomposition::Polygon</name>
    <filename>structompl_1_1control_1_1TriangularDecomposition_1_1Polygon.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::control::TriangularDecomposition::Triangle</name>
    <filename>structompl_1_1control_1_1TriangularDecomposition_1_1Triangle.html</filename>
    <base>ompl::control::TriangularDecomposition::Polygon</base>
  </compound>
  <compound kind="struct">
    <name>ompl::control::TriangularDecomposition::Vertex</name>
    <filename>structompl_1_1control_1_1TriangularDecomposition_1_1Vertex.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::control::World</name>
    <filename>classompl_1_1control_1_1World.html</filename>
    <member kind="function">
      <type></type>
      <name>World</name>
      <anchorfile>classompl_1_1control_1_1World.html</anchorfile>
      <anchor>a4fff35692311bf030af2fdd52132c2f5</anchor>
      <arglist>(unsigned int numProps)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1control_1_1World.html</anchorfile>
      <anchor>a5f414d16785b3903faf4196957bc7f69</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>bool &amp;</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1control_1_1World.html</anchorfile>
      <anchor>ac8a6972f16a760dde67aaf87cac8374d</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numProps</name>
      <anchorfile>classompl_1_1control_1_1World.html</anchorfile>
      <anchor>a43737553bc207a13bc00b1a80688651a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfies</name>
      <anchorfile>classompl_1_1control_1_1World.html</anchorfile>
      <anchor>a089b584d501b104a14e942d9524c07a6</anchor>
      <arglist>(const World &amp;w) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>formula</name>
      <anchorfile>classompl_1_1control_1_1World.html</anchorfile>
      <anchor>a651b583ffb55b7bd6dc6c076fa7ecad2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::unordered_map&lt; unsigned int, bool &gt; &amp;</type>
      <name>props</name>
      <anchorfile>classompl_1_1control_1_1World.html</anchorfile>
      <anchor>a9a040abe41ee5b5de4a17d5c29c481ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classompl_1_1control_1_1World.html</anchorfile>
      <anchor>a4aa97025b7f7e5a861a95c6f515ccce2</anchor>
      <arglist>(const World &amp;w) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1control_1_1World.html</anchorfile>
      <anchor>aa547ce92e3f94e71a807d70c9c5b3fc9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::DynamicSSSP</name>
    <filename>classompl_1_1DynamicSSSP.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::Exception</name>
    <filename>classompl_1_1Exception.html</filename>
    <member kind="function">
      <type></type>
      <name>Exception</name>
      <anchorfile>classompl_1_1Exception.html</anchorfile>
      <anchor>a05c4147e7f0bc1e3c1e0993eddabb4bf</anchor>
      <arglist>(const std::string &amp;what)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Exception</name>
      <anchorfile>classompl_1_1Exception.html</anchorfile>
      <anchor>a620e4fbe0b159178830ec27b7ef34ff8</anchor>
      <arglist>(const std::string &amp;prefix, const std::string &amp;what)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::FLANNDistance</name>
    <filename>classompl_1_1FLANNDistance.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::ABITstar</name>
    <filename>classompl_1_1geometric_1_1ABITstar.html</filename>
    <base>ompl::geometric::BITstar</base>
    <member kind="function">
      <type>void</type>
      <name>setInitialInflationFactor</name>
      <anchorfile>classompl_1_1geometric_1_1ABITstar.html</anchorfile>
      <anchor>a3345469c48c49dc44a8a5caa825d5d52</anchor>
      <arglist>(double factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInflationScalingParameter</name>
      <anchorfile>classompl_1_1geometric_1_1ABITstar.html</anchorfile>
      <anchor>af051fb2c65aa866a21d2b39ca94c953c</anchor>
      <arglist>(double parameter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTruncationScalingParameter</name>
      <anchorfile>classompl_1_1geometric_1_1ABITstar.html</anchorfile>
      <anchor>aee8e33099628f3c545c4a5297cc22241</anchor>
      <arglist>(double parameter)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getInitialInflationFactor</name>
      <anchorfile>classompl_1_1geometric_1_1ABITstar.html</anchorfile>
      <anchor>ae6eaaff72162696468e0fc7e12f153e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getInflationScalingParameter</name>
      <anchorfile>classompl_1_1geometric_1_1ABITstar.html</anchorfile>
      <anchor>a20dc5dc1fed1c28c9af1c7cb195e1c8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTruncationScalingParameter</name>
      <anchorfile>classompl_1_1geometric_1_1ABITstar.html</anchorfile>
      <anchor>a8be1939c014259845ed7d562740aa437</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCurrentInflationFactor</name>
      <anchorfile>classompl_1_1geometric_1_1ABITstar.html</anchorfile>
      <anchor>a032159d2453a27f69c50a551ad870b26</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCurrentTruncationFactor</name>
      <anchorfile>classompl_1_1geometric_1_1ABITstar.html</anchorfile>
      <anchor>a1d10d4e9a2da2f27b3aac131a413b1c0</anchor>
      <arglist>() const</arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1ABITstar.html">gABITstar</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::AITstar</name>
    <filename>classompl_1_1geometric_1_1AITstar.html</filename>
    <base>ompl::base::Planner</base>
    <member kind="function">
      <type></type>
      <name>AITstar</name>
      <anchorfile>classompl_1_1geometric_1_1AITstar.html</anchorfile>
      <anchor>a8ca34113a338e6392e59143c7e8d2948</anchor>
      <arglist>(const ompl::base::SpaceInformationPtr &amp;spaceInformation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AITstar</name>
      <anchorfile>classompl_1_1geometric_1_1AITstar.html</anchorfile>
      <anchor>a28d6afe9fa6bf65319bd1e0d4145d543</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1AITstar.html</anchorfile>
      <anchor>ac0e524e03c585a05b18a2531728d9f6c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1AITstar.html</anchorfile>
      <anchor>ae643581d03d47232d4e62e97c5131818</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1AITstar.html</anchorfile>
      <anchor>ac26877517bb669d691514312ea2cd276</anchor>
      <arglist>(const ompl::base::PlannerTerminationCondition &amp;terminationCondition) override</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::Cost</type>
      <name>bestCost</name>
      <anchorfile>classompl_1_1geometric_1_1AITstar.html</anchorfile>
      <anchor>a6ad2d569af889b260c80b49718def2ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1AITstar.html</anchorfile>
      <anchor>aa063eaa8232ae1e10c08d35f35399169</anchor>
      <arglist>(base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBatchSize</name>
      <anchorfile>classompl_1_1geometric_1_1AITstar.html</anchorfile>
      <anchor>a5a06e51a4463f03fb76193510b075b1e</anchor>
      <arglist>(std::size_t batchSize)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getBatchSize</name>
      <anchorfile>classompl_1_1geometric_1_1AITstar.html</anchorfile>
      <anchor>af92037c77c4fb206e985bcd2213c0b41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRewireFactor</name>
      <anchorfile>classompl_1_1geometric_1_1AITstar.html</anchorfile>
      <anchor>a54196b5b1aaa96ffb84e603627d6b906</anchor>
      <arglist>(double rewireFactor)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRewireFactor</name>
      <anchorfile>classompl_1_1geometric_1_1AITstar.html</anchorfile>
      <anchor>a41ce1b84ebe1427a927c8b558a7026e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trackApproximateSolutions</name>
      <anchorfile>classompl_1_1geometric_1_1AITstar.html</anchorfile>
      <anchor>ad94c30d8d6eb05822c5b9bda53beb105</anchor>
      <arglist>(bool track)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>areApproximateSolutionsTracked</name>
      <anchorfile>classompl_1_1geometric_1_1AITstar.html</anchorfile>
      <anchor>aff79dbc4d9887857a902a317059a5f0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enablePruning</name>
      <anchorfile>classompl_1_1geometric_1_1AITstar.html</anchorfile>
      <anchor>a1d0819970bc1e94e3a2cb85d7c230e85</anchor>
      <arglist>(bool prune)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPruningEnabled</name>
      <anchorfile>classompl_1_1geometric_1_1AITstar.html</anchorfile>
      <anchor>a47dc57bc1044ddfada50236b6e3851bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseKNearest</name>
      <anchorfile>classompl_1_1geometric_1_1AITstar.html</anchorfile>
      <anchor>adcc75681a6aa1ef5e1e5ac6e8f172fd6</anchor>
      <arglist>(bool useKNearest)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUseKNearest</name>
      <anchorfile>classompl_1_1geometric_1_1AITstar.html</anchorfile>
      <anchor>a97a8e248dab17309cd028bdcf2fe065d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRepairReverseSearch</name>
      <anchorfile>classompl_1_1geometric_1_1AITstar.html</anchorfile>
      <anchor>ab5ab579d0ddb1afed10d661f24f9cf14</anchor>
      <arglist>(bool repairReverseSearch)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; aitstar::Edge &gt;</type>
      <name>getEdgesInQueue</name>
      <anchorfile>classompl_1_1geometric_1_1AITstar.html</anchorfile>
      <anchor>a17eceec4dc811b6fb865484a8284c241</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::shared_ptr&lt; aitstar::Vertex &gt; &gt;</type>
      <name>getVerticesInQueue</name>
      <anchorfile>classompl_1_1geometric_1_1AITstar.html</anchorfile>
      <anchor>a0603a723281f85b9a056b28a54faa165</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>aitstar::Edge</type>
      <name>getNextEdgeInQueue</name>
      <anchorfile>classompl_1_1geometric_1_1AITstar.html</anchorfile>
      <anchor>a3ebae00f6ae4ce840aba95a50d90c90d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; aitstar::Vertex &gt;</type>
      <name>getNextVertexInQueue</name>
      <anchorfile>classompl_1_1geometric_1_1AITstar.html</anchorfile>
      <anchor>ab9b5d182c8fbdb7ce1eddbb73816d120</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::shared_ptr&lt; aitstar::Vertex &gt; &gt;</type>
      <name>getVerticesInReverseSearchTree</name>
      <anchorfile>classompl_1_1geometric_1_1AITstar.html</anchorfile>
      <anchor>a578a14c4ee67bd192efefb6226e41164</anchor>
      <arglist>() const</arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1AITstar.html">gAITstar</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::aitstar::Edge</name>
    <filename>classompl_1_1geometric_1_1aitstar_1_1Edge.html</filename>
    <member kind="function">
      <type></type>
      <name>Edge</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Edge.html</anchorfile>
      <anchor>ae999651ec55833b645a2505fa3c9b9b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Edge</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Edge.html</anchorfile>
      <anchor>a854ad8d576ac710aa4c719875d7e60fa</anchor>
      <arglist>(const std::shared_ptr&lt; Vertex &gt; &amp;parent, const std::shared_ptr&lt; Vertex &gt; &amp;child, const std::array&lt; ompl::base::Cost, 3u &gt; &amp;sortKey)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Edge</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Edge.html</anchorfile>
      <anchor>ac7927fb9c4eb34468239c582db2c66ff</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Vertex &gt;</type>
      <name>getParent</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Edge.html</anchorfile>
      <anchor>ad7e25b74c68b81dd8477c49533ca3e76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Vertex &gt;</type>
      <name>getChild</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Edge.html</anchorfile>
      <anchor>a265ea669455dc323d5f7abcd8835b0d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::array&lt; ompl::base::Cost, 3u &gt; &amp;</type>
      <name>getSortKey</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Edge.html</anchorfile>
      <anchor>a3faa9b4f6540fc9a1628ae705257979c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSortKey</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Edge.html</anchorfile>
      <anchor>a882d4a95cafcbe480c42df927537d795</anchor>
      <arglist>(const std::array&lt; ompl::base::Cost, 3u &gt; &amp;key)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::aitstar::ImplicitGraph</name>
    <filename>classompl_1_1geometric_1_1aitstar_1_1ImplicitGraph.html</filename>
    <member kind="function">
      <type></type>
      <name>ImplicitGraph</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a7c9619014a6a9cf18debaeca8073751f</anchor>
      <arglist>(const ompl::base::Cost &amp;solutionCost)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImplicitGraph</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a7f959695f82fa37ff3677d0bb3fd3ef5</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a791d0b0704d18fdbf9c6667788fa73cc</anchor>
      <arglist>(const ompl::base::SpaceInformationPtr &amp;spaceInformation, const ompl::base::ProblemDefinitionPtr &amp;problemDefinition, ompl::base::PlannerInputStates *inputStates)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a4f6ab33b250d7c6bafd38350c5ea3c87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRewireFactor</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>ae2210cd1231eda6ceefc67bfb9b533af</anchor>
      <arglist>(double rewireFactor)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRewireFactor</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a2b60d7b45db920951d40f17b3fb47f3a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseKNearest</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>aeb5e6cb9c9a72723984fe9250d4c0aad</anchor>
      <arglist>(bool useKNearest)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUseKNearest</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>adf1e6bd36ce3d915e3e44c007e0e414c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrackApproximateSolution</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>ae66824a3943549e7f7cceebae1cedbfc</anchor>
      <arglist>(bool track)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addSamples</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a73553ed7c59fa8082044a770f4c0a7a9</anchor>
      <arglist>(std::size_t numNewSamples, const ompl::base::PlannerTerminationCondition &amp;terminationCondition)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumVertices</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>acb60bf0bed1302738849048d7df9c01c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getConnectionRadius</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a6485719c17414a87e37888c40986577e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerStartState</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a47e00dffe009efe759ce832b1bad9ea9</anchor>
      <arglist>(const ompl::base::State *const startState)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerGoalState</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a52468833d11ff1f1cd73b2de1c98a375</anchor>
      <arglist>(const ompl::base::State *const goalState)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasAStartState</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a1053d98ab6c8885d4a7f5b1362138061</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasAGoalState</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>acb8c6613582a1afcc91d9d4c1f10f79a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateStartAndGoalStates</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a4235979c17fdfc93d36bc203150e59ee</anchor>
      <arglist>(const ompl::base::PlannerTerminationCondition &amp;terminationCondition, ompl::base::PlannerInputStates *inputStates)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::shared_ptr&lt; Vertex &gt; &gt;</type>
      <name>getNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a99e88cf3479169efd12d2b085e1bf9db</anchor>
      <arglist>(const std::shared_ptr&lt; Vertex &gt; &amp;vertex) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStart</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a01bbb18f652cf51c29631d7a2d225a14</anchor>
      <arglist>(const std::shared_ptr&lt; Vertex &gt; &amp;vertex) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isGoal</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a29743fed7d0d8a6abb83ffe259e8dfcb</anchor>
      <arglist>(const std::shared_ptr&lt; Vertex &gt; &amp;vertex) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::shared_ptr&lt; Vertex &gt; &gt; &amp;</type>
      <name>getStartVertices</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a22e69329641d3a12a393359222817261</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::shared_ptr&lt; Vertex &gt; &gt; &amp;</type>
      <name>getGoalVertices</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a5d07bddf68583cf2c06eebcfe1cc0327</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::shared_ptr&lt; Vertex &gt; &gt;</type>
      <name>getVertices</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a27aa4fc1963c20a84dbe93922d2275f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prune</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a3ba73478ad05a13b3424b0e0fe322c1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumberOfSampledStates</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>ae15772f6658c80e712a0b3b73f7857c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumberOfValidSamples</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a34427c0cf91b92be027639ef7fafcd4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumberOfStateCollisionChecks</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a2cb92f12e11be7010451773c5d0d006b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumberOfNearestNeighborCalls</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a20408c85922e905afe166a55b0abdb48</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::aitstar::Vertex</name>
    <filename>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</filename>
    <member kind="function">
      <type></type>
      <name>Vertex</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>a33866f03b8d30c1ddbaaba310c308e0f</anchor>
      <arglist>(const ompl::base::SpaceInformationPtr &amp;spaceInformation, const ompl::base::ProblemDefinitionPtr &amp;problemDefinition, const std::size_t &amp;batchId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Vertex</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>a5530cebe7c91709e212d671211c91e30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getId</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>a7df0ced1a1b84ae7d859ede1ffa05272</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>a152ef3a1406fc9b68f98b84ff166ddda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::State const  *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>a7f6ebd45282e6ca52343643db9725230</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::ScopedState</type>
      <name>getScopedState</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>a71f1fdd5c7915a37cfc42c4fa0a906c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::Cost</type>
      <name>getCostToComeFromStart</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>a6fb6ede1f03af46b2f2d46c532ed45da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::Cost</type>
      <name>getCostToComeFromGoal</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>a71c6a8fb9ff6f99b2da5d45382098a03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::Cost</type>
      <name>getExpandedCostToComeFromGoal</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>a1e8b33969a36f80d330366a82e3cda1a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::Cost</type>
      <name>getCostToGoToGoal</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>a9d7873fb58ca30ac79c9cd1225dfd8bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::Cost</type>
      <name>getEdgeCostFromForwardParent</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>ad9a9927ad208a216d80c607b4646079d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasForwardParent</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>a74caac8ce85580607d48af2820e8aad7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setForwardParent</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>a5ac50160e0232b506f8dd4a2ccb2746f</anchor>
      <arglist>(const std::shared_ptr&lt; Vertex &gt; &amp;vertex, const ompl::base::Cost &amp;edgeCost)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetForwardParent</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>af825ceb63181927849136668afe874b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasReverseParent</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>ab49ac08fe881484fe4ce838a7106ea63</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReverseParent</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>a9dde7e4048681ebf5c1174eaa6886b8a</anchor>
      <arglist>(const std::shared_ptr&lt; Vertex &gt; &amp;vertex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetReverseParent</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>a193fb1ff06fbc31c0de71ec9400f7013</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Vertex &gt;</type>
      <name>getForwardParent</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>ad5e42a9adf4e0d4a100bf2dd3674ca90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Vertex &gt;</type>
      <name>getReverseParent</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>aebc05e4c5ed6a21c9f3d3e05373d040c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setForwardEdgeCost</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>a8864dce1fd9f9c1d545ccac5d299956b</anchor>
      <arglist>(const ompl::base::Cost &amp;cost)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCostToComeFromStart</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>acf7ace9d2728edfc6fe785202c17022a</anchor>
      <arglist>(const ompl::base::Cost &amp;cost)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCostToComeFromGoal</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>a6c0aa769627a92b3828709f274809b5f</anchor>
      <arglist>(const ompl::base::Cost &amp;cost)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExpandedCostToComeFromGoal</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>a739be588ca82d87a6315bcd7986534ef</anchor>
      <arglist>(const ompl::base::Cost &amp;cost)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCostToGoToGoal</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>ad4eb953b1769ed4f936db83f9e8bd6ac</anchor>
      <arglist>(const ompl::base::Cost &amp;cost)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateCostOfForwardBranch</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>a84c82604f227b07f46affb89893f2b64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::weak_ptr&lt; aitstar::Vertex &gt; &gt;</type>
      <name>invalidateReverseBranch</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>acd1e077d6ccde8624cdc0c137c5f88bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::weak_ptr&lt; aitstar::Vertex &gt; &gt;</type>
      <name>invalidateForwardBranch</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>a13cf5ba4429b5b3878ee1cf141693557</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToForwardChildren</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>a82cd8366075c20d3d42019e65bb319ff</anchor>
      <arglist>(const std::shared_ptr&lt; Vertex &gt; &amp;vertex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromForwardChildren</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>a3ff3bdf66ea8c6272e4bbbd7e47f306f</anchor>
      <arglist>(std::size_t vertexId)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::shared_ptr&lt; Vertex &gt; &gt;</type>
      <name>getForwardChildren</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>adfce85b19d1c04b3e489a7a059930772</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToReverseChildren</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>a70443096da78d1e99cddb8298fc75899</anchor>
      <arglist>(const std::shared_ptr&lt; Vertex &gt; &amp;vertex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromReverseChildren</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>aaeda9515e8cdc5179bd486b9c34fd3c7</anchor>
      <arglist>(std::size_t vertexId)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::shared_ptr&lt; Vertex &gt; &gt;</type>
      <name>getReverseChildren</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>a020f3a3bc6e6f7048c32452a817b029e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>whitelistAsChild</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>ab0e793d8334e9d0915d4b8dfcc3ea335</anchor>
      <arglist>(const std::shared_ptr&lt; Vertex &gt; &amp;vertex) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isWhitelistedAsChild</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>a1a828d1110a2d1e56eb262453c417ad2</anchor>
      <arglist>(const std::shared_ptr&lt; Vertex &gt; &amp;vertex) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>blacklistAsChild</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>a1d64c6ce84cff8bc564e0fa3ae9d54ed</anchor>
      <arglist>(const std::shared_ptr&lt; Vertex &gt; &amp;vertex) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBlacklistedAsChild</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>a75ffb784facf0eb6e3ced6bcbbe0a4d7</anchor>
      <arglist>(const std::shared_ptr&lt; Vertex &gt; &amp;vertex) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasCachedNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>a401786f869c76b39cdacafefdd0ba16c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cacheNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>ae4515b0cbbe5284707a919b7ad816738</anchor>
      <arglist>(const std::vector&lt; std::shared_ptr&lt; Vertex &gt;&gt; &amp;neighbors) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::shared_ptr&lt; Vertex &gt; &gt;</type>
      <name>getNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>acdafbd0f3e60f035cbb666e56f6a19ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerPoppedOutgoingEdgeDuringForwardSearch</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>a29d1a02dbc86132630fa3d1e0de16d9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerExpansionDuringReverseSearch</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>ab9a8f8354ca1f00680a19b5cf849403e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unregisterExpansionDuringReverseSearch</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>aad5d751340069a30e01fd8252f95816d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerInsertionIntoQueueDuringReverseSearch</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>adda32fd81a707d37112893ee0d12fd98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasHadOutgoingEdgePoppedDuringCurrentForwardSearch</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>a2f65e77acd4a5866b53b2bca464b88d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasBeenExpandedDuringCurrentReverseSearch</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>a451831d2465b46f62e494cf0c52ca8af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasBeenInsertedIntoQueueDuringCurrentReverseSearch</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>aed4a0cc16ef58194b737136ae1665a76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReverseQueuePointer</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>a4fb120dd389290c6b3ba0b7987179072</anchor>
      <arglist>(typename ompl::BinaryHeap&lt; std::pair&lt; std::array&lt; ompl::base::Cost, 2u &gt;, std::shared_ptr&lt; Vertex &gt;&gt;, std::function&lt; bool(const std::pair&lt; std::array&lt; ompl::base::Cost, 2u &gt;, std::shared_ptr&lt; Vertex &gt;&gt; &amp;, const std::pair&lt; std::array&lt; ompl::base::Cost, 2u &gt;, std::shared_ptr&lt; Vertex &gt;&gt; &amp;)&gt;&gt;::Element *pointer)</arglist>
    </member>
    <member kind="function">
      <type>ompl::BinaryHeap&lt; std::pair&lt; std::array&lt; ompl::base::Cost, 2u &gt;, std::shared_ptr&lt; Vertex &gt; &gt;, std::function&lt; bool(const std::pair&lt; std::array&lt; ompl::base::Cost, 2u &gt;, std::shared_ptr&lt; Vertex &gt;&gt; &amp;, const std::pair&lt; std::array&lt; ompl::base::Cost, 2u &gt;, std::shared_ptr&lt; Vertex &gt;&gt; &amp;)&gt; &gt;::Element *</type>
      <name>getReverseQueuePointer</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>a6a87d3600207bb245855f7ed30e96d52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetReverseQueuePointer</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>a5e1c8174c35162a164ccee68d7223691</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToForwardQueueIncomingLookup</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>ae54e399d0140657384e1dcb4daac8ba5</anchor>
      <arglist>(typename ompl::BinaryHeap&lt; aitstar::Edge, std::function&lt; bool(const aitstar::Edge &amp;, const aitstar::Edge &amp;)&gt;&gt;::Element *pointer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToForwardQueueOutgoingLookup</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>ab058469b6c69ad79c0ddb772175e5a4c</anchor>
      <arglist>(typename ompl::BinaryHeap&lt; aitstar::Edge, std::function&lt; bool(const aitstar::Edge &amp;, const aitstar::Edge &amp;)&gt;&gt;::Element *pointer)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ompl::BinaryHeap&lt; aitstar::Edge, std::function&lt; bool(const aitstar::Edge &amp;, const aitstar::Edge &amp;)&gt; &gt;::Element * &gt;</type>
      <name>getForwardQueueIncomingLookup</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>a16c3d66f17cb19c5ce5c8d81540a186b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ompl::BinaryHeap&lt; aitstar::Edge, std::function&lt; bool(const aitstar::Edge &amp;, const aitstar::Edge &amp;)&gt; &gt;::Element * &gt;</type>
      <name>getForwardQueueOutgoingLookup</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>a56e21a5ba7348ee92aaf6574c319ad64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromForwardQueueIncomingLookup</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>abc1b602d70a2376ca4905ad2b25b062e</anchor>
      <arglist>(ompl::BinaryHeap&lt; aitstar::Edge, std::function&lt; bool(const aitstar::Edge &amp;, const aitstar::Edge &amp;)&gt;&gt;::Element *element)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromForwardQueueOutgoingLookup</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>a9a466214ef6ed61cd4719157cbf4fb4a</anchor>
      <arglist>(ompl::BinaryHeap&lt; aitstar::Edge, std::function&lt; bool(const aitstar::Edge &amp;, const aitstar::Edge &amp;)&gt;&gt;::Element *element)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetForwardQueueIncomingLookup</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>a768a19ee5b580a7e455fe42370bbf2c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetForwardQueueOutgoingLookup</name>
      <anchorfile>classompl_1_1geometric_1_1aitstar_1_1Vertex.html</anchorfile>
      <anchor>a297e624120d40744676ec64e6885e691</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::AnytimePathShortening</name>
    <filename>classompl_1_1geometric_1_1AnytimePathShortening.html</filename>
    <base>ompl::base::Planner</base>
    <member kind="function">
      <type></type>
      <name>AnytimePathShortening</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>a68d82f4cd29e154fab61a4d60c68669b</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AnytimePathShortening</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>a1c232188759e88c19e9753f4f9f2cb07</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPlanner</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>ad1237257ad575b30aa4957149b446c4b</anchor>
      <arglist>(base::PlannerPtr &amp;planner)</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>a7169c82efe82474a07b984a0cd2d06fc</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>a23d99807a19e8dedc3fd2d0b90c77e41</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>a39e2916ab1910aa896e94fd555cdb88a</anchor>
      <arglist>(base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>ad5d2837241ac0c7dd03a63449c92a0a0</anchor>
      <arglist>(ompl::base::PlannerData &amp;data, unsigned int idx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>a7da328b1795277ecfc9dae69633dd730</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkValidity</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>afbb688b85f2bea79c9f45669118b5565</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumPlanners</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>abf85a0df90e37a4dd7a74fb33ac15120</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerPtr</type>
      <name>getPlanner</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>a0c81bef29928591c2ff517414351dfd1</anchor>
      <arglist>(unsigned int idx) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isShortcutting</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>a7e5ab0a295da05e09bb99714d31c5442</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setShortcut</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>af957ba758b25d64de347306a45598142</anchor>
      <arglist>(bool shortcut)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isHybridizing</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>a87f613b7a320e847bb1b496e1fc331ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHybridize</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>adff084b1cf5ea5c2eda5a7cc5430b14a</anchor>
      <arglist>(bool hybridize)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>maxHybridizationPaths</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>a43b013f8dc14e39905f1e4f6962cd4cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxHybridizationPath</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>ab2610ddcdd47e0bfb8d358e84a0dc5cf</anchor>
      <arglist>(unsigned int maxPathCount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlanners</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>a361e25a2f860b9c4d6bde7f0c305d643</anchor>
      <arglist>(const std::string &amp;plannerList)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getPlanners</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>ab5ee2ea8174e004fd56c257278b97b22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultNumPlanners</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>a4bf18a0fe0790f98df29efad2a57d063</anchor>
      <arglist>(unsigned int numPlanners)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDefaultNumPlanners</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>ad489dbf23137f43c45bf9c5cc78ee314</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getBestCost</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>a3266fdd4d26199a27505e24848681809</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printSettings</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>a792c8cbfa11ffd112b335ef2bd4f9ddc</anchor>
      <arglist>(std::ostream &amp;out) const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; AnytimePathShortening &gt;</type>
      <name>createPlanner</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>a91b49e966e07da56a0b624b4615603be</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si, unsigned int numPlanners=std::max(1u, std::thread::hardware_concurrency()))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; AnytimePathShortening &gt;</type>
      <name>createPlanner</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>a908c9bcd71d1d49db47923e655b5ae1b</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addPath</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>ab844f79b1c425c8d76e03ea5ae6eca66</anchor>
      <arglist>(const geometric::PathGeometricPtr &amp;path, base::Planner *planner)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>threadSolve</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>a45bd5e4eb3b3504054dd3fb7d828ebf1</anchor>
      <arglist>(base::Planner *planner, const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; base::PlannerPtr &gt;</type>
      <name>planners_</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>ae2169c2756e275f7d5c6ffe9bd458c0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>shortcut_</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>a607e4d18be95e649c3b69ee3bdf32651</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>hybridize_</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>a08c5644404eab319beadc35b4ed7812c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxHybridPaths_</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>a62fbc6ffca34e3474359502a456c4497</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>defaultNumPlanners_</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>a1f8e86f356ffafbf6db8521a43f091d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::Cost</type>
      <name>bestCost_</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>ad2492eb9dcf392d397204a27ea34ac3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::mutex</type>
      <name>lock_</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>a7c6d2ca24c7e4d028b0d8c8db6cbcccb</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1AnytimePathShortening.html">gAPS</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::BFMT</name>
    <filename>classompl_1_1geometric_1_1BFMT.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::BFMT::BiDirMotion</class>
    <class kind="struct">ompl::geometric::BFMT::BiDirMotionCompare</class>
    <class kind="struct">ompl::geometric::BFMT::CostIndexCompare</class>
    <member kind="enumeration">
      <type></type>
      <name>TreeType</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>ae4c3b14dbf4ab6dcf32d7c3bcf8a6dbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ExploreType</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>aa9128ab0ba686fa4e9902922ccbbd105</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TerminateType</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a729ebe5c13f83a50f6f13a4e220180a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a15a9b1b50f8747a53f8ea2e3ebd717b5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>ac1c8420833341090cfd0086dea1db890</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>ae09fb8ea881f62673b33030ad50de93d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a351cc4241d51cd48eee029c3b15f89f0</anchor>
      <arglist>(base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumSamples</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a2419910ad98bb4bda23c2d549bd78aba</anchor>
      <arglist>(const unsigned int numSamples)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumSamples</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>ad8de03ea172cdc0377fae51d999edddc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestK</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>aee0ba4eabbfa73b3b74dbe001d8a1ce1</anchor>
      <arglist>(bool nearestK)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getNearestK</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>afba43fda18541222dcd1851a5a7e3fde</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadiusMultiplier</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>aea88fb1f6cd2dfb797557650c529fd65</anchor>
      <arglist>(const double radiusMultiplier)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRadiusMultiplier</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>ae733d11654b2798ff4c1c89b7606f328</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFreeSpaceVolume</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>addf51219f122bbed63ee4a8191dc9624</anchor>
      <arglist>(const double freeSpaceVolume)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFreeSpaceVolume</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a25ae2968bb946be0c6d524a540dc41e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCacheCC</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a6d8c5ac49f2df6cbd0f8b276fdf0f138</anchor>
      <arglist>(bool ccc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getCacheCC</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a3a83596fb9d53fb86e81301966665683</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeuristics</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>ae16d84f26ee1266de3f0689f0a0b7b64</anchor>
      <arglist>(bool h)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getHeuristics</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a5f24c8ceddbbc32fe8fd35d72cc79ba5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExtendedFMT</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>ad3de0122ec209405dc4e973f85227273</anchor>
      <arglist>(bool e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getExtendedFMT</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>ab2a06aae4282f6f3d3db6b71414bb9a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExploration</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a22c72868883fd9068a775473cc0793fd</anchor>
      <arglist>(bool balanced)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getExploration</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a817c266d5b1e8608301fcfe292b980ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTermination</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a43a9b9542991c51567493f9a0767bc6a</anchor>
      <arglist>(bool optimality)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getTermination</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>abc03f1fc6372a7918ce8c0ac417b3f49</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrecomputeNN</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>acc9fe1b7b5606ef1edea0168f83afdc0</anchor>
      <arglist>(bool p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPrecomputeNN</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>afbb154f41a21c09324e66c9a9d914767</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>swapTrees</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>ad16dfb44a33d551bbdf66e0d86d80a06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>useFwdTree</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>ab9252c665756f6c776b196430dca2a6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>useRevTree</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>ac55fc93e01a2b26a37ae969551d729cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a5974cee2ec7da46265b6d204a10055fb</anchor>
      <arglist>(const BiDirMotion *a, const BiDirMotion *b) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>calculateUnitBallVolume</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a830e4b62830ebd25708953de52b5abc0</anchor>
      <arglist>(unsigned int dimension) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>calculateRadius</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a503a4265e428841344e620cf976b3b1f</anchor>
      <arglist>(unsigned int dimension, unsigned int n) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a3eb3a0b7a44d10d0396b156fb7701f36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>saveNeighborhood</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>aa6d8c07d7dff93f8905490f606400b5d</anchor>
      <arglist>(BiDirMotion *m)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sampleFree</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a7714fef9dc34c186c51360711b3eb11e</anchor>
      <arglist>(const std::shared_ptr&lt; NearestNeighbors&lt; BiDirMotion * &gt;&gt; &amp;nn, const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initializeProblem</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a6c4398da349abf2fb41a5bd884e0e1ce</anchor>
      <arglist>(base::GoalSampleableRegion *&amp;goal_s)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>expandTreeFromNode</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a59a090351c3271964c2b2cc37b14ea56</anchor>
      <arglist>(BiDirMotion *&amp;z, BiDirMotion *&amp;connection_point)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>plan</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a1f040102281e7a67bb2e322e79d8212f</anchor>
      <arglist>(BiDirMotion *x_init, BiDirMotion *x_goal, BiDirMotion *&amp;connection_point, const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>termination</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a308deda6599cfbca27cd273f8cc90dbb</anchor>
      <arglist>(BiDirMotion *&amp;z, BiDirMotion *&amp;connection_point, const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>chooseTreeAndExpansionNode</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>aa6b17f4cbf54e75d8c7592f66a9d4b24</anchor>
      <arglist>(BiDirMotion *&amp;z)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>tracePath</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a2510965e21e83dc60adfbec5bd0775ec</anchor>
      <arglist>(BiDirMotion *z, BiDirMotionPtrs &amp;path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNeighborhood</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>ab8604f3f006cfc9db14fb83b8c549aba</anchor>
      <arglist>(BiDirMotion *m, std::vector&lt; BiDirMotion * &gt; nbh)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>insertNewSampleInOpen</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a1b3c080a4a25462e8ff1684b614b5fd9</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numSamples_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>ac25b1403b690567107e6e6870ee7435e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>radiusMultiplier_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a0de0258ec1069c55644eec3a0dea42ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>freeSpaceVolume_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>acd190f9f795e606b77d722503bc86728</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>collisionChecks_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a32227abebf3610b2d3fb87ce56375ed5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>nearestK_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>af42d0e59d9e05e036b08e35d0a2516ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>NNr_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a0bc79090281d3796e323f09ff6acacd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>NNk_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>ab3905c36f37e31dd4b460b46c912ed9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TreeType</type>
      <name>tree_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a2876a95dee7cffdf325afc150e5c86b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExploreType</type>
      <name>exploration_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a61bb6e43d342cd4002302a6903bec65d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TerminateType</type>
      <name>termination_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a067b643ed36e9a38f8bc3132833659ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>precomputeNN_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>adb4970d51d647def2798811418c3f127</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; BiDirMotion * &gt; &gt;</type>
      <name>nn_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a53baa3015adf75a1cac8a85a47d45ee7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; BiDirMotion *, BiDirMotionPtrs &gt;</type>
      <name>neighborhoods_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a927c7ae87a4bef7dc0a8cf1e03314508</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BiDirMotionBinHeap</type>
      <name>Open_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a41ed5647c104481adcdff58a9ca64c53</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; BiDirMotion *, BiDirMotionBinHeap::Element * &gt;</type>
      <name>Open_elements</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a136b1b327b0bf5ab8fc3e542ff497745</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a8f97f2f2f3974cbe46c38d422065ebc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::OptimizationObjectivePtr</type>
      <name>opt_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>aa59cb574b0b461cc87ccf2b280a76527</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>heuristics_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a79677f70203ef35875bfe58e54ad53f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::State *</type>
      <name>heurGoalState_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a231e5c8671498fd67f02689efade0700</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cacheCC_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>aec9e4c41ad2ed46632f6ab7c41b2af14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>extendedFMT_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>af54d73530433a9ef7b8517efb97ff0e6</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1BFMT.html">gBFMT</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::BFMT::BiDirMotion</name>
    <filename>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>SetType</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>a4b79e375f9520c7507036d3c948cedd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BiDirMotion</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>a8f2dee8cae047443418c01b30c88a775</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si, TreeType *tree)</arglist>
    </member>
    <member kind="function">
      <type>base::Cost</type>
      <name>getCost</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>aea2f60e9b2e74bc178a0c821f49498c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>base::Cost</type>
      <name>getOtherCost</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>acff919ffdcfa74546cd1fb4c3acf8270</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCost</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>a55bfe2c89a2a5f948810c283ec2e06c3</anchor>
      <arglist>(base::Cost cost)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParent</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>ad35eb963e631cda60704959d0a3bf289</anchor>
      <arglist>(BiDirMotion *parent)</arglist>
    </member>
    <member kind="function">
      <type>BiDirMotion *</type>
      <name>getParent</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>aebad985f06405e213256745474a6d510</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChildren</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>a62877fb8d6f0f7441d45899908843b84</anchor>
      <arglist>(BiDirMotionPtrs children)</arglist>
    </member>
    <member kind="function">
      <type>BiDirMotionPtrs</type>
      <name>getChildren</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>ab3300f91916c19b2cf7a60e6a9e92a94</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentSet</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>ad9d60c80413cde10004e924f2210a68a</anchor>
      <arglist>(SetType set)</arglist>
    </member>
    <member kind="function">
      <type>SetType</type>
      <name>getCurrentSet</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>a0e68ac1a0b8897a2f783f4fe6019248a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SetType</type>
      <name>getOtherSet</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>aa3bd634a6ef37e1c8a29d484420a6ccb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTreeType</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>af84ae47907df5cea1e46f36a72503de2</anchor>
      <arglist>(TreeType *treePtr)</arglist>
    </member>
    <member kind="function">
      <type>TreeType</type>
      <name>getTreeType</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>afc4b00fb7624e5b9d635935b990c6dca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>ac67e11672316769546e2d504fa63b37c</anchor>
      <arglist>(base::State *state)</arglist>
    </member>
    <member kind="function">
      <type>base::State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>a496d5366758c9b5808b273d4cbd370fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>alreadyCC</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>a321da3cf04df15cc6f76bd21fd2cb9f7</anchor>
      <arglist>(BiDirMotion *m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCC</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>acb3c3e761fe74aa4ab2645216046cdd2</anchor>
      <arglist>(BiDirMotion *m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeuristicCost</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>a49778c1492842c921a8bd61dc291557a</anchor>
      <arglist>(const base::Cost h)</arglist>
    </member>
    <member kind="function">
      <type>base::Cost</type>
      <name>getHeuristicCost</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>a305e8f4af906d6a3b6b8f1a92cbfa276</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>a78a1560c309f9fd07be8fcc01dbffb88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BiDirMotion *</type>
      <name>parent_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>a6054dbe606f63ad3161f9d438deac205</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>BiDirMotionPtrs</type>
      <name>children_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>a8e2a43e9e8b89ce6bc79e6fd695b1993</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>SetType</type>
      <name>currentSet_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>ad05948bc009ecf7aa580a0e880a35951</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>TreeType *</type>
      <name>tree_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>a4568fa681d357a679b1cfe137a925d7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>base::Cost</type>
      <name>cost_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>a7192d0242567b1ba8093445e2598d9b4</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>base::Cost</type>
      <name>hcost_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>adbd9c9a270e55274efa49b8aec36d25c</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>std::set&lt; BiDirMotion * &gt;</type>
      <name>collChecksDone_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>af74a4b71b033c5e300772c6849097cf8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::BFMT::BiDirMotionCompare</name>
    <filename>structompl_1_1geometric_1_1BFMT_1_1BiDirMotionCompare.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::BFMT::CostIndexCompare</name>
    <filename>structompl_1_1geometric_1_1BFMT_1_1CostIndexCompare.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::BiEST</name>
    <filename>classompl_1_1geometric_1_1BiEST.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::BiEST::Motion</class>
    <member kind="function">
      <type></type>
      <name>BiEST</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST.html</anchorfile>
      <anchor>a72d99dedaa6f82f033f7131e703acaab</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST.html</anchorfile>
      <anchor>a2b1969192468946aec6c55a212d024cc</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST.html</anchorfile>
      <anchor>a4f6debd19df3b75fb191cfd4568a8cd2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST.html</anchorfile>
      <anchor>a9d0c2d6131257d38d80323bc1a0fa3fa</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST.html</anchorfile>
      <anchor>a38a9f84eafe8593f0f59db4a97bf923c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST.html</anchorfile>
      <anchor>a216a39f7f917ea9751dedc81965a8aa3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST.html</anchorfile>
      <anchor>ad8b26ac151b78f6d21e6e2fbf89d0a68</anchor>
      <arglist>(base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST.html</anchorfile>
      <anchor>aebb1a5cb966992266f4a383b2eed7db9</anchor>
      <arglist>(const Motion *a, const Motion *b) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST.html</anchorfile>
      <anchor>a1e04a922f474387b538c920d7e4f50a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addMotion</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST.html</anchorfile>
      <anchor>a5ed8a8a6f7fa62b89edf134028d5bc05</anchor>
      <arglist>(Motion *motion, std::vector&lt; Motion * &gt; &amp;motions, PDF&lt; Motion * &gt; &amp;pdf, const std::shared_ptr&lt; NearestNeighbors&lt; Motion * &gt;&gt; &amp;nn, const std::vector&lt; Motion * &gt; &amp;neighbors)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Motion * &gt; &gt;</type>
      <name>nnStart_</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST.html</anchorfile>
      <anchor>a3f7d12fa0cf61b2a51ddf387e1b57cee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Motion * &gt;</type>
      <name>startMotions_</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST.html</anchorfile>
      <anchor>a7379a61f62527f15da424f725e1484b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PDF&lt; Motion * &gt;</type>
      <name>startPdf_</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST.html</anchorfile>
      <anchor>a1ab64d956622fd9bb05ad44b1cea7604</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ValidStateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST.html</anchorfile>
      <anchor>a04e975094b3061b1b03aa9a4274f935b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistance_</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST.html</anchorfile>
      <anchor>a5971ef305f4c66d1f3329495b8304d15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>nbrhoodRadius_</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST.html</anchorfile>
      <anchor>a3a84ea128ca195c78dba20afdee2af78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST.html</anchorfile>
      <anchor>a408336528629d3cbc78e1ccf836100af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::pair&lt; base::State *, base::State * &gt;</type>
      <name>connectionPoint_</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST.html</anchorfile>
      <anchor>ae94d6567e4ae0f7808169d4f871857c2</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1BiEST.html">gBiEST</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::BiEST::Motion</name>
    <filename>classompl_1_1geometric_1_1BiEST_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST_1_1Motion.html</anchorfile>
      <anchor>a9fe673fbdcb65833c38c1f9ea9bdab09</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST_1_1Motion.html</anchorfile>
      <anchor>a257cfeec9c27bed50015933f54608ddf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST_1_1Motion.html</anchorfile>
      <anchor>abc41a0888e0d444ea20283bcc3d28a66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PDF&lt; Motion * &gt;::Element *</type>
      <name>element</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST_1_1Motion.html</anchorfile>
      <anchor>ad16af76a3d0aa6e326fa6dac487c1789</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const base::State *</type>
      <name>root</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST_1_1Motion.html</anchorfile>
      <anchor>a4ec4127f810cf3364c386349c95c2292</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::BiRLRT</name>
    <filename>classompl_1_1geometric_1_1BiRLRT.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::BiRLRT::Motion</class>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1BiRLRT.html</anchorfile>
      <anchor>acf82ca521b99c931cefadaba3d739dff</anchor>
      <arglist>(base::PlannerData &amp;data) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1BiRLRT.html</anchorfile>
      <anchor>a4fb81bbdfed131fcd0dc575d5736916e</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1BiRLRT.html</anchorfile>
      <anchor>ad84a729b14bcc7879f677a875c92a732</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1BiRLRT.html</anchorfile>
      <anchor>a4412f7ef3e5c909887553fef40ce08c7</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1BiRLRT.html</anchorfile>
      <anchor>a8e989e73f8210c7d64a933f33877b5b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxDistanceNear</name>
      <anchorfile>classompl_1_1geometric_1_1BiRLRT.html</anchorfile>
      <anchor>a0739548abde6eef5319a9356109e2e12</anchor>
      <arglist>(double dNear)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaxDistanceNear</name>
      <anchorfile>classompl_1_1geometric_1_1BiRLRT.html</anchorfile>
      <anchor>a28101586165f4c288cf898a3288357b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getKeepLast</name>
      <anchorfile>classompl_1_1geometric_1_1BiRLRT.html</anchorfile>
      <anchor>a9d8454fd6e4aed25ab9a626dc1324884</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKeepLast</name>
      <anchorfile>classompl_1_1geometric_1_1BiRLRT.html</anchorfile>
      <anchor>a10f2c95c70803b5f7ea797269cf84fff</anchor>
      <arglist>(bool keepLast)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1BiRLRT.html</anchorfile>
      <anchor>aa33ba88ac8326dea8d015de44cd92a13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1BiRLRT.html</anchorfile>
      <anchor>ae6540de93e17d53e24e9240c6e44c2db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>growTreeRangeLimited</name>
      <anchorfile>classompl_1_1geometric_1_1BiRLRT.html</anchorfile>
      <anchor>a2a8f50deb80b9918b7f57b39f02386d4</anchor>
      <arglist>(std::vector&lt; Motion * &gt; &amp;tree, Motion *xmotion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>growTreeKeepLast</name>
      <anchorfile>classompl_1_1geometric_1_1BiRLRT.html</anchorfile>
      <anchor>a46a9a1be7d607738ca1594df4011e28f</anchor>
      <arglist>(std::vector&lt; Motion * &gt; &amp;tree, Motion *xmotion, std::pair&lt; base::State *, double &gt; &amp;lastValid)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>connectToTree</name>
      <anchorfile>classompl_1_1geometric_1_1BiRLRT.html</anchorfile>
      <anchor>afedc17485c2f909fa35af14bce43a26d</anchor>
      <arglist>(const Motion *motion, std::vector&lt; Motion * &gt; &amp;tree)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Motion * &gt;</type>
      <name>tStart_</name>
      <anchorfile>classompl_1_1geometric_1_1BiRLRT.html</anchorfile>
      <anchor>afb2b76b59e7fdbccaf6d0030cdbf55be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Motion * &gt;</type>
      <name>tGoal_</name>
      <anchorfile>classompl_1_1geometric_1_1BiRLRT.html</anchorfile>
      <anchor>af516e8cd4acd430c4568cfbad2fbd9b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1BiRLRT.html</anchorfile>
      <anchor>a671c91c75cb40663e59c59d3624fe1f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>range_</name>
      <anchorfile>classompl_1_1geometric_1_1BiRLRT.html</anchorfile>
      <anchor>a253bdfb5740a84b1a072954d557b3f55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistNear_</name>
      <anchorfile>classompl_1_1geometric_1_1BiRLRT.html</anchorfile>
      <anchor>a5fbb1ff2efd4d6f6ba02e638b1e85248</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1BiRLRT.html</anchorfile>
      <anchor>a18756ce551ea2936a600c41e3ffdc9f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::pair&lt; base::State *, base::State * &gt;</type>
      <name>connectionPoint_</name>
      <anchorfile>classompl_1_1geometric_1_1BiRLRT.html</anchorfile>
      <anchor>abc7a2b77df91bb5db15d4bbc14940279</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1BiRLRT.html">gBiRLRT</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::BiRLRT::Motion</name>
    <filename>classompl_1_1geometric_1_1BiRLRT_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1geometric_1_1BiRLRT_1_1Motion.html</anchorfile>
      <anchor>a8afbd0a9c13cd931bd68291abbf0c807</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state</name>
      <anchorfile>classompl_1_1geometric_1_1BiRLRT_1_1Motion.html</anchorfile>
      <anchor>ac3e5f970ccc0af55937613f87ee0916a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent</name>
      <anchorfile>classompl_1_1geometric_1_1BiRLRT_1_1Motion.html</anchorfile>
      <anchor>af50c6f412c9adea8f9fabdafaca4d4fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const base::State *</type>
      <name>root</name>
      <anchorfile>classompl_1_1geometric_1_1BiRLRT_1_1Motion.html</anchorfile>
      <anchor>a99f6abe9e3ad1e54296b3433708d6675</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::BiTRRT</name>
    <filename>classompl_1_1geometric_1_1BiTRRT.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::BiTRRT::Motion</class>
    <member kind="function">
      <type></type>
      <name>BiTRRT</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a2f3d18a363976e7345cbc28577018766</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a2376b591508ad0543c531e7dac06a426</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>abce500ace7b425fb85c99f6f216f12d6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>ac0fd912a3b9f9d1f82a22b3f22b18daf</anchor>
      <arglist>(base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>ad8b78d234a6aaf01e0a76f57fb63f583</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>ad71f5b6833006f7e7fc008c51428d9bf</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>ae2aabb326b63edc54d73ae640a8a8515</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTempChangeFactor</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a7d06fd3929104c9dca2a743b1f4cbddc</anchor>
      <arglist>(double factor)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTempChangeFactor</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>afc2441e4deb2cf71c680db8838ab2ff8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCostThreshold</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a8f7bbe64f7b08b9c986f189339ceb2d1</anchor>
      <arglist>(double maxCost)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCostThreshold</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a53f6a346df9177e79e91a6db06c7f328</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitTemperature</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>af01edc2564a947c534f77011027826c2</anchor>
      <arglist>(double initTemperature)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getInitTemperature</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a28456d8d144a225f25db1426822432f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrontierThreshold</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a21c3fa749ad83310b40988aa96357a8c</anchor>
      <arglist>(double frontierThreshold)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFrontierThreshold</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>aaa69d535612c856c194f0664eb0c08a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrontierNodeRatio</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a161724203e2d0ef60e38fe4237835ac4</anchor>
      <arglist>(double frontierNodeRatio)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFrontierNodeRatio</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a242985410fb727f691033a274f400c9c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a0ad6a91ea3a9e354e9f22846148208ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>GrowResult</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a24f5c91df65e5ad68c24c6d5071bbd1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>FAILED</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a24f5c91df65e5ad68c24c6d5071bbd1fa45b48c0a20c39a03b2356e97ca579dfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>ADVANCED</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a24f5c91df65e5ad68c24c6d5071bbd1fabad5f21d48b119fa4a9c0bfdbadf7590</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>SUCCESS</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a24f5c91df65e5ad68c24c6d5071bbd1fa1341d9ec78c1423dd5d6c92c9d3c2a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Motion * &gt; &gt;</type>
      <name>TreeData</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a41e787e94232d65324262af83939b50e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>FAILED</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a24f5c91df65e5ad68c24c6d5071bbd1fa45b48c0a20c39a03b2356e97ca579dfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>ADVANCED</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a24f5c91df65e5ad68c24c6d5071bbd1fabad5f21d48b119fa4a9c0bfdbadf7590</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>SUCCESS</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a24f5c91df65e5ad68c24c6d5071bbd1fa1341d9ec78c1423dd5d6c92c9d3c2a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>ac63536fa52ee81830fdaad13364c8c21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Motion *</type>
      <name>addMotion</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a6c900b2bbcfe22d0817928b1be743d5f</anchor>
      <arglist>(const base::State *state, TreeData &amp;tree, Motion *parent=nullptr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>transitionTest</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a10a681d8fb04bc7250f2648b0206599e</anchor>
      <arglist>(const base::Cost &amp;motionCost)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>minExpansionControl</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a15fc70c8b2683c10f94ebd2217cac0c9</anchor>
      <arglist>(double dist)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>GrowResult</type>
      <name>extendTree</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>aaf58b35ea1e00273218ad323331e228f</anchor>
      <arglist>(Motion *toMotion, TreeData &amp;tree, Motion *&amp;result)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>GrowResult</type>
      <name>extendTree</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>ace1073d843ebf9969f240cc4d9887708</anchor>
      <arglist>(Motion *nearest, TreeData &amp;tree, Motion *toMotion, Motion *&amp;result)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>connectTrees</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a7ac37e56b8f5363566c445330867efa2</anchor>
      <arglist>(Motion *nmotion, TreeData &amp;tree, Motion *xmotion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a68defb58c4a8ed82bf939f1921f45613</anchor>
      <arglist>(const Motion *a, const Motion *b) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistance_</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>aa97f7333e6dc521da0ec536ecefe5ce5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>tempChangeFactor_</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a5f53f16b258bd2d48bd922dbeddd6e9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::Cost</type>
      <name>bestCost_</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>ac2d56aaf7da11a6992eca575c051e1fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::Cost</type>
      <name>worstCost_</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a3ab507005fa8061d36fdfd6a40c1bc26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::Cost</type>
      <name>costThreshold_</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a4142a27411b041a5577371c69adfb09a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>initTemperature_</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a6e54c64a3634dce1e148b9e3417c89a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>frontierThreshold_</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a182dc6d9b1c5f3a98236176f47472c80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>frontierNodeRatio_</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>add073ea4b4ff65874b2159f3fdbfc02c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>temp_</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>ab9cc05f70b76afa3a8570f4e005e0e73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>nonfrontierCount_</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>afb877441fed17d062ef66c830f3fce19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>frontierCount_</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>ad0a402f0aa637fae1852bb7e492a88ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>connectionRange_</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a2955eba180dbbd712667d9c3dcb5c060</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::pair&lt; Motion *, Motion * &gt;</type>
      <name>connectionPoint_</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>afd91f0daed098254b074a42f0c46f35f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TreeData</type>
      <name>tStart_</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a1cbe24be39a8389d290940a5d97e4f9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TreeData</type>
      <name>tGoal_</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a474b6411707fc5ad15e2306f83202ca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ompl::base::OptimizationObjectivePtr</type>
      <name>opt_</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a3370dfd793af786716a3ebc4e56ee195</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1BiTRRT.html">gBiTRRT</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::BiTRRT::Motion</name>
    <filename>classompl_1_1geometric_1_1BiTRRT_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT_1_1Motion.html</anchorfile>
      <anchor>a545636f9b8c6b2bfc22a7dcc69d3853c</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT_1_1Motion.html</anchorfile>
      <anchor>a19882c1e9120c5952ec85074d4210658</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT_1_1Motion.html</anchorfile>
      <anchor>a159061928e5d93bef2bbad25a19c00fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT_1_1Motion.html</anchorfile>
      <anchor>a7ddfbdd700ef6024063446c542b6e295</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>base::Cost</type>
      <name>cost</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT_1_1Motion.html</anchorfile>
      <anchor>a2efed905f837948a72bd801d784a04df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const base::State *</type>
      <name>root</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT_1_1Motion.html</anchorfile>
      <anchor>aa6405768e8f5ceee5bdfc73b8eed47aa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::BITstar</name>
    <filename>classompl_1_1geometric_1_1BITstar.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::BITstar::CostHelper</class>
    <class kind="class">ompl::geometric::BITstar::IdGenerator</class>
    <class kind="class">ompl::geometric::BITstar::ImplicitGraph</class>
    <class kind="class">ompl::geometric::BITstar::SearchQueue</class>
    <class kind="class">ompl::geometric::BITstar::Vertex</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Vertex &gt;</type>
      <name>VertexPtr</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a8cb165ce4294ebd59c4c34188e19f7ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Vertex &gt;</type>
      <name>VertexConstPtr</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a8a2c2f01236fd3977dd42e1776b17e48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Vertex &gt;</type>
      <name>VertexWeakPtr</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>ae6bcd5fe458c7f6889f85bab731d49a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; VertexPtr &gt;</type>
      <name>VertexPtrVector</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a85d8dfcca0d57395ff43181283d69a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; VertexConstPtr &gt;</type>
      <name>VertexConstPtrVector</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a46caa75f817e9772a223aaf4268b1175</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>VertexId</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>ae198c8d89bb27b169701076d2c2e2a6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; VertexPtr, VertexPtr &gt;</type>
      <name>VertexPtrPair</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a85f2f074b60a176d939867e33d17fc9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; VertexConstPtr, VertexConstPtr &gt;</type>
      <name>VertexConstPtrPair</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a82784a5cbc1a9c9c81be04a4a4f478a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; VertexPtrPair &gt;</type>
      <name>VertexPtrPairVector</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>ab02cf2c4695c33134bfa450f13f36d0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; VertexConstPtrPair &gt;</type>
      <name>VertexConstPtrPairVector</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>ac50cb6283e7b208cd90d52fd7b063911</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; VertexPtr &gt; &gt;</type>
      <name>VertexPtrNNPtr</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a35db06840d59fea06407aab68909384a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; std::string()&gt;</type>
      <name>NameFunc</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>ae71973648e04f572fb9a0e3973d8b21b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BITstar</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>ab43b1c4ff95b39b5525ebdf8d53a76d7</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;spaceInfo, const std::string &amp;name=&quot;BITstar&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BITstar</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a93557ffb26e1ab7601f61ac81f443caa</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>aa2da7cea603e0dc641a45ad353ff522e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>aa028529f177f630c61bacaf3f80c966a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>ac830346ee0fe7e8cc475d715e2990b40</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;terminationCondition) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a5f6f7f012a594c2294cda637395f93e9</anchor>
      <arglist>(base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; const ompl::base::State *, const ompl::base::State * &gt;</type>
      <name>getNextEdgeInQueue</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>af38417dd67de2b6cee9d1ee09e501c68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::Cost</type>
      <name>getNextEdgeValueInQueue</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a9441e73fbec5789e481fbcee9c76d4b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getEdgeQueue</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a13d6b414a6cf05d37e7c37d3931ccb38</anchor>
      <arglist>(VertexConstPtrPairVector *edgesInQueue)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numIterations</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a6849d38db6c966e12fbc2ae575acd98f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::Cost</type>
      <name>bestCost</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a0b681699d607545e82b922138899e41e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numBatches</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>adbd5197b394d63359c072d3e1d6e9339</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRewireFactor</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a36d6bfe6fc9972debf35a8798c082ba5</anchor>
      <arglist>(double rewireFactor)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRewireFactor</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a2953c826f125b14806507df841744308</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAverageNumOfAllowedFailedAttemptsWhenSampling</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a8e673e2b20a04fb4b17cebfe93466dea</anchor>
      <arglist>(std::size_t number)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getAverageNumOfAllowedFailedAttemptsWhenSampling</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a46b03cbf2fac5415cbe8feb299929094</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSamplesPerBatch</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a8b513410d75af41e532aabe486f3d962</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getSamplesPerBatch</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a38da6dd6e65573fd9c69ffc939fcff87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseKNearest</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>abd4379f27e55f1ef5b6026bf772316fb</anchor>
      <arglist>(bool useKNearest)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUseKNearest</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>aefcfb0e16ffcec9e041e26531fd32779</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStrictQueueOrdering</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a4c6ed74080a858a36e2bca01eed93073</anchor>
      <arglist>(bool beStrict)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getStrictQueueOrdering</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a210174d16947876725c5a902da1fb203</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPruning</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a742fde56a552462b86ec5ae593141c2a</anchor>
      <arglist>(bool prune)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getPruning</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a06418ecfcc2236f7a42503799bed739b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPruneThresholdFraction</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>ab7a52698a1d43a1858aec85dd21cabb9</anchor>
      <arglist>(double fractionalChange)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPruneThresholdFraction</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a23c1d41b65142f1cab9959db46e00123</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDelayRewiringUntilInitialSolution</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>ae4ecec0085a6485ffd5c67857d478e42</anchor>
      <arglist>(bool delayRewiring)</arglist>
      <docanchor file="classompl_1_1geometric_1_1BITstar.html">gBITstarSetDelayRewiringUntilInitialSolution</docanchor>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getDelayRewiringUntilInitialSolution</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>aaac2dc73ed23702525583ef8f351d3f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJustInTimeSampling</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a9e6ed621c5da68d0bda40195e5c31c78</anchor>
      <arglist>(bool useJit)</arglist>
      <docanchor file="classompl_1_1geometric_1_1BITstar.html">gBITstarSetJustInTimeSampling</docanchor>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getJustInTimeSampling</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a4d920a907409d94337c1cfc62a5e4476</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDropSamplesOnPrune</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a1f801a1305705a067da449fa92699d99</anchor>
      <arglist>(bool dropSamples)</arglist>
      <docanchor file="classompl_1_1geometric_1_1BITstar.html">gBITstarSetDropSamplesOnPrune</docanchor>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getDropSamplesOnPrune</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>af1773a4902d58b78216ae1b5a73700dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStopOnSolnImprovement</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a1ddab1a9472e527a010615dbf107d7b0</anchor>
      <arglist>(bool stopOnChange)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getStopOnSolnImprovement</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a797f779fb9aec4ec1460f28d65faae81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConsiderApproximateSolutions</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>ac18d340b00758c7089630e137697c8a2</anchor>
      <arglist>(bool findApproximate)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getConsiderApproximateSolutions</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>ac5b006832ccf3da674408199809b3804</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a937a1552a3ecb8d3dd1a44ff6512384d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setInitialInflationFactor</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a982de9ae5184862a71568959778f35f2</anchor>
      <arglist>(double factor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setInflationScalingParameter</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a56b9b06f50f2ba2b4a297ad42c4a535d</anchor>
      <arglist>(double parameter)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setTruncationScalingParameter</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>ae3b0af00afd03522917165a4a3adf3e2</anchor>
      <arglist>(double parameter)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>enableCascadingRewirings</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>ab628e2bd41b8e3a0b7858f2388bcaea8</anchor>
      <arglist>(bool enable)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>getInitialInflationFactor</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a2cae192982cb112cc37a5e314e3a351e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>getInflationScalingParameter</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>abc9f0194a462213cba8a8affe7444377</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>getTruncationScalingParameter</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a898614a4845120be874e15f10db24009</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>getCurrentInflationFactor</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a5a3e053b84a193dbfeae97ee38b8a2a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>getCurrentTruncationFactor</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a6c9eb86bf2a66c0a4b310075bbed0ab8</anchor>
      <arglist>() const</arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1BITstar.html">gBITstar</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::BITstar::CostHelper</name>
    <filename>classompl_1_1geometric_1_1BITstar_1_1CostHelper.html</filename>
    <member kind="function">
      <type></type>
      <name>CostHelper</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1CostHelper.html</anchorfile>
      <anchor>a7a4cf656dfd603fe43853d77987da663</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1CostHelper.html</anchorfile>
      <anchor>a9dfb02e423331a7fae695a9c649ce1a0</anchor>
      <arglist>(const ompl::base::OptimizationObjectivePtr &amp;opt, ImplicitGraph *graph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1CostHelper.html</anchorfile>
      <anchor>aae7b50c00ac6b368577c050241a5ffbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::OptimizationObjectivePtr</type>
      <name>getOptObj</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1CostHelper.html</anchorfile>
      <anchor>a447848b2326412384696ea4c4a07c150</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::Cost</type>
      <name>lowerBoundHeuristicVertex</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1CostHelper.html</anchorfile>
      <anchor>af7412e512ff1cb8d17988fcf7e17d08f</anchor>
      <arglist>(const VertexConstPtr &amp;vertex) const</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::Cost</type>
      <name>currentHeuristicVertex</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1CostHelper.html</anchorfile>
      <anchor>a2473853eb16246ed4b56f82a903dcaec</anchor>
      <arglist>(const VertexConstPtr &amp;vertex) const</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::Cost</type>
      <name>lowerBoundHeuristicEdge</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1CostHelper.html</anchorfile>
      <anchor>a1a19d13ad6f30d4034a48a243360b091</anchor>
      <arglist>(const VertexConstPtrPair &amp;edgePair) const</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::Cost</type>
      <name>currentHeuristicEdge</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1CostHelper.html</anchorfile>
      <anchor>a8f9d3e1d246a30b556edd5be2f5c42c4</anchor>
      <arglist>(const VertexConstPtrPair &amp;edgePair) const</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::Cost</type>
      <name>lowerBoundHeuristicToTarget</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1CostHelper.html</anchorfile>
      <anchor>a6382d6d8a2101ba7a9ffeeaaded69e7e</anchor>
      <arglist>(const VertexConstPtrPair &amp;edgePair) const</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::Cost</type>
      <name>currentHeuristicToTarget</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1CostHelper.html</anchorfile>
      <anchor>a8ccfb995b99dd940bcba8954ac2e7015</anchor>
      <arglist>(const VertexConstPtrPair &amp;edgePair) const</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::Cost</type>
      <name>costToComeHeuristic</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1CostHelper.html</anchorfile>
      <anchor>add84d646196845cd02cf59780de68c01</anchor>
      <arglist>(const VertexConstPtr &amp;vertex) const</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::Cost</type>
      <name>edgeCostHeuristic</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1CostHelper.html</anchorfile>
      <anchor>a79b56e1fc499d13fe9e5744af86ab73d</anchor>
      <arglist>(const VertexConstPtrPair &amp;edgePair) const</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::Cost</type>
      <name>costToGoHeuristic</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1CostHelper.html</anchorfile>
      <anchor>a8cf64925a6d1ae9169ac2ec5634e53c2</anchor>
      <arglist>(const VertexConstPtr &amp;vertex) const</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::Cost</type>
      <name>trueEdgeCost</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1CostHelper.html</anchorfile>
      <anchor>ac648896d55e3af0ddefe194a76b515d7</anchor>
      <arglist>(const VertexConstPtrPair &amp;edgePair) const</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::Cost</type>
      <name>combineCosts</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1CostHelper.html</anchorfile>
      <anchor>a99047cfb6dbab32f3b6b5c03326e0a55</anchor>
      <arglist>(const ompl::base::Cost &amp;cost, const Costs &amp;... costs) const</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::Cost</type>
      <name>inflateCost</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1CostHelper.html</anchorfile>
      <anchor>aa375c82a245cbf25f8d7eb90ac9a9aab</anchor>
      <arglist>(const ompl::base::Cost &amp;cost, double factor) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCostWorseThan</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1CostHelper.html</anchorfile>
      <anchor>a75cabc4657ed798564035909384f650f</anchor>
      <arglist>(const ompl::base::Cost &amp;a, const ompl::base::Cost &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCostNotEquivalentTo</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1CostHelper.html</anchorfile>
      <anchor>a799f77d70fc12902831cfc698d54ce4a</anchor>
      <arglist>(const ompl::base::Cost &amp;a, const ompl::base::Cost &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCostBetterThanOrEquivalentTo</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1CostHelper.html</anchorfile>
      <anchor>a74b32114d7f1756ce0f0c627784a4e46</anchor>
      <arglist>(const ompl::base::Cost &amp;a, const ompl::base::Cost &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCostWorseThanOrEquivalentTo</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1CostHelper.html</anchorfile>
      <anchor>a5d19e961fd846496f15031b7529aeb53</anchor>
      <arglist>(const ompl::base::Cost &amp;a, const ompl::base::Cost &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fractionalChange</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1CostHelper.html</anchorfile>
      <anchor>ac425d0d22b9ac2e3dc765ccccc70ad38</anchor>
      <arglist>(const ompl::base::Cost &amp;newCost, const ompl::base::Cost &amp;oldCost) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fractionalChange</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1CostHelper.html</anchorfile>
      <anchor>ad837ef24d895bfe54704179b475f6b5f</anchor>
      <arglist>(const ompl::base::Cost &amp;newCost, const ompl::base::Cost &amp;oldCost, const ompl::base::Cost &amp;refCost) const</arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1BITstar_1_1CostHelper.html">CostHelper</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::BITstar::IdGenerator</name>
    <filename>classompl_1_1geometric_1_1BITstar_1_1IdGenerator.html</filename>
    <member kind="function">
      <type>BITstar::VertexId</type>
      <name>getNewId</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IdGenerator.html</anchorfile>
      <anchor>a99921e15f14c31933a8d00b1e1cb5c59</anchor>
      <arglist>()</arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1BITstar_1_1IdGenerator.html">IdGenerator</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::BITstar::ImplicitGraph</name>
    <filename>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</filename>
    <member kind="function">
      <type></type>
      <name>ImplicitGraph</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>ae0300a64779d063a3db9c1752a1145f8</anchor>
      <arglist>(NameFunc nameFunc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImplicitGraph</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>af86edcb3ce7baa785f9a632b764ab54a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>adafe783ca95f43df6f31a9c3aa764f09</anchor>
      <arglist>(const ompl::base::SpaceInformationPtr &amp;spaceInformation, const ompl::base::ProblemDefinitionPtr &amp;problemDefinition, CostHelper *costHelper, SearchQueue *searchQueue, const ompl::base::Planner *plannerPtr, ompl::base::PlannerInputStates &amp;inputStates)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a3a528349621b8ec8a45fcb5fb60d9dfe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasAStart</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a8f5c9e4193559adad091325c384b6d72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasAGoal</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a46074e6a6f225fd1596cf5df29c5c10e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VertexPtrVector::const_iterator</type>
      <name>startVerticesBeginConst</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a44e05d68d7c67f33b55b9b3a30024508</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VertexPtrVector::const_iterator</type>
      <name>startVerticesEndConst</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>aae3192ccb278d9e5b86f790c708f0ec5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VertexPtrVector::const_iterator</type>
      <name>goalVerticesBeginConst</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>aa60d9cc83616fbefa8888b625015821e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VertexPtrVector::const_iterator</type>
      <name>goalVerticesEndConst</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>af0876737708c6003e5c9587c3d6116f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::Cost</type>
      <name>minCost</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a83be6b9a2d27eefc72bcc3b83ae6d75f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasInformedMeasure</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a37f48910d8abfcf844aadf25a0399b5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getInformedMeasure</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a212630ab596b0b376c8e58b7b09b52f5</anchor>
      <arglist>(const ompl::base::Cost &amp;cost) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a1f8b6cffaf37d529bc2ab1fc9e74eda0</anchor>
      <arglist>(const VertexConstPtr &amp;a, const VertexConstPtr &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>abdf593f3c29ba3a039957c3a16393653</anchor>
      <arglist>(const VertexConstPtrPair &amp;vertices) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nearestSamples</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a20da13a2f166cc1c0662e0e05084dda9</anchor>
      <arglist>(const VertexPtr &amp;vertex, VertexPtrVector *neighbourSamples)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGraphAsPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a773c3c291205b290893f0e5ca9e21d54</anchor>
      <arglist>(ompl::base::PlannerData &amp;data) const</arglist>
    </member>
    <member kind="function">
      <type>VertexConstPtr</type>
      <name>closestVertexToGoal</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a3921b2e4eb248ba63e8deb2fe880b6de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>smallestDistanceToGoal</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a656c1b485fd0f5a73f51ff92e745d7be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getConnectivityK</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a36c15f7c61fff5e091f0259925ea7d2c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getConnectivityR</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a58dda8d6fbf02bbe2f884a4c78fa4f28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VertexPtrVector</type>
      <name>getCopyOfSamples</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a7c4c2ef7c8862c8207ce72d582f89a14</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerSolutionCost</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>abf4011f492da0a46ded5524a894b13e0</anchor>
      <arglist>(const ompl::base::Cost &amp;solutionCost)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateStartAndGoalStates</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a0ced4ebc988f371935a73959d9daa57b</anchor>
      <arglist>(ompl::base::PlannerInputStates &amp;inputStates, const base::PlannerTerminationCondition &amp;terminationCondition)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addNewSamples</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a0b7c5f309bccfc1ca452cd65feb781b1</anchor>
      <arglist>(const unsigned int &amp;numSamples)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; unsigned int, unsigned int &gt;</type>
      <name>prune</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>ac52b0587ca4de60f74428ac658ed02b3</anchor>
      <arglist>(double prunedMeasure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSamples</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>ab5cd453ba04ea047c87d19e4e1bd0935</anchor>
      <arglist>(const VertexPtr &amp;sample)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToSamples</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a63d4921c2cc4a88bef27557b5c438b1b</anchor>
      <arglist>(const VertexPtrVector &amp;samples)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromSamples</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a24b6d9368ebfa9921307fe97fbcc9c0f</anchor>
      <arglist>(const VertexPtr &amp;sample)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneSample</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a21196b399b349fa45aeb0d5fb0d5c498</anchor>
      <arglist>(const VertexPtr &amp;sample)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recycleSample</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>aaa8e7474d04900f11cfc204d29a86be4</anchor>
      <arglist>(const VertexPtr &amp;sample)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerAsVertex</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>afd136a2e7dc5e289e9fb35a2b1c83de8</anchor>
      <arglist>(const VertexPtr &amp;vertex)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>removeFromVertices</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>afc72569254daedc2598f1b020a9a6c1c</anchor>
      <arglist>(const VertexPtr &amp;sample, bool moveToFree)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; unsigned int, unsigned int &gt;</type>
      <name>pruneVertex</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a5d8b191eb6dbf3ab3492f3b7a1fafba6</anchor>
      <arglist>(const VertexPtr &amp;vertex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeEdgeBetweenVertexAndParent</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>ade7e9e253eb64240b0ad6ed74a0715ae</anchor>
      <arglist>(const VertexPtr &amp;child, bool cascadeCostUpdates)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRewireFactor</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a8bae302cadff1eec3c7f01316e413359</anchor>
      <arglist>(double rewireFactor)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRewireFactor</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>ad843e38fb5eaf877f8a93dba8af3dd50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseKNearest</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>ad16e8dfd69bd7c55287b8ac26e4a7cf9</anchor>
      <arglist>(bool useKNearest)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUseKNearest</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a768bff7a91e6b6249ae86a400e9d3bf6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJustInTimeSampling</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a9255f486a1f99c851fc78b3a6287eb37</anchor>
      <arglist>(bool useJit)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getJustInTimeSampling</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a56b776b8e0d8172917d63f8987052b28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDropSamplesOnPrune</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>af7704a9619a5b464c88baf2549494879</anchor>
      <arglist>(bool dropSamples)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPruning</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a2b6a97c31a76ef831cfbd5e82123cd2f</anchor>
      <arglist>(bool usePruning)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getDropSamplesOnPrune</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>aa1f120585a62c192e6b0d2c7a640b1f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrackApproximateSolutions</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a954aee049fbfd2ff3141c4aa20703298</anchor>
      <arglist>(bool findApproximate)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getTrackApproximateSolutions</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>aaa2dab97bab8e1004d9a76161aae4928</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAverageNumOfAllowedFailedAttemptsWhenSampling</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>acf7e830764a084089f86c1e5f74a232b</anchor>
      <arglist>(std::size_t number)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getAverageNumOfAllowedFailedAttemptsWhenSampling</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>ac2b2aadcaf010211b3e7a7fa4bc55e97</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a66efcf1d72216b475c758750ba014e9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numSamples</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>aa60e998a3a156bc4ae3649c59a9eb1d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numVertices</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a473e4dcddabdb1d37f5494d8129866ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numStatesGenerated</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a28aad353d00ac3098ff308da6e956701</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numVerticesConnected</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a04bc0deec4e02f66ad6ea82b47e4657c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numFreeStatesPruned</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>ac717d91935890eed3ac85ccfb5eab2b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numVerticesDisconnected</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a8fa35abf18696b5ab809606889be722e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numNearestLookups</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a8b8cbe24b6b282752f22d4c06108aba1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numStateCollisionChecks</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>a4d6bab0dd0192f45f942018c3ab2e7db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canVertexBeDisconnected</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>ad65539421b91c627c140c775882a52de</anchor>
      <arglist>(const VertexPtr &amp;vertex) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canSampleBePruned</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html</anchorfile>
      <anchor>adbd8451b8ce612cfee70f35c6c20bc8d</anchor>
      <arglist>(const VertexPtr &amp;sample) const</arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1BITstar_1_1ImplicitGraph.html">ImplicitGraph</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::BITstar::SearchQueue</name>
    <filename>classompl_1_1geometric_1_1BITstar_1_1SearchQueue.html</filename>
    <member kind="typedef">
      <type>std::array&lt; ompl::base::Cost, 3u &gt;</type>
      <name>SortKey</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1SearchQueue.html</anchorfile>
      <anchor>a3ab0338c57c33ad8966739c4e31b35ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; SortKey, VertexPtrPair &gt;</type>
      <name>SortKeyAndVertexPtrPair</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1SearchQueue.html</anchorfile>
      <anchor>af32215a51832c2d8677a9ebd62b8b673</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; bool(const SortKeyAndVertexPtrPair &amp;, const SortKeyAndVertexPtrPair &amp;)&gt;</type>
      <name>EdgeComparisonFunction</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1SearchQueue.html</anchorfile>
      <anchor>a151edabaafd1ad342bbb236f18fce7c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ompl::BinaryHeap&lt; SortKeyAndVertexPtrPair, EdgeComparisonFunction &gt;</type>
      <name>EdgeQueue</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1SearchQueue.html</anchorfile>
      <anchor>a4a146105dc5dfce31e32dd898d729630</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EdgeQueue::Element *</type>
      <name>EdgeQueueElemPtr</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1SearchQueue.html</anchorfile>
      <anchor>a064de263aff4000e5a1e73319b736e69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; EdgeQueueElemPtr &gt;</type>
      <name>EdgeQueueElemPtrVector</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1SearchQueue.html</anchorfile>
      <anchor>acc07a5eeeb3eef288dc86430a6da6339</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SearchQueue</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1SearchQueue.html</anchorfile>
      <anchor>acb3d67e1be201b14cf464505392218d8</anchor>
      <arglist>(NameFunc nameFunc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SearchQueue</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1SearchQueue.html</anchorfile>
      <anchor>a18cc11bf0d7e2aa2cc2e233b8eb39fed</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1SearchQueue.html</anchorfile>
      <anchor>a5340aeabe3c460d99a0763ac0f465e58</anchor>
      <arglist>(CostHelper *costHelpPtr, ImplicitGraph *graphPtr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1SearchQueue.html</anchorfile>
      <anchor>a02a0b95fca371f87f7c185b4264762ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableCascadingRewirings</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1SearchQueue.html</anchorfile>
      <anchor>a2d47478fee6fc3223daa2febb4a0b57c</anchor>
      <arglist>(bool enable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertOutgoingEdges</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1SearchQueue.html</anchorfile>
      <anchor>a11eda829b4aaaff219af62cc0f0ae878</anchor>
      <arglist>(const VertexPtr &amp;vertex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertOutgoingEdgesOfStartVertices</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1SearchQueue.html</anchorfile>
      <anchor>a73ef6f2c3eba4b5fe1cb477062c09bce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertOutgoingEdgesOfInconsistentVertices</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1SearchQueue.html</anchorfile>
      <anchor>a85638e57569cbc433bffcdbdc3c3c99d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToInconsistentSet</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1SearchQueue.html</anchorfile>
      <anchor>aa65a4c984993bee171b9a5e6fc44b4f8</anchor>
      <arglist>(const VertexPtr &amp;vertex)</arglist>
    </member>
    <member kind="function">
      <type>VertexPtrPair</type>
      <name>getFrontEdge</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1SearchQueue.html</anchorfile>
      <anchor>a3db60d287304fadb2fe146ef20a6a74c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SortKey</type>
      <name>getFrontEdgeValue</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1SearchQueue.html</anchorfile>
      <anchor>aa2c4588304c862b2a6aa57c0cfc4f35b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VertexPtrPair</type>
      <name>popFrontEdge</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1SearchQueue.html</anchorfile>
      <anchor>a088abff4ac3b8a13a1af910c4b8b7d91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1SearchQueue.html</anchorfile>
      <anchor>a6c9a4c37357ac2ed1ae31340f90a1cc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearInconsistentSet</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1SearchQueue.html</anchorfile>
      <anchor>af7e58525b5d9806f939924a42e703a3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rebuildEdgeQueue</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1SearchQueue.html</anchorfile>
      <anchor>a3393d3ae68a70f2638f4e63ffda79760</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1SearchQueue.html</anchorfile>
      <anchor>af1236802a8d9bce2feb66d3a5b894a65</anchor>
      <arglist>(const EdgeQueueElemPtr elementPtr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInflationFactor</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1SearchQueue.html</anchorfile>
      <anchor>ac7492ed8edb93f3d2bacdeef326f5849</anchor>
      <arglist>(double factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerSolutionCost</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1SearchQueue.html</anchorfile>
      <anchor>a9fd7d8a6eec9f418bb74e9d729bc1c5e</anchor>
      <arglist>(const ompl::base::Cost &amp;solutionCost)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeInEdgesConnectedToVertexFromQueue</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1SearchQueue.html</anchorfile>
      <anchor>a48b422b4caef1ae65fe25fcfa3d2607e</anchor>
      <arglist>(const VertexPtr &amp;vertex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeOutEdgesConnectedToVertexFromQueue</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1SearchQueue.html</anchorfile>
      <anchor>abcd4e07f500a0edd8ee45380ea5abc88</anchor>
      <arglist>(const VertexPtr &amp;vertex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllEdgesConnectedToVertexFromQueue</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1SearchQueue.html</anchorfile>
      <anchor>adfb8a1817e881a4feb26daef96a70a4c</anchor>
      <arglist>(const VertexPtr &amp;vertex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromInconsistentSet</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1SearchQueue.html</anchorfile>
      <anchor>abb41822478f268095e78627676f64f1e</anchor>
      <arglist>(const VertexPtr &amp;vertex)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getInflationFactor</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1SearchQueue.html</anchorfile>
      <anchor>a2adfb28a05de297652b01f2aa6bcd243</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; const unsigned int &gt;</type>
      <name>getSearchId</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1SearchQueue.html</anchorfile>
      <anchor>a6ae7aedb5d24c66c79e1d2a513586440</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canPossiblyImproveCurrentSolution</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1SearchQueue.html</anchorfile>
      <anchor>a4bd337d2544a4643d998f51c847cd8e8</anchor>
      <arglist>(const VertexPtr &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canPossiblyImproveCurrentSolution</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1SearchQueue.html</anchorfile>
      <anchor>a8a90277611cc4392ecb30108c533d987</anchor>
      <arglist>(const VertexPtrPair &amp;edge) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numEdges</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1SearchQueue.html</anchorfile>
      <anchor>a83a8802a89e9a63feb176b24d0e4ee6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1SearchQueue.html</anchorfile>
      <anchor>a33cb00c31bb0a63cab2288383136ee88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getEdges</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1SearchQueue.html</anchorfile>
      <anchor>af10aeaa60adf14f22fd13059f5896ec7</anchor>
      <arglist>(VertexConstPtrPairVector *edgeQueue)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numEdgesPopped</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1SearchQueue.html</anchorfile>
      <anchor>ac1eb516c180bc7f1f151eaa6b63bf214</anchor>
      <arglist>() const</arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1BITstar_1_1SearchQueue.html">SearchQueue</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::BITstar::Vertex</name>
    <filename>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</filename>
    <member kind="function">
      <type></type>
      <name>Vertex</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a17d4b49ea9bdb8a023ca6fd1be13c622</anchor>
      <arglist>(ompl::base::SpaceInformationPtr spaceInformation, const CostHelper *const costHelpPtr, SearchQueue *const queuePtr, const std::shared_ptr&lt; const unsigned int &gt; &amp;approximationId, bool root=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Vertex</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a2ea0eb96d9a4127dde59e836283fd856</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BITstar::VertexId</type>
      <name>getId</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>ae69b5828ad20a28ca4cefc3a13f1bc01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::State *</type>
      <name>state</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>abaded93206e9cf0be92ec24986d52533</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::State const  *</type>
      <name>state</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>afcf66fbda69f8f22a8b2b7283d0a0758</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRoot</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a9c423dea9caf42cf4c45ca8e50b07f2c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasParent</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a0ec9a530ad5243b8884497b64bf6ff8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInTree</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a4da628a4d1409dd2356d477104040c81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDepth</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>af4087c503a2fc083975fa095d0c2e4a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VertexConstPtr</type>
      <name>getParent</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a91d880210d7f073b6d08bc63a7628e24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VertexPtr</type>
      <name>getParent</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a9022ed1769a211d5709cf16bd9b218f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConsistent</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a0d5635d631a5768351fe5068eab10687</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPruned</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a98aa615af8c905af4153493be73a84b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExpandedOnCurrentApproximation</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>aa7e3e243b66039c37988d5dd11a132c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExpandedOnCurrentSearch</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>acfe95fa0b8624862184e34ee3c963dab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasEverBeenExpandedAsRewiring</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a5de784f523085da682fe6303284534aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addParent</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>ab603cb2052470e3ebece0cd69a3e859b</anchor>
      <arglist>(const VertexPtr &amp;newParent, const ompl::base::Cost &amp;edgeInCost)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeParent</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a5ea64248f9da57fa9413a7be0915bc14</anchor>
      <arglist>(bool updateChildCosts)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasChildren</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a8ebf1805203b533fc81eebd8b4a1d49e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getChildren</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a2a1cf61fd6e599931d691cd03352e833</anchor>
      <arglist>(VertexConstPtrVector *children) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getChildren</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a1ead9e90638ad7f9670eb1bab481a6ba</anchor>
      <arglist>(VertexPtrVector *children)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addChild</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a885aacdb2369414d8544b2fe8c129067</anchor>
      <arglist>(const VertexPtr &amp;newChild)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeChild</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a06f123d3ddbca8930432ae0c0608ae25</anchor>
      <arglist>(const VertexPtr &amp;oldChild)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>blacklistChild</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a4f3450df16a53a22f31b56f98ef8d8b4</anchor>
      <arglist>(const VertexConstPtr &amp;vertex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>whitelistChild</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a9a64156b68fdb4e805356e3a21ae50e7</anchor>
      <arglist>(const VertexConstPtr &amp;vertex)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBlacklistedAsChild</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a382fd4aebfbbd0f5c02a844f6d971f57</anchor>
      <arglist>(const VertexConstPtr &amp;vertex) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isWhitelistedAsChild</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a908d5841a2f1e88c2c04ddf4d8a8752c</anchor>
      <arglist>(const VertexConstPtr &amp;vertex) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearBlacklist</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>aa08ad70d316fc545ed09d22447427d9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearWhitelist</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>ac92e3ef0784c67523eabf079aebaf731</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::Cost</type>
      <name>getCost</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>ad3e22599bc0a7e678007b4b77e3832ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::Cost</type>
      <name>getEdgeInCost</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>ab2f2d1f76abff96f716c56dfdc5c387b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerExpansion</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>aa8f5a722e040c0d1044bee19cff63006</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerRewiringExpansion</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>ac3b5baa2025bd72959145e857f5339da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markPruned</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a169e5d64d04eb8f46a30080e0c0d319a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markUnpruned</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a789938595253a13e87e3b193db162e0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertInEdgeQueueInLookup</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a2e4acb6bfc16b4eef8797b37f3063013</anchor>
      <arglist>(const SearchQueue::EdgeQueueElemPtr &amp;inEdge)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertInEdgeQueueOutLookup</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>adc46f00828555362e8b86813381da19f</anchor>
      <arglist>(const SearchQueue::EdgeQueueElemPtr &amp;outEdge)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromEdgeQueueInLookup</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>af78065af53327e6b506613b20aaa86bc</anchor>
      <arglist>(const SearchQueue::EdgeQueueElemPtr &amp;inEdge)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromEdgeQueueOutLookup</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a1e75a46517cbe17d6318191100380e7e</anchor>
      <arglist>(const SearchQueue::EdgeQueueElemPtr &amp;outEdge)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromEdgeQueueInLookup</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>afdaa0ae6bc64a0c225d3fde9a6f4ea21</anchor>
      <arglist>(const SearchQueue::EdgeQueueElemPtrVector::const_iterator &amp;inEdge)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromEdgeQueueOutLookup</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>aad1d44fd6adecb60c962c5dd424d8d98</anchor>
      <arglist>(const SearchQueue::EdgeQueueElemPtrVector::const_iterator &amp;outEdge)</arglist>
    </member>
    <member kind="function">
      <type>BITstar::SearchQueue::EdgeQueueElemPtrVector::const_iterator</type>
      <name>edgeQueueInLookupConstBegin</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a2467938c5fd8e8ed646da69e807da948</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BITstar::SearchQueue::EdgeQueueElemPtrVector::const_iterator</type>
      <name>edgeQueueOutLookupConstBegin</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>aa0812b698a102e53ce681d5353cabbdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BITstar::SearchQueue::EdgeQueueElemPtrVector::const_iterator</type>
      <name>edgeQueueInLookupConstEnd</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a8b7e8362d4e63343ae72228ba02221b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BITstar::SearchQueue::EdgeQueueElemPtrVector::const_iterator</type>
      <name>edgeQueueOutLookupConstEnd</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a0984dc5a5b4a8c24dceccbf7c57909d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>edgeQueueInLookupSize</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>afd8363cae3078d78f5848a2995006d19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>edgeQueueOutLookupSize</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a7b2d6a39df027cdd92a5f770f5bdbecc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearEdgeQueueInLookup</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a699cca6e332e9b36045ea8ad8781a75e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearEdgeQueueOutLookup</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>ad0b1d2a44307e065e32df7562073700b</anchor>
      <arglist>()</arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1BITstar_1_1Vertex.html">gVertex</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::BKPIECE1</name>
    <filename>classompl_1_1geometric_1_1BKPIECE1.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::BKPIECE1::Motion</class>
    <member kind="function">
      <type></type>
      <name>BKPIECE1</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>a1e61534ba2f912016e00d94cfc5449e5</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>a0e505ace63ee03e5ccde6e9820aeabdb</anchor>
      <arglist>(const base::ProjectionEvaluatorPtr &amp;projectionEvaluator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>a0dbd0c85fa51f8ebce39a0ddc18517d8</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const base::ProjectionEvaluatorPtr &amp;</type>
      <name>getProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>afc5552c48fac02e4e96de32bf2b5aa56</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>ab803b4859de12fd5788e87b99c672679</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>ad01e749cab8b9096d01e8f9f3ca35f61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderFraction</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>a57e4e557bbd43543c4fe5d5d3733b443</anchor>
      <arglist>(double bp)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBorderFraction</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>a6dd67ede6c67a142ff0270ec91b3a2d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFailedExpansionCellScoreFactor</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>a06f49930fd458b8ff60626a1f0b1b775</anchor>
      <arglist>(double factor)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFailedExpansionCellScoreFactor</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>af93f42bd3ebf86547cfcb61ab1280e99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinValidPathFraction</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>a1cc89cb07e13a333f6eed645a3dfcda3</anchor>
      <arglist>(double fraction)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMinValidPathFraction</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>a1cec5e62c6aff0aea1ffef10337c0eb1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>aa724226c3dec34b09cfa9a57e94b4679</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>a2cf588b5cd49be01cc43c576794c499c</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>abca5f831bdfe09ab62001a434bda47b8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>a10e5170141827497ad20dc06cc167e43</anchor>
      <arglist>(base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMotion</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>ae81ac9338565790508efaebbef3d8459</anchor>
      <arglist>(Motion *motion)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ValidStateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>a88a3a9f2986351a001955070e7d22046</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ProjectionEvaluatorPtr</type>
      <name>projectionEvaluator_</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>ac4b29de63c1a79e5ab2b819b182e230f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Discretization&lt; Motion &gt;</type>
      <name>dStart_</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>aa70b018d82b7bf967b7ed5ade3c51a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Discretization&lt; Motion &gt;</type>
      <name>dGoal_</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>a6083e1178d64a2064b8403a6e4d7f5be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>failedExpansionScoreFactor_</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>a921e950972763ff2a9fb7e3a32a710ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>minValidPathFraction_</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>aa0962644ccc8c2cf71dd42ca0bac3ff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistance_</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>a15a290a36bac34264d12f0ca3c3dc46d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>a422ff4aa4fe25dd13e40e8c9962ccc12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::pair&lt; base::State *, base::State * &gt;</type>
      <name>connectionPoint_</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>a4af6c757ceaa289a24b62a9b7ba4f3d3</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1BKPIECE1.html">gBKPIECE1</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::BKPIECE1::Motion</name>
    <filename>classompl_1_1geometric_1_1BKPIECE1_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1_1_1Motion.html</anchorfile>
      <anchor>ac115375f7782835ba53dab9453de65bf</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="variable">
      <type>const base::State *</type>
      <name>root</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1_1_1Motion.html</anchorfile>
      <anchor>ab658fee6c2727e70f145252ec4df86c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1_1_1Motion.html</anchorfile>
      <anchor>a4a6799d168bbc9ee73504b56ddc8c34e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1_1_1Motion.html</anchorfile>
      <anchor>a31d66a709c8a16e44787f019c9fc13b2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::CForest</name>
    <filename>classompl_1_1geometric_1_1CForest.html</filename>
    <base>ompl::base::Planner</base>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>aca48982e4c0177b867fdcef87c90be9f</anchor>
      <arglist>(base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>a8fcd2cdd4956e01b20015b8c6d0a95a9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPlannerInstance</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>af28102f31f63b45c5230ec59335bff1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPlannerInstances</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>a72a520063706be6efa62e68cf1f7c179</anchor>
      <arglist>(std::size_t num=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearPlannerInstances</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>aea227489f58d6fdda9ba4d0de82e88e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerPtr &amp;</type>
      <name>getPlannerInstance</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>a07715853f17ce077692818f47ea654f5</anchor>
      <arglist>(const std::size_t idx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>af750a426c2d555de19705ac111a2437e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>ac2c809faf24daaaef1789517f0dfe013</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFocusSearch</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>adaaa851a40d4e7ceecd4a7d6351f1f00</anchor>
      <arglist>(const bool focus)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getFocusSearch</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>a770cb05a04b9639d69362624baa66adc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumThreads</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>a8afa358915bfa89765f78fce46b0595f</anchor>
      <arglist>(unsigned int numThreads=0)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumThreads</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>a132f958ae097a3a1d71e9db49adfad36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getBestCost</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>a3a60889fc4c3ceb4ceb5a0ebbba7f0d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getNumPathsShared</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>aa95d986076fd931412f644ce950ce092</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getNumStatesShared</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>aad41acab72d201f0852ee34ac4b888e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>a185bafe7c4cd4297efc87bfefb9737f3</anchor>
      <arglist>(base::Planner *planner, const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::OptimizationObjectivePtr</type>
      <name>opt_</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>a2b25a59faa0fabbb99d9a540ab252303</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; base::PlannerPtr &gt;</type>
      <name>planners_</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>a26984b385802c484d2444c0f61e46fe4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; base::StateSamplerPtr &gt;</type>
      <name>samplers_</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>a0cd9f52782a607c696649a18b879ae16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_set&lt; const base::State * &gt;</type>
      <name>statesShared_</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>a98df21465bd40a0ca381bf92328ce12e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::Cost</type>
      <name>bestCost_</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>a26caf4e8b3d20b8e2b0b245d1faa7afa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numPathsShared_</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>a8da0b7ee06c5009bdef0fdf9100522b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numStatesShared_</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>aff4bc36cb2c7cbf006a59c4a809a192b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::mutex</type>
      <name>newSolutionFoundMutex_</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>ab6e764f914f8514eb92d1f77b2402373</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::mutex</type>
      <name>addSamplerMutex_</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>a60fdfef9f1d1e9fee70dab618280ae81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>focusSearch_</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>ae523000e355ae5144669a57084efb1ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numThreads_</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>a0c4118c49564c89c7e42c556115cb9b2</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1CForest.html">gCForest</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::Discretization</name>
    <filename>classompl_1_1geometric_1_1Discretization.html</filename>
    <templarg></templarg>
    <class kind="struct">ompl::geometric::Discretization::CellData</class>
    <class kind="struct">ompl::geometric::Discretization::OrderCellsByImportance</class>
    <member kind="typedef">
      <type>GridB&lt; CellData *, OrderCellsByImportance &gt;</type>
      <name>Grid</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>af696d7d3f5d93dfc44975be68babdafe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Grid::Cell</type>
      <name>Cell</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a86c80c67138c62e3da31dc5e42e0726b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Grid::Coord</type>
      <name>Coord</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a2dac26349b7da7fe428522518dfea7dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::function&lt; void(Motion *)&gt;</type>
      <name>FreeMotionFn</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>ae5b7df926fd3dc7f8af068808ca27f77</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderFraction</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>aac6dfc7acc8db082a84b7bbdadb78e87</anchor>
      <arglist>(double bp)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBorderFraction</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a43a530e0a34a1d4ddb9b3534fbe6973d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimension</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>acfdbc5b059330490b55185dda00f0eb1</anchor>
      <arglist>(unsigned int dim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a43c29d951fd5206e08a33931b02c4ddc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a28df4ebd2c0d78eab8b4fc72c6f27d43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>addMotion</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a6ac71e099d8a69dc6c2ee5ff1736a277</anchor>
      <arglist>(Motion *motion, const Coord &amp;coord, double dist=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selectMotion</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a8db183fa4a3231509336ffb7057805df</anchor>
      <arglist>(Motion *&amp;smotion, Cell *&amp;scell)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::Discretization::CellData</name>
    <filename>structompl_1_1geometric_1_1Discretization_1_1CellData.html</filename>
    <member kind="variable">
      <type>std::vector&lt; Motion * &gt;</type>
      <name>motions</name>
      <anchorfile>structompl_1_1geometric_1_1Discretization_1_1CellData.html</anchorfile>
      <anchor>a1f86a75ee9bf79facf450cd4fbd5fdd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>coverage</name>
      <anchorfile>structompl_1_1geometric_1_1Discretization_1_1CellData.html</anchorfile>
      <anchor>ac7a58b36b1ec1834200c1704b63bfa3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>selections</name>
      <anchorfile>structompl_1_1geometric_1_1Discretization_1_1CellData.html</anchorfile>
      <anchor>a45ea371833bde9daba518b76d54ff794</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>score</name>
      <anchorfile>structompl_1_1geometric_1_1Discretization_1_1CellData.html</anchorfile>
      <anchor>a42338a1046b5d86cd309d79d30d34321</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>iteration</name>
      <anchorfile>structompl_1_1geometric_1_1Discretization_1_1CellData.html</anchorfile>
      <anchor>ae2164d5b2e2d2805a61aabd3e326ea62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>importance</name>
      <anchorfile>structompl_1_1geometric_1_1Discretization_1_1CellData.html</anchorfile>
      <anchor>ab6eecc2c36a2cda7a473f7fa2f556c3d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::Discretization::OrderCellsByImportance</name>
    <filename>structompl_1_1geometric_1_1Discretization_1_1OrderCellsByImportance.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structompl_1_1geometric_1_1Discretization_1_1OrderCellsByImportance.html</anchorfile>
      <anchor>a8e51b933f655a5d0908ff5b3e3b34adf</anchor>
      <arglist>(const CellData *const a, const CellData *const b) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::DynamicTimeWarpPtr</name>
    <filename>classompl_1_1geometric_1_1DynamicTimeWarpPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::EST</name>
    <filename>classompl_1_1geometric_1_1EST.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::EST::Motion</class>
    <member kind="function">
      <type></type>
      <name>EST</name>
      <anchorfile>classompl_1_1geometric_1_1EST.html</anchorfile>
      <anchor>a1c75f832cbc2519158f3bbf9ee700362</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1EST.html</anchorfile>
      <anchor>ae5086b8d789680efb6e827d59aba994f</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1EST.html</anchorfile>
      <anchor>a419a4607b75318286f0eb7507eb863b0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1EST.html</anchorfile>
      <anchor>a8b442f32077d90406ae1811a519e2177</anchor>
      <arglist>(double goalBias)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1EST.html</anchorfile>
      <anchor>a236167b0d86047c201f31868132b988f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1EST.html</anchorfile>
      <anchor>a936be30374d627e1fd6b1d2781a030e6</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1EST.html</anchorfile>
      <anchor>ab293c59d5f980841c7845e005ea77358</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1EST.html</anchorfile>
      <anchor>abf6eb6352093be62d20a6e266ce97997</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1EST.html</anchorfile>
      <anchor>aa3969882f2e27171c3c12af686d4d8aa</anchor>
      <arglist>(base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1EST.html</anchorfile>
      <anchor>af9638a4d265b54a0afacd3aa90ca6ed8</anchor>
      <arglist>(const Motion *a, const Motion *b) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1EST.html</anchorfile>
      <anchor>ab17af4f487d7f9abeb6be6baf32909e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addMotion</name>
      <anchorfile>classompl_1_1geometric_1_1EST.html</anchorfile>
      <anchor>ac7f0ef1520cceef81b84aef59376e59e</anchor>
      <arglist>(Motion *motion, const std::vector&lt; Motion * &gt; &amp;neighbors)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Motion * &gt; &gt;</type>
      <name>nn_</name>
      <anchorfile>classompl_1_1geometric_1_1EST.html</anchorfile>
      <anchor>a8c9e1e48fff84a649c2cd275f985d90b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Motion * &gt;</type>
      <name>motions_</name>
      <anchorfile>classompl_1_1geometric_1_1EST.html</anchorfile>
      <anchor>a8dc80cef51339835395b6e72c71bac90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PDF&lt; Motion * &gt;</type>
      <name>pdf_</name>
      <anchorfile>classompl_1_1geometric_1_1EST.html</anchorfile>
      <anchor>a40ef80f7fecd3117f5dfe06db3c4b766</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ValidStateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1EST.html</anchorfile>
      <anchor>ad8a720f509aba891d30bb8765f98ab31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>goalBias_</name>
      <anchorfile>classompl_1_1geometric_1_1EST.html</anchorfile>
      <anchor>a6b33b06f16776e104073cd74af8480b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistance_</name>
      <anchorfile>classompl_1_1geometric_1_1EST.html</anchorfile>
      <anchor>adecb398b5fd5d0c202663b5e2ee3f7d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>nbrhoodRadius_</name>
      <anchorfile>classompl_1_1geometric_1_1EST.html</anchorfile>
      <anchor>ae57c920eb92171c4e2dc97a45adcc847</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1EST.html</anchorfile>
      <anchor>ace4457f72f78ca1f991035c3beb17dcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>lastGoalMotion_</name>
      <anchorfile>classompl_1_1geometric_1_1EST.html</anchorfile>
      <anchor>acf7454edcd211d0b75d96388d47bd9c4</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1EST.html">gEST</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::EST::Motion</name>
    <filename>classompl_1_1geometric_1_1EST_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1geometric_1_1EST_1_1Motion.html</anchorfile>
      <anchor>a71671c21d659fea1959b7cb31e03f0c1</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state</name>
      <anchorfile>classompl_1_1geometric_1_1EST_1_1Motion.html</anchorfile>
      <anchor>acd1f3149d66c9708e29177956c1fca5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent</name>
      <anchorfile>classompl_1_1geometric_1_1EST_1_1Motion.html</anchorfile>
      <anchor>afd5c7859f515492855e625d0afef5376</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PDF&lt; Motion * &gt;::Element *</type>
      <name>element</name>
      <anchorfile>classompl_1_1geometric_1_1EST_1_1Motion.html</anchorfile>
      <anchor>a01950b8cb010ec9e4ff3385374559c93</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::ExperienceSetupPtr</name>
    <filename>classompl_1_1geometric_1_1ExperienceSetupPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::FMT</name>
    <filename>classompl_1_1geometric_1_1FMT.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="struct">ompl::geometric::FMT::CostIndexCompare</class>
    <class kind="class">ompl::geometric::FMT::Motion</class>
    <class kind="struct">ompl::geometric::FMT::MotionCompare</class>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>af063156660369eb5fc3614137ab4f4a9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a4634a51fb7ba71f27c85026429a681d3</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a8a733efe339173e8fd85db3089759671</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>aede05d3531879d2e2b3a79abcf71ab48</anchor>
      <arglist>(base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumSamples</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>afb43613a5f83ade6f8e90a0fa2afa544</anchor>
      <arglist>(const unsigned int numSamples)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumSamples</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a638861c37cc8324b869ecce3ba5e8393</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestK</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a42f5988a32959677a5359606e456bf35</anchor>
      <arglist>(bool nearestK)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getNearestK</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>afc6fbcdd145bf53480124db6cf52936a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadiusMultiplier</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>aa83e373538a982c432ac02ec432e1f01</anchor>
      <arglist>(const double radiusMultiplier)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRadiusMultiplier</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>ac02eabb1fcd28b3901534c8787520a49</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFreeSpaceVolume</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a4759ec382b8b7d936ca3217094e72cc0</anchor>
      <arglist>(const double freeSpaceVolume)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFreeSpaceVolume</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a1bc503a50a18236191404d7180880176</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCacheCC</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>ad2c94de24c34b0179245f7e0fbf244c8</anchor>
      <arglist>(bool ccc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getCacheCC</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>ad7d20b3eb6e34abc7a474c93de8a5aea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeuristics</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a9853289ae258425e0e2d164cbe4de2c3</anchor>
      <arglist>(bool h)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getHeuristics</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a40fd6f9c33e1d24c53fe1f99cdec477e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExtendedFMT</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a239d84affbc51508147b25493d0369de</anchor>
      <arglist>(bool e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getExtendedFMT</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>ad00a667d45967fe8c3854b7379d86e1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ompl::BinaryHeap&lt; Motion *, MotionCompare &gt;</type>
      <name>MotionBinHeap</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>aeaa9becaae9bca321ac6c3a740c8b5a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>ac59c55a3e5e6b67e0fe7fa3e5e04ed86</anchor>
      <arglist>(const Motion *a, const Motion *b) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a78b1fd3cfca7f4c32f2d3bf3a1fa5172</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sampleFree</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a61887b3a9a652085c2086491455b26c0</anchor>
      <arglist>(const ompl::base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>assureGoalIsSampled</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>afed93c73acbf178c41fe49d4d6a3e0de</anchor>
      <arglist>(const ompl::base::GoalSampleableRegion *goal)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>calculateUnitBallVolume</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>ae9424eb55612abaab8b9109e62e76030</anchor>
      <arglist>(unsigned int dimension) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>calculateRadius</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a3005a2f74ee6f5aee29a4af9547359a4</anchor>
      <arglist>(unsigned int dimension, unsigned int n) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>saveNeighborhood</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a257fcb8c64559bc2514493878e25675a</anchor>
      <arglist>(Motion *m)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>traceSolutionPathThroughTree</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a474bc61c2381a765f447406b0150e031</anchor>
      <arglist>(Motion *goalMotion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>expandTreeFromNode</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>ac77f66e21b5d554fac36d1f8e5b58159</anchor>
      <arglist>(Motion **z)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNeighborhood</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a58e71b64488c88d447cbcfd1296b4812</anchor>
      <arglist>(Motion *m, std::vector&lt; Motion * &gt; nbh)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Motion *</type>
      <name>getBestParent</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a5c0b13a2dc2b976701ea76e22f93b96f</anchor>
      <arglist>(Motion *m, std::vector&lt; Motion * &gt; &amp;neighbors, base::Cost &amp;cMin)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MotionBinHeap</type>
      <name>Open_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>aca5af8c2d2b2a977c24a5077e386e39d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; Motion *, std::vector&lt; Motion * &gt; &gt;</type>
      <name>neighborhoods_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a97fe3a95349783e8c43f579a5934f487</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numSamples_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a4cf51874570d8086f93d84cdcf5afa38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>collisionChecks_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>ac2363aeafad97afc4dca4da81d4465f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>nearestK_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a0f6a9a5969fc80fcf10e84ec46056a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cacheCC_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a3dcccb245843c4a244af2bb2fc8accb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>heuristics_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a46469aa4f63eb64b41cc3fca8dc6d503</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>NNr_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a72da258028ee6eafe239b4ba6cc4822c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>NNk_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a0728a9660b89e6fea28f6b3dff82d2d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>freeSpaceVolume_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a8dd5fe05d2383b43f96318afc8eb0be0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>radiusMultiplier_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a46d97fd804d843808f96973d8428665a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Motion * &gt; &gt;</type>
      <name>nn_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a420c86eff7b00b7ec20e79ecb2acee66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a9f9dd746c6cb063687e266617c4b1c29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::OptimizationObjectivePtr</type>
      <name>opt_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a67cd18c51459d03b612fb3c8355a4b66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>lastGoalMotion_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>ab3251b6c49209567fadcc43bf567eb1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::State *</type>
      <name>goalState_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a6ca36dda45204a1b4b6d90b2770d7f92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>extendedFMT_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>adff4cf3f367615fc892ec60383f3230a</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1FMT.html">gFMT</docanchor>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::FMT::CostIndexCompare</name>
    <filename>structompl_1_1geometric_1_1FMT_1_1CostIndexCompare.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::FMT::Motion</name>
    <filename>classompl_1_1geometric_1_1FMT_1_1Motion.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>SetType</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>a68a989125a03b512037ee3c8aea8bd28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>a2e9bdc4483bd55bcfa7b31bba08fee8d</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>a4488bd2a64f04406454492b0c014ea5a</anchor>
      <arglist>(base::State *state)</arglist>
    </member>
    <member kind="function">
      <type>base::State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>aa7fe35ae65f4d0b8f7f51d5ea083d4c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParent</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>a1449922309b22b10155222173fd163dd</anchor>
      <arglist>(Motion *parent)</arglist>
    </member>
    <member kind="function">
      <type>Motion *</type>
      <name>getParent</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>af66cfa3192edff6f2b937dfdfe816ba4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCost</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>a5db676fc41c3bebbc7c0fd440d2dba95</anchor>
      <arglist>(const base::Cost cost)</arglist>
    </member>
    <member kind="function">
      <type>base::Cost</type>
      <name>getCost</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>a664c45857fbf4ab70af71f99930b3987</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSetType</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>a1d61a21c419567a7b28343a0970d6f72</anchor>
      <arglist>(const SetType currentSet)</arglist>
    </member>
    <member kind="function">
      <type>SetType</type>
      <name>getSetType</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>a445be642306537effb4f837a50723fb8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>alreadyCC</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>ab8348b2ffa273ad5e8743e88aa919ae1</anchor>
      <arglist>(Motion *m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCC</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>a572eb9444051a1e04e937b38abf81ece</anchor>
      <arglist>(Motion *m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeuristicCost</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>a3d6d4d1e6a8ccbaa539e979ea2a5c9c8</anchor>
      <arglist>(const base::Cost h)</arglist>
    </member>
    <member kind="function">
      <type>base::Cost</type>
      <name>getHeuristicCost</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>ab27b2ffd7960ec06b7e968439a8ec4ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Motion * &gt; &amp;</type>
      <name>getChildren</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>a7b4d1adeacf43d4e5cfd1513215c6500</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::State *</type>
      <name>state_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>aa72507244f4d8bdf0cdfc4fa0f80f61c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>parent_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>acd90f2933f4efdd50cf3abe95a34727d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::Cost</type>
      <name>cost_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>a0cae6a60321e25e746a63fdfaa47b6a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::Cost</type>
      <name>hcost_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>a73deb7e54e0a15fb282ba2c5d3604e5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SetType</type>
      <name>currentSet_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>aeb5bf2d1c873379ca41c28464153102c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; Motion * &gt;</type>
      <name>collChecksDone_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>a968e5a91696f2c00e3a7aab335632e23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Motion * &gt;</type>
      <name>children_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>a9bcf5cc0f1bfb2c1cf34e50804ccef13</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::FMT::MotionCompare</name>
    <filename>structompl_1_1geometric_1_1FMT_1_1MotionCompare.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::GeneticSearch</name>
    <filename>classompl_1_1geometric_1_1GeneticSearch.html</filename>
    <member kind="function">
      <type></type>
      <name>GeneticSearch</name>
      <anchorfile>classompl_1_1geometric_1_1GeneticSearch.html</anchorfile>
      <anchor>a102ebe13ba8e436580b10589ced5dbd7</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1GeneticSearch.html</anchorfile>
      <anchor>a49004df0b90369b7c576d34f5a1c5458</anchor>
      <arglist>(double solveTime, const base::GoalRegion &amp;goal, base::State *result, const std::vector&lt; base::State * &gt; &amp;hint=std::vector&lt; base::State * &gt;())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxImproveSteps</name>
      <anchorfile>classompl_1_1geometric_1_1GeneticSearch.html</anchorfile>
      <anchor>a0b221def8d25da4d523097bafb0c0382</anchor>
      <arglist>(unsigned int maxSteps)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMaxImproveSteps</name>
      <anchorfile>classompl_1_1geometric_1_1GeneticSearch.html</anchorfile>
      <anchor>a103a96e3c9c38f3c01bea04c14aa3ce5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValidityCheck</name>
      <anchorfile>classompl_1_1geometric_1_1GeneticSearch.html</anchorfile>
      <anchor>a342d6b266d8cad1707e826ad6862fc21</anchor>
      <arglist>(bool valid)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getValidityCheck</name>
      <anchorfile>classompl_1_1geometric_1_1GeneticSearch.html</anchorfile>
      <anchor>a29af0d9d6a5cb085c652dc825ec1f9fd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTryImprove</name>
      <anchorfile>classompl_1_1geometric_1_1GeneticSearch.html</anchorfile>
      <anchor>a874fd7d6f65219d166bd2657ba8e21a6</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getTryImprove</name>
      <anchorfile>classompl_1_1geometric_1_1GeneticSearch.html</anchorfile>
      <anchor>abbbb3f8a223c01f67444a30579a5f57f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPoolSize</name>
      <anchorfile>classompl_1_1geometric_1_1GeneticSearch.html</anchorfile>
      <anchor>a7e1bfe0ff0b32538d8e86b9f6aafd65c</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getPoolSize</name>
      <anchorfile>classompl_1_1geometric_1_1GeneticSearch.html</anchorfile>
      <anchor>a397521e58d963ad9081c1eb1f18d894d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPoolMutationSize</name>
      <anchorfile>classompl_1_1geometric_1_1GeneticSearch.html</anchorfile>
      <anchor>ae7d2b17af8b3da5ef2d0e387f40ee7d3</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getPoolMutationSize</name>
      <anchorfile>classompl_1_1geometric_1_1GeneticSearch.html</anchorfile>
      <anchor>a5dabd12a8b8ebeab4bb73a031686183a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPoolRandomSize</name>
      <anchorfile>classompl_1_1geometric_1_1GeneticSearch.html</anchorfile>
      <anchor>a657e0ff0af8aec75bcac6c6542703226</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getPoolRandomSize</name>
      <anchorfile>classompl_1_1geometric_1_1GeneticSearch.html</anchorfile>
      <anchor>aa2bd5d5b3c68c7f3e24ee66b7e20c432</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1GeneticSearch.html</anchorfile>
      <anchor>a5159ccc66833ed8a99f4e540ecb55252</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1GeneticSearch.html</anchorfile>
      <anchor>a1076be9755c6f56701f93867f3e510f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1GeneticSearch.html</anchorfile>
      <anchor>afc6aec650f165b0b911a52adcea6f0a1</anchor>
      <arglist>()</arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1GeneticSearch.html">GeneticSearch</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::HillClimbing</name>
    <filename>classompl_1_1geometric_1_1HillClimbing.html</filename>
    <member kind="function">
      <type></type>
      <name>HillClimbing</name>
      <anchorfile>classompl_1_1geometric_1_1HillClimbing.html</anchorfile>
      <anchor>a5e56439e410188e6a7d5dbeb79bf99e3</anchor>
      <arglist>(base::SpaceInformationPtr si)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryToImprove</name>
      <anchorfile>classompl_1_1geometric_1_1HillClimbing.html</anchorfile>
      <anchor>afdc7c84b618053b0b51f1fd16a6037f5</anchor>
      <arglist>(const base::GoalRegion &amp;goal, base::State *state, double nearDistance, double *betterGoalDistance=nullptr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxImproveSteps</name>
      <anchorfile>classompl_1_1geometric_1_1HillClimbing.html</anchorfile>
      <anchor>af5c758bf483d9271d0948d10e631d9e7</anchor>
      <arglist>(unsigned int steps)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMaxImproveSteps</name>
      <anchorfile>classompl_1_1geometric_1_1HillClimbing.html</anchorfile>
      <anchor>aa85f01c217f988d1fc76640fb120ff10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValidityCheck</name>
      <anchorfile>classompl_1_1geometric_1_1HillClimbing.html</anchorfile>
      <anchor>a5f58d79e6cd1075d96bc2a8f8199ec6f</anchor>
      <arglist>(bool valid)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getValidityCheck</name>
      <anchorfile>classompl_1_1geometric_1_1HillClimbing.html</anchorfile>
      <anchor>a0b3ec85921c689f63bad8ec14fa135db</anchor>
      <arglist>() const</arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1HillClimbing.html">HillClimbing</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::InformedRRTstar</name>
    <filename>classompl_1_1geometric_1_1InformedRRTstar.html</filename>
    <base>ompl::geometric::RRTstar</base>
    <member kind="function">
      <type></type>
      <name>InformedRRTstar</name>
      <anchorfile>classompl_1_1geometric_1_1InformedRRTstar.html</anchorfile>
      <anchor>a989e59137c9ca2dfd2d2953d02d9e6b6</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1InformedRRTstar.html">gInformedRRTstar</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::KBoundedStrategy</name>
    <filename>classompl_1_1geometric_1_1KBoundedStrategy.html</filename>
    <templarg></templarg>
    <base>ompl::geometric::KStrategy</base>
    <member kind="function">
      <type></type>
      <name>KBoundedStrategy</name>
      <anchorfile>classompl_1_1geometric_1_1KBoundedStrategy.html</anchorfile>
      <anchor>a65b4a003542ae6221a1a1c9b0d93a0f1</anchor>
      <arglist>(const unsigned int k, const double bound, const std::shared_ptr&lt; NearestNeighbors&lt; Milestone &gt;&gt; &amp;nn)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const double</type>
      <name>bound_</name>
      <anchorfile>classompl_1_1geometric_1_1KBoundedStrategy.html</anchorfile>
      <anchor>a8417c2d35fa2f74ce103623888815110</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::KPIECE1</name>
    <filename>classompl_1_1geometric_1_1KPIECE1.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::KPIECE1::Motion</class>
    <member kind="function">
      <type></type>
      <name>KPIECE1</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>a192f8ba0095c91a178fc70c3eb8f0e8e</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>a37f578c6de1e0917711921e5606b405b</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>ace04937765c0d6c07486b5fbb721055c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>a8fd941be8060c5c17019887229f062d8</anchor>
      <arglist>(double goalBias)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>a01aea36afaca19499221c6586c6af442</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>aa2cbc576cd5a67a32883e9ab7bac2583</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>acc58f9c74d111ce0a70bb6e9ea0aaa14</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderFraction</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>ab51c0306d01ffe4d1912d9cdd4f55a3a</anchor>
      <arglist>(double bp)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBorderFraction</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>afd2633e1d177f63694ffe969ad71c658</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinValidPathFraction</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>a75474aa3b762ac9afa6bf475dfbe1fec</anchor>
      <arglist>(double fraction)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMinValidPathFraction</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>a5bb959c4bf014718a13728d181d9bc21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFailedExpansionCellScoreFactor</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>a335139a09460d65db1a8eb5700d1aab7</anchor>
      <arglist>(double factor)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFailedExpansionCellScoreFactor</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>ab534b3bfe08615d3743c7ef5d3f85244</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>ac62f9854c1f26808a0cfa319b0060fc2</anchor>
      <arglist>(const base::ProjectionEvaluatorPtr &amp;projectionEvaluator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>a680d607659b8ceaa51c43f0e342ce49e</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const base::ProjectionEvaluatorPtr &amp;</type>
      <name>getProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>a38926b315b3eb51de7e51a106117fc5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>a5e8a75abb9d05412e2f6c14a528be602</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>a4b9ffe641fd1ffa69d89d5253ab3498d</anchor>
      <arglist>(base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMotion</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>aea9ced6e390f478d108e7e8c1a662a54</anchor>
      <arglist>(Motion *motion)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>aeed29532bca0d2956addd5d9fe9888b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Discretization&lt; Motion &gt;</type>
      <name>disc_</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>a60d8490911f47565fc085d0b0e5c9f62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ProjectionEvaluatorPtr</type>
      <name>projectionEvaluator_</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>a0d2bea89173b3bd0b6dba6dfee899805</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>failedExpansionScoreFactor_</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>abc4ccdca2bed53632dd68c1e21f78489</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>goalBias_</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>a27013f7e58c20bf7a7ecb16a662358fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>minValidPathFraction_</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>a8fdf659ed4635fbbefc64fa627ae6ce0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistance_</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>af35630c62772c43535d8cdb6f6d87b55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>acbdf66ac8834a27368ac30d9e6d24f5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>lastGoalMotion_</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>a7011055d98a77343bf8e8b275b5a82e5</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1KPIECE1.html">gKPIECE1</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::KPIECE1::Motion</name>
    <filename>classompl_1_1geometric_1_1KPIECE1_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1_1_1Motion.html</anchorfile>
      <anchor>a943e0fe9f06808cc94fa0533b8c93a11</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1_1_1Motion.html</anchorfile>
      <anchor>a5d1e5baf3d93eef48769ba2dd635aac1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1_1_1Motion.html</anchorfile>
      <anchor>a15cb8c4fbbdf9131bf3db4679b14dace</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::KStarStrategy</name>
    <filename>classompl_1_1geometric_1_1KStarStrategy.html</filename>
    <templarg></templarg>
    <base>ompl::geometric::KStrategy</base>
    <member kind="function">
      <type></type>
      <name>KStarStrategy</name>
      <anchorfile>classompl_1_1geometric_1_1KStarStrategy.html</anchorfile>
      <anchor>a5e807ea21a7e9b3d9fbf07661826bb1a</anchor>
      <arglist>(const NumNeighborsFn &amp;n, const std::shared_ptr&lt; NearestNeighbors&lt; Milestone &gt;&gt; &amp;nn, const unsigned int d=1)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const NumNeighborsFn</type>
      <name>n_</name>
      <anchorfile>classompl_1_1geometric_1_1KStarStrategy.html</anchorfile>
      <anchor>a575ab299a1f4c23a2e3c42ae3a587634</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::KStrategy</name>
    <filename>classompl_1_1geometric_1_1KStrategy.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>KStrategy</name>
      <anchorfile>classompl_1_1geometric_1_1KStrategy.html</anchorfile>
      <anchor>a544421871709d8e6c37cc038accf511f</anchor>
      <arglist>(const unsigned int k, std::shared_ptr&lt; NearestNeighbors&lt; Milestone &gt;&gt; nn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1KStrategy.html</anchorfile>
      <anchor>afbeee96b0cec8e05c0281f87c8a3d9dd</anchor>
      <arglist>(const std::shared_ptr&lt; NearestNeighbors&lt; Milestone &gt;&gt; &amp;nn)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Milestone &gt; &amp;</type>
      <name>operator()</name>
      <anchorfile>classompl_1_1geometric_1_1KStrategy.html</anchorfile>
      <anchor>ad0f6f3289047f520643ff557628b0d3b</anchor>
      <arglist>(const Milestone &amp;m)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>k_</name>
      <anchorfile>classompl_1_1geometric_1_1KStrategy.html</anchorfile>
      <anchor>aa9592c00a8daa71d247077553052e48d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Milestone &gt; &gt;</type>
      <name>nn_</name>
      <anchorfile>classompl_1_1geometric_1_1KStrategy.html</anchorfile>
      <anchor>a595d0f37437f9726b2b788711dfc1e5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Milestone &gt;</type>
      <name>neighbors_</name>
      <anchorfile>classompl_1_1geometric_1_1KStrategy.html</anchorfile>
      <anchor>ae087877ca61f5f8822cf0d702fd581e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::LazyLBTRRT</name>
    <filename>classompl_1_1geometric_1_1LazyLBTRRT.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::LazyLBTRRT::CostEstimatorApx</class>
    <class kind="class">ompl::geometric::LazyLBTRRT::CostEstimatorLb</class>
    <class kind="class">ompl::geometric::LazyLBTRRT::Motion</class>
    <member kind="function">
      <type></type>
      <name>LazyLBTRRT</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>ae34dc9b792936eb4a273f31805e1cc22</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>a7bd178356625892d4c2895a440f9e19a</anchor>
      <arglist>(base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>afc67ab80e481d8a6249b322e69033e78</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>a477e46e95b069213f9168fae03e1adaa</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>a6d9f3699a393f1c50c186938d486ca36</anchor>
      <arglist>(double goalBias)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>a74a63d9af79d059d2c18a2c5629c5715</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>a7eb03c283f638abb7f54b03748501bc1</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>a64f482174278e564af0fcccc5b1d879a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>a74359c7dddfcd41f8b7b11af6af9379d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>a386144fbb3bb0198e6c8cf900dd3d17a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setApproximationFactor</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>a2496f76d0750da327cb330f5531a037c</anchor>
      <arglist>(double epsilon)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sampleBiased</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>a253accb0ac1a5a5a2c036ef7ce588f72</anchor>
      <arglist>(const base::GoalSampleableRegion *goal_s, base::State *rstate)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>aac164c1ad15daab61fcdf357e17cd79f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>a62b8f15d0bf78f6f7078503146c30a7b</anchor>
      <arglist>(const base::State *a, const base::State *b) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>getApproximationFactor</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>a21d344ca3b40adb949b264eb96272002</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>a48492a7923ea8c4e6599ca7e86976088</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Motion * &gt; &gt;</type>
      <name>nn_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>a76be50b77a9f869f6518c30c0b863388</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>goalBias_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>a362cc07f268a019ae61509bf05a5b2be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistance_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>a73ae9346e492a6df2d3db7e2d8d3ae36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>a1b3193f058100bb4da45bb8dec57c0c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>epsilon_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>ad9258357d42c94f2d24204c6595f153c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>lastGoalMotion_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>a3dce5e9e307bb96c31ca16ce14f356fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>iterations_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>ad3de274dd126e7c178d09a2a0a0c6414</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bestCost_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>add5eeab0c15873aacb5af4ecd7361f8b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::LazyLBTRRT::CostEstimatorApx</name>
    <filename>classompl_1_1geometric_1_1LazyLBTRRT_1_1CostEstimatorApx.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::LazyLBTRRT::CostEstimatorLb</name>
    <filename>classompl_1_1geometric_1_1LazyLBTRRT_1_1CostEstimatorLb.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::LazyLBTRRT::Motion</name>
    <filename>classompl_1_1geometric_1_1LazyLBTRRT_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT_1_1Motion.html</anchorfile>
      <anchor>a6d8d88b3df3df747b379c4c593cdc910</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>id_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT_1_1Motion.html</anchorfile>
      <anchor>a9d151ba9285a89c8ce233ecdaadd0521</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT_1_1Motion.html</anchorfile>
      <anchor>a5ed2a01d70318f885691a98c8e34705b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::LazyPRM</name>
    <filename>classompl_1_1geometric_1_1LazyPRM.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="struct">ompl::geometric::LazyPRM::edge_flags_t</class>
    <class kind="struct">ompl::geometric::LazyPRM::vertex_component_t</class>
    <class kind="struct">ompl::geometric::LazyPRM::vertex_flags_t</class>
    <class kind="struct">ompl::geometric::LazyPRM::vertex_state_t</class>
    <member kind="typedef">
      <type>boost::adjacency_list_traits&lt; boost::vecS, boost::listS, boost::undirectedS &gt;::vertex_descriptor</type>
      <name>Vertex</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a3444b46b9abe6276a820c5792b3e9d9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::adjacency_list&lt; boost::vecS, boost::listS, boost::undirectedS, boost::property&lt; vertex_state_t, base::State *, boost::property&lt; boost::vertex_index_t, unsigned long int, boost::property&lt; vertex_flags_t, unsigned int, boost::property&lt; vertex_component_t, unsigned long int, boost::property&lt; boost::vertex_predecessor_t, Vertex, boost::property&lt; boost::vertex_rank_t, unsigned long int &gt; &gt;&gt; &gt;&gt; &gt;, boost::property&lt; boost::edge_weight_t, base::Cost, boost::property&lt; edge_flags_t, unsigned int &gt; &gt;&gt;</type>
      <name>Graph</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a98dd9d439eec42797973cf6a945603d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph_traits&lt; Graph &gt;::edge_descriptor</type>
      <name>Edge</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>ae7f6dc9cc10f3a2ac5e8631f61d0436e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Vertex &gt; &gt;</type>
      <name>RoadmapNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a522222dd27c3cf391ad8ed7d2d54b658</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; const std::vector&lt; Vertex &gt; &amp;(const Vertex)&gt;</type>
      <name>ConnectionStrategy</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a499a121ce9a9d4b63b5d2371c41cb283</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; bool(const Vertex &amp;, const Vertex &amp;)&gt;</type>
      <name>ConnectionFilter</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>adce43622537c7f1a5e7307438fb3af08</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LazyPRM</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>aa63b04145d5e0af3da3f674a812dccdb</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si, bool starStrategy=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LazyPRM</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a75c7ec327a9037ff9f1761f025be8f24</anchor>
      <arglist>(const base::PlannerData &amp;data, bool starStrategy=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a1765a9b7fcd212255dee4c1d19ad6e68</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a9bf7cfc4ccbaf96585c80aafbfea2e4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a5fc492995adb9a7cde597b5ccc9492ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConnectionStrategy</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a1e40a02beaa616ed5113e6c684451c96</anchor>
      <arglist>(const ConnectionStrategy &amp;connectionStrategy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultConnectionStrategy</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>abe01fe0ead4eb09a6464a5d79984fd42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxNearestNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a401a0017e3d7f0af28b994ca15551760</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConnectionFilter</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a8e5afdfd294ce840b5918990406854da</anchor>
      <arglist>(const ConnectionFilter &amp;connectionFilter)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long int</type>
      <name>milestoneCount</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a9f9d2378c602a01d2133f791ba8e82e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long int</type>
      <name>edgeCount</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a8f042ce14a00a19b8d2c45899593141d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a84f84f8261d2bea0156c9995ca004f17</anchor>
      <arglist>(base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>af0d458646c4ec8beed75d9f9d91ab35d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a4d2fa48d628921d9fde03e26b02fee0e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearQuery</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a0a2cf669e8e65d17ef21776eb17dcd5f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearValidity</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a119f27a626a8aec4cd24038f2890b784</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a5c22a2b6d8549f3966eb12279550e7d0</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a39498f53a3a21f6b2f79b969c21b6f47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Vertex</type>
      <name>addMilestone</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a67fc35ddf02bfda235c5c1cf9bc4562f</anchor>
      <arglist>(base::State *state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>long int</type>
      <name>solutionComponent</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>aea38d543bdd18d4f52c343d253ac1521</anchor>
      <arglist>(std::pair&lt; std::size_t, std::size_t &gt; *startGoalPair) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ompl::base::PathPtr</type>
      <name>constructSolution</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a45c2d9a402b4a0ed55e159857157c1ac</anchor>
      <arglist>(const Vertex &amp;start, const Vertex &amp;goal)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>acf939f87b23f147ccd3feb81ba230786</anchor>
      <arglist>(const Vertex a, const Vertex b) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>base::Cost</type>
      <name>costHeuristic</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a4050bed8492b265ac4cb2297eaedfee1</anchor>
      <arglist>(Vertex u, Vertex v) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>starStrategy_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a69e4d8cc2927af5087ee17a298d75a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConnectionStrategy</type>
      <name>connectionStrategy_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>ae1e9b00858c7f6db43c067917fb11fef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConnectionFilter</type>
      <name>connectionFilter_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>afd182af51b6ee32e9524d2facba797c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>userSetConnectionStrategy_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a3bea9f10cbd61b2918ac4be6f6815e50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistance_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a66bd8ec10704ff451fbc06c590dfa540</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>af8d4a07e4fe1cbbae2c882e208b30f44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RoadmapNeighbors</type>
      <name>nn_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>ab63912cee459a58f13540dcd851b2e93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Graph</type>
      <name>g_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a791c1417a166d7a891d62dfde5e816c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Vertex &gt;</type>
      <name>startM_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a193ae6dbe80dee3d69097664cf4cc157</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Vertex &gt;</type>
      <name>goalM_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>aba83ef4574f52fe4127ac35f96b360cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; Graph, boost::vertex_index_t &gt;::type</type>
      <name>indexProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>ac6883f39c60bace14e1ad799a34ecd97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; Graph, vertex_state_t &gt;::type</type>
      <name>stateProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>afcd49e46180b5049341e6933a9de1b0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; Graph, boost::edge_weight_t &gt;::type</type>
      <name>weightProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a661d990a47db9f64ff51d93020037584</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; Graph, vertex_component_t &gt;::type</type>
      <name>vertexComponentProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a62769ed475cd1e37ff07ec407a0c6474</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; Graph, vertex_flags_t &gt;::type</type>
      <name>vertexValidityProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a37d00831d96da1a1be102bddefbea94e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; Graph, edge_flags_t &gt;::type</type>
      <name>edgeValidityProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a150ec69782ce5334c8c7c4ab016ec820</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long int</type>
      <name>componentCount_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a30baba1e3bcffaff085f832ac162e4e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; unsigned long int, unsigned long int &gt;</type>
      <name>componentSize_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a62ef1b20443606277a39897328d6a202</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::OptimizationObjectivePtr</type>
      <name>opt_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>af9b2195ab4aab77da2d502852e733bb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned int</type>
      <name>VALIDITY_UNKNOWN</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a0f8d4331eaf7c657f88fa3415191ecba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned int</type>
      <name>VALIDITY_TRUE</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a661a08c5c42362193d401f41e14d9d56</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1LazyPRM.html">gLazyPRM</docanchor>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::LazyPRM::edge_flags_t</name>
    <filename>structompl_1_1geometric_1_1LazyPRM_1_1edge__flags__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::LazyPRM::vertex_component_t</name>
    <filename>structompl_1_1geometric_1_1LazyPRM_1_1vertex__component__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::LazyPRM::vertex_flags_t</name>
    <filename>structompl_1_1geometric_1_1LazyPRM_1_1vertex__flags__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::LazyPRM::vertex_state_t</name>
    <filename>structompl_1_1geometric_1_1LazyPRM_1_1vertex__state__t.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::LazyPRMstar</name>
    <filename>classompl_1_1geometric_1_1LazyPRMstar.html</filename>
    <base>ompl::geometric::LazyPRM</base>
    <member kind="function">
      <type></type>
      <name>LazyPRMstar</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRMstar.html</anchorfile>
      <anchor>a09c824259fa29308a8fcf43271f2b891</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LazyPRMstar</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRMstar.html</anchorfile>
      <anchor>a6ebeacaeb42b603bd16a819c8195033f</anchor>
      <arglist>(const base::PlannerData &amp;data)</arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1LazyPRMstar.html">gLazyPRMstar</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::LazyRRT</name>
    <filename>classompl_1_1geometric_1_1LazyRRT.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::LazyRRT::Motion</class>
    <member kind="function">
      <type></type>
      <name>LazyRRT</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT.html</anchorfile>
      <anchor>a2dc07de136a0b403de8c6a3a1522e37b</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT.html</anchorfile>
      <anchor>a6d541e0a5f875621e6367d30523c33f8</anchor>
      <arglist>(base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT.html</anchorfile>
      <anchor>ae03287764a7d773277028265acfbed5f</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT.html</anchorfile>
      <anchor>afc7caed92485a018413944f4bdf9b4dc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT.html</anchorfile>
      <anchor>a10f898a72e483d07aeb1c342da680647</anchor>
      <arglist>(double goalBias)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT.html</anchorfile>
      <anchor>a534d06edd84f05412e62221db7e08882</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT.html</anchorfile>
      <anchor>a3ad217eae43c5334c541ca1b970cd05a</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT.html</anchorfile>
      <anchor>a7b09d49bd48945b283869e2fcfa298ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT.html</anchorfile>
      <anchor>a14e546ee737569ebcffe39b5b67302ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT.html</anchorfile>
      <anchor>ae0f21e130908a21770b0d138cef2efa4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT.html</anchorfile>
      <anchor>afa65d03f2d1708f90348a6ecc04b133d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeMotion</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT.html</anchorfile>
      <anchor>a52db5160e4d6d95b94fd24ca0e8ed7ed</anchor>
      <arglist>(Motion *motion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT.html</anchorfile>
      <anchor>ab97d7184a0bdd2e17c01971760cde01f</anchor>
      <arglist>(const Motion *a, const Motion *b) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT.html</anchorfile>
      <anchor>a5aa999ccbedbabb3fa1fddc4f32ba868</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Motion * &gt; &gt;</type>
      <name>nn_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT.html</anchorfile>
      <anchor>abc42dc34ed2ad19f73df6f459b2325d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>goalBias_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT.html</anchorfile>
      <anchor>a10e6b543e9422141d63192733e47dd55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistance_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT.html</anchorfile>
      <anchor>a612432cabf814516d250b47fb5e0d62a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT.html</anchorfile>
      <anchor>a95998cdb5bc1e7fd7c49c9d5edfd586f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>lastGoalMotion_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT.html</anchorfile>
      <anchor>a3bd26266e597fec0398dd416366ef452</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1LazyRRT.html">gLazyRRT</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::LazyRRT::Motion</name>
    <filename>classompl_1_1geometric_1_1LazyRRT_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT_1_1Motion.html</anchorfile>
      <anchor>af7627ac68593b7e94950836c05fc617e</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT_1_1Motion.html</anchorfile>
      <anchor>abe60e6fad09f70801cae054c6c44a05d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT_1_1Motion.html</anchorfile>
      <anchor>a7cf8143be840e71b21fa8837507f50be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT_1_1Motion.html</anchorfile>
      <anchor>abfb04aece324f8c752b1070cf03247de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Motion * &gt;</type>
      <name>children</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT_1_1Motion.html</anchorfile>
      <anchor>a29a007f9598139652a3fbd05cf0c1f98</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::LBKPIECE1</name>
    <filename>classompl_1_1geometric_1_1LBKPIECE1.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::LBKPIECE1::Motion</class>
    <member kind="function">
      <type></type>
      <name>LBKPIECE1</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>a8e0b666627ef259f53f1f61d39e0e144</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>ad1a19e34bbf41e4417193acdb9588a01</anchor>
      <arglist>(const base::ProjectionEvaluatorPtr &amp;projectionEvaluator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>aea762724dae8ea9fb0dd505e5547f0a0</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const base::ProjectionEvaluatorPtr &amp;</type>
      <name>getProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>a548fb9b4611a4ff138e8021930c4bf6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>a7f5b7bb07df09b0004126c544e767d05</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>a17596f51a5da2a4350efd25dc03eade2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderFraction</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>a75bf4fdda87e444fe86ad1c5280e20eb</anchor>
      <arglist>(double bp)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBorderFraction</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>a0927b230856eb5f4c44dc4a90ca32a60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinValidPathFraction</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>a127a917b708457b75841ab0fcbdc0f5d</anchor>
      <arglist>(double fraction)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMinValidPathFraction</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>a478a8eaae8d2e83319ed6365f9739aab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>a76d2f6068abb6f74ea5ec2765dd2c64f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>afb2aaa9f04d1a4ec84b4830a618f8c4b</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>a1ea5b05b86d08099af280337812ed3ca</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>a4e1553588a4db8535af00ad8c923e6c8</anchor>
      <arglist>(base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMotion</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>ad0749f58ef83e7c6206646d0b6c22640</anchor>
      <arglist>(Motion *motion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeMotion</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>a17099eefde5f6bbcc95fc9c0492c25af</anchor>
      <arglist>(Discretization&lt; Motion &gt; &amp;disc, Motion *motion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isPathValid</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>aa018c98afa53ab5a27ae60d9336b3d75</anchor>
      <arglist>(Discretization&lt; Motion &gt; &amp;disc, Motion *motion, base::State *temp)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>ae02c891235992920b5c0e7b69f554c9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ProjectionEvaluatorPtr</type>
      <name>projectionEvaluator_</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>a0aa6ba979bea06453f4fee03e1159556</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Discretization&lt; Motion &gt;</type>
      <name>dStart_</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>aeced0b4215221d09d1469b378b96c971</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Discretization&lt; Motion &gt;</type>
      <name>dGoal_</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>afb985c691eff1d1e0dafc816c4278549</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>minValidPathFraction_</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>a2232185fbc0d75b6848e10cc08913299</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistance_</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>a0d2971f710e5e969955bca7fd81136b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>a479b1ca98e2f83020e1a9063c388ef92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::pair&lt; base::State *, base::State * &gt;</type>
      <name>connectionPoint_</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>a1cb60444b76b950b1ea95d289bc0f1a5</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1LBKPIECE1.html">gLBKPIECE1</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::LBKPIECE1::Motion</name>
    <filename>classompl_1_1geometric_1_1LBKPIECE1_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1_1_1Motion.html</anchorfile>
      <anchor>aae061391718efcded6e346f2ea6ce243</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="variable">
      <type>const base::State *</type>
      <name>root</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1_1_1Motion.html</anchorfile>
      <anchor>a8c1ec81c132808c43d8eac4ae1215505</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1_1_1Motion.html</anchorfile>
      <anchor>aa8e2b686b5de213e2fd0221927086990</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1_1_1Motion.html</anchorfile>
      <anchor>a6a7023de2ed53ea46eccb659c81b33c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1_1_1Motion.html</anchorfile>
      <anchor>aed3e73c089b6bf639c95d3eded41346d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Motion * &gt;</type>
      <name>children</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1_1_1Motion.html</anchorfile>
      <anchor>a0b10e89afc7e347a70fd8f0878d15a33</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::LBTRRT</name>
    <filename>classompl_1_1geometric_1_1LBTRRT.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="struct">ompl::geometric::LBTRRT::IsLessThan</class>
    <class kind="struct">ompl::geometric::LBTRRT::IsLessThanLB</class>
    <class kind="class">ompl::geometric::LBTRRT::Motion</class>
    <member kind="function">
      <type></type>
      <name>LBTRRT</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>ab0536dead0cb0e12e71dd6df46ad2024</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a37a61e645ae29882bd10abcb7e536376</anchor>
      <arglist>(base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a6e86fdd77b1eeb4ed77dee0ddc335380</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a7d7397fbbaef26ca7b8476424f79fa40</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>ab9750d0634408d023e6a749270b4df4f</anchor>
      <arglist>(double goalBias)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a084e9a51b847d8333bae1ddf8b63df5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a358e28dee50dfb709f250bd019c826b2</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a1d7dcfd088a6d8a94d54fb3af8861e3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>ae9a2ab041d5ff5f4dd570399bbfca6bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a0290b0c81715e7354f4b4775086bb27b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setApproximationFactor</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a18f75351beeb490c55d2b0593c3dbb77</anchor>
      <arglist>(double epsilon)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getApproximationFactor</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>aa1d52e7bc79cdac3174ac0c25676e839</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>considerEdge</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>aa399272399c733321a7c048ca8bfca2c</anchor>
      <arglist>(Motion *parent, Motion *child, double c)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>lazilyUpdateApxParent</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a3438d940f59bff76794d27563910babb</anchor>
      <arglist>(Motion *child, Motion *parent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateChildCostsApx</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>abd4fb1d4c9dae12d171d6bd84e85becf</anchor>
      <arglist>(Motion *m, double delta)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeFromParentApx</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a0e14a3b94b1cc882fbac85ef16fa5dd5</anchor>
      <arglist>(Motion *m)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a806c3990afa5a5d03cfd7079099666c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a1a92cc5fcfb9d693d94f879fab1c8d5e</anchor>
      <arglist>(const Motion *a, const Motion *b) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkMotion</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>acb2a0602d86673eeb5c53792f5ba56a4</anchor>
      <arglist>(const Motion *a, const Motion *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkMotion</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a67ab287545c888b365152409325c4a34</anchor>
      <arglist>(const base::State *a, const base::State *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Motion *</type>
      <name>getMotion</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a5470b0c0d9ab1ca44ff5ece305df32ca</anchor>
      <arglist>(std::size_t i)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>af34446f208aed4e824b01929e6a180ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Motion * &gt; &gt;</type>
      <name>nn_</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a29cec2400c570c5b95d92ccf94ec36e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DynamicSSSP</type>
      <name>lowerBoundGraph_</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a11c52c90fde376912ba02a48e8e42b04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Motion * &gt;</type>
      <name>idToMotionMap_</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>af8605169df9d289da724476d4a99fb49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>goalBias_</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a59d5d9da393631ec5b159fbf1334b7d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistance_</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a8c1d7d465b8a71041959413bc7a6691e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>epsilon_</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a5fe177063850efdaac7ca1a01ed07630</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a72884b4660a347e352fac9f54b21cb6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>lastGoalMotion_</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a55a1df1e9042d885b7092440b31962e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>iterations_</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a1f8d3c3a0528a8f1ed20f759a6ccaeaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bestCost_</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a87ba7cc4cbdf98f46856f150e4db7252</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1LBTRRT.html">gLBTRRT</docanchor>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::LBTRRT::IsLessThan</name>
    <filename>structompl_1_1geometric_1_1LBTRRT_1_1IsLessThan.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::LBTRRT::IsLessThanLB</name>
    <filename>structompl_1_1geometric_1_1LBTRRT_1_1IsLessThanLB.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::LBTRRT::Motion</name>
    <filename>classompl_1_1geometric_1_1LBTRRT_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT_1_1Motion.html</anchorfile>
      <anchor>afa267a16c3ccd400f868f08a262ca8f6</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state_</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT_1_1Motion.html</anchorfile>
      <anchor>a5e7419827789c28c05935db3e6cddd92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>id_</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT_1_1Motion.html</anchorfile>
      <anchor>a2cde0daa86fd557543c49e7ca525e80c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>costLb_</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT_1_1Motion.html</anchorfile>
      <anchor>a3616d7e157fc80baa052f31001edf226</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parentApx_</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT_1_1Motion.html</anchorfile>
      <anchor>a8b44fb0e469c88338bd332365052af78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>costApx_</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT_1_1Motion.html</anchorfile>
      <anchor>aa17308ad2ca1f90c730dafc729ebf782</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Motion * &gt;</type>
      <name>childrenApx_</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT_1_1Motion.html</anchorfile>
      <anchor>acd3f5b92ee0811cc604db2c2de641ebd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::LightningDBPtr</name>
    <filename>classompl_1_1geometric_1_1LightningDBPtr.html</filename>
    <docanchor file="classompl_1_1geometric_1_1LightningDBPtr.html">LightningDB</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::LightningPtr</name>
    <filename>classompl_1_1geometric_1_1LightningPtr.html</filename>
    <docanchor file="classompl_1_1geometric_1_1LightningPtr.html">Lightning</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::LightningRetrieveRepair</name>
    <filename>classompl_1_1geometric_1_1LightningRetrieveRepair.html</filename>
    <base>ompl::base::Planner</base>
    <member kind="function">
      <type></type>
      <name>LightningRetrieveRepair</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>a28f17397f83c81fdd73ceb3befcd9796</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si, tools::LightningDBPtr experienceDB)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>a4633233e2c2b495fe1c5968865a786a2</anchor>
      <arglist>(base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; base::PlannerDataPtr &gt; &amp;</type>
      <name>getLastRecalledNearestPaths</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>a225bdac9cb7854dff192f766eedbc4ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getLastRecalledNearestPathChosen</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>ac91dc93eb234cea1d639826aa26f6702</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerDataPtr</type>
      <name>getChosenRecallPath</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>a121b748725bfa1cdf355f8c9b705316c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRepairPlannerDatas</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>a20bd4b5e101f6742fbe05c0b42a04e02</anchor>
      <arglist>(std::vector&lt; base::PlannerDataPtr &gt; &amp;data) const</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>a9cf67e250b76ed1fd21e2ec028ac06cf</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>a63855050b74b35b4131195941545ea68</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLightningDB</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>a26f37bdcb6bef0d3d680a7cb15459577</anchor>
      <arglist>(const tools::LightningDBPtr &amp;experienceDB)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRepairPlanner</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>a23fa9a3cf9f8b172e61b1f70e84217e7</anchor>
      <arglist>(const base::PlannerPtr &amp;planner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>a0985927daf6e6e569da70b7edf1ad28a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>repairPath</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>a4c3252637f05f63f13fc1b741771d42d</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc, geometric::PathGeometric &amp;primaryPath)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>replan</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>a183839946bff248b82d2aece6d5852e8</anchor>
      <arglist>(const base::State *start, const base::State *goal, geometric::PathGeometric &amp;newPathSegment, const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumNearestSolutions</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>aed5505c87f65fa7946dfd4c999c3aa54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumNearestSolutions</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>a42c04059093fe30958e23e31fd197502</anchor>
      <arglist>(int nearestK)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::size_t</type>
      <name>checkMotionScore</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>a7e349478085482a1c50466760ce696c5</anchor>
      <arglist>(const base::State *s1, const base::State *s2) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>findBestPath</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>a2dd7a6aac3c66f107834a8395c0136a0</anchor>
      <arglist>(const base::State *startState, const base::State *goalState, base::PlannerDataPtr &amp;chosenPath)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>tools::LightningDBPtr</type>
      <name>experienceDB_</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>a4cb53d64947938c60db15da564e48481</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; base::PlannerDataPtr &gt;</type>
      <name>nearestPaths_</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>ad56a997e554ee11da7bdadacca0a458a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>nearestPathsChosenID_</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>ab301d33cde52e726b07d2c2b2146ff3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::PlannerPtr</type>
      <name>repairPlanner_</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>aea4d6fabb4d877e238d380da5684d8a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ProblemDefinitionPtr</type>
      <name>repairProblemDef_</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>a1a17a072841129d9a064b80cedbfd22b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; base::PlannerDataPtr &gt;</type>
      <name>repairPlannerDatas_</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>ab255f5dfcdc7c925dc5774f7b07d8d14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>geometric::PathSimplifierPtr</type>
      <name>psk_</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>a5758fd81b6ed0d1df24e686617647f26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nearestK_</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>a139f8d7fb60e79fcdc16a08ebb4e1fdc</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1LightningRetrieveRepair.html">LightningRetrieveRepair</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::MultiQuotient</name>
    <filename>classompl_1_1geometric_1_1MultiQuotient.html</filename>
    <templarg></templarg>
    <base>ompl::base::Planner</base>
    <class kind="struct">ompl::geometric::MultiQuotient::CmpQuotientSpacePtrs</class>
    <member kind="function">
      <type></type>
      <name>MultiQuotient</name>
      <anchorfile>classompl_1_1geometric_1_1MultiQuotient.html</anchorfile>
      <anchor>ad93c6dc42768f867182edde4f8f03110</anchor>
      <arglist>(std::vector&lt; ompl::base::SpaceInformationPtr &gt; &amp;siVec, std::string type=&quot;QuotientPlanner&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1MultiQuotient.html</anchorfile>
      <anchor>ae718b8c5556a468501a0364d82ac8da9</anchor>
      <arglist>(ompl::base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1MultiQuotient.html</anchorfile>
      <anchor>af9d9fd12adcac413f3e8ae4a40d22389</anchor>
      <arglist>(const ompl::base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1MultiQuotient.html</anchorfile>
      <anchor>ac0ee9db4804bc298cdb5c101cf207b44</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1MultiQuotient.html</anchorfile>
      <anchor>a12dbcbf99da65d23b64c1f7d0af6dcf9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProblemDefinition</name>
      <anchorfile>classompl_1_1geometric_1_1MultiQuotient.html</anchorfile>
      <anchor>ae06b01d501a5b0c867e8ce9eb3890451</anchor>
      <arglist>(const ompl::base::ProblemDefinitionPtr &amp;pdef) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLevels</name>
      <anchorfile>classompl_1_1geometric_1_1MultiQuotient.html</anchorfile>
      <anchor>aa4225e29ba1eefc417b2b2272ec37f11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt;</type>
      <name>getFeasibleNodes</name>
      <anchorfile>classompl_1_1geometric_1_1MultiQuotient.html</anchorfile>
      <anchor>a0dcfdcc1bcba953e5e885170584dcbe4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt;</type>
      <name>getNodes</name>
      <anchorfile>classompl_1_1geometric_1_1MultiQuotient.html</anchorfile>
      <anchor>ad11719ea7ace9386a664080d5cf415f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt;</type>
      <name>getDimensionsPerLevel</name>
      <anchorfile>classompl_1_1geometric_1_1MultiQuotient.html</anchorfile>
      <anchor>a0610ca7eb928be4aefbf7af7e3c6cf2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::priority_queue&lt; QuotientSpace *, std::vector&lt; QuotientSpace * &gt;, CmpQuotientSpacePtrs &gt;</type>
      <name>QuotientSpacePriorityQueue</name>
      <anchorfile>classompl_1_1geometric_1_1MultiQuotient.html</anchorfile>
      <anchor>afa6e2f21acc934b61f8ece57be8a8cfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ompl::base::PathPtr &gt;</type>
      <name>solutions_</name>
      <anchorfile>classompl_1_1geometric_1_1MultiQuotient.html</anchorfile>
      <anchor>af5cfca9a6af76d02f8871fc010748052</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; QuotientSpace * &gt;</type>
      <name>quotientSpaces_</name>
      <anchorfile>classompl_1_1geometric_1_1MultiQuotient.html</anchorfile>
      <anchor>a752a3a6b9b3d8f45fd487095a33eefeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>foundKLevelSolution_</name>
      <anchorfile>classompl_1_1geometric_1_1MultiQuotient.html</anchorfile>
      <anchor>a95aa7513480a17bbfc42faaa12978f5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>currentQuotientLevel_</name>
      <anchorfile>classompl_1_1geometric_1_1MultiQuotient.html</anchorfile>
      <anchor>a2719be13fdd72bfb0bc7cec2b2559ff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>stopAtLevel_</name>
      <anchorfile>classompl_1_1geometric_1_1MultiQuotient.html</anchorfile>
      <anchor>a886a8ac216214b081bcc9e4dda80b6ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ompl::base::SpaceInformationPtr &gt;</type>
      <name>siVec_</name>
      <anchorfile>classompl_1_1geometric_1_1MultiQuotient.html</anchorfile>
      <anchor>a4d70aea987dbd17dfa67c11dcb9a501c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::MultiQuotient::CmpQuotientSpacePtrs</name>
    <filename>structompl_1_1geometric_1_1MultiQuotient_1_1CmpQuotientSpacePtrs.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::PathGeometric</name>
    <filename>classompl_1_1geometric_1_1PathGeometric.html</filename>
    <base>ompl::base::Path</base>
    <member kind="function">
      <type></type>
      <name>PathGeometric</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>ab85d32ca5bce67da74a3b116ac11fd73</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PathGeometric</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a45d676fcc2896ecf9e9156bac2cba4fb</anchor>
      <arglist>(const PathGeometric &amp;path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PathGeometric</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a1e872d1a6b4528ec809b2fcc1e2c34bd</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si, const base::State *state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PathGeometric</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>aa61a7877241c63468398fa82d9021957</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si, const base::State *state1, const base::State *state2)</arglist>
    </member>
    <member kind="function">
      <type>PathGeometric &amp;</type>
      <name>operator=</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a44bcadcd08a5c494557652d7f75f0e17</anchor>
      <arglist>(const PathGeometric &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>base::Cost</type>
      <name>cost</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>ab158a42de7bcdd1b41a4228955535d21</anchor>
      <arglist>(const base::OptimizationObjectivePtr &amp;obj) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>length</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a8874ee6287db8736844a997702cc93af</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>check</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a16a6593f43ee73bebcc3f5de8ceee29b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>smoothness</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a10b135957051a6923a8a1f4e23b10453</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>clearance</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a264077e2fa5f4ec6ffaa4199016e7529</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a2d1fb7095d1bc93aafa899ec8e97d206</anchor>
      <arglist>(std::ostream &amp;out) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printAsMatrix</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a3f39595d6821f88fcdbdc6382f94c9d5</anchor>
      <arglist>(std::ostream &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a29c50018bc71d4d25b0f8e4d3e97aecd</anchor>
      <arglist>(unsigned int count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a824b91d04ba886c82c1dda3e356fd1f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subdivide</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a5caa37ae16443f1d9b271f6e8d5baf77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverse</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a68e0627b7957b35e2723f9434ace5a95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; bool, bool &gt;</type>
      <name>checkAndRepair</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a348f26bf4989964dddf791ef746a9098</anchor>
      <arglist>(unsigned int attempts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>overlay</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>addc7c545fa8a284978c1e1e016425779</anchor>
      <arglist>(const PathGeometric &amp;over, unsigned int startIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>aa9eb3ea81cc3ab442aae67d311bc4156</anchor>
      <arglist>(const base::State *state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>aa054135956c0ce6c7c447451a0a02cbb</anchor>
      <arglist>(const PathGeometric &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepend</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a569a99480710219771fe9a5e00b0b271</anchor>
      <arglist>(const base::State *state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>keepAfter</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a362fc9c2882411fb1a9a4ed6f455bb24</anchor>
      <arglist>(const base::State *state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>keepBefore</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a795008c4bba0631eae4bbaedb953d6a0</anchor>
      <arglist>(const base::State *state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>random</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a67c54a5fc580e7914bb594e58a096089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>randomValid</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a1441132f612f309257fb172def71de1a</anchor>
      <arglist>(unsigned int attempts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getClosestIndex</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>ad4dd97199351d75f3f9fb3f96543790a</anchor>
      <arglist>(const base::State *state) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; base::State * &gt; &amp;</type>
      <name>getStates</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>ae124d24520b2d20635ec22805a252c8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>base::State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>acea7c8dc9b28e6bb81ec62d4c0b4730b</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>const base::State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a449eb02c6c80e6647710db64b247036c</anchor>
      <arglist>(unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getStateCount</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a06b50a8e39a60ab2ad96aa9e63ae752f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a59f4037b632c9cf8d14cee6b67a2a1d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a41fcd4765ed30b4e8058fc3a7869160b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>copyFrom</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a79b0a01a8075a16666b475e1c0227968</anchor>
      <arglist>(const PathGeometric &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; base::State * &gt;</type>
      <name>states_</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>acf267e5cab5bdf8d6a47b7af2e97a33e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a29c50018bc71d4d25b0f8e4d3e97aecd</anchor>
      <arglist>(unsigned int count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a824b91d04ba886c82c1dda3e356fd1f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subdivide</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a5caa37ae16443f1d9b271f6e8d5baf77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverse</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a68e0627b7957b35e2723f9434ace5a95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; bool, bool &gt;</type>
      <name>checkAndRepair</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a348f26bf4989964dddf791ef746a9098</anchor>
      <arglist>(unsigned int attempts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>overlay</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>addc7c545fa8a284978c1e1e016425779</anchor>
      <arglist>(const PathGeometric &amp;over, unsigned int startIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>aa9eb3ea81cc3ab442aae67d311bc4156</anchor>
      <arglist>(const base::State *state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>aa054135956c0ce6c7c447451a0a02cbb</anchor>
      <arglist>(const PathGeometric &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepend</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a569a99480710219771fe9a5e00b0b271</anchor>
      <arglist>(const base::State *state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>keepAfter</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a362fc9c2882411fb1a9a4ed6f455bb24</anchor>
      <arglist>(const base::State *state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>keepBefore</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a795008c4bba0631eae4bbaedb953d6a0</anchor>
      <arglist>(const base::State *state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>random</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a67c54a5fc580e7914bb594e58a096089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>randomValid</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a1441132f612f309257fb172def71de1a</anchor>
      <arglist>(unsigned int attempts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getClosestIndex</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>ad4dd97199351d75f3f9fb3f96543790a</anchor>
      <arglist>(const base::State *state) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; base::State * &gt; &amp;</type>
      <name>getStates</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>ae124d24520b2d20635ec22805a252c8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>base::State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>acea7c8dc9b28e6bb81ec62d4c0b4730b</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>const base::State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a449eb02c6c80e6647710db64b247036c</anchor>
      <arglist>(unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getStateCount</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a06b50a8e39a60ab2ad96aa9e63ae752f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a59f4037b632c9cf8d14cee6b67a2a1d5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::PathHybridization</name>
    <filename>classompl_1_1geometric_1_1PathHybridization.html</filename>
    <member kind="function">
      <type></type>
      <name>PathHybridization</name>
      <anchorfile>classompl_1_1geometric_1_1PathHybridization.html</anchorfile>
      <anchor>ab50aa972c80f5c6f2d1f08e8544bc967</anchor>
      <arglist>(base::SpaceInformationPtr si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PathHybridization</name>
      <anchorfile>classompl_1_1geometric_1_1PathHybridization.html</anchorfile>
      <anchor>ab83f1d569fd6a9e4b0ecc3dcb916891e</anchor>
      <arglist>(base::SpaceInformationPtr si, base::OptimizationObjectivePtr obj)</arglist>
    </member>
    <member kind="function">
      <type>const geometric::PathGeometricPtr &amp;</type>
      <name>getHybridPath</name>
      <anchorfile>classompl_1_1geometric_1_1PathHybridization.html</anchorfile>
      <anchor>a66eee6c476994a6a6f69906ab81ecc84</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeHybridPath</name>
      <anchorfile>classompl_1_1geometric_1_1PathHybridization.html</anchorfile>
      <anchor>a79c48a4d834b1dca0c688f7cb737e5f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>recordPath</name>
      <anchorfile>classompl_1_1geometric_1_1PathHybridization.html</anchorfile>
      <anchor>af1915b0bf2371adbe6816a1d78c41efd</anchor>
      <arglist>(const geometric::PathGeometricPtr &amp;pp, bool matchAcrossGaps)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>pathCount</name>
      <anchorfile>classompl_1_1geometric_1_1PathHybridization.html</anchorfile>
      <anchor>af8d9d65f6d1af713f318ce3d717ea5ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>matchPaths</name>
      <anchorfile>classompl_1_1geometric_1_1PathHybridization.html</anchorfile>
      <anchor>ad440c6adfc1c82b073a1431bafe081a4</anchor>
      <arglist>(const geometric::PathGeometric &amp;p, const geometric::PathGeometric &amp;q, double gapValue, std::vector&lt; int &gt; &amp;indexP, std::vector&lt; int &gt; &amp;indexQ) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1PathHybridization.html</anchorfile>
      <anchor>a74c4015d5af2479d1e6ab03117b0bb08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classompl_1_1geometric_1_1PathHybridization.html</anchorfile>
      <anchor>a9ac12a95ac9da0a5c8ed345019351c5f</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classompl_1_1geometric_1_1PathHybridization.html</anchorfile>
      <anchor>a069fed5370649206715ae9c86bb821f0</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::PathHybridizationPtr</name>
    <filename>classompl_1_1geometric_1_1PathHybridizationPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::PathSimplifier</name>
    <filename>classompl_1_1geometric_1_1PathSimplifier.html</filename>
    <member kind="function">
      <type></type>
      <name>PathSimplifier</name>
      <anchorfile>classompl_1_1geometric_1_1PathSimplifier.html</anchorfile>
      <anchor>ac47ae860e9725be8d187261bcf1673a8</anchor>
      <arglist>(base::SpaceInformationPtr si, const base::GoalPtr &amp;goal=ompl::base::GoalPtr(), const base::OptimizationObjectivePtr &amp;obj=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reduceVertices</name>
      <anchorfile>classompl_1_1geometric_1_1PathSimplifier.html</anchorfile>
      <anchor>a693986392b3b13a17743035cf295c539</anchor>
      <arglist>(PathGeometric &amp;path, unsigned int maxSteps=0, unsigned int maxEmptySteps=0, double rangeRatio=0.33)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shortcutPath</name>
      <anchorfile>classompl_1_1geometric_1_1PathSimplifier.html</anchorfile>
      <anchor>a911bdadf0c84acdae69d003b99f8d48e</anchor>
      <arglist>(PathGeometric &amp;path, unsigned int maxSteps=0, unsigned int maxEmptySteps=0, double rangeRatio=0.33, double snapToVertex=0.005)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>perturbPath</name>
      <anchorfile>classompl_1_1geometric_1_1PathSimplifier.html</anchorfile>
      <anchor>a3006b09d80ec5543b0b9b81e94046df2</anchor>
      <arglist>(PathGeometric &amp;path, double stepSize, unsigned int maxSteps=0, unsigned int maxEmptySteps=0, double snapToVertex=0.005)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>collapseCloseVertices</name>
      <anchorfile>classompl_1_1geometric_1_1PathSimplifier.html</anchorfile>
      <anchor>a2761f8b4e41e01db0b4ecf11ee16d5bd</anchor>
      <arglist>(PathGeometric &amp;path, unsigned int maxSteps=0, unsigned int maxEmptySteps=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>smoothBSpline</name>
      <anchorfile>classompl_1_1geometric_1_1PathSimplifier.html</anchorfile>
      <anchor>aa4ecd0970d2061c457f57b7665fd6f6b</anchor>
      <arglist>(PathGeometric &amp;path, unsigned int maxSteps=5, double minChange=std::numeric_limits&lt; double &gt;::epsilon())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>simplifyMax</name>
      <anchorfile>classompl_1_1geometric_1_1PathSimplifier.html</anchorfile>
      <anchor>a6c6491343075124bf79b67c9f99e794d</anchor>
      <arglist>(PathGeometric &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>simplify</name>
      <anchorfile>classompl_1_1geometric_1_1PathSimplifier.html</anchorfile>
      <anchor>a5e590d766299b22363cfb1831a274e40</anchor>
      <arglist>(PathGeometric &amp;path, double maxTime, bool atLeastOnce=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>simplify</name>
      <anchorfile>classompl_1_1geometric_1_1PathSimplifier.html</anchorfile>
      <anchor>ad1f88047c6ab5a83fda68620145a2e4d</anchor>
      <arglist>(PathGeometric &amp;path, const base::PlannerTerminationCondition &amp;ptc, bool atLeastOnce=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findBetterGoal</name>
      <anchorfile>classompl_1_1geometric_1_1PathSimplifier.html</anchorfile>
      <anchor>acf1dae2d22eccd4ffde5a0c95e18dbe1</anchor>
      <arglist>(PathGeometric &amp;path, double maxTime, unsigned int samplingAttempts=10, double rangeRatio=0.33, double snapToVertex=0.005)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findBetterGoal</name>
      <anchorfile>classompl_1_1geometric_1_1PathSimplifier.html</anchorfile>
      <anchor>a44074cdbbb873e096694eace130c98b5</anchor>
      <arglist>(PathGeometric &amp;path, const base::PlannerTerminationCondition &amp;ptc, unsigned int samplingAttempts=10, double rangeRatio=0.33, double snapToVertex=0.005)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeStates</name>
      <anchorfile>classompl_1_1geometric_1_1PathSimplifier.html</anchorfile>
      <anchor>aed7e93fa582c5480ae1e7610e787f3c7</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>freeStates</name>
      <anchorfile>classompl_1_1geometric_1_1PathSimplifier.html</anchorfile>
      <anchor>a7574875313a57fc696f57b997da3219a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::SpaceInformationPtr</type>
      <name>si_</name>
      <anchorfile>classompl_1_1geometric_1_1PathSimplifier.html</anchorfile>
      <anchor>a37aa79782fd655f32d3b67a748e9a0db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; base::GoalSampleableRegion &gt;</type>
      <name>gsr_</name>
      <anchorfile>classompl_1_1geometric_1_1PathSimplifier.html</anchorfile>
      <anchor>afde59be0e054bff41c2abd6204ba6174</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::OptimizationObjectivePtr</type>
      <name>obj_</name>
      <anchorfile>classompl_1_1geometric_1_1PathSimplifier.html</anchorfile>
      <anchor>a8fd3eea0398d579e244d9822f73e7b8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>freeStates_</name>
      <anchorfile>classompl_1_1geometric_1_1PathSimplifier.html</anchorfile>
      <anchor>a0c9255a96aa9ed4104595070c6a91d92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1PathSimplifier.html</anchorfile>
      <anchor>ad022db6be6de403569e517ed0910d2cb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::PathSimplifierPtr</name>
    <filename>classompl_1_1geometric_1_1PathSimplifierPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::PDST</name>
    <filename>classompl_1_1geometric_1_1PDST.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="struct">ompl::geometric::PDST::Cell</class>
    <class kind="struct">ompl::geometric::PDST::Motion</class>
    <class kind="struct">ompl::geometric::PDST::MotionCompare</class>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1PDST.html</anchorfile>
      <anchor>a4a65e14f832eebf507858573a53b959c</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1PDST.html</anchorfile>
      <anchor>a4d04c69a2f4c6d6f9758cbef3517591f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1PDST.html</anchorfile>
      <anchor>a3a2b0154bee26124eb6963ea16feff33</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1PDST.html</anchorfile>
      <anchor>a3bebb22596ef520bf151ad38bb84d8ee</anchor>
      <arglist>(base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1PDST.html</anchorfile>
      <anchor>a71fd25df52a5a3588065b9575952da3e</anchor>
      <arglist>(const base::ProjectionEvaluatorPtr &amp;projectionEvaluator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1PDST.html</anchorfile>
      <anchor>a2987b016e359f3be411072782cdf1b1b</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const base::ProjectionEvaluatorPtr &amp;</type>
      <name>getProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1PDST.html</anchorfile>
      <anchor>a7bcc6714672e1936d5e17523f7a39c41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1PDST.html</anchorfile>
      <anchor>a7f532a3bcf8bb31e66886b1eedb2202a</anchor>
      <arglist>(double goalBias)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1PDST.html</anchorfile>
      <anchor>af6a2bab646f0b50680c8d6951996bcc7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addMotion</name>
      <anchorfile>classompl_1_1geometric_1_1PDST.html</anchorfile>
      <anchor>a8c04e6c08cc4fb3bc7241e307812284a</anchor>
      <arglist>(Motion *motion, Cell *bsp, base::State *, Eigen::Ref&lt; Eigen::VectorXd &gt;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateHeapElement</name>
      <anchorfile>classompl_1_1geometric_1_1PDST.html</anchorfile>
      <anchor>a0828e91a6e330da250990246bddc5319</anchor>
      <arglist>(Motion *motion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Motion *</type>
      <name>propagateFrom</name>
      <anchorfile>classompl_1_1geometric_1_1PDST.html</anchorfile>
      <anchor>a3f828b1bdb7e2359cd9effc14119bd5f</anchor>
      <arglist>(Motion *motion, base::State *, base::State *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ompl::base::StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1PDST.html</anchorfile>
      <anchor>ad02cb5ffb9edd51f403979602cf8f649</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Motion * &gt;</type>
      <name>startMotions_</name>
      <anchorfile>classompl_1_1geometric_1_1PDST.html</anchorfile>
      <anchor>a8dd5a0a4ddd2ace662ff7bd4fda78f13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ompl::BinaryHeap&lt; Motion *, MotionCompare &gt;</type>
      <name>priorityQueue_</name>
      <anchorfile>classompl_1_1geometric_1_1PDST.html</anchorfile>
      <anchor>a3de1d3b92400c591470fce2ff41a1eb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Cell *</type>
      <name>bsp_</name>
      <anchorfile>classompl_1_1geometric_1_1PDST.html</anchorfile>
      <anchor>a082a3599f34b79a6b0a2118175da5f2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ompl::base::ProjectionEvaluatorPtr</type>
      <name>projectionEvaluator_</name>
      <anchorfile>classompl_1_1geometric_1_1PDST.html</anchorfile>
      <anchor>a001c70226bbe4da93a68bdd7d928cda7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>goalBias_</name>
      <anchorfile>classompl_1_1geometric_1_1PDST.html</anchorfile>
      <anchor>a3147c054de5a11fbff91dd12c448578e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ompl::base::GoalSampleableRegion *</type>
      <name>goalSampler_</name>
      <anchorfile>classompl_1_1geometric_1_1PDST.html</anchorfile>
      <anchor>addf2a9dde2778eaf7c04506d96053bfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>iteration_</name>
      <anchorfile>classompl_1_1geometric_1_1PDST.html</anchorfile>
      <anchor>a89646d3854b1f43b9bca6fb429fd3e8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>lastGoalMotion_</name>
      <anchorfile>classompl_1_1geometric_1_1PDST.html</anchorfile>
      <anchor>aec3060815b656861bf8a2314dce86547</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1PDST.html">gPDST</docanchor>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::PDST::Cell</name>
    <filename>structompl_1_1geometric_1_1PDST_1_1Cell.html</filename>
    <member kind="function">
      <type>void</type>
      <name>subdivide</name>
      <anchorfile>structompl_1_1geometric_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>aeb59ec305f1b40d5f1ae78bcc3cc46ed</anchor>
      <arglist>(unsigned int spaceDimension)</arglist>
    </member>
    <member kind="function">
      <type>Cell *</type>
      <name>stab</name>
      <anchorfile>structompl_1_1geometric_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>a3fb64e792b31a967c391f2d28aca601c</anchor>
      <arglist>(const Eigen::Ref&lt; Eigen::VectorXd &gt; &amp;projection) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMotion</name>
      <anchorfile>structompl_1_1geometric_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>a2ee83e5fc1a12abf5dbdde82086640d6</anchor>
      <arglist>(Motion *motion)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>structompl_1_1geometric_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>ac56526ff60fa8aec2c2d0d44e2da5ce1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>volume_</name>
      <anchorfile>structompl_1_1geometric_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>ae3e603e66c90b7605255a0097abc1ac1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>splitDimension_</name>
      <anchorfile>structompl_1_1geometric_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>aba8fe44796f9ac02b6992bac919e3caf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>splitValue_</name>
      <anchorfile>structompl_1_1geometric_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>aa6ad9fdb838bfff22b19fe00d8ba780c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Cell *</type>
      <name>left_</name>
      <anchorfile>structompl_1_1geometric_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>a6fe368b4022b7cccddf90375981d19dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Cell *</type>
      <name>right_</name>
      <anchorfile>structompl_1_1geometric_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>a1287af11bd85f01b168b7b7595663b0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ompl::base::RealVectorBounds</type>
      <name>bounds_</name>
      <anchorfile>structompl_1_1geometric_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>ac11a751c5eb80d111728ebc286ff4099</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Motion * &gt;</type>
      <name>motions_</name>
      <anchorfile>structompl_1_1geometric_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>afeaded1b557cd928e49ececfb0fab2e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::PDST::Motion</name>
    <filename>structompl_1_1geometric_1_1PDST_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>structompl_1_1geometric_1_1PDST_1_1Motion.html</anchorfile>
      <anchor>a53ae411c47edb237bf06fde39c9d33d8</anchor>
      <arglist>(base::State *state)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>score</name>
      <anchorfile>structompl_1_1geometric_1_1PDST_1_1Motion.html</anchorfile>
      <anchor>ae8b29adf72627113b558ffae86b1098d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>ompl::base::State *</type>
      <name>startState_</name>
      <anchorfile>structompl_1_1geometric_1_1PDST_1_1Motion.html</anchorfile>
      <anchor>a4e900bc956baaf3f7fc42dc69ba35498</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ompl::base::State *</type>
      <name>endState_</name>
      <anchorfile>structompl_1_1geometric_1_1PDST_1_1Motion.html</anchorfile>
      <anchor>a9ffc5d5be4fdc9be0ea9e1da407d8d23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>priority_</name>
      <anchorfile>structompl_1_1geometric_1_1PDST_1_1Motion.html</anchorfile>
      <anchor>a2ea9a6e9998d4c2dc537e4c19625152d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent_</name>
      <anchorfile>structompl_1_1geometric_1_1PDST_1_1Motion.html</anchorfile>
      <anchor>a58d72ce946def04d3661310ba83fa194</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Cell *</type>
      <name>cell_</name>
      <anchorfile>structompl_1_1geometric_1_1PDST_1_1Motion.html</anchorfile>
      <anchor>a81f5482c7785309a032a2614d93615c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ompl::BinaryHeap&lt; Motion *, MotionCompare &gt;::Element *</type>
      <name>heapElement_</name>
      <anchorfile>structompl_1_1geometric_1_1PDST_1_1Motion.html</anchorfile>
      <anchor>a83997c3097c04f4dbbcaabcdb253871b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isSplit_</name>
      <anchorfile>structompl_1_1geometric_1_1PDST_1_1Motion.html</anchorfile>
      <anchor>af4a376263efff68f3caea46ce9a30004</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::PDST::MotionCompare</name>
    <filename>structompl_1_1geometric_1_1PDST_1_1MotionCompare.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structompl_1_1geometric_1_1PDST_1_1MotionCompare.html</anchorfile>
      <anchor>a7272e331a12903f486bc18b7650473cd</anchor>
      <arglist>(Motion *p1, Motion *p2) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::PRM</name>
    <filename>classompl_1_1geometric_1_1PRM.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="struct">ompl::geometric::PRM::vertex_state_t</class>
    <class kind="struct">ompl::geometric::PRM::vertex_successful_connection_attempts_t</class>
    <class kind="struct">ompl::geometric::PRM::vertex_total_connection_attempts_t</class>
    <member kind="typedef">
      <type>boost::adjacency_list&lt; boost::vecS, boost::vecS, boost::undirectedS, boost::property&lt; vertex_state_t, base::State *, boost::property&lt; vertex_total_connection_attempts_t, unsigned long int, boost::property&lt; vertex_successful_connection_attempts_t, unsigned long int, boost::property&lt; boost::vertex_predecessor_t, unsigned long int, boost::property&lt; boost::vertex_rank_t, unsigned long int &gt; &gt;&gt; &gt;&gt;, boost::property&lt; boost::edge_weight_t, base::Cost &gt; &gt;</type>
      <name>Graph</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a49dc45e1ad4aadfe75cd729590104c6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph_traits&lt; Graph &gt;::vertex_descriptor</type>
      <name>Vertex</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a4799c6a7b614313d4e73c2395c52c9ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph_traits&lt; Graph &gt;::edge_descriptor</type>
      <name>Edge</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a41ee82e101af018337c1a3770364c1c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Vertex &gt; &gt;</type>
      <name>RoadmapNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a16590ccd7c12b34b89961129eeae7736</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; const std::vector&lt; Vertex &gt; &amp;(const Vertex)&gt;</type>
      <name>ConnectionStrategy</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a12ead8fe280e8f1ce17e6c34588ecbe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; bool(const Vertex &amp;, const Vertex &amp;)&gt;</type>
      <name>ConnectionFilter</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a8181a403279ac587cbb05803e687a2da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PRM</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a5db629bb4a2bf02fb76a4cabbc5e0dcb</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si, bool starStrategy=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PRM</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>aac6de5c639b001121557b8e089cc1055</anchor>
      <arglist>(const base::PlannerData &amp;data, bool starStrategy=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConnectionStrategy</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a8a7ce65640dd499ba32d80d3495d38bf</anchor>
      <arglist>(const ConnectionStrategy &amp;connectionStrategy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultConnectionStrategy</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>ad740e75e3d33a7f0ba37f1aedf6c3179</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxNearestNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>ab8832a466b3178de436acbb000712f2b</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMaxNearestNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>ad19bbd70a15cc62e7e48281542ee5d16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConnectionFilter</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>ad1e0bed0774005cf08bca672eec73abf</anchor>
      <arglist>(const ConnectionFilter &amp;connectionFilter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>abd87b1a47b480b6ce331d9a519ae2853</anchor>
      <arglist>(base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructRoadmap</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a8da5dd602d45e477612bb1401cf68c19</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>growRoadmap</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a9f15e6dafe26d97547526317b457c201</anchor>
      <arglist>(double growTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>growRoadmap</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a3a3d60479b122a35b6425db26bf9e6f2</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expandRoadmap</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a718ea717e0928e0d4555683021508e46</anchor>
      <arglist>(double expandTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expandRoadmap</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>aefbf3a3bb25b810e12e8b85b155858ce</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a0b8b11514620d2f013a68ea631a12943</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearQuery</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a1d7882990685fe881eaeef77d155b2a2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>aadc3600324fedd2e1e1b31f2bb71d70a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a6e698183182fa65fa309bd0f075c4176</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>aac0bb0ca99006e96c175aca4602524a5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>unsigned long int</type>
      <name>milestoneCount</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>aa799ac3c9e55facb0d0e9c9708d78ea2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long int</type>
      <name>edgeCount</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>adcfee021ba84b49c5c8bf49f0fab37eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a2cb318fda9ada561e357a2dd539ec11b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Vertex</type>
      <name>addMilestone</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>aa393c5591243c7d166fc0f73b46627f2</anchor>
      <arglist>(base::State *state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>uniteComponents</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a8b699f5d6c9ffd15094ef3854f1eb7b4</anchor>
      <arglist>(Vertex m1, Vertex m2)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>sameComponent</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a20caf404f1f9fa7462bb23950a5c9c0a</anchor>
      <arglist>(Vertex m1, Vertex m2)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>growRoadmap</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a4647ad646432fdd063fa5867049ad611</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc, base::State *workState)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>expandRoadmap</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>af5fb6ce74e9f11411acba7b544ced5b0</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc, std::vector&lt; base::State * &gt; &amp;workStates)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkForSolution</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a664410622628a8a1283963dc51b92b03</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc, base::PathPtr &amp;solution)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>maybeConstructSolution</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a819cc1db3a6b03f356a11aa0151f2fe4</anchor>
      <arglist>(const std::vector&lt; Vertex &gt; &amp;starts, const std::vector&lt; Vertex &gt; &amp;goals, base::PathPtr &amp;solution)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ompl::base::Cost</type>
      <name>constructApproximateSolution</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a04a23031128d6b0d8511f6f3507aa27b</anchor>
      <arglist>(const std::vector&lt; Vertex &gt; &amp;starts, const std::vector&lt; Vertex &gt; &amp;goals, base::PathPtr &amp;solution)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>addedNewSolution</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a0c99083f8f27ac7ca1af3ab825c534f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>base::PathPtr</type>
      <name>constructSolution</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a868cfb5924859c224fcab04081680065</anchor>
      <arglist>(const Vertex &amp;start, const Vertex &amp;goal)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>base::Cost</type>
      <name>costHeuristic</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a009697f1dfbf09a8ecf7d2b49912ac8c</anchor>
      <arglist>(Vertex u, Vertex v) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a7a220e86ea4bb3988e730d5a3c1c6f3f</anchor>
      <arglist>(const Vertex a, const Vertex b) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>starStrategy_</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a03722f1e038d5e2e7dcbb97832f6458b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ValidStateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>ad440cded7058f4b8fd703891d151922c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSamplerPtr</type>
      <name>simpleSampler_</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a2e22fbb5fdd9f79211631cfad8c6e52d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RoadmapNeighbors</type>
      <name>nn_</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a3c4074fd06b96a0b12d39b11bf19f310</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Graph</type>
      <name>g_</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>aa25666bfa02ff8d549b967d411202ea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Vertex &gt;</type>
      <name>startM_</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a084b230c442b1f7e0a22febdf2892ee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Vertex &gt;</type>
      <name>goalM_</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>ac8d91585b24b60381244e928a3e8d0f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; Graph, vertex_state_t &gt;::type</type>
      <name>stateProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>ad88ed69d1ac8d376f91639eb5b0b638c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; Graph, vertex_total_connection_attempts_t &gt;::type</type>
      <name>totalConnectionAttemptsProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>ad279ee7f7070426d6835dd03a970f3a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; Graph, vertex_successful_connection_attempts_t &gt;::type</type>
      <name>successfulConnectionAttemptsProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>aa2bbda9d19b0cb3c4b848bdebdfeecb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; Graph, boost::edge_weight_t &gt;::type</type>
      <name>weightProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>aef27444f5bb1cd1735a6653a00232f18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::disjoint_sets&lt; boost::property_map&lt; Graph, boost::vertex_rank_t &gt;::type, boost::property_map&lt; Graph, boost::vertex_predecessor_t &gt;::type &gt;</type>
      <name>disjointSets_</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a19e6f8610acaa45198770c60c1fa65f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConnectionStrategy</type>
      <name>connectionStrategy_</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a834d99372562ad29dafb42c2c5758299</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConnectionFilter</type>
      <name>connectionFilter_</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>afdcd00e44119e8519bb39900f881332f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>userSetConnectionStrategy_</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>aad9c9af7b63886f0d866da2953320e2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>adca46f63edd3ad7ff1a13483242c1bf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>addedNewSolution_</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a25f19b6c720216328774cf37728a23c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::mutex</type>
      <name>graphMutex_</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a0219ab88b8e1f602fb3911f53c4faf3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::OptimizationObjectivePtr</type>
      <name>opt_</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a239c45504980e2a55d10f30fb46f5a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long int</type>
      <name>iterations_</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a9976d04ec636ab524044306a7c46075f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::Cost</type>
      <name>bestCost_</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a28f594ee634a63807362ad6c00b7aca2</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1PRM.html">gPRM</docanchor>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::PRM::vertex_state_t</name>
    <filename>structompl_1_1geometric_1_1PRM_1_1vertex__state__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::PRM::vertex_successful_connection_attempts_t</name>
    <filename>structompl_1_1geometric_1_1PRM_1_1vertex__successful__connection__attempts__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::PRM::vertex_total_connection_attempts_t</name>
    <filename>structompl_1_1geometric_1_1PRM_1_1vertex__total__connection__attempts__t.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::PRMstar</name>
    <filename>classompl_1_1geometric_1_1PRMstar.html</filename>
    <base>ompl::geometric::PRM</base>
    <member kind="function">
      <type></type>
      <name>PRMstar</name>
      <anchorfile>classompl_1_1geometric_1_1PRMstar.html</anchorfile>
      <anchor>a214dacff7aa3c161f37da90196b8bb6f</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PRMstar</name>
      <anchorfile>classompl_1_1geometric_1_1PRMstar.html</anchorfile>
      <anchor>a4484b4c9c5094262c1272492e1de19ca</anchor>
      <arglist>(const base::PlannerData &amp;data)</arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1PRMstar.html">gPRMstar</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::ProjEST</name>
    <filename>classompl_1_1geometric_1_1ProjEST.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::ProjEST::Motion</class>
    <class kind="struct">ompl::geometric::ProjEST::MotionInfo</class>
    <class kind="struct">ompl::geometric::ProjEST::TreeData</class>
    <member kind="function">
      <type></type>
      <name>ProjEST</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>af28980b8f556ba800172040f05cfdd2e</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>a3874a5cd35e5ebcb9127d2f2a9111e51</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>ae9d9d5d4b8d165556c75514eedc5bc5d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>ae0f3f42e5fdd5c145d9bcd929ea758cc</anchor>
      <arglist>(double goalBias)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>ad63ad282b6deb0cfb7bb7d2cba9cbd79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>af6fd274771bf909129080d7ed13a87e0</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>a2a53c0fb1d2b95e64778fdb1fd12cd38</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>af161009ea6017b04b0bf7ee4c30e8c41</anchor>
      <arglist>(const base::ProjectionEvaluatorPtr &amp;projectionEvaluator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>a9b3768c56d657c35ff729c0b26f7afe4</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const base::ProjectionEvaluatorPtr &amp;</type>
      <name>getProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>a3a11c0fa685684285668707a1015b0bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>a31e34b107a2b63d6f09701c5784365ce</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>a7eceeff8ab841392195c9980673768d2</anchor>
      <arglist>(base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Grid&lt; MotionInfo &gt;::Cell</type>
      <name>GridCell</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>a17f29ed6756c3044fb257e3fa05c3666</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>PDF&lt; GridCell * &gt;</type>
      <name>CellPDF</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>a55876a35cd737986ce591be36af1bc60</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>a7f892af221d050a0828ea33a7bc848e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addMotion</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>a58b5413b06405cc69190b3785bd4d538</anchor>
      <arglist>(Motion *motion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Motion *</type>
      <name>selectMotion</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>adb5a9cc3fd1013fb6a15653d0f7fbd6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ValidStateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>ad0797c68f681b53e636dc7cb01695fad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TreeData</type>
      <name>tree_</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>a0648b63f5b6d0be251b8160fd9203098</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ProjectionEvaluatorPtr</type>
      <name>projectionEvaluator_</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>a8e4ea14c2a6b83747ecbc33b915372c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>goalBias_</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>a95ec1bcc27b1357948360feb9f397716</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistance_</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>adbd786bbe42ce94e189f1bfc2aa939f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>a16c24bebf25e7b2da6b13e417e272cce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CellPDF</type>
      <name>pdf_</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>a5f81c257e069af24cd80c505bf459ff6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>lastGoalMotion_</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>a2511a8752b0851839fbcfbc3615de0df</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1ProjEST.html">gProjEST</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::ProjEST::Motion</name>
    <filename>classompl_1_1geometric_1_1ProjEST_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST_1_1Motion.html</anchorfile>
      <anchor>a40d2ce6da57d50544c0bc00f79eec11c</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST_1_1Motion.html</anchorfile>
      <anchor>ad5454a08018da012097a44a73341f5a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST_1_1Motion.html</anchorfile>
      <anchor>a96197308ce9edb55062af62fcacf98db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::ProjEST::MotionInfo</name>
    <filename>structompl_1_1geometric_1_1ProjEST_1_1MotionInfo.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::ProjEST::TreeData</name>
    <filename>structompl_1_1geometric_1_1ProjEST_1_1TreeData.html</filename>
    <member kind="variable">
      <type>Grid&lt; MotionInfo &gt;</type>
      <name>grid</name>
      <anchorfile>structompl_1_1geometric_1_1ProjEST_1_1TreeData.html</anchorfile>
      <anchor>a4639810ba523b8d98b2562ed8c0177b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>structompl_1_1geometric_1_1ProjEST_1_1TreeData.html</anchorfile>
      <anchor>a3ad5e731e481a03d3b8332ab976f8747</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::pRRT</name>
    <filename>classompl_1_1geometric_1_1pRRT.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::pRRT::Motion</class>
    <class kind="struct">ompl::geometric::pRRT::SolutionInfo</class>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1pRRT.html</anchorfile>
      <anchor>a60b7b289897cde9e503826a2650ea903</anchor>
      <arglist>(base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1pRRT.html</anchorfile>
      <anchor>afc1287a18243296ea951122aa0c2d7ea</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1pRRT.html</anchorfile>
      <anchor>abee3f9bb635ec480fa561ecc98668241</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1pRRT.html</anchorfile>
      <anchor>a525bff8c62317b7b7e45cd6865c0357e</anchor>
      <arglist>(double goalBias)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1pRRT.html</anchorfile>
      <anchor>a61c4a2977ba63fbffd456d0aa8385189</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1pRRT.html</anchorfile>
      <anchor>ac854a72b384f1a45946d7d23c2425ed2</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1pRRT.html</anchorfile>
      <anchor>a758bf02bd3224cd6af23939d416f4a55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setThreadCount</name>
      <anchorfile>classompl_1_1geometric_1_1pRRT.html</anchorfile>
      <anchor>adfba9c3246fd29e4d72196c417cb1fda</anchor>
      <arglist>(unsigned int nthreads)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1pRRT.html</anchorfile>
      <anchor>af3ed3b0675c24c9938877448d9e70f69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1pRRT.html</anchorfile>
      <anchor>ac50141d9ca352a46aae0e0d3b4ab0366</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>lastGoalMotion_</name>
      <anchorfile>classompl_1_1geometric_1_1pRRT.html</anchorfile>
      <anchor>a6a0762e288594e90a2c9fa7db89f09b6</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1pRRT.html">gpRRT</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::pRRT::Motion</name>
    <filename>classompl_1_1geometric_1_1pRRT_1_1Motion.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::pRRT::SolutionInfo</name>
    <filename>structompl_1_1geometric_1_1pRRT_1_1SolutionInfo.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::pSBL</name>
    <filename>classompl_1_1geometric_1_1pSBL.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::pSBL::Motion</class>
    <class kind="struct">ompl::geometric::pSBL::MotionInfo</class>
    <class kind="struct">ompl::geometric::pSBL::MotionsToBeRemoved</class>
    <class kind="struct">ompl::geometric::pSBL::PendingRemoveMotion</class>
    <class kind="struct">ompl::geometric::pSBL::SolutionInfo</class>
    <class kind="struct">ompl::geometric::pSBL::TreeData</class>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1pSBL.html</anchorfile>
      <anchor>a8c706561dc3d5256a69f8aff5a6a4dab</anchor>
      <arglist>(const base::ProjectionEvaluatorPtr &amp;projectionEvaluator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1pSBL.html</anchorfile>
      <anchor>a3ef968832cbe29236891c5ae731219fc</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const base::ProjectionEvaluatorPtr &amp;</type>
      <name>getProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1pSBL.html</anchorfile>
      <anchor>aedaf217cfed4b426cdaeab1b5eacc779</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1pSBL.html</anchorfile>
      <anchor>a684881ad135214cf17dc1d417a921805</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1pSBL.html</anchorfile>
      <anchor>a006ac42fc347e921ddb6c069db0867ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setThreadCount</name>
      <anchorfile>classompl_1_1geometric_1_1pSBL.html</anchorfile>
      <anchor>aa4ac4755ecdf651d5d0e584cbf742393</anchor>
      <arglist>(unsigned int nthreads)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getThreadCount</name>
      <anchorfile>classompl_1_1geometric_1_1pSBL.html</anchorfile>
      <anchor>a4d346f7a962d350fc878ccd00f4004c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1pSBL.html</anchorfile>
      <anchor>ac203cd4de0173ceabab002bd8b9db267</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1pSBL.html</anchorfile>
      <anchor>ad9ea1ebc64b72d2c852ec8acaf264e7e</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1pSBL.html</anchorfile>
      <anchor>acd0aad485098c76bea136b6402fef4b3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1pSBL.html</anchorfile>
      <anchor>ab34bd2b851b6c7353832b302596e2b4b</anchor>
      <arglist>(base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Grid&lt; MotionInfo &gt;::Cell</type>
      <name>GridCell</name>
      <anchorfile>classompl_1_1geometric_1_1pSBL.html</anchorfile>
      <anchor>a6841d0a8fcf63b0f204dc8f2ea7c200c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>PDF&lt; GridCell * &gt;</type>
      <name>CellPDF</name>
      <anchorfile>classompl_1_1geometric_1_1pSBL.html</anchorfile>
      <anchor>ac3b5b7271d962cd4da11cbfc8356df5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::pair&lt; base::State *, base::State * &gt;</type>
      <name>connectionPoint_</name>
      <anchorfile>classompl_1_1geometric_1_1pSBL.html</anchorfile>
      <anchor>a0980136c2c7d29bc46dff55f9b47442d</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1pSBL.html">gpSBL</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::pSBL::Motion</name>
    <filename>classompl_1_1geometric_1_1pSBL_1_1Motion.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::pSBL::MotionInfo</name>
    <filename>structompl_1_1geometric_1_1pSBL_1_1MotionInfo.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::pSBL::MotionsToBeRemoved</name>
    <filename>structompl_1_1geometric_1_1pSBL_1_1MotionsToBeRemoved.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::pSBL::PendingRemoveMotion</name>
    <filename>structompl_1_1geometric_1_1pSBL_1_1PendingRemoveMotion.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::pSBL::SolutionInfo</name>
    <filename>structompl_1_1geometric_1_1pSBL_1_1SolutionInfo.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::pSBL::TreeData</name>
    <filename>structompl_1_1geometric_1_1pSBL_1_1TreeData.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::QRRTImpl</name>
    <filename>classompl_1_1geometric_1_1QRRTImpl.html</filename>
    <base>ompl::geometric::QuotientSpaceGraph</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>grow</name>
      <anchorfile>classompl_1_1geometric_1_1QRRTImpl.html</anchorfile>
      <anchor>ad07f6130b3dff05ced6f912be2a5abc0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getImportance</name>
      <anchorfile>classompl_1_1geometric_1_1QRRTImpl.html</anchorfile>
      <anchor>a40fabcfc627d86d412a05b71ef93444e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>sample</name>
      <anchorfile>classompl_1_1geometric_1_1QRRTImpl.html</anchorfile>
      <anchor>ad3ea2e2a3bb6f9d1c22626353bb11c66</anchor>
      <arglist>(ompl::base::State *q_random) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>sampleQuotient</name>
      <anchorfile>classompl_1_1geometric_1_1QRRTImpl.html</anchorfile>
      <anchor>a729caf47e7cfbdf9a258bfe5bbbe289a</anchor>
      <arglist>(ompl::base::State *) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1QRRTImpl.html</anchorfile>
      <anchor>aed8c895f00f46ac96c041de2f3970dc6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1QRRTImpl.html</anchorfile>
      <anchor>ad17f00e3b26496c067317b30a6979d8b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Configuration *</type>
      <name>qRandom_</name>
      <anchorfile>classompl_1_1geometric_1_1QRRTImpl.html</anchorfile>
      <anchor>a87e5da8e31b7aa6cebb87585e754ef91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Vertex &gt;</type>
      <name>shortestPathVertices_</name>
      <anchorfile>classompl_1_1geometric_1_1QRRTImpl.html</anchorfile>
      <anchor>ac68caca723e0cbf8485dab4195764ef1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistance_</name>
      <anchorfile>classompl_1_1geometric_1_1QRRTImpl.html</anchorfile>
      <anchor>a972da7414f9563cc8c4b614bb1a2455e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>goalBias_</name>
      <anchorfile>classompl_1_1geometric_1_1QRRTImpl.html</anchorfile>
      <anchor>a710862e65f6efd9889f90a0c5446c147</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ompl::base::Goal *</type>
      <name>goal_</name>
      <anchorfile>classompl_1_1geometric_1_1QRRTImpl.html</anchorfile>
      <anchor>a94aadeaae063ee9e6ec15ee3d619e745</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::QuotientSpace</name>
    <filename>classompl_1_1geometric_1_1QuotientSpace.html</filename>
    <base>ompl::base::Planner</base>
    <member kind="function">
      <type></type>
      <name>QuotientSpace</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpace.html</anchorfile>
      <anchor>a848b53b479d5503839751ef2f4271c1a</anchor>
      <arglist>(const ompl::base::SpaceInformationPtr &amp;si, QuotientSpace *parent_=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpace.html</anchorfile>
      <anchor>a6bc76e330783a3b88027bcc2a3b34ed3</anchor>
      <arglist>(const ompl::base::PlannerTerminationCondition &amp;ptc) override final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProblemDefinition</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpace.html</anchorfile>
      <anchor>a29fce162c75b30f55980d800e3a40078</anchor>
      <arglist>(const ompl::base::ProblemDefinitionPtr &amp;pdef) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpace.html</anchorfile>
      <anchor>a0dcb3f3ddaee662e3658a0458c6c18af</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpace.html</anchorfile>
      <anchor>a5bd21c316557447ab799160b9809a8e4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>const ompl::base::SpaceInformationPtr &amp;</type>
      <name>getX1</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpace.html</anchorfile>
      <anchor>af139b6e44633ea63171f55608db1a886</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ompl::base::SpaceInformationPtr &amp;</type>
      <name>getQ1</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpace.html</anchorfile>
      <anchor>af9656c636034debb39909b7231525c51</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ompl::base::SpaceInformationPtr &amp;</type>
      <name>getQ0</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpace.html</anchorfile>
      <anchor>a38e68735a5a05304636166c2ff3d019d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getX1Dimension</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpace.html</anchorfile>
      <anchor>aa3ec8deba271ce02277576aef99fdf31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getQ1Dimension</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpace.html</anchorfile>
      <anchor>a008a5edff3926ab9496e0ee6cc885cce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getQ0Dimension</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpace.html</anchorfile>
      <anchor>ac7274cc26fb2b07cc2cd8efb4c4b493f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpace.html</anchorfile>
      <anchor>acbb130bcf637e9b8ec1ce81137d1bfca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>QuotientSpace *</type>
      <name>getParent</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpace.html</anchorfile>
      <anchor>ab329205e0261422c618de98d679ffe14</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>QuotientSpace *</type>
      <name>getChild</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpace.html</anchorfile>
      <anchor>a64224741aa0453fdf4d41b3c12e4d01f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getLevel</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpace.html</anchorfile>
      <anchor>a702420eef1efc660f247f89b24a1021d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLevel</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpace.html</anchorfile>
      <anchor>abb3ece4778acde3afe14afcecc07e700</anchor>
      <arglist>(unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>QuotientSpaceType</type>
      <name>getType</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpace.html</anchorfile>
      <anchor>af92ca8d852023b436396945991951421</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChild</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpace.html</anchorfile>
      <anchor>a693a802370f1e631d0b89b5804bacf72</anchor>
      <arglist>(QuotientSpace *child_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParent</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpace.html</anchorfile>
      <anchor>aaaf15828b4166b44e236803de2c716e9</anchor>
      <arglist>(QuotientSpace *parent_)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getTotalNumberOfSamples</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpace.html</anchorfile>
      <anchor>a6c80d53d8f3977fcb40353d20ef1556e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getTotalNumberOfFeasibleSamples</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpace.html</anchorfile>
      <anchor>abc4c4ba06b2a8b7bb1aa28bd5ab696c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projectX1</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpace.html</anchorfile>
      <anchor>ab093ef45748eefe75b734ba2e6f107d0</anchor>
      <arglist>(const ompl::base::State *q, ompl::base::State *qX1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projectQ0</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpace.html</anchorfile>
      <anchor>af4321baf5fbf4864f13f455c07280dda</anchor>
      <arglist>(const ompl::base::State *q, ompl::base::State *qQ0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mergeStates</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpace.html</anchorfile>
      <anchor>a12a533d02d38314cd5f546a42c105dba</anchor>
      <arglist>(const ompl::base::State *qQ0, const ompl::base::State *qX1, ompl::base::State *qQ1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkSpaceHasFiniteMeasure</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpace.html</anchorfile>
      <anchor>ae5c2c5764557a8de0bf6f3f9e7ea8e68</anchor>
      <arglist>(const ompl::base::StateSpacePtr space) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>resetCounter</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpace.html</anchorfile>
      <anchor>a38e3f8dc39507189dbeff075d8fcd9b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpace.html</anchorfile>
      <anchor>aa99aaea36bd438209ee2a5ee11726c33</anchor>
      <arglist>(std::ostream &amp;out) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const ompl::base::StateSpacePtr</type>
      <name>computeQuotientSpace</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpace.html</anchorfile>
      <anchor>a7ca4c244d1993f0dddf6485cfd447021</anchor>
      <arglist>(const ompl::base::StateSpacePtr Q1, const ompl::base::StateSpacePtr Q0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>QuotientSpaceType</type>
      <name>identifyQuotientSpaceType</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpace.html</anchorfile>
      <anchor>a76983671dfef3fe3278f19d43d082809</anchor>
      <arglist>(const ompl::base::StateSpacePtr Q1, const ompl::base::StateSpacePtr Q0)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ompl::base::State *</type>
      <name>s_Q0_tmp_</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpace.html</anchorfile>
      <anchor>a57e8b114376a2de30d1f3f5388c8f4b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ompl::base::State *</type>
      <name>s_X1_tmp_</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpace.html</anchorfile>
      <anchor>ae069b1a5608613239aa9cd895647c6f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>id_</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpace.html</anchorfile>
      <anchor>a3ce76844a581a921af5a9765e1147336</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>level_</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpace.html</anchorfile>
      <anchor>aeb019ba3717f5f36e8ef63039be1faa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpace.html</anchorfile>
      <anchor>a4ca12006a72348516f8c0147cf3d5365</anchor>
      <arglist>(std::ostream &amp;out, const QuotientSpace &amp;qtnt)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::QuotientSpaceGraph</name>
    <filename>classompl_1_1geometric_1_1QuotientSpaceGraph.html</filename>
    <base>ompl::geometric::QuotientSpace</base>
    <class kind="class">ompl::geometric::QuotientSpaceGraph::Configuration</class>
    <class kind="class">ompl::geometric::QuotientSpaceGraph::EdgeInternalState</class>
    <class kind="struct">ompl::geometric::QuotientSpaceGraph::GraphBundle</class>
    <member kind="typedef">
      <type>boost::adjacency_list&lt; boost::vecS, boost::vecS, boost::undirectedS, Configuration *, EdgeInternalState, GraphBundle &gt;</type>
      <name>Graph</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpaceGraph.html</anchorfile>
      <anchor>a858db50b2aa56c12d412f37ce28654c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpaceGraph.html</anchorfile>
      <anchor>a007697ffd8b0bd82ff863d80601a4a80</anchor>
      <arglist>(ompl::base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getImportance</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpaceGraph.html</anchorfile>
      <anchor>a43ca455fe2152bdbca4cc7bbbb85e65f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpaceGraph.html</anchorfile>
      <anchor>a662a86b441d1bb5f5a077db48c95f981</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpaceGraph.html</anchorfile>
      <anchor>a4907a904a003d56c0c8c249f51317f01</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpaceGraph.html</anchorfile>
      <anchor>af300583bdd52c7b7bc3729a448574850</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearQuery</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpaceGraph.html</anchorfile>
      <anchor>aac7e44840657d1efe278aa3fe84548be</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpaceGraph.html</anchorfile>
      <anchor>a4a3863560eb576d83c9e5d08cdf5d6c8</anchor>
      <arglist>(std::ostream &amp;out) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printConfiguration</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpaceGraph.html</anchorfile>
      <anchor>a4a4a870601caf2590c35d28c99fba49b</anchor>
      <arglist>(const Configuration *) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ompl::base::PathPtr</type>
      <name>getPath</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpaceGraph.html</anchorfile>
      <anchor>a02a4d4e8ec5342a2bd66af3670997431</anchor>
      <arglist>(const Vertex &amp;start, const Vertex &amp;goal)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RoadmapNeighborsPtr</type>
      <name>nearestDatastructure_</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpaceGraph.html</anchorfile>
      <anchor>aa4afb90450aee8152f783f12a93a3490</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>graphLength_</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpaceGraph.html</anchorfile>
      <anchor>a9da0560292e41298945ce0d754705a77</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::QuotientSpaceGraph::Configuration</name>
    <filename>classompl_1_1geometric_1_1QuotientSpaceGraph_1_1Configuration.html</filename>
    <member kind="variable">
      <type>void *</type>
      <name>pdf_element</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpaceGraph_1_1Configuration.html</anchorfile>
      <anchor>a92208d4cb1a8d9489d479a208d5b706c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>normalized_index_type</type>
      <name>index</name>
      <anchorfile>classompl_1_1geometric_1_1QuotientSpaceGraph_1_1Configuration.html</anchorfile>
      <anchor>a4efcee0751120bd6a3510c8ff3a9faea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::QuotientSpaceGraph::EdgeInternalState</name>
    <filename>classompl_1_1geometric_1_1QuotientSpaceGraph_1_1EdgeInternalState.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::QuotientSpaceGraph::GraphBundle</name>
    <filename>structompl_1_1geometric_1_1QuotientSpaceGraph_1_1GraphBundle.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::RLRT</name>
    <filename>classompl_1_1geometric_1_1RLRT.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::RLRT::Motion</class>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1RLRT.html</anchorfile>
      <anchor>aaddcc70225d3ecc4f14fa7276293aadc</anchor>
      <arglist>(base::PlannerData &amp;data) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1RLRT.html</anchorfile>
      <anchor>a3ef2a785e4945450aa456d19e8274e43</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1RLRT.html</anchorfile>
      <anchor>abafa60ad3593a8ce5d1974b8d8e3c865</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1RLRT.html</anchorfile>
      <anchor>a3fb17a242cf60fd20d048f0413198c59</anchor>
      <arglist>(double goalBias)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1RLRT.html</anchorfile>
      <anchor>a1ee94e8955562e18f35dad626e5f3edd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1RLRT.html</anchorfile>
      <anchor>a53c0694001d57ed7f5523c382a31275e</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1RLRT.html</anchorfile>
      <anchor>a828c76d84dc2f8265d0a2127e7e3bb7e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getKeepLast</name>
      <anchorfile>classompl_1_1geometric_1_1RLRT.html</anchorfile>
      <anchor>ad09fc0f072a4507b6a806ed60dba6388</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKeepLast</name>
      <anchorfile>classompl_1_1geometric_1_1RLRT.html</anchorfile>
      <anchor>aa5935a4683cdc6fe4dd3e14c649d5ce0</anchor>
      <arglist>(bool keepLast)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1RLRT.html</anchorfile>
      <anchor>a64432736774be288889492e6e2829ec7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1RLRT.html</anchorfile>
      <anchor>a8183db56b450434978ac62c4b00e2cd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1RLRT.html</anchorfile>
      <anchor>a2cdb8aa9ba041a10d3819fba579d6651</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>goalBias_</name>
      <anchorfile>classompl_1_1geometric_1_1RLRT.html</anchorfile>
      <anchor>a17fbe1a3e4182ed9ee53781d2e63e6ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>range_</name>
      <anchorfile>classompl_1_1geometric_1_1RLRT.html</anchorfile>
      <anchor>a19f22e020216babdc1b35b24ebe7c370</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>keepLast_</name>
      <anchorfile>classompl_1_1geometric_1_1RLRT.html</anchorfile>
      <anchor>a1172d4977ced01d94c56ca247e049daf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1RLRT.html</anchorfile>
      <anchor>a05ed0bb2b4985a94c83d066b650b95a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>lastGoalMotion_</name>
      <anchorfile>classompl_1_1geometric_1_1RLRT.html</anchorfile>
      <anchor>a73d980694ee9d56ffcaccd62d5cc9466</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1RLRT.html">gRLRT</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::RLRT::Motion</name>
    <filename>classompl_1_1geometric_1_1RLRT_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1geometric_1_1RLRT_1_1Motion.html</anchorfile>
      <anchor>a6c3c62b247d677a4a67c56ec3be7c409</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state</name>
      <anchorfile>classompl_1_1geometric_1_1RLRT_1_1Motion.html</anchorfile>
      <anchor>a6b854108e7593b2b88ceaf7ee42caec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent</name>
      <anchorfile>classompl_1_1geometric_1_1RLRT_1_1Motion.html</anchorfile>
      <anchor>a4d287271defc39e29f52f21870c0c09e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::RRT</name>
    <filename>classompl_1_1geometric_1_1RRT.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::RRT::Motion</class>
    <member kind="function">
      <type></type>
      <name>RRT</name>
      <anchorfile>classompl_1_1geometric_1_1RRT.html</anchorfile>
      <anchor>a9fb8d770cf42e851793a6fb9c4f11f97</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si, bool addIntermediateStates=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1RRT.html</anchorfile>
      <anchor>aaaff06fcc85baeb8effb7b65ae885315</anchor>
      <arglist>(base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1RRT.html</anchorfile>
      <anchor>a0fff9be454e2a41498961d5f886b743e</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1RRT.html</anchorfile>
      <anchor>aa41d9697f0499ef83c3f7ab743743ddc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1RRT.html</anchorfile>
      <anchor>a266da7a6379a2893e19d06993335ed25</anchor>
      <arglist>(double goalBias)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1RRT.html</anchorfile>
      <anchor>a4f8f06f0d7ba397c6db2f9cf218c7ae9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIntermediateStates</name>
      <anchorfile>classompl_1_1geometric_1_1RRT.html</anchorfile>
      <anchor>a70b298017d6705634caae8cd9fe06b17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIntermediateStates</name>
      <anchorfile>classompl_1_1geometric_1_1RRT.html</anchorfile>
      <anchor>a321336b1f6c4747c0f14144aac3c669c</anchor>
      <arglist>(bool addIntermediateStates)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1RRT.html</anchorfile>
      <anchor>abe92fdafd6201308401d149c4d47b5ed</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1RRT.html</anchorfile>
      <anchor>ae8df550625ec2f2cd897c07a064f1cf8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1RRT.html</anchorfile>
      <anchor>a251d7203d3741b838004e35940b58488</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1RRT.html</anchorfile>
      <anchor>a194ba400c22d304001cdb1bc23dfb53f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1RRT.html</anchorfile>
      <anchor>acd14575621042052a2f3a86ad96bc308</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1RRT.html</anchorfile>
      <anchor>a331760fbbbda816d6dc6e2015c0de078</anchor>
      <arglist>(const Motion *a, const Motion *b) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1RRT.html</anchorfile>
      <anchor>a2c158677fe09bf0b112732a331462bdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Motion * &gt; &gt;</type>
      <name>nn_</name>
      <anchorfile>classompl_1_1geometric_1_1RRT.html</anchorfile>
      <anchor>adee1ddeabd7c5ed7a1bbb9c195c1fd75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>goalBias_</name>
      <anchorfile>classompl_1_1geometric_1_1RRT.html</anchorfile>
      <anchor>adaf18fdeef00563d5a9010540664619f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistance_</name>
      <anchorfile>classompl_1_1geometric_1_1RRT.html</anchorfile>
      <anchor>aab0d2454d49ba18b34a891270e21302b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>addIntermediateStates_</name>
      <anchorfile>classompl_1_1geometric_1_1RRT.html</anchorfile>
      <anchor>a2235d276b94163f04eaab4154ab3db78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1RRT.html</anchorfile>
      <anchor>a0d8f48d596b39914128e40ce0c488817</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>lastGoalMotion_</name>
      <anchorfile>classompl_1_1geometric_1_1RRT.html</anchorfile>
      <anchor>ab6654563ff78efc363a4a074ed98569c</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1RRT.html">gRRT</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::RRT::Motion</name>
    <filename>classompl_1_1geometric_1_1RRT_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1geometric_1_1RRT_1_1Motion.html</anchorfile>
      <anchor>aba5559c353c48e374436775151c75260</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state</name>
      <anchorfile>classompl_1_1geometric_1_1RRT_1_1Motion.html</anchorfile>
      <anchor>acd5df45a1c0bcb5a22d2ac77b40013f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent</name>
      <anchorfile>classompl_1_1geometric_1_1RRT_1_1Motion.html</anchorfile>
      <anchor>a961d989d3e74304cc4677cc61d5b3cf0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::RRTConnect</name>
    <filename>classompl_1_1geometric_1_1RRTConnect.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::RRTConnect::Motion</class>
    <class kind="struct">ompl::geometric::RRTConnect::TreeGrowingInfo</class>
    <member kind="function">
      <type></type>
      <name>RRTConnect</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>aea8a84e73c86ff415931a29be34228f5</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si, bool addIntermediateStates=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a8bf803eefd912be271ee4aba109dbe82</anchor>
      <arglist>(base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>aa1171c6ad33dca3806a8a4df42e4f6b8</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a77a55c5947c8ddbf1e5064337c22d20c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIntermediateStates</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a7d7a2f5333b9be68f61462abf6a5c24a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIntermediateStates</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a8dc8ba4b7976bdf399b6110366397343</anchor>
      <arglist>(bool addIntermediateStates)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a6d672e3b8c4e5f09719a5db74c75ca41</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a66c8c7bea15161438a8a23ef733c9340</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a8b4577228d584d25ff58d85d117d01d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a88fffac555d484e4569ea8edbc9bd97e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>GrowState</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a6df5b0ed7234e4a70f82fd84f3e83c4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>TRAPPED</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a6df5b0ed7234e4a70f82fd84f3e83c4ba8c504cf08c1829a11f98ce4d6f38320b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>ADVANCED</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a6df5b0ed7234e4a70f82fd84f3e83c4ba0969940dcdb34f22e1a1ce0c9129e7ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>REACHED</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a6df5b0ed7234e4a70f82fd84f3e83c4baf7876405ca61b09872f30ab8c79a12eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Motion * &gt; &gt;</type>
      <name>TreeData</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>af482977ca67a836f2d3e4bbdbc95323f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>TRAPPED</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a6df5b0ed7234e4a70f82fd84f3e83c4ba8c504cf08c1829a11f98ce4d6f38320b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>ADVANCED</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a6df5b0ed7234e4a70f82fd84f3e83c4ba0969940dcdb34f22e1a1ce0c9129e7ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>REACHED</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a6df5b0ed7234e4a70f82fd84f3e83c4baf7876405ca61b09872f30ab8c79a12eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a74eab29b7c7ac5e75d88134067121e45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>ad6aeec9725a2588c7f087a67a76e5d2c</anchor>
      <arglist>(const Motion *a, const Motion *b) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>GrowState</type>
      <name>growTree</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a140a2bf524fe7c39dfbe1e8d5f55fe80</anchor>
      <arglist>(TreeData &amp;tree, TreeGrowingInfo &amp;tgi, Motion *rmotion)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>abb9c22bc9815d896ae9c029b2047b0da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TreeData</type>
      <name>tStart_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a91ce4e34b670b36588fdcc7030fe692d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TreeData</type>
      <name>tGoal_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>aeeb74200ede46e3d1eef584325ec1484</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistance_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a299caf818f757d96793d1bc092a665b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>addIntermediateStates_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a70804c799f32c48dd5d40e7f66000a0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a89885ce34b34c5c880993f3ad553bffa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::pair&lt; base::State *, base::State * &gt;</type>
      <name>connectionPoint_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a07527c14eb0e9e9c2eaf3133728de501</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>distanceBetweenTrees_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>ab82fb331140caa1d5c9c929db8df1c08</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1RRTConnect.html">gRRTC</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::RRTConnect::Motion</name>
    <filename>classompl_1_1geometric_1_1RRTConnect_1_1Motion.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::RRTConnect::TreeGrowingInfo</name>
    <filename>structompl_1_1geometric_1_1RRTConnect_1_1TreeGrowingInfo.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::RRTsharp</name>
    <filename>classompl_1_1geometric_1_1RRTsharp.html</filename>
    <base>ompl::geometric::RRTXstatic</base>
    <member kind="function">
      <type>void</type>
      <name>setEpsilon</name>
      <anchorfile>classompl_1_1geometric_1_1RRTsharp.html</anchorfile>
      <anchor>afe8f81cbb0731ecb32d3ce5d7d7b39e6</anchor>
      <arglist>(double) override</arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1RRTsharp.html">gRRTsharp</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::RRTstar</name>
    <filename>classompl_1_1geometric_1_1RRTstar.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="struct">ompl::geometric::RRTstar::CostIndexCompare</class>
    <class kind="class">ompl::geometric::RRTstar::Motion</class>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>ab1325c7e35b64344a500dab65bf0c10a</anchor>
      <arglist>(base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a95a3fdabbb6bcb1bd8059ec36af54149</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a2a471b9e2bc52e89850587463ecf4201</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>abf84856fa0dc70d008e79540cead90eb</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a2ffc63f0014372c460a63c549be44bbb</anchor>
      <arglist>(double goalBias)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a18714baa05ca6692b838adcbc55072a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>abc09caed4e70c8660ea63170ff4a399c</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>afd6077ba880d081fa71c10e9c149e1dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRewireFactor</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a47948a2021dbfdbd0cdf4b18cf8d718c</anchor>
      <arglist>(double rewireFactor)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRewireFactor</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>ad0216931ca7664df66b58424505a2924</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a797b5c16997b3e19bdca5adf31dd8f5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDelayCC</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a67848bffdda2ddcfbac59b358907e1b9</anchor>
      <arglist>(bool delayCC)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getDelayCC</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a2e12e6739ae3c20e77593633dd3bf503</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTreePruning</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>ae4d36c2c9db0453e1ced4dcf2cac77c3</anchor>
      <arglist>(bool prune)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getTreePruning</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>afb6bd9b83b44ddefb8db2ca12100af06</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPruneThreshold</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a129f4fbfd1074228f1cd64b622b050d7</anchor>
      <arglist>(const double pp)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPruneThreshold</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a9a14039c25f011e025ee020909aad4a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrunedMeasure</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>aa3bfb692a5e18a77e72260802a5ccacc</anchor>
      <arglist>(bool informedMeasure)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getPrunedMeasure</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>ab9d07911bf90d2a011daac10221ca2c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInformedSampling</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a81ca16e4dfbc8cd2fbe5992250324404</anchor>
      <arglist>(bool informedSampling)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getInformedSampling</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a0c56e9f9de04abd05ceaaff12e99cf9d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSampleRejection</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a80d69073fd47eb74efefac21152c0b52</anchor>
      <arglist>(bool reject)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getSampleRejection</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a56973f32a97bf0fb3cfaf99f11810aea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNewStateRejection</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>add3ea03a2640fb1931d5accd146e12c9</anchor>
      <arglist>(const bool reject)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getNewStateRejection</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a85ac0a5d340ff80940871f4775dbcd18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAdmissibleCostToCome</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a7de444eb0d3d1831353267cc94e08506</anchor>
      <arglist>(const bool admissible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAdmissibleCostToCome</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a0157358e54e9403bf94e71f437600ac8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrderedSampling</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>acbf2db73ad9519e11e83a582a10fc844</anchor>
      <arglist>(bool orderSamples)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getOrderedSampling</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a9b5dabb231097421aea9ead67c50e833</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBatchSize</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a616cd6a30e79cda820febad4d628704e</anchor>
      <arglist>(unsigned int batchSize)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getBatchSize</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>ac665d982176c0f8dea30d728aaf63d3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFocusSearch</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>ae6a8cb24a300de2df01a3dcdd9a9a7a5</anchor>
      <arglist>(const bool focus)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getFocusSearch</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>af2014918272a5d72d4e02c6d94ef8085</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKNearest</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>aa5e2a9ce790c719cd22354ea2b264b24</anchor>
      <arglist>(bool useKNearest)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getKNearest</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a023068fff9fa2555b3754da10c7af554</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumSamplingAttempts</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>ad21c04eaffbe4ebe337350f8ab7e7318</anchor>
      <arglist>(unsigned int numAttempts)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumSamplingAttempts</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a8f2d8b1f78e9ba03c9933377d7f4eeb5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>allocSampler</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>aa8180ea327090c82278680c2505aa433</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a98378d793112b21395a5b52e3f53e490</anchor>
      <arglist>(base::State *statePtr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a2046b5ca17c6030dac16cad855621a7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>ae5e0cdc240f9b4c906b6b9085df35009</anchor>
      <arglist>(const Motion *a, const Motion *b) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a8abf01faca68a24c0e95364de7db3186</anchor>
      <arglist>(Motion *motion, std::vector&lt; Motion * &gt; &amp;nbh) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeFromParent</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a7c90cd3eabefa41bfeb4bfa81619dcd8</anchor>
      <arglist>(Motion *m)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateChildCosts</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a6564971aba61a74bf620b2ffb439db09</anchor>
      <arglist>(Motion *m)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>pruneTree</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>afde43e06e2d50fedfc2f42062a23dce1</anchor>
      <arglist>(const base::Cost &amp;pruneTreeCost)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>base::Cost</type>
      <name>solutionHeuristic</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>ae5f8160ffbf0541c61e56fd0e799070c</anchor>
      <arglist>(const Motion *motion) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addChildrenToList</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a846bbf34344d62b0716832a6fa8f0094</anchor>
      <arglist>(std::queue&lt; Motion *, std::deque&lt; Motion * &gt;&gt; *motionList, Motion *motion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>keepCondition</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a42191512b485fa0701e7a0c82e8972ac</anchor>
      <arglist>(const Motion *motion, const base::Cost &amp;threshold) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>calculateRewiringLowerBounds</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a290bc15f4f774f138c78d58732ac2ed7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a217157cf8281f4da5f68f62c9423235c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::InformedSamplerPtr</type>
      <name>infSampler_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a19ce83eeaab6c6f08295aee9173338f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Motion * &gt; &gt;</type>
      <name>nn_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a9fee363f009cf1f41399c6bb3cc01b04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>goalBias_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>ae20251dbc5dbc0f9bdfb4c72141fbe13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistance_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>ac63a1848f74d9b61604d012d4e9cc87d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>abceef0ae95921f2f58278864e1fe425a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useKNearest_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>aeb2eab7fa3855a1ea9767ef9940c4bb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>rewireFactor_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a54e2598442b2a24f816eed7a106313ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>k_rrt_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a4ba7ccb3455c354e6b14075d62d8793e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>r_rrt_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a631a3f09d3417c447a1fb18c022cc2c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>delayCC_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a7cb1f7e0fbf61224324231de92d320cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::OptimizationObjectivePtr</type>
      <name>opt_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>ad6ed5fc62253eeaf7740aaafe9e485e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>bestGoalMotion_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>aca14b46659d5968a8c8861e068846163</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Motion * &gt;</type>
      <name>goalMotions_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a9be4107ecbea43b0ebdd81049a208fa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useTreePruning_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a75595f5071448f5b881284bad2a4464e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>pruneThreshold_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a4f72ce957f0faab2807c0464a388cfc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>usePrunedMeasure_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>ac2c9609386aa92723ecca8f2d2cdf3b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useInformedSampling_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a8ed8134d7be9844f5fb0629c46d7f314</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useRejectionSampling_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a036418995f08919149010d74409830a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useNewStateRejection_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a7743608a9b100d5952dba8229a96c600</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useAdmissibleCostToCome_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a087d9305553e568032e5cb3b08f8e4bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numSampleAttempts_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a2a5aeeff6bd5341e8b36efbb89c8ffe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useOrderedSampling_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a9a566978764e07d9d4c0441bce29533f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>batchSize_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a6761253f4c06c8ca55d0f214d3c3fb04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Motion * &gt;</type>
      <name>startMotions_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a5b3dadd2d5e48b324992419679d2dc05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::Cost</type>
      <name>bestCost_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a4056a3fb20f8076902fa194c1f711632</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::Cost</type>
      <name>prunedCost_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a77b4f37fae45b57c04c5fbeae10b4c13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>prunedMeasure_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a913ab1d8a770041a49918dce168112f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>iterations_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>afb8a6117217d2525b34bd0f00c1e9675</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1RRTstar.html">gRRTstar</docanchor>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::RRTstar::CostIndexCompare</name>
    <filename>structompl_1_1geometric_1_1RRTstar_1_1CostIndexCompare.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::RRTstar::Motion</name>
    <filename>classompl_1_1geometric_1_1RRTstar_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar_1_1Motion.html</anchorfile>
      <anchor>a9160d69f161f72ea8ff7371a0e018f7f</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar_1_1Motion.html</anchorfile>
      <anchor>af26b3af216daafb9dd4e5d593b310588</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar_1_1Motion.html</anchorfile>
      <anchor>ac925497a707b8fe5d096047d4a042e81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>inGoal</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar_1_1Motion.html</anchorfile>
      <anchor>a05c21cec545fee49586f79227f5c99ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>base::Cost</type>
      <name>cost</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar_1_1Motion.html</anchorfile>
      <anchor>a24d0430fac3f0ac44d7cbefe53c553ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>base::Cost</type>
      <name>incCost</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar_1_1Motion.html</anchorfile>
      <anchor>a3eb6f4563fe325c7f40a4d3432f225f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Motion * &gt;</type>
      <name>children</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar_1_1Motion.html</anchorfile>
      <anchor>ab3d1d70489f8d9ec5023172daebe5688</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::RRTXstatic</name>
    <filename>classompl_1_1geometric_1_1RRTXstatic.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::RRTXstatic::Motion</class>
    <class kind="struct">ompl::geometric::RRTXstatic::MotionCompare</class>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>a1c776dbe1098414735044e91d0391a30</anchor>
      <arglist>(base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>adce35fddfe0e1c3c3ffb2675a77ec694</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>ad745e3a8d9b62fb7780385a8ca1919fe</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>a6eea7f9af0c80449ac0aad208bc1229e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>af2c3baf84eb4f25c0ec493f2d290c363</anchor>
      <arglist>(double goalBias)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>acac84dbfb8c0a3dfc900b278a0dd83cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInformedSampling</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>af8623ade0f7dff90068c7c41f5346e3b</anchor>
      <arglist>(bool informedSampling)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getInformedSampling</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>a9b495dd11421a384da1adf9001423f16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSampleRejection</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>a85f6f34bcabd00c1f8040e3cc16ce79e</anchor>
      <arglist>(bool reject)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getSampleRejection</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>a563a3c2beb5737b016e32692e721a3b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumSamplingAttempts</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>af3c0f4a14aa9040673ae7045a801d1e9</anchor>
      <arglist>(unsigned int numAttempts)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumSamplingAttempts</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>a5c0132f61b2c2a127ab9923cf2028d94</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEpsilon</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>aef66e8b9cf28ef9b795ad6aef82fb3bf</anchor>
      <arglist>(double epsilon)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEpsilon</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>a375c23045d1ba701bc4b23a087ca863f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>aab758172d6ee9b092b4a1742a3c3e611</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>aa7d42f736567980f440d2302610e80e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRewireFactor</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>aad94d6b34c21ea7b657a2296bf0bd190</anchor>
      <arglist>(double rewireFactor)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRewireFactor</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>a7aa82d44a2afa5b524a6e30d185fed9f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>a2f145f96860572e6cca41d79a436fca3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKNearest</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>a34bf61472077b10a20bbcff230d8801e</anchor>
      <arglist>(bool useKNearest)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getKNearest</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>a0a1824d06f95b0ad6d2a363d93285d5c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpdateChildren</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>a53c6ebebd454bea719f06ef449924347</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUpdateChildren</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>abceab2e3f6b4b9959b87bcdb468a7b99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariant</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>a2b6f737aaf6daf4061f438dbaf23d2c4</anchor>
      <arglist>(const int variant)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getVariant</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>ab002ae0a8ceb1a4aaccb623fd224752c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlpha</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>ac752664cbbab1591be545da0e158a39c</anchor>
      <arglist>(const double a)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAlpha</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>a71312741ec7293447a00100544768c18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>allocSampler</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>a73ecb721972034a1c37bc65cf9654a4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>ab453070877d363dc9a5353f4c83beb0e</anchor>
      <arglist>(base::State *statePtr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>a13587c098f999c135a10db307a1726ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>ae77de83668eb2bc5dd161d529c141d98</anchor>
      <arglist>(const Motion *a, const Motion *b) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateQueue</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>a45b296ba12be7e7d81aee82e981dc018</anchor>
      <arglist>(Motion *x)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeFromParent</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>a830bcd3f3d5e2aeff5a346f76b19db5a</anchor>
      <arglist>(Motion *m)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>a94c9971d0d73fc1652508b58862a0a19</anchor>
      <arglist>(Motion *motion) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>calculateRewiringLowerBounds</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>aec9f10544ede690337dd0ce14ddc5c36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>calculateRRG</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>a6043e4cd04617107be9b277c674ea515</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>includeVertex</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>a23b7e3b95dcc9096d07149721f8860c0</anchor>
      <arglist>(const Motion *x) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>ac05c1f73eb35247c7426e016dbfbd7fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::InformedSamplerPtr</type>
      <name>infSampler_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>ac0e5e1eced62159b669f9a2283c9fb34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Motion * &gt; &gt;</type>
      <name>nn_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>a24cfd698987cdd4e32f41335d775cbf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>goalBias_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>a99e32fc24bf091631df2cdf8378da09c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistance_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>a35c993f6cf6c18a184c532bec0154fdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>aafd3601461ef042e7978b45322e25fe8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useKNearest_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>a1c442339f5ad68dd807947605bee1df6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>rewireFactor_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>adc0f401458ae61e9f37f0ff599580434</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>k_rrt_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>a3adc3b540a0edacc70336953dab3fb8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>r_rrt_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>a925a0a9279779772f683e8beb4aee47c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::OptimizationObjectivePtr</type>
      <name>opt_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>ab431046049e272a7303415201b1fe123</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>lastGoalMotion_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>a28c9d28f615a8f18eaa912d79f412d39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Motion * &gt;</type>
      <name>goalMotions_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>afd8726377b942f534a38051f0295029d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::Cost</type>
      <name>bestCost_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>af2f6c699ab88cf6067fc4425a09d9b9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>iterations_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>a304e38516997bc458f67deb99ccea6a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MotionCompare</type>
      <name>mc_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>a7fea8a7560a45871e75beb465142bd74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BinaryHeap&lt; Motion *, MotionCompare &gt;</type>
      <name>q_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>aa81e0e20b99173d19bedf85fcc9b1c5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::Cost</type>
      <name>epsilonCost_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>a35e901572e0388a170d812d9384ffbaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>updateChildren_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>a0b6c2427ce8c2f10ac745b178b1131b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>rrg_r_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>ac2f19b113d3f1df140ff7a2129840550</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>rrg_k_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>abb0fda7283bca67829afff5362223f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>variant_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>acbf86e8bf7ced88b268250b533acbc66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>alpha_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>a4946781ea800b17fe14425154e407819</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useInformedSampling_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>a6bc244362060d505be4f3a12a91b3863</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useRejectionSampling_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>a4e6a156bc29a6beb737b18d685a27867</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numSampleAttempts_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic.html</anchorfile>
      <anchor>a8d4110b3ebb76bd255e0130ebfa70661</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1RRTXstatic.html">gRRTXstatic</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::RRTXstatic::Motion</name>
    <filename>classompl_1_1geometric_1_1RRTXstatic_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic_1_1Motion.html</anchorfile>
      <anchor>a24e0facabe790410508ca16c63360e99</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic_1_1Motion.html</anchorfile>
      <anchor>af0b1c4084a65ea050c6249aa8ae9db71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic_1_1Motion.html</anchorfile>
      <anchor>aa97121ddf268faef597cbc2f25bd40ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>base::Cost</type>
      <name>cost</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic_1_1Motion.html</anchorfile>
      <anchor>af900fcc11b44c3068e12b2157b8164e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Motion * &gt;</type>
      <name>children</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic_1_1Motion.html</anchorfile>
      <anchor>a58027bca275a1b685e7b2ae441e36600</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::pair&lt; Motion *, bool &gt; &gt;</type>
      <name>nbh</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic_1_1Motion.html</anchorfile>
      <anchor>a5d769f58ce52e57fc88923333c6a281d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BinaryHeap&lt; Motion *, MotionCompare &gt;::Element *</type>
      <name>handle</name>
      <anchorfile>classompl_1_1geometric_1_1RRTXstatic_1_1Motion.html</anchorfile>
      <anchor>aab2616be308ca7e1a5354f08a65d3aaa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::RRTXstatic::MotionCompare</name>
    <filename>structompl_1_1geometric_1_1RRTXstatic_1_1MotionCompare.html</filename>
    <member kind="function">
      <type></type>
      <name>MotionCompare</name>
      <anchorfile>structompl_1_1geometric_1_1RRTXstatic_1_1MotionCompare.html</anchorfile>
      <anchor>aff47c084b254275d43c25afb7e72ec6e</anchor>
      <arglist>(base::OptimizationObjectivePtr opt, base::ProblemDefinitionPtr pdef)</arglist>
    </member>
    <member kind="function">
      <type>base::Cost</type>
      <name>costPlusHeuristic</name>
      <anchorfile>structompl_1_1geometric_1_1RRTXstatic_1_1MotionCompare.html</anchorfile>
      <anchor>aea4749936f241938b93f4df86821c398</anchor>
      <arglist>(const Motion *m) const</arglist>
    </member>
    <member kind="function">
      <type>base::Cost</type>
      <name>alphaCostPlusHeuristic</name>
      <anchorfile>structompl_1_1geometric_1_1RRTXstatic_1_1MotionCompare.html</anchorfile>
      <anchor>af4a36494992869075c5e110061d23c05</anchor>
      <arglist>(const Motion *m, double alpha) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structompl_1_1geometric_1_1RRTXstatic_1_1MotionCompare.html</anchorfile>
      <anchor>a2f08eced16a9b09c352dffe2fa365bd7</anchor>
      <arglist>(const Motion *m1, const Motion *m2) const</arglist>
    </member>
    <member kind="variable">
      <type>base::OptimizationObjectivePtr</type>
      <name>opt_</name>
      <anchorfile>structompl_1_1geometric_1_1RRTXstatic_1_1MotionCompare.html</anchorfile>
      <anchor>a90449f27c78f073961e6367ef784b10c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>base::ProblemDefinitionPtr</type>
      <name>pdef_</name>
      <anchorfile>structompl_1_1geometric_1_1RRTXstatic_1_1MotionCompare.html</anchorfile>
      <anchor>a5c9d024ca57899b9082fe66f65168a51</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::SBL</name>
    <filename>classompl_1_1geometric_1_1SBL.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::SBL::Motion</class>
    <class kind="struct">ompl::geometric::SBL::MotionInfo</class>
    <class kind="struct">ompl::geometric::SBL::TreeData</class>
    <member kind="function">
      <type></type>
      <name>SBL</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>afba6f0f7e5db8e5537c56b00c54ba778</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>a062c4fb5aaaf93b5cb2ab3a1fc1d9b7e</anchor>
      <arglist>(const base::ProjectionEvaluatorPtr &amp;projectionEvaluator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>a95b5c3a3493d8b369ed878b57d6074b1</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const base::ProjectionEvaluatorPtr &amp;</type>
      <name>getProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>a474354b5d1f1387d1442ccfeb07e6a61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>ae14bef7bf3d19c5fe29b439186b9d8ec</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>ad1f704ef6d8b984fa6eea148b6b61691</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>ab14925490db9b73788f7332f55e28343</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>a90728dd997bd0ab71a8e9221ace86d5e</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>a8f43030abfbfd7f7392ab60e644b9eaf</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>ad1ad7551aa786950a1325ea23f17b825</anchor>
      <arglist>(base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Grid&lt; MotionInfo &gt;::Cell</type>
      <name>GridCell</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>a81c9436779293e0800fb7aada096dd3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>PDF&lt; GridCell * &gt;</type>
      <name>CellPDF</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>a33c174f2801a632cf52b650eb1a9dc99</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>a481eee58f78971d35b3a72ceb7903ef2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeGridMotions</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>a045bc6073187af3c95302e98a40c29c7</anchor>
      <arglist>(Grid&lt; MotionInfo &gt; &amp;grid)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addMotion</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>aa7aaf57300e6a8474aade8c2b9899454</anchor>
      <arglist>(TreeData &amp;tree, Motion *motion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Motion *</type>
      <name>selectMotion</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>afb79a0fdc7fc54251d6ef246cdbf2a0c</anchor>
      <arglist>(TreeData &amp;tree)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeMotion</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>a61d240f219227b2476df8d534289a200</anchor>
      <arglist>(TreeData &amp;tree, Motion *motion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isPathValid</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>a5c290474f7aadefb7c5ed24bcab832be</anchor>
      <arglist>(TreeData &amp;tree, Motion *motion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkSolution</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>af71623082dc34713a0584baddf327bf1</anchor>
      <arglist>(bool start, TreeData &amp;tree, TreeData &amp;otherTree, Motion *motion, std::vector&lt; Motion * &gt; &amp;solution)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ValidStateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>a6e21ebdb80aa3df138b711f739458929</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ProjectionEvaluatorPtr</type>
      <name>projectionEvaluator_</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>a63cfcb2e97c2a1904202ccc81569958c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TreeData</type>
      <name>tStart_</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>a33a1bf5cb144b453e4b69855e19f3d18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TreeData</type>
      <name>tGoal_</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>ad917d94e5877b0a1f65c861e73329c58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistance_</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>afd6d54cc164f50d105aa615a2052daa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>afffdc21c6d41c1de3a55daebac85cff0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::pair&lt; base::State *, base::State * &gt;</type>
      <name>connectionPoint_</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>a7d435d26759641c4843a22d88dd48ade</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1SBL.html">gSBL</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::SBL::Motion</name>
    <filename>classompl_1_1geometric_1_1SBL_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1geometric_1_1SBL_1_1Motion.html</anchorfile>
      <anchor>ae9cde41a5c3a05bcbc8ecb793e66138f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1geometric_1_1SBL_1_1Motion.html</anchorfile>
      <anchor>a3457c79596453ae61dcf30e745a52169</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="variable">
      <type>const base::State *</type>
      <name>root</name>
      <anchorfile>classompl_1_1geometric_1_1SBL_1_1Motion.html</anchorfile>
      <anchor>ab4c75449dee78c54accf15a27e45a138</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state</name>
      <anchorfile>classompl_1_1geometric_1_1SBL_1_1Motion.html</anchorfile>
      <anchor>a1961e2628ac13bd2946f32a0df0e0644</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent</name>
      <anchorfile>classompl_1_1geometric_1_1SBL_1_1Motion.html</anchorfile>
      <anchor>a6909be2bcc8fc942027be974fc583035</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classompl_1_1geometric_1_1SBL_1_1Motion.html</anchorfile>
      <anchor>af10d75ce5c240a98e1ccf1daa34e3d26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Motion * &gt;</type>
      <name>children</name>
      <anchorfile>classompl_1_1geometric_1_1SBL_1_1Motion.html</anchorfile>
      <anchor>a21f5092d0a20771c1a051aa56ab350ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::SBL::MotionInfo</name>
    <filename>structompl_1_1geometric_1_1SBL_1_1MotionInfo.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::SBL::TreeData</name>
    <filename>structompl_1_1geometric_1_1SBL_1_1TreeData.html</filename>
    <member kind="variable">
      <type>Grid&lt; MotionInfo &gt;</type>
      <name>grid</name>
      <anchorfile>structompl_1_1geometric_1_1SBL_1_1TreeData.html</anchorfile>
      <anchor>a58b1c4ab2f8d03b8464bc798ac6772fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>structompl_1_1geometric_1_1SBL_1_1TreeData.html</anchorfile>
      <anchor>a5468bf9faf38d010765fda43bdfedbca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CellPDF</type>
      <name>pdf</name>
      <anchorfile>structompl_1_1geometric_1_1SBL_1_1TreeData.html</anchorfile>
      <anchor>a0632632651469a858e0148af4daafe1a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::SimpleSetup</name>
    <filename>classompl_1_1geometric_1_1SimpleSetup.html</filename>
    <member kind="function">
      <type></type>
      <name>SimpleSetup</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a6c77f5085972396a3797bb838667e8df</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleSetup</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>af945064d1e9216058e5ad1a4daa8d1f1</anchor>
      <arglist>(const base::StateSpacePtr &amp;space)</arglist>
    </member>
    <member kind="function">
      <type>const base::SpaceInformationPtr &amp;</type>
      <name>getSpaceInformation</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>afe30e53db85384c036c8b9a58895a1c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const base::ProblemDefinitionPtr &amp;</type>
      <name>getProblemDefinition</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>aa520304e2c0b0c6574404f7045bacb85</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>base::ProblemDefinitionPtr &amp;</type>
      <name>getProblemDefinition</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a3935d6f098c9f7429b691207db82f469</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const base::StateSpacePtr &amp;</type>
      <name>getStateSpace</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>aa2c3731d645925949b46aa7994a8df01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const base::StateValidityCheckerPtr &amp;</type>
      <name>getStateValidityChecker</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>ad8c8d2305ea06c82eb9f60df180a8e5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const base::GoalPtr &amp;</type>
      <name>getGoal</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>af5d911ec7ad62ba316ac177a2f2602f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const base::PlannerPtr &amp;</type>
      <name>getPlanner</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a05587edc31468f85fb4128740820479d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const base::PlannerAllocator &amp;</type>
      <name>getPlannerAllocator</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a7c3cadb5e54a6b2a5c3defb067e56c20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PathSimplifierPtr &amp;</type>
      <name>getPathSimplifier</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a74ce1eb0e50c7005fef029e6a1b067d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PathSimplifierPtr &amp;</type>
      <name>getPathSimplifier</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>aed52ed9ae614cab6fa843975b8b3c60f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const base::OptimizationObjectivePtr &amp;</type>
      <name>getOptimizationObjective</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a89dfe1f2357fd794486e1e4ddc3fa0b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveExactSolutionPath</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a3d176c844dcc85965f88770175ec21fd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveSolutionPath</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a766d2ec4f0de557da497ed51f2d96104</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>getSolutionPlannerName</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a42aec5c14937450428906b7d548e9130</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PathGeometric &amp;</type>
      <name>getSolutionPath</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a051ac766b8766e7f55778255a49b36db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a4d7165cc2926f86fc14f3677d49d8065</anchor>
      <arglist>(base::PlannerData &amp;pd) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateValidityChecker</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a6774bcc65c0968e2cb927bab464a3aad</anchor>
      <arglist>(const base::StateValidityCheckerPtr &amp;svc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateValidityChecker</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>ad6b07d6a351500ea1333151733b254e2</anchor>
      <arglist>(const base::StateValidityCheckerFn &amp;svc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOptimizationObjective</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a9f69de97e7c0cfce7cd8e5a927591ac8</anchor>
      <arglist>(const base::OptimizationObjectivePtr &amp;optimizationObjective)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartAndGoalStates</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a4b055cceac99fede611b4ea92234a305</anchor>
      <arglist>(const base::ScopedState&lt;&gt; &amp;start, const base::ScopedState&lt;&gt; &amp;goal, double threshold=std::numeric_limits&lt; double &gt;::epsilon())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addStartState</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>ab1dc047ae0b70d3492d7e222f56d83a7</anchor>
      <arglist>(const base::ScopedState&lt;&gt; &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearStartStates</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>abfd69f5fb87a3e95811ebe5f4f45ea0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartState</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>aee17b73abd2876dc4dbffd02038ded34</anchor>
      <arglist>(const base::ScopedState&lt;&gt; &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalState</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>af77001d1af4b29be4db01d9f6b91be6a</anchor>
      <arglist>(const base::ScopedState&lt;&gt; &amp;goal, double threshold=std::numeric_limits&lt; double &gt;::epsilon())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoal</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a6f6e9a1b5facde7915f51e86b48860e9</anchor>
      <arglist>(const base::GoalPtr &amp;goal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlanner</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a8a94558b2ece27d938a92b062d55df71</anchor>
      <arglist>(const base::PlannerPtr &amp;planner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlannerAllocator</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a9e2d929e58376c4806234b6a473cd3e8</anchor>
      <arglist>(const base::PlannerAllocator &amp;pa)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a387050f69afb31e4869f848cc837f8ba</anchor>
      <arglist>(double time=1.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>adae88a9d800135ebf84daedc77b23543</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>getLastPlannerStatus</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>ad878be5e6563b2f8af7fe1259b6fc173</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLastPlanComputationTime</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a9183d36ef22e6094e885560675299d4d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLastSimplificationTime</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a1dbe8ac05b4028c5e87afe71c49edbc1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>simplifySolution</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a6be73057e3a2e13fa8342c70c2e4f674</anchor>
      <arglist>(double duration=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>simplifySolution</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>adbbd67d9d06f2f9debde230b0c0e92c4</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a6a2ed93879c02efab472c5db3e9a6aff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a5bbc761739a05a4e9ae88cd95cfa138d</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>af245005feb3c0b525e1ac5d397c8d3ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::SpaceInformationPtr</type>
      <name>si_</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a769e167e2959b1ca59fc9b3ea2416f45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ProblemDefinitionPtr</type>
      <name>pdef_</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>ab996b6b96ab19c5f51ca5167bb8dd60a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::PlannerPtr</type>
      <name>planner_</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a580b3608f6b473a1ea0bc5febd0b83cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::PlannerAllocator</type>
      <name>pa_</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>af0eec15376eb6e47b0ad03e7f281c420</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PathSimplifierPtr</type>
      <name>psk_</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a0b1dcfac122177dfdd3d64a0bbf86212</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>configured_</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a4a346b6fccff04f3df867d78dba27db4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>planTime_</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a1747fe1bdce1cb4c9284c98f381fcc1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>simplifyTime_</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a07bd87a344ef361d581b799e75471307</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::PlannerStatus</type>
      <name>lastStatus_</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a2dff9b30ec063e43d154d59ef8a7bca9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::SimpleSetupPtr</name>
    <filename>classompl_1_1geometric_1_1SimpleSetupPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::SORRTstar</name>
    <filename>classompl_1_1geometric_1_1SORRTstar.html</filename>
    <base>ompl::geometric::InformedRRTstar</base>
    <member kind="function">
      <type></type>
      <name>SORRTstar</name>
      <anchorfile>classompl_1_1geometric_1_1SORRTstar.html</anchorfile>
      <anchor>a6b5225f08fe595ee3f2f8a193f2d3eec</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1SORRTstar.html">gSORRTstar</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::SPARS</name>
    <filename>classompl_1_1geometric_1_1SPARS.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="struct">ompl::geometric::SPARS::vertex_color_t</class>
    <class kind="struct">ompl::geometric::SPARS::vertex_interface_list_t</class>
    <class kind="struct">ompl::geometric::SPARS::vertex_list_t</class>
    <class kind="struct">ompl::geometric::SPARS::vertex_representative_t</class>
    <class kind="struct">ompl::geometric::SPARS::vertex_state_t</class>
    <member kind="enumeration">
      <type></type>
      <name>GuardType</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>ab32058a4cdbd6e4ab645537cc7735cdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>VertexIndexType</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a04d02d91073d51e4a0d28ccf664da708</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unordered_map&lt; VertexIndexType, std::set&lt; VertexIndexType &gt; &gt;</type>
      <name>InterfaceHash</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a18bd7a6b91a676d3f27a9ff10e4ac107</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::deque&lt; base::State * &gt;</type>
      <name>DensePath</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a67c4aa44789ce26820b24f1261873182</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::adjacency_list&lt; boost::vecS, boost::vecS, boost::undirectedS, boost::property&lt; vertex_state_t, base::State *, boost::property&lt; boost::vertex_predecessor_t, VertexIndexType, boost::property&lt; boost::vertex_rank_t, VertexIndexType, boost::property&lt; vertex_color_t, GuardType, boost::property&lt; vertex_list_t, std::set&lt; VertexIndexType &gt;, boost::property&lt; vertex_interface_list_t, InterfaceHash &gt; &gt;&gt; &gt;&gt; &gt;, boost::property&lt; boost::edge_weight_t, base::Cost &gt; &gt;</type>
      <name>SpannerGraph</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a59be994c281facc245b3d81842f7d7ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph_traits&lt; SpannerGraph &gt;::vertex_descriptor</type>
      <name>SparseVertex</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a7795bb56966488a5c0568dfa2a1bd888</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph_traits&lt; SpannerGraph &gt;::edge_descriptor</type>
      <name>SparseEdge</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a749f76cf358f16e047fbf244e985bfe1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; SparseVertex &gt; &gt;</type>
      <name>SparseNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a3c675e0510f608a514e962412e6ffdf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::adjacency_list&lt; boost::vecS, boost::vecS, boost::undirectedS, boost::property&lt; vertex_state_t, base::State *, boost::property&lt; boost::vertex_predecessor_t, VertexIndexType, boost::property&lt; boost::vertex_rank_t, VertexIndexType, boost::property&lt; vertex_representative_t, SparseVertex &gt; &gt;&gt; &gt;, boost::property&lt; boost::edge_weight_t, double &gt; &gt;</type>
      <name>DenseGraph</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>aa0822d493cd30885931fbbfcf8f5c916</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph_traits&lt; DenseGraph &gt;::vertex_descriptor</type>
      <name>DenseVertex</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a23e2c9926620acd0a907ad527a4567b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph_traits&lt; DenseGraph &gt;::edge_descriptor</type>
      <name>DenseEdge</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>ae3d15efe666e9f9b27360bff602882c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; DenseVertex &gt; &gt;</type>
      <name>DenseNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>aa4a270f91d937478be19fb4a77644cf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SPARS</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>afe94f657ab8a846a37ae50d3501ecd0a</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SPARS</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a247ed5097d23da1129551ea127935b07</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a393f0fff67500beca0f989a0be83d6e0</anchor>
      <arglist>(base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructRoadmap</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>aa46c8edc6d85033ea57c63f6ce41bb20</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructRoadmap</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a84fd8e31fd66ca1bc891f2009287086e</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc, bool stopOnMaxFail)</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>aabce7ea56478eddefd9e3d6255362d5a</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearQuery</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a930ec4c95f3602e8c32bd22b0f6f5f74</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a39a6e8e909fce6131bdefd30379ff58e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDenseNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>ae9ddaf2a9f9c95b04b88faac63521f39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSparseNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>ada846fd037a1893a91f40810a8ac9e7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxFailures</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>aed716541c53dca9f22892b1a6da267b0</anchor>
      <arglist>(unsigned int m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDenseDeltaFraction</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a47ae542f88f539d3356598812be62111</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSparseDeltaFraction</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a980542126f0d879fc609d3b26eedb6bf</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStretchFactor</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a2f6f345d22d946135837af4db90ce242</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>getMaxFailures</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a9512bd1b027996dfdab4c95eac87a435</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDenseDeltaFraction</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a5629167610871aadc875d7239df7e45c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSparseDeltaFraction</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>af62086e0cbd06aa8aff4c9fe8d19e8e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getStretchFactor</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>aef07d62885db64cda945f44ebb8a14a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a0270eec7358f21af9cdc208f1e74a1d4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>const DenseGraph &amp;</type>
      <name>getDenseGraph</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>aed61ca9610dc3a767f47ee7574e43e8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SpannerGraph &amp;</type>
      <name>getRoadmap</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a1b4b2b5e76d3775851e2a0248c9c1104</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>milestoneCount</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>af12e5e686dd352c2d8d573bf88b91201</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>guardCount</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a72344d7b0fa5c3685d45f83526703f6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>averageValence</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a7a538e40a1d2e04836c8c8a00d399c34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printDebug</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a987fffbf7b381e4f8c1a05674d4fc1d4</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reachedFailureLimit</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a10552803d8ca8ce0c32b2c97cf67fbaf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DenseVertex</type>
      <name>addSample</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>af0e41b1a4118d02fa562d8e78bbc0aaa</anchor>
      <arglist>(base::State *workState, const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkQueryStateInitialization</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a38d0e60ca6ccf611ef49abb23c799f50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>sameComponent</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>afc1867f92259c775e85f44e2e8336da0</anchor>
      <arglist>(SparseVertex m1, SparseVertex m2)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DenseVertex</type>
      <name>addMilestone</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a265196562943fea265b218d91c65f345</anchor>
      <arglist>(base::State *state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SparseVertex</type>
      <name>addGuard</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a63e1c6fef239f3cc525fe8318403007b</anchor>
      <arglist>(base::State *state, GuardType type)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>connectSparsePoints</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>ab94afd1ff296f91f05adf5c774fdbf1a</anchor>
      <arglist>(SparseVertex v, SparseVertex vp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>connectDensePoints</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a39879cdfb5770defe1b6735c3325bfae</anchor>
      <arglist>(DenseVertex v, DenseVertex vp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkAddCoverage</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>ada97a57b55366f6b1a524399b99c68c4</anchor>
      <arglist>(const base::State *lastState, const std::vector&lt; SparseVertex &gt; &amp;neigh)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkAddConnectivity</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a7cd536b31670fcc8d78d7c69ccca22e6</anchor>
      <arglist>(const base::State *lastState, const std::vector&lt; SparseVertex &gt; &amp;neigh)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkAddInterface</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a5fe14a1f2274a806bc67b705f1821c7c</anchor>
      <arglist>(const std::vector&lt; DenseVertex &gt; &amp;graphNeighborhood, const std::vector&lt; DenseVertex &gt; &amp;visibleNeighborhood, DenseVertex q)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkAddPath</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a0cf12b3bff14f346c9a62dada40f15bb</anchor>
      <arglist>(DenseVertex q, const std::vector&lt; DenseVertex &gt; &amp;neigh)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DenseVertex</type>
      <name>getInterfaceNeighbor</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a8f8315d98eeb8c4ae315cf7def77eb38</anchor>
      <arglist>(DenseVertex q, SparseVertex rep)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>addPathToSpanner</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>acf428f7ffa5a90f81f0d3495a4686e05</anchor>
      <arglist>(const DensePath &amp;dense_path, SparseVertex vp, SparseVertex vpp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateRepresentatives</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a4b95826123a856037f7d0ee74c943630</anchor>
      <arglist>(SparseVertex v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>calculateRepresentative</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a962e2d3526d358b3d4fc9015b2405d21</anchor>
      <arglist>(DenseVertex q)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToRepresentatives</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>ad9f9dd1fc29f7dc48bb0a1c2896274a3</anchor>
      <arglist>(DenseVertex q, SparseVertex rep, const std::set&lt; SparseVertex &gt; &amp;oreps)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeFromRepresentatives</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>af9bad238da1ed18fae83e90d4ca25fbc</anchor>
      <arglist>(DenseVertex q, SparseVertex rep)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeVPP</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>aeffda4d03123a688a734ef74e08c7993</anchor>
      <arglist>(DenseVertex v, DenseVertex vp, std::vector&lt; SparseVertex &gt; &amp;VPPs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeX</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a224b01b87deb0c0c16e14732b6a669de</anchor>
      <arglist>(DenseVertex v, DenseVertex vp, DenseVertex vpp, std::vector&lt; SparseVertex &gt; &amp;Xs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resetFailures</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>ae422eed3faaa03f793895e7412905e1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkForSolution</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>afe63255333497becd56880a2021fa5d0</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc, base::PathPtr &amp;solution)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>haveSolution</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>aade2eaa10fe55ce37216fa825bbd1bde</anchor>
      <arglist>(const std::vector&lt; DenseVertex &gt; &amp;starts, const std::vector&lt; DenseVertex &gt; &amp;goals, base::PathPtr &amp;solution)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>reachedTerminationCriterion</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a3f0d37ee3f6b8167f25fb2051a464c69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>base::PathPtr</type>
      <name>constructSolution</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a3fcb7d85650540fd7bae078d4618aac8</anchor>
      <arglist>(SparseVertex start, SparseVertex goal) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeDensePath</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a6b1814adf0749f8138da9403d54c8cd2</anchor>
      <arglist>(DenseVertex start, DenseVertex goal, DensePath &amp;path) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>abe82b072d388aac5650dde001cd3bc9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getSparseNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a165d082906ea801944422499aad42a63</anchor>
      <arglist>(base::State *inState, std::vector&lt; SparseVertex &gt; &amp;graphNeighborhood)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>filterVisibleNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>af9962ed19e1b1dad746f87543323f45a</anchor>
      <arglist>(base::State *inState, const std::vector&lt; SparseVertex &gt; &amp;graphNeighborhood, std::vector&lt; SparseVertex &gt; &amp;visibleNeighborhood) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getInterfaceNeighborRepresentatives</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a1348206e86ac6383f4f9d98be3bb764f</anchor>
      <arglist>(DenseVertex q, std::set&lt; SparseVertex &gt; &amp;interfaceRepresentatives)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getInterfaceNeighborhood</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>af84d5f12e7cfde6384adb6f4c92b335a</anchor>
      <arglist>(DenseVertex q, std::vector&lt; DenseVertex &gt; &amp;interfaceNeighborhood)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>aed8fe7b7d0711a992a2597f1247a5fa7</anchor>
      <arglist>(const DenseVertex a, const DenseVertex b) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>sparseDistanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>aaaeaa3934d9f29e7893f9756144b041a</anchor>
      <arglist>(const SparseVertex a, const SparseVertex b) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>base::Cost</type>
      <name>costHeuristic</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a3db2106a84f22f86a1d2c832c4f63ca5</anchor>
      <arglist>(SparseVertex u, SparseVertex v) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ValidStateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>acd50cb44ea98fdf1f2820a85838c3bb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DenseNeighbors</type>
      <name>nn_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a48bc1a8d735608ee371e2403e862adbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseNeighbors</type>
      <name>snn_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>ade5b67adc31063b7e60007600e50ae4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DenseGraph</type>
      <name>g_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>ae082222c487348b1e13d74975763a4e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SpannerGraph</type>
      <name>s_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>abe54cfe52c76097b0326685293b023b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; SparseVertex &gt;</type>
      <name>startM_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a83371198a453f553f07e0ec331a74067</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; SparseVertex &gt;</type>
      <name>goalM_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a1cee990db83fd464d4d020f6bfc9e626</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DenseVertex</type>
      <name>sparseQueryVertex_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a96b374b38cac7805cc5e3371b1fcde6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DenseVertex</type>
      <name>queryVertex_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a63c5733d408829e0e704030ad68b138a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PathGeometric</type>
      <name>geomPath_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a62771ddf86a03d2a25bc4f47a8c83987</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; DenseGraph, vertex_state_t &gt;::type</type>
      <name>stateProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a83a2e7d2f1abe84a909d2fc860edf21e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; SpannerGraph, vertex_state_t &gt;::type</type>
      <name>sparseStateProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a4730df61de7338d11f55bfdd91331f94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; SpannerGraph, vertex_color_t &gt;::type</type>
      <name>sparseColorProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>aca084020b77381bab083e918b417f6e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; DenseGraph, vertex_representative_t &gt;::type</type>
      <name>representativesProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a44350a6b9cb924c6d588b38ea2e4fa79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; SpannerGraph, vertex_list_t &gt;::type</type>
      <name>nonInterfaceListsProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>ad1c0ad7450ceeb833395f2caffce6a2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; SpannerGraph, vertex_interface_list_t &gt;::type</type>
      <name>interfaceListsProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a35ffa3f844aa2c6b1339d240edb885fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PathSimplifierPtr</type>
      <name>psimp_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>aa88488f15645266e02661fe370df3a2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; DenseGraph, boost::edge_weight_t &gt;::type</type>
      <name>weightProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a240e9215b995a65bfc64c9684dd31c5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::disjoint_sets&lt; boost::property_map&lt; SpannerGraph, boost::vertex_rank_t &gt;::type, boost::property_map&lt; SpannerGraph, boost::vertex_predecessor_t &gt;::type &gt;</type>
      <name>sparseDJSets_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>ac475ebd43d9ab037be2abfd27f8e674e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::function&lt; const std::vector&lt; DenseVertex &gt; &amp;(const DenseVertex)&gt;</type>
      <name>connectionStrategy_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a434823162bcc08b92794257379d820a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>consecutiveFailures_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a3a9053596063ce65ae1469a44211ee4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>stretchFactor_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a33dee098737eb963368ef74bb43cf59c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxFailures_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>ae402ddf68d55b16b696b478ebb8c349d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>addedSolution_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a8f3e8537fac3946c786dfa7598268531</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>denseDeltaFraction_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>ab906f7ac6bb9c163ea9152e7ad917357</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>sparseDeltaFraction_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>ad966c5db5423fd83e7ebfb22f361dce4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>denseDelta_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a06d059117303085093f2ac04bc0e8b60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>sparseDelta_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a168b6ad450d1b5100894bf4bff8e3a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>ae60003e270a038a494dcfd8b98d8743e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::mutex</type>
      <name>graphMutex_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a9bde82bf267e2f36d7548e2a1d0048c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::OptimizationObjectivePtr</type>
      <name>opt_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a520fdf4b30e1384488af1f96e0878723</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long unsigned int</type>
      <name>iterations_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a07dcba24f9a1ab7f0d2bd0b8aead74f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::Cost</type>
      <name>bestCost_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>aa7678cf28ee3b137e41c98154422990d</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1SPARS.html">gSPARS</docanchor>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::SPARS::vertex_color_t</name>
    <filename>structompl_1_1geometric_1_1SPARS_1_1vertex__color__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::SPARS::vertex_interface_list_t</name>
    <filename>structompl_1_1geometric_1_1SPARS_1_1vertex__interface__list__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::SPARS::vertex_list_t</name>
    <filename>structompl_1_1geometric_1_1SPARS_1_1vertex__list__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::SPARS::vertex_representative_t</name>
    <filename>structompl_1_1geometric_1_1SPARS_1_1vertex__representative__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::SPARS::vertex_state_t</name>
    <filename>structompl_1_1geometric_1_1SPARS_1_1vertex__state__t.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::SPARSdb</name>
    <filename>classompl_1_1geometric_1_1SPARSdb.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="struct">ompl::geometric::SPARSdb::CandidateSolution</class>
    <class kind="class">ompl::geometric::SPARSdb::CustomVisitor</class>
    <class kind="struct">ompl::geometric::SPARSdb::edge_collision_state_t</class>
    <class kind="class">ompl::geometric::SPARSdb::edgeWeightMap</class>
    <class kind="class">ompl::geometric::SPARSdb::foundGoalException</class>
    <class kind="struct">ompl::geometric::SPARSdb::InterfaceData</class>
    <class kind="struct">ompl::geometric::SPARSdb::InterfaceHashStruct</class>
    <class kind="struct">ompl::geometric::SPARSdb::vertex_color_t</class>
    <class kind="struct">ompl::geometric::SPARSdb::vertex_interface_data_t</class>
    <class kind="struct">ompl::geometric::SPARSdb::vertex_state_t</class>
    <member kind="enumeration">
      <type></type>
      <name>GuardType</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>afaa43af9e99fd2e9d0d59cb94bb79be9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EdgeCollisionState</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a4630a99320d5696a4840255cb635b74d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long int</type>
      <name>VertexIndexType</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>abd6f753bfe38f2a4cf379ff068cf3458</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; VertexIndexType, VertexIndexType &gt;</type>
      <name>VertexPair</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>ad8de4ecb4d9b3be29d478493de02ca4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unordered_map&lt; VertexPair, InterfaceData &gt;</type>
      <name>InterfaceHash</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a12284a32670c85b869a23f6f826c1d0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::property&lt; vertex_state_t, base::State *, boost::property&lt; boost::vertex_predecessor_t, VertexIndexType, boost::property&lt; boost::vertex_rank_t, VertexIndexType, boost::property&lt; vertex_color_t, GuardType, boost::property&lt; vertex_interface_data_t, InterfaceHashStruct &gt; &gt;&gt; &gt;&gt;</type>
      <name>VertexProperties</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>aaf62fddcfd1dca5eafdd57d59fec3706</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::property&lt; boost::edge_weight_t, double, boost::property&lt; edge_collision_state_t, int &gt; &gt;</type>
      <name>EdgeProperties</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a8249a165371653f76b605673f4f99012</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::adjacency_list&lt; boost::vecS, boost::vecS, boost::undirectedS, VertexProperties, EdgeProperties &gt;</type>
      <name>Graph</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>aec7d9bbdbd5c97f1a5875948c20d94ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph_traits&lt; Graph &gt;::vertex_descriptor</type>
      <name>Vertex</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a34616ea5076e533abe4a490d622df889</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph_traits&lt; Graph &gt;::edge_descriptor</type>
      <name>Edge</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a2bba185ecf8368e6e0dd358f1765c573</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::property_map&lt; Graph, edge_collision_state_t &gt;::type</type>
      <name>EdgeCollisionStateMap</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a5cf52115304b522498bfc3bb8af3eb41</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SPARSdb</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>afc23d5d2e73d0876f608b2c030642f5b</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SPARSdb</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a4010f646a18f5d1f228ed2bebd7978e8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStretchFactor</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a205e64b58526ac94852524ed2ebcacf1</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSparseDeltaFraction</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a5ba9f329d38a319205caf88026ee17b1</anchor>
      <arglist>(double D)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDenseDeltaFraction</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>aab6be9550e44a4499fc1fd88055003b1</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxFailures</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>aa1b1cb45b613a6d5722770ea27fe8452</anchor>
      <arglist>(unsigned int m)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMaxFailures</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>ab5d0fb1d950e6a25195afde60496e600</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDenseDeltaFraction</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>ae2cb044adea72fd6b3548473ba03aa63</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSparseDeltaFraction</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a2610cb4be7e2f6c106280d721adb968b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getStretchFactor</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a01f09906ab74020c11cee3527cf2cbf2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getGuardSpacingFactor</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>ae4c77397d192eae9001c69aa9cdce6f3</anchor>
      <arglist>(double pathLength, int &amp;numGuards, double &amp;spacingFactor)</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>ac0aafebb82644bf3266c4204d32a7a3f</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearQuery</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a3dd32e82194a5c3e63a56bfd825e1b0d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a8ad7810d2e5c5bfc443b8a595a4f6ac3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a16fb36f708bcef7bea1c6ec9a64820f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getSimilarPaths</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a168f113cca61d7c31a78e1bda83131e9</anchor>
      <arglist>(int nearestK, const base::State *start, const base::State *goal, CandidateSolution &amp;candidateSolution, const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a82d824a748efae7e8db1e6e83357dbce</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>const Graph &amp;</type>
      <name>getRoadmap</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>aee93442353a0ab4055361c4ea2565c1c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumVertices</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>ae6fdf7d9b811ae41e436cdb67531372e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumEdges</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a3a6bb193ba096742db66f4f940ddc017</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumConnectedComponents</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a384b73331a4de2562b685317c0ce2c0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumPathInsertionFailed</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>ad57b4eb5f1c713333b1b2f2e0c2226f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumConsecutiveFailures</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a0cc29c849f23f2fef1483525f2ce7448</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long unsigned int</type>
      <name>getIterations</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a73fda2b6f60c551f3351f2c75ec52d1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertVertexPathToStatePath</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a04ee70325fb640569ac8ab59c7658749</anchor>
      <arglist>(std::vector&lt; Vertex &gt; &amp;vertexPath, const base::State *actualStart, const base::State *actualGoal, CandidateSolution &amp;candidateSolution, bool disableCollisionWarning=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a0d58333c144f5fd8be1ad883321a1664</anchor>
      <arglist>(base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>af79df2b117570e32727c8bd72e3a7def</anchor>
      <arglist>(const base::PlannerData &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reachedFailureLimit</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a5f5fdf3e4b757daf518e9ce289be5172</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printDebug</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a92d385ac3aeac1eebd78580f48215b26</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearEdgeCollisionStates</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>ae213c75203413e0a31a688a5df8e9c14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>aca0f287e35cdd63492bdad22df59f55e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkQueryStateInitialization</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a9f0878a9e18b7c7d10d22c3051f4f297</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkAddCoverage</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a06178d0b2c8178f8559538ae343e7c13</anchor>
      <arglist>(const base::State *qNew, std::vector&lt; Vertex &gt; &amp;visibleNeighborhood)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkAddConnectivity</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a1e13afe80fde9c95ed9e9a4fd5714685</anchor>
      <arglist>(const base::State *qNew, std::vector&lt; Vertex &gt; &amp;visibleNeighborhood)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkAddInterface</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a2da533e0e067880152e37133e74d16c8</anchor>
      <arglist>(const base::State *qNew, std::vector&lt; Vertex &gt; &amp;graphNeighborhood, std::vector&lt; Vertex &gt; &amp;visibleNeighborhood)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkAddPath</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a61ce19d1cd9f26018dd9da99baf7e45e</anchor>
      <arglist>(Vertex v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resetFailures</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a5590919f04a6e9ba9c0d70d8f54f2393</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>findGraphNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>ab0cf26ff3693472005cbfe74180c9f90</anchor>
      <arglist>(base::State *state, std::vector&lt; Vertex &gt; &amp;graphNeighborhood, std::vector&lt; Vertex &gt; &amp;visibleNeighborhood)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>findGraphNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>aef80e5b49c5901a5221f1d700bf0667f</anchor>
      <arglist>(const base::State *state, std::vector&lt; Vertex &gt; &amp;graphNeighborhood)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>approachGraph</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>aa822343bfc75dee17622a259e000504c</anchor>
      <arglist>(Vertex v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Vertex</type>
      <name>findGraphRepresentative</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>acf2e8acdb49a0b6baba9ae9b34429bf8</anchor>
      <arglist>(base::State *st)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>findCloseRepresentatives</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a4bbfe4e52768d964ca4097f3307b3d1b</anchor>
      <arglist>(base::State *workState, const base::State *qNew, Vertex qRep, std::map&lt; Vertex, base::State * &gt; &amp;closeRepresentatives, const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updatePairPoints</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>ae16687b4f0e58a3780f309f7bd11f6c9</anchor>
      <arglist>(Vertex rep, const base::State *q, Vertex r, const base::State *s)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeVPP</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>adc9ca10cfa917299baa36e578bf01787</anchor>
      <arglist>(Vertex v, Vertex vp, std::vector&lt; Vertex &gt; &amp;VPPs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeX</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a7ccf3f44516b29474ca76b4bbb68264d</anchor>
      <arglist>(Vertex v, Vertex vp, Vertex vpp, std::vector&lt; Vertex &gt; &amp;Xs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>VertexPair</type>
      <name>index</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a44e3795fdf40260fb7a24fb4bbdba5e1</anchor>
      <arglist>(Vertex vp, Vertex vpp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>InterfaceData &amp;</type>
      <name>getData</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a8ecbce662fc486138a2c55a45c3010c0</anchor>
      <arglist>(Vertex v, Vertex vp, Vertex vpp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>distanceCheck</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>accd49a2071fce3c7f5edfbfa17b4f822</anchor>
      <arglist>(Vertex rep, const base::State *q, Vertex r, const base::State *s, Vertex rp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>abandonLists</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a7001e6e6400d931c67af423c4593c26f</anchor>
      <arglist>(base::State *st)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Vertex</type>
      <name>addGuard</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>ab539ba09c175b705ba3d07990fd8b461</anchor>
      <arglist>(base::State *state, GuardType type)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>connectGuards</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>afc7a4a3cad27df9dea9ba0cfbbf39ae5</anchor>
      <arglist>(Vertex v, Vertex vp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getPaths</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>ae4c6ff91634e9724f65e94d21216b336</anchor>
      <arglist>(const std::vector&lt; Vertex &gt; &amp;candidateStarts, const std::vector&lt; Vertex &gt; &amp;candidateGoals, const base::State *actualStart, const base::State *actualGoal, CandidateSolution &amp;candidateSolution, const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>lazyCollisionSearch</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a48864277198fe9884478cb6ead83d096</anchor>
      <arglist>(const Vertex &amp;start, const Vertex &amp;goal, const base::State *actualStart, const base::State *actualGoal, CandidateSolution &amp;candidateSolution, const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>lazyCollisionCheck</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>aac100d3af98c610a177c271376825256</anchor>
      <arglist>(std::vector&lt; Vertex &gt; &amp;vertexPath, const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkForSolution</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>ae56df47ebf824ce976d188fad9db5035</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc, base::PathPtr &amp;solution)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>constructSolution</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a474c52f301321fa69c0f39ec5a7e4219</anchor>
      <arglist>(Vertex start, Vertex goal, std::vector&lt; Vertex &gt; &amp;vertexPath) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>sameComponent</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>ad0fc73394cf3a4698e1ff718c76c5a7c</anchor>
      <arglist>(Vertex m1, Vertex m2)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a721a4a5a157d248f21e2bc1469f974c7</anchor>
      <arglist>(const Vertex a, const Vertex b) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ValidStateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a5592f0f550685e990625ee6d9ff0222a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Vertex &gt; &gt;</type>
      <name>nn_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>abfd7cd1e8df94c90a35334f93512f7dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Graph</type>
      <name>g_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>ab5caaf5bde4ae4c30c34e70c183c2e41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Vertex &gt;</type>
      <name>startM_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a610b681b7c6c1b69e63fc486d19e0bb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Vertex &gt;</type>
      <name>goalM_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a0caba3047f362682acc644a03bfa7b05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vertex</type>
      <name>queryVertex_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a01c4ad869bf0685eec9ac997a267e5e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>stretchFactor_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>aaf7ceaf3107711e4cddf8c7d0cf3a275</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>sparseDeltaFraction_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a15e8b03435bbe4781d2d7ac22d638924</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>denseDeltaFraction_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a79095ce0cf3773e0bb0acac85539c486</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxFailures_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a157a6eb305f471c60ff2a942a92a930a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numPathInsertionFailures_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a685d6aa5a571309f21fef1b2d49979d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>nearSamplePoints_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>accb07a02117d61db2d4cf92857e5f21d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PathSimplifierPtr</type>
      <name>psimp_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a9f84b32f79c29b0f32ab8d4a73589069</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; Graph, boost::edge_weight_t &gt;::type</type>
      <name>edgeWeightProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a9dc9ed65b66365898ee7926f25595945</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeCollisionStateMap</type>
      <name>edgeCollisionStateProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a72b5c4f063484c45cf81dd51dda8ad9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; Graph, vertex_state_t &gt;::type</type>
      <name>stateProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>af09c4c672b30f62dca76f8cbce6d20c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; Graph, vertex_color_t &gt;::type</type>
      <name>colorProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>ab9f3b46d7b1c640a8ff5da4b31a919df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; Graph, vertex_interface_data_t &gt;::type</type>
      <name>interfaceDataProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a34b18aa4f0a86f1b265e7d86d1e20872</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::disjoint_sets&lt; boost::property_map&lt; Graph, boost::vertex_rank_t &gt;::type, boost::property_map&lt; Graph, boost::vertex_predecessor_t &gt;::type &gt;</type>
      <name>disjointSets_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a6db459002718ce51856bf088efc80bcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a19592dee1c9ec65dbb4a6623d6786e97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>addedSolution_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a32abeea555ae74fc00573dd1f1621be3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>consecutiveFailures_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a3bbe6b21bd32ea8e19d3c1da977b072b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long unsigned int</type>
      <name>iterations_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>ae3c4eb519b7dcdb65f02abcac5439a7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>sparseDelta_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a3794a87b6e9b3a55b0123ebc48a1de34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>denseDelta_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>ab3f05d627cc48f280c027dcf82207afb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Vertex &gt;</type>
      <name>startVertexCandidateNeighbors_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a24b984d6917ddb6b009b8d546dcc1c3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>verbose_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>af32d774893fa877a89a2fac3580871e2</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1SPARSdb.html">gSPARSdb</docanchor>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::SPARSdb::CandidateSolution</name>
    <filename>structompl_1_1geometric_1_1SPARSdb_1_1CandidateSolution.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::SPARSdb::CustomVisitor</name>
    <filename>classompl_1_1geometric_1_1SPARSdb_1_1CustomVisitor.html</filename>
    <member kind="function">
      <type></type>
      <name>CustomVisitor</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb_1_1CustomVisitor.html</anchorfile>
      <anchor>ae83cfec406c231ce1dae9f8c4440aea4</anchor>
      <arglist>(Vertex goal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>examine_vertex</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb_1_1CustomVisitor.html</anchorfile>
      <anchor>a4ebd374cf60b6f2b3c32dfcd3bce927f</anchor>
      <arglist>(Vertex u, const Graph &amp;g) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::SPARSdb::edge_collision_state_t</name>
    <filename>structompl_1_1geometric_1_1SPARSdb_1_1edge__collision__state__t.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::SPARSdb::edgeWeightMap</name>
    <filename>classompl_1_1geometric_1_1SPARSdb_1_1edgeWeightMap.html</filename>
    <member kind="typedef">
      <type>Edge</type>
      <name>key_type</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb_1_1edgeWeightMap.html</anchorfile>
      <anchor>a8bb9b37ef6e13593354b88be017b998c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>value_type</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb_1_1edgeWeightMap.html</anchorfile>
      <anchor>aac6eb5e8f9680634e7782837429ba7d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double &amp;</type>
      <name>reference</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb_1_1edgeWeightMap.html</anchorfile>
      <anchor>a390c7c424fa96f7817b0163921a0844a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::readable_property_map_tag</type>
      <name>category</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb_1_1edgeWeightMap.html</anchorfile>
      <anchor>a93e965a802cc722b630ddb19243e3a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>edgeWeightMap</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb_1_1edgeWeightMap.html</anchorfile>
      <anchor>aff932b3c435818a7cf90c008cd6d9e88</anchor>
      <arglist>(const Graph &amp;graph, const EdgeCollisionStateMap &amp;collisionStates)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb_1_1edgeWeightMap.html</anchorfile>
      <anchor>a75434b473efadf9cfba1b1f5a73e3fa0</anchor>
      <arglist>(Edge e) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::SPARSdb::foundGoalException</name>
    <filename>classompl_1_1geometric_1_1SPARSdb_1_1foundGoalException.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::SPARSdb::InterfaceData</name>
    <filename>structompl_1_1geometric_1_1SPARSdb_1_1InterfaceData.html</filename>
    <member kind="function">
      <type></type>
      <name>InterfaceData</name>
      <anchorfile>structompl_1_1geometric_1_1SPARSdb_1_1InterfaceData.html</anchorfile>
      <anchor>af9e1fd5d2b1f72752ba70ea872f5a7a0</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>structompl_1_1geometric_1_1SPARSdb_1_1InterfaceData.html</anchorfile>
      <anchor>a26c321017ec5e67e7d31b1db8d3966d7</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFirst</name>
      <anchorfile>structompl_1_1geometric_1_1SPARSdb_1_1InterfaceData.html</anchorfile>
      <anchor>a7dfe2a9c21520c00487056fa8f77ee3a</anchor>
      <arglist>(const base::State *p, const base::State *s, const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSecond</name>
      <anchorfile>structompl_1_1geometric_1_1SPARSdb_1_1InterfaceData.html</anchorfile>
      <anchor>a561b95776b6da44bc21b1dc60e61665d</anchor>
      <arglist>(const base::State *p, const base::State *s, const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>pointA_</name>
      <anchorfile>structompl_1_1geometric_1_1SPARSdb_1_1InterfaceData.html</anchorfile>
      <anchor>a7780fc336495ad8d9875d15b8f4cf012</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>sigmaA_</name>
      <anchorfile>structompl_1_1geometric_1_1SPARSdb_1_1InterfaceData.html</anchorfile>
      <anchor>ae894adb92585f7bcfd1ba6e791bfc423</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>d_</name>
      <anchorfile>structompl_1_1geometric_1_1SPARSdb_1_1InterfaceData.html</anchorfile>
      <anchor>a02a447da54843eaba6448da21867ba71</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::SPARSdb::InterfaceHashStruct</name>
    <filename>structompl_1_1geometric_1_1SPARSdb_1_1InterfaceHashStruct.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::SPARSdb::vertex_color_t</name>
    <filename>structompl_1_1geometric_1_1SPARSdb_1_1vertex__color__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::SPARSdb::vertex_interface_data_t</name>
    <filename>structompl_1_1geometric_1_1SPARSdb_1_1vertex__interface__data__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::SPARSdb::vertex_state_t</name>
    <filename>structompl_1_1geometric_1_1SPARSdb_1_1vertex__state__t.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::SPARStwo</name>
    <filename>classompl_1_1geometric_1_1SPARStwo.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="struct">ompl::geometric::SPARStwo::InterfaceData</class>
    <class kind="struct">ompl::geometric::SPARStwo::vertex_color_t</class>
    <class kind="struct">ompl::geometric::SPARStwo::vertex_interface_data_t</class>
    <class kind="struct">ompl::geometric::SPARStwo::vertex_state_t</class>
    <member kind="enumeration">
      <type></type>
      <name>GuardType</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a6b3571a9600142a5e1b08f5b04413b81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>VertexIndexType</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a1630e860fd2277fb81db50637a175031</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; VertexIndexType, VertexIndexType &gt;</type>
      <name>VertexPair</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a715b5327fbe93476172c12073aff2e91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unordered_map&lt; VertexPair, InterfaceData &gt;</type>
      <name>InterfaceHash</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>ae9cfd7fe48b731d581b1a042d92ea9a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::adjacency_list&lt; boost::vecS, boost::vecS, boost::undirectedS, boost::property&lt; vertex_state_t, base::State *, boost::property&lt; boost::vertex_predecessor_t, VertexIndexType, boost::property&lt; boost::vertex_rank_t, VertexIndexType, boost::property&lt; vertex_color_t, GuardType, boost::property&lt; vertex_interface_data_t, InterfaceHash &gt; &gt;&gt; &gt;&gt;, boost::property&lt; boost::edge_weight_t, base::Cost &gt; &gt;</type>
      <name>Graph</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>adfa2ab51ee1834dc1b955327a4f769ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph_traits&lt; Graph &gt;::vertex_descriptor</type>
      <name>Vertex</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>ac4c13f11ec99be697a6e3472613f562c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph_traits&lt; Graph &gt;::edge_descriptor</type>
      <name>Edge</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a2cab8bd38ccff6a6cb1d0893de2905ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SPARStwo</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>aa212ec1cd1e496ce802cb892b242e079</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SPARStwo</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>af06623fea778d3d9be53f855a0fe1a0b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStretchFactor</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a1faca5d8e7bbcf32d0393b32064573d5</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSparseDeltaFraction</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a48f504453efc15734ee800da4ed3c15e</anchor>
      <arglist>(double D)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDenseDeltaFraction</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a1ce421639b3276212439a5cc1d0f8bd0</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxFailures</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>adbe67c69c36595af9dfdcb576e1cba3a</anchor>
      <arglist>(unsigned int m)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMaxFailures</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a5192c9d31c427cc3a41b02f717887c90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDenseDeltaFraction</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>adac6a29b6b6a5d5da9e0b6e1ca856643</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSparseDeltaFraction</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a214d71ab794da5cc7af9df2d362798f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getStretchFactor</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a36b8d542be7d46f2a9731dd641954814</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructRoadmap</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a7ddec9d2b9e5639080fb730628b62211</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructRoadmap</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>aafb4014c9c5acc4ba89e4635998614f6</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc, bool stopOnMaxFail)</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>ad4b13978d64615271ababe5eb5d100dd</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearQuery</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>ae5ce8b5338e0a9f11fc7d146367494e2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>af3c8e1f67ba6063fb3f1bc294ec67c31</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a0cf433d4fe08c935a31e0b16107d0f15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>ac2817f9529c845ec0600bc3e6078a8c1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>const Graph &amp;</type>
      <name>getRoadmap</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a36988beec9eeb9650674ce07990b4ab6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>milestoneCount</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>aeef089a6c9e517d45d751ac01750e636</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>afd939a9a9109b37eef106285f660b121</anchor>
      <arglist>(base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printDebug</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a8e574e350f3c3c54adaae95b3626b621</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a26f90b76e80ac5076fdc48415aa2585a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkQueryStateInitialization</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>ab62d9a6e84f4238a311bcbfeb48bb3ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkAddCoverage</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>ae9f886af88ea6248d449d71e773078f2</anchor>
      <arglist>(const base::State *qNew, std::vector&lt; Vertex &gt; &amp;visibleNeighborhood)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkAddConnectivity</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a24ff941cc90f6c79afb4531926af63e7</anchor>
      <arglist>(const base::State *qNew, std::vector&lt; Vertex &gt; &amp;visibleNeighborhood)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkAddInterface</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a363ef43403e3aa156ed7863d9f9d1c7f</anchor>
      <arglist>(const base::State *qNew, std::vector&lt; Vertex &gt; &amp;graphNeighborhood, std::vector&lt; Vertex &gt; &amp;visibleNeighborhood)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkAddPath</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a4834fd533b27b18a7997e9bb35779360</anchor>
      <arglist>(Vertex v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resetFailures</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a1e31d2dc32bd013a70c4642e48857771</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>findGraphNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>af97de154be5aa7aebfe443ab369b5ff6</anchor>
      <arglist>(base::State *st, std::vector&lt; Vertex &gt; &amp;graphNeighborhood, std::vector&lt; Vertex &gt; &amp;visibleNeighborhood)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>approachGraph</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a48d327d8816d976fa4214067d2d657fa</anchor>
      <arglist>(Vertex v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Vertex</type>
      <name>findGraphRepresentative</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>ad5ea6eea62d2f38686875f8867fabc7b</anchor>
      <arglist>(base::State *st)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>findCloseRepresentatives</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>abfe6c45d25a481367e153298a14524a3</anchor>
      <arglist>(base::State *workArea, const base::State *qNew, Vertex qRep, std::map&lt; Vertex, base::State * &gt; &amp;closeRepresentatives, const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updatePairPoints</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a5f8e1576d83e86db366a5c31ffebee2b</anchor>
      <arglist>(Vertex rep, const base::State *q, Vertex r, const base::State *s)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeVPP</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a4da612d05a90a20140868573555bf132</anchor>
      <arglist>(Vertex v, Vertex vp, std::vector&lt; Vertex &gt; &amp;VPPs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeX</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>ae05a5d0b6193ce1e5057bb0f236565bb</anchor>
      <arglist>(Vertex v, Vertex vp, Vertex vpp, std::vector&lt; Vertex &gt; &amp;Xs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>VertexPair</type>
      <name>index</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a94d0bd537ba65ab5016955edf3b7c105</anchor>
      <arglist>(Vertex vp, Vertex vpp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>InterfaceData &amp;</type>
      <name>getData</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>acfc362da7931b7cf9c7e1b07a6a3a35e</anchor>
      <arglist>(Vertex v, Vertex vp, Vertex vpp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>distanceCheck</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a08ebf31474c192801c581745476f1dbb</anchor>
      <arglist>(Vertex rep, const base::State *q, Vertex r, const base::State *s, Vertex rp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>abandonLists</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>aae49132628c82ad725fc356464f69cca</anchor>
      <arglist>(base::State *st)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Vertex</type>
      <name>addGuard</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>af92e4beced5c0ebb303668f65326b83c</anchor>
      <arglist>(base::State *state, GuardType type)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>connectGuards</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>abb4c11336f7485e50eeb99dd94e2d94d</anchor>
      <arglist>(Vertex v, Vertex vp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>haveSolution</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>ac6de480fb11fefaf9076c9f93a051a77</anchor>
      <arglist>(const std::vector&lt; Vertex &gt; &amp;starts, const std::vector&lt; Vertex &gt; &amp;goals, base::PathPtr &amp;solution)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkForSolution</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>aae99bfb4aa17e6b131e068495085a891</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc, base::PathPtr &amp;solution)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>reachedTerminationCriterion</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>aee26095b8de11f647a963dd2c710bbd2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>reachedFailureLimit</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a031187784606876d34508e32b238a896</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>base::PathPtr</type>
      <name>constructSolution</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>aa0af9214dfd2bbe58bfd788e551b5810</anchor>
      <arglist>(Vertex start, Vertex goal) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>sameComponent</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a4f52f9ebe885288e5980e1894476e8fc</anchor>
      <arglist>(Vertex m1, Vertex m2)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>af8c619ecd2826ba330571880acea0cbe</anchor>
      <arglist>(const Vertex a, const Vertex b) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>base::Cost</type>
      <name>costHeuristic</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a9a0508372e1c53a347802e927610f8a1</anchor>
      <arglist>(Vertex u, Vertex v) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ValidStateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>ad018ad5507cd56a7c0ab947bb55b694a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Vertex &gt; &gt;</type>
      <name>nn_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a93f792206a3253ec60a501035489d94a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Graph</type>
      <name>g_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a854016cd0fea7c9d2aea1cf149f25e8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Vertex &gt;</type>
      <name>startM_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a7d245fb73679d79ed93b6f74c6f7e141</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Vertex &gt;</type>
      <name>goalM_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a11b90682963688bfe8a3f85679651dda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vertex</type>
      <name>queryVertex_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>af91d34b6a492b4ae5f44584a315e927e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>stretchFactor_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>aa73616350d6259053aaaa89670afcf8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>sparseDeltaFraction_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>ad1418242bacbd56cc969c862b193909f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>denseDeltaFraction_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a16744cca3916e0abd9eb65c852ab409f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxFailures_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a376f66d6e8c16b525dbb937112dece45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>nearSamplePoints_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>acee8b08731de6675f6bd02102ec07c05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; Graph, vertex_state_t &gt;::type</type>
      <name>stateProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a80fd4594a8a95d4214e12799f14d71df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PathSimplifierPtr</type>
      <name>psimp_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a6ff5e30c20ecf7fa86cfe98f13c3bbfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; Graph, boost::edge_weight_t &gt;::type</type>
      <name>weightProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a85a319c98729874690eee9f7719bdce4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; Graph, vertex_color_t &gt;::type</type>
      <name>colorProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a3b6c81f7671da3764d55b929c627fb26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; Graph, vertex_interface_data_t &gt;::type</type>
      <name>interfaceDataProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a1b997b15c2e49651cfd5b1eebff4512a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::disjoint_sets&lt; boost::property_map&lt; Graph, boost::vertex_rank_t &gt;::type, boost::property_map&lt; Graph, boost::vertex_predecessor_t &gt;::type &gt;</type>
      <name>disjointSets_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a6292cd3365157dc6f00a4cf197a47ab4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a73a536e798e886c1542796b681ed0e94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>addedSolution_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a0431fe0a06855bf74a2472bcfc128339</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>consecutiveFailures_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a5f9b9987ad6832adbaec459d4eda5109</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>sparseDelta_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a35087ca1c1b52f55fcfc9d4a725b752f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>denseDelta_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a39cc89e087375afd76d57ee10a4e6595</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::mutex</type>
      <name>graphMutex_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a8832e4447c8399d3a3e3ef2083a1e4e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::OptimizationObjectivePtr</type>
      <name>opt_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a8dad2ff2d21a19e71c59f1329e5a43fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long unsigned int</type>
      <name>iterations_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a277250cca2d65902e1ed0aa00219a960</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::Cost</type>
      <name>bestCost_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a2d97ef0cbb15bc5d9c84b2371daf513e</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1SPARStwo.html">gSPARStwo</docanchor>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::SPARStwo::InterfaceData</name>
    <filename>structompl_1_1geometric_1_1SPARStwo_1_1InterfaceData.html</filename>
    <member kind="function">
      <type></type>
      <name>InterfaceData</name>
      <anchorfile>structompl_1_1geometric_1_1SPARStwo_1_1InterfaceData.html</anchorfile>
      <anchor>ad2934ec5c390a5b11dc6cc88e8c37010</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>structompl_1_1geometric_1_1SPARStwo_1_1InterfaceData.html</anchorfile>
      <anchor>ad1554c9909d120f8685ff0ed7b8cd83d</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFirst</name>
      <anchorfile>structompl_1_1geometric_1_1SPARStwo_1_1InterfaceData.html</anchorfile>
      <anchor>a557bf81456558c148075edb5b64b73b4</anchor>
      <arglist>(const base::State *p, const base::State *s, const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSecond</name>
      <anchorfile>structompl_1_1geometric_1_1SPARStwo_1_1InterfaceData.html</anchorfile>
      <anchor>a815086371dd2ba4a1448b64c9d34f2b5</anchor>
      <arglist>(const base::State *p, const base::State *s, const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>pointA_</name>
      <anchorfile>structompl_1_1geometric_1_1SPARStwo_1_1InterfaceData.html</anchorfile>
      <anchor>a4aebee7a63db441d506e51c7297d4c04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>sigmaA_</name>
      <anchorfile>structompl_1_1geometric_1_1SPARStwo_1_1InterfaceData.html</anchorfile>
      <anchor>a2957b150ed1f2e2c3668fb94db5cb17c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>d_</name>
      <anchorfile>structompl_1_1geometric_1_1SPARStwo_1_1InterfaceData.html</anchorfile>
      <anchor>a0c06712a35f8cb866f98c1fc4927642a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::SPARStwo::vertex_color_t</name>
    <filename>structompl_1_1geometric_1_1SPARStwo_1_1vertex__color__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::SPARStwo::vertex_interface_data_t</name>
    <filename>structompl_1_1geometric_1_1SPARStwo_1_1vertex__interface__data__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::SPARStwo::vertex_state_t</name>
    <filename>structompl_1_1geometric_1_1SPARStwo_1_1vertex__state__t.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::SST</name>
    <filename>classompl_1_1geometric_1_1SST.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::SST::Motion</class>
    <class kind="class">ompl::geometric::SST::Witness</class>
    <member kind="function">
      <type></type>
      <name>SST</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>ada7da5e01597ff6d49742af8c77b19f2</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>a584837d8ab2293a2a99245b536ad154c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>a63ff360fb3cc0e58e145b824e362e227</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>a9f99ee938809ba5f29ad0079abc0620e</anchor>
      <arglist>(base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>a7e519e4a216bed849a295c2954ae784c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>a47a018e222ad8ebb3c94f6f46f8d2bfa</anchor>
      <arglist>(double goalBias)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>a5253704976b868cc6c10395d048fbc88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>af7631a6fa986f21882e76e11ee9324eb</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>a5046c3aa336d1c24e4d5c09e991f5ae3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSelectionRadius</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>ab0d51dd197b4dfe2d8ed828bf8c3c947</anchor>
      <arglist>(double selectionRadius)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSelectionRadius</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>a3f9cd087eb808c5cfbf18249b3bd657f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPruningRadius</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>a3fe64d0cd82d077ea0694d76ed8b9226</anchor>
      <arglist>(double pruningRadius)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPruningRadius</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>a18db6dfc9088ab54dd4551ac2cb17388</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>a3a2e36007c4f0e342c7bd6cbae74625c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Motion *</type>
      <name>selectNode</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>a703af29b4df7012a4d8c153c813fae72</anchor>
      <arglist>(Motion *sample)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Witness *</type>
      <name>findClosestWitness</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>a29fd8eeffe3ceb542af92d96d44f8a78</anchor>
      <arglist>(Motion *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>base::State *</type>
      <name>monteCarloProp</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>af06f5dcdf42ec62669a194811fe57ec7</anchor>
      <arglist>(Motion *m)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>abad59437ddc112e3f4bce8a36b7f1712</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>aede79c5ad63f6e41384806120e3aff95</anchor>
      <arglist>(const Motion *a, const Motion *b) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>a0ae607ecc42492fb7e434609c68fd64b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Motion * &gt; &gt;</type>
      <name>nn_</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>a91ee984869001ca28c483053982c1010</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Motion * &gt; &gt;</type>
      <name>witnesses_</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>aa925d4436b7a4cb21d2b3355fdc9a937</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>goalBias_</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>abf46b9611f2e650d4e80a2849db6a71e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistance_</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>a05d0e69423c6d3045ff9254eb32c6a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>selectionRadius_</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>ab6085b9cdc62848753caa581dd5acb68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>pruningRadius_</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>ad2635d3b507ae619dd77c6dc6a2b2dcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>aadcf8f1df9c64d9a106925b6ed16d73f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; base::State * &gt;</type>
      <name>prevSolution_</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>adae4972c13d74d8fef9dda1bc53559e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::Cost</type>
      <name>prevSolutionCost_</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>a1a28d7823a66a1452d08cd0973108b5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::OptimizationObjectivePtr</type>
      <name>opt_</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>a8591f51720c34f1a040a97d5f74859f2</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1SST.html">gSST</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::SST::Motion</name>
    <filename>classompl_1_1geometric_1_1SST_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1geometric_1_1SST_1_1Motion.html</anchorfile>
      <anchor>ab6b0ac014b3e02b5983e54bd5bd6f1d7</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state_</name>
      <anchorfile>classompl_1_1geometric_1_1SST_1_1Motion.html</anchorfile>
      <anchor>a751c6653a8e53751a58d24dc3578367c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent_</name>
      <anchorfile>classompl_1_1geometric_1_1SST_1_1Motion.html</anchorfile>
      <anchor>a7b10232f6a79a4c724e3739a7dba4279</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>numChildren_</name>
      <anchorfile>classompl_1_1geometric_1_1SST_1_1Motion.html</anchorfile>
      <anchor>a0bc49be84a42a8be92bc599d09bf0cd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>inactive_</name>
      <anchorfile>classompl_1_1geometric_1_1SST_1_1Motion.html</anchorfile>
      <anchor>ac1f63721c8d037f1fb30927317c9cb0d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::SST::Witness</name>
    <filename>classompl_1_1geometric_1_1SST_1_1Witness.html</filename>
    <base>ompl::geometric::SST::Motion</base>
    <member kind="variable">
      <type>Motion *</type>
      <name>rep_</name>
      <anchorfile>classompl_1_1geometric_1_1SST_1_1Witness.html</anchorfile>
      <anchor>a871cd0686bda47d4ed61043b7a1b2969</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::STRIDE</name>
    <filename>classompl_1_1geometric_1_1STRIDE.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::STRIDE::Motion</class>
    <member kind="function">
      <type></type>
      <name>STRIDE</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a4ca073e2319711b3c882495769164f7c</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si, bool useProjectedDistance=false, unsigned int degree=16, unsigned int minDegree=12, unsigned int maxDegree=18, unsigned int maxNumPtsPerLeaf=6, double estimatedDimension=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a8fccf704a1018415efdb6e18d2ecd648</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>aad0f2626aaea3f2b39c3ccb6cc8293f8</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a3a8b20b7a49cd4fbf931ba0d2c6b0d24</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a9d50e6641ae3d8e35d91e565b166e3c8</anchor>
      <arglist>(double goalBias)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a9827d4b73fe8a9f65c37d030177cad71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseProjectedDistance</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a2e6ace0af3911c5ee34db3ffd263db45</anchor>
      <arglist>(bool useProjectedDistance)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUseProjectedDistance</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a5d1b0f4151f396551b5b98307563b751</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDegree</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a2a2e8357faa4c7c96cdcd194c6d69630</anchor>
      <arglist>(unsigned int degree)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDegree</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>aeae165c1a65c77201f739a01a0fb1f4d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinDegree</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a2adc40c50cb46f7ab1ebbc9b8cf3e770</anchor>
      <arglist>(unsigned int minDegree)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMinDegree</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>afa94764918600f03fc3153d36624ee0d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxDegree</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>ab573839974ff34bbcc560083277bbbe9</anchor>
      <arglist>(unsigned int maxDegree)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMaxDegree</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>af61d9fe77ef3ea0e67efc5e5f353a453</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxNumPtsPerLeaf</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>ab50348ae1e21c135b677ff36dea41817</anchor>
      <arglist>(unsigned int maxNumPtsPerLeaf)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMaxNumPtsPerLeaf</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>af8d33492856f0bd86fe75743b1eb79ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEstimatedDimension</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a2e7aa117389d54a98d7ed5fdff3ab0b6</anchor>
      <arglist>(double estimatedDimension)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEstimatedDimension</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a7f211176be60295e4c80ab7ba4ca202a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a421b9ed7f95da2e13134dcedbd18718e</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>addf75cace7e643356bbfb86bcf695d25</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinValidPathFraction</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a94c58f1d54c93ee474c1d4f0b13346cd</anchor>
      <arglist>(double fraction)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMinValidPathFraction</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a22089ceea50138332de571746e6db465</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a45a55e26ab3ad057ee460e49090d84f4</anchor>
      <arglist>(const base::ProjectionEvaluatorPtr &amp;projectionEvaluator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>af6592a10978efdfb76e4eb2f79f11148</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const base::ProjectionEvaluatorPtr &amp;</type>
      <name>getProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a5f4296fabae677ad5b7bb7ea49a4240d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a096f54cd9ac7ff3757f3e66b658bec33</anchor>
      <arglist>(base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>aedba1f8369c75afbe2c36a103253832f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupTree</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a0f501545c061accc1633b28bb85730c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>ad4996f921453f0691a94c367e47aa095</anchor>
      <arglist>(const Motion *a, const Motion *b) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>projectedDistanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a99ba916deab288cb7a03fd46768e276e</anchor>
      <arglist>(const Motion *a, const Motion *b) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addMotion</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>aa6f7b770deecb0f22d197f49b33ca6b7</anchor>
      <arglist>(Motion *motion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Motion *</type>
      <name>selectMotion</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a8d76d0e8e97867705e27ea076ebb9800</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ValidStateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a522a770347fa60391e815d20077d6646</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ProjectionEvaluatorPtr</type>
      <name>projectionEvaluator_</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a0ff8cd07b4ba20a4e2caad3d4664a171</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::scoped_ptr&lt; NearestNeighborsGNAT&lt; Motion * &gt; &gt;</type>
      <name>tree_</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a68773ce20a0a014b5764eaf37f7bd5e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>goalBias_</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a9e0c7576bef82920ba589ac211cd1422</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistance_</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a7b7c981e0884cce1999f4135c7d27447</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useProjectedDistance_</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>addd4a72e19d6e3475a4598f34712bd7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>degree_</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a3eb85a33b773b82bb52dd5690b8016b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>minDegree_</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>ad4989f2d71e32a3967d491bd502bd56a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxDegree_</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>af4317a7f719b20cf7a06d75e4be55823</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxNumPtsPerLeaf_</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>ac42bf5bfecc1d3e3fd90946f4c56ce4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>estimatedDimension_</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a9f2d60188acc0afe477a9f97aa437f5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>minValidPathFraction_</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a08431ea656245b1dc221c460c849f5ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a90d67e16a4b4ac83aeb14cfa3867fdfe</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1STRIDE.html">gSTRIDE</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::STRIDE::Motion</name>
    <filename>classompl_1_1geometric_1_1STRIDE_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE_1_1Motion.html</anchorfile>
      <anchor>ae95d79897010ed9e5a46026170adb2ca</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE_1_1Motion.html</anchorfile>
      <anchor>ae21fe1ff8289d8580e9f8fd75bcafb63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE_1_1Motion.html</anchorfile>
      <anchor>aaa5a30775df6b14f5ac8f4b37194a9bb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::TaskSpaceConfig</name>
    <filename>classompl_1_1geometric_1_1TaskSpaceConfig.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::ThunderDBPtr</name>
    <filename>classompl_1_1geometric_1_1ThunderDBPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::ThunderPtr</name>
    <filename>classompl_1_1geometric_1_1ThunderPtr.html</filename>
    <docanchor file="classompl_1_1geometric_1_1ThunderPtr.html">Thunder</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::ThunderRetrieveRepair</name>
    <filename>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</filename>
    <base>ompl::base::Planner</base>
    <member kind="function">
      <type></type>
      <name>ThunderRetrieveRepair</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>ad82b90c939d4002578eeb27091f3fdf9</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si, tools::ThunderDBPtr experienceDB)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>aa5b49004e61671c8f0896a4e09d458ee</anchor>
      <arglist>(base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; PathGeometric &gt; &amp;</type>
      <name>getLastRecalledNearestPaths</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>a22f9523d84dd681e0dadbfab22ab75b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getLastRecalledNearestPathChosen</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>a35e42d3c290536ccbda72682d586a24a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PathGeometric &amp;</type>
      <name>getChosenRecallPath</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>af27947a52afdd2426e22e3451db92d48</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRepairPlannerDatas</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>aec147bc9d05175d8cf54d31060b484ef</anchor>
      <arglist>(std::vector&lt; base::PlannerDataPtr &gt; &amp;data) const</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>a7fc3560db975159bc63d6904b06897cf</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>ae19dee2b6269d03ebf8f7d155946206f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExperienceDB</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>a05b4c45080b639afb306e8c84b1df3c1</anchor>
      <arglist>(const tools::ThunderDBPtr &amp;experienceDB)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRepairPlanner</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>ae27cf2c8b41891d049f89c80206b824b</anchor>
      <arglist>(const base::PlannerPtr &amp;planner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>a1b2ccd43a8132098d5ec1f2de4f29562</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>repairPath</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>a374a3b2271b4124f77c7cddd6cf86439</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc, PathGeometric &amp;primaryPath)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>replan</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>a45b5b08ce5fd4850fea007d070840ad7</anchor>
      <arglist>(const base::State *start, const base::State *goal, PathGeometric &amp;newPathSegment, const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNearestK</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>a35dddd11ee38679bc04608f545cdae24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestK</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>a4b25ec765e34e80d8f7d3ae988d388bf</anchor>
      <arglist>(int nearestK)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableSmoothing</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>a4b53aa5b5b4d602550c3ec16d82a6b3b</anchor>
      <arglist>(bool enable)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::size_t</type>
      <name>checkMotionScore</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>a9e79fbd673fd4aea20575d7ff4bf8859</anchor>
      <arglist>(const base::State *s1, const base::State *s2) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>abf8c57d14054174863e22f950cd794b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>tools::ThunderDBPtr</type>
      <name>experienceDB_</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>ae20f82d2a1518d733eaee5c2dda9cfa2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; PathGeometric &gt;</type>
      <name>nearestPaths_</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>a7314cec2447bda81ec61a46442358460</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>nearestPathsChosenID_</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>a45d0f12d30ca9fc64be0be49f811e7b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::PlannerPtr</type>
      <name>repairPlanner_</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>a7136cfa8cefc1cb88b44ba887f07543f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ProblemDefinitionPtr</type>
      <name>repairProblemDef_</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>ae0a5db3bf0cdf96e2fa6fdb005fff02d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; base::PlannerDataPtr &gt;</type>
      <name>repairPlannerDatas_</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>aa33b6ec3e2ecefbfa6757c5a77a4a496</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PathSimplifierPtr</type>
      <name>path_simplifier_</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>af340bc6f4852f096565f46e743da4b1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nearestK_</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>a103933fe248fd0d9f7886945ce49165c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>smoothingEnabled_</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>a5b346eec67c4645eac498dbb86b60c3e</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1ThunderRetrieveRepair.html">ThunderRetrieveRepair</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::TRRT</name>
    <filename>classompl_1_1geometric_1_1TRRT.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::TRRT::Motion</class>
    <member kind="function">
      <type></type>
      <name>TRRT</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>ad61a99cc1f7a4b5c1156ad165e37ef38</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a03e5564cca8c7edeefe937f9893a8e09</anchor>
      <arglist>(base::PlannerData &amp;data) const override</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a9a06499418f35601237747222b7ce0ea</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;plannerTerminationCondition) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>aa5ec8e536c7f7b05deae9edf28a0ca50</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>abf01bc73f6a435029e40fa1cde168c79</anchor>
      <arglist>(double goalBias)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a99a143c610c098ffcc2bda5a7c3c2a89</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a88488f425f4ff5f47f973a31b4de97b2</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a34b39d0494c9fe34bbc2e0cad52ccd50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTempChangeFactor</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a18212ef51d67d0e1e71291e2b1e2beea</anchor>
      <arglist>(double factor)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTempChangeFactor</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a62f2515a3d72246f9905761860a08978</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCostThreshold</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a1f4c28a0453fa631ad0f39f7e9b3a142</anchor>
      <arglist>(double maxCost)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCostThreshold</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a2d76e7f2c351da150455be8ded305b80</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitTemperature</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a54b75fca0c41d89db8d3475f8a546096</anchor>
      <arglist>(double initTemperature)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getInitTemperature</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>af06d8a781bbb06d6daaac4f23fc8a8b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrontierThreshold</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a4de4dc950c5b705cc831408c155d6ef0</anchor>
      <arglist>(double frontier_threshold)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFrontierThreshold</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a5b794d35641bd4d1424c5db04f55709c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrontierNodeRatio</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a2ca9ee4a3c36a22e1935cf2f419adb1e</anchor>
      <arglist>(double frontierNodeRatio)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFrontierNodeRatio</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a0133893a0b659055273ccc10e455e358</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>ad14d60f76491e9baa1d51e26d51c3a70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>ac1a067154917b1f284fd62cd101ebecc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a0afc6e754e4bcb83b29d292312c54eea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a040b9811f127d6b018209094e0c4bc7e</anchor>
      <arglist>(const Motion *a, const Motion *b) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>transitionTest</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>ad74a8c71e598ea01badbe80ba0d27319</anchor>
      <arglist>(const base::Cost &amp;motionCost)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>minExpansionControl</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>ab4bf42dd232334ab7b0eaddbc9ae78d8</anchor>
      <arglist>(double randMotionDistance)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>ade44118592d5e236b6ebdb1419f2c9f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Motion * &gt; &gt;</type>
      <name>nearestNeighbors_</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a147601ace87836058c845268b6b9fbc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>goalBias_</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a206a7dffcb734c7888fa6aeb310a5515</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistance_</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>ad9bf201c78f94737e55f67a2bdc11419</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a6a7641c73a280c0e9adb9a06fca6ed7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>lastGoalMotion_</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a52ccfe22a44bb4a3f52b4fe4212741d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>temp_</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a74e44038f700808efb5dc6f0deb979f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::Cost</type>
      <name>bestCost_</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>ab1ea051e0154ab2f7646b9338f03d029</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::Cost</type>
      <name>worstCost_</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a32d1ac247c068da9ffe66269c47dfa74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::Cost</type>
      <name>costThreshold_</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a3834927a88acfb9e1f98ce74ad29e60d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>tempChangeFactor_</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a634ef8c26dd94c7b717259c3949d7be2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>initTemperature_</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a8ae55d97410606a2451914f9b86931e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>nonfrontierCount_</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a6c3b2463823b6ce3caa1eb9a508283c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>frontierCount_</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a22b9559b5760bb0565c03010e88c4919</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>frontierThreshold_</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a213e79967a30dee30c175796b6a7816b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>frontierNodeRatio_</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>aec0140776240aaed71d592699ffc6758</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ompl::base::OptimizationObjectivePtr</type>
      <name>opt_</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a713805975a6c1972f047056847a949b4</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1TRRT.html">gTRRT</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::TRRT::Motion</name>
    <filename>classompl_1_1geometric_1_1TRRT_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT_1_1Motion.html</anchorfile>
      <anchor>aa1ea3c39665bcba57aa39d244b56752f</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT_1_1Motion.html</anchorfile>
      <anchor>ad8a60f42d44cc444ac030b14be55bfad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT_1_1Motion.html</anchorfile>
      <anchor>a51193986d21f3cbb4e356e143c7e4100</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>base::Cost</type>
      <name>cost</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT_1_1Motion.html</anchorfile>
      <anchor>a878515236711e1725a914092c7afb142</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::TSRRT</name>
    <filename>classompl_1_1geometric_1_1TSRRT.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::TSRRT::Motion</class>
    <member kind="function">
      <type></type>
      <name>TSRRT</name>
      <anchorfile>classompl_1_1geometric_1_1TSRRT.html</anchorfile>
      <anchor>a9a3cc43a88bd970a32a3830eb1a297ba</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si, const TaskSpaceConfigPtr &amp;task_space)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1TSRRT.html</anchorfile>
      <anchor>aa7a82321111e5cad979a9a42f343395a</anchor>
      <arglist>(base::PlannerData &amp;data) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1TSRRT.html</anchorfile>
      <anchor>ab825ab1d0bad5a4a01f465890423b3c1</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1TSRRT.html</anchorfile>
      <anchor>ac7cebcec5846c38fc57a424576c90daa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1TSRRT.html</anchorfile>
      <anchor>acebfe0211d1dce8b316d8e3a5072495d</anchor>
      <arglist>(double goalBias)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1TSRRT.html</anchorfile>
      <anchor>a8cec758228cbb2f153093b1a27d90e72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1TSRRT.html</anchorfile>
      <anchor>a47f0d3e15cd89bc52eaba975d89de6f1</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1TSRRT.html</anchorfile>
      <anchor>a99c3915ae6bb4bb3c32d594ba52dbb40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1TSRRT.html</anchorfile>
      <anchor>ad7c31b0b2fdb05fcf24cb1b443e97739</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1TSRRT.html</anchorfile>
      <anchor>aebd2cc16c33632caccd76e695485c17d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1TSRRT.html</anchorfile>
      <anchor>a2bffa6c4d93a9e28cba7707f30149bd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1TSRRT.html</anchorfile>
      <anchor>aa7283d48f5ce6649dd3a94b87d8e2474</anchor>
      <arglist>(const Motion *a, const Motion *b) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Motion * &gt; &gt;</type>
      <name>nn_</name>
      <anchorfile>classompl_1_1geometric_1_1TSRRT.html</anchorfile>
      <anchor>aad9c863a8d71e0492cf32316dfbf2bb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>goalBias_</name>
      <anchorfile>classompl_1_1geometric_1_1TSRRT.html</anchorfile>
      <anchor>a0729a71ad08b717f0aafbfbef6d25b5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistance_</name>
      <anchorfile>classompl_1_1geometric_1_1TSRRT.html</anchorfile>
      <anchor>a6bc13eb5454a15ac363783bf5e0f9f60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1TSRRT.html</anchorfile>
      <anchor>a5898b95e5b31ec33551221533eb5f765</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>lastGoalMotion_</name>
      <anchorfile>classompl_1_1geometric_1_1TSRRT.html</anchorfile>
      <anchor>afda289f7a718c86cc322ccb0dbb7d216</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1TSRRT.html">gTSRRT</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::TSRRT::Motion</name>
    <filename>classompl_1_1geometric_1_1TSRRT_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1geometric_1_1TSRRT_1_1Motion.html</anchorfile>
      <anchor>a2ed8eb68954e06127b717c337300a8bd</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state</name>
      <anchorfile>classompl_1_1geometric_1_1TSRRT_1_1Motion.html</anchorfile>
      <anchor>a92157de204e73da5031588ac5ae1119d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent</name>
      <anchorfile>classompl_1_1geometric_1_1TSRRT_1_1Motion.html</anchorfile>
      <anchor>a2084eeb849d3b8b6827db74f4d6aaa79</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::VFRRT</name>
    <filename>classompl_1_1geometric_1_1VFRRT.html</filename>
    <base>ompl::geometric::RRT</base>
    <member kind="function">
      <type></type>
      <name>VFRRT</name>
      <anchorfile>classompl_1_1geometric_1_1VFRRT.html</anchorfile>
      <anchor>a4755c14d58230bd4f68da97b6ae65610</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si, VectorField vf, double exploration, double initial_lambda, unsigned int update_freq)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VFRRT</name>
      <anchorfile>classompl_1_1geometric_1_1VFRRT.html</anchorfile>
      <anchor>a525325b8a5eda45e310d50af6c1d3de5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1VFRRT.html</anchorfile>
      <anchor>a66919b6bbbc46b2cad0b9b7fb20c82f6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>determineMeanNorm</name>
      <anchorfile>classompl_1_1geometric_1_1VFRRT.html</anchorfile>
      <anchor>a5372c93ad16fed5af6e376702983ca14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>getNewDirection</name>
      <anchorfile>classompl_1_1geometric_1_1VFRRT.html</anchorfile>
      <anchor>a92d172e81ac691cd7eac258dab296587</anchor>
      <arglist>(const base::State *qnear, const base::State *qrand)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>biasedSampling</name>
      <anchorfile>classompl_1_1geometric_1_1VFRRT.html</anchorfile>
      <anchor>a2965b9a1de187f46bdc3e7c38fdc605d</anchor>
      <arglist>(const Eigen::VectorXd &amp;vrand, const Eigen::VectorXd &amp;vfield, double lambdaScale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateGain</name>
      <anchorfile>classompl_1_1geometric_1_1VFRRT.html</anchorfile>
      <anchor>abaedb6548c551e43f3069849a1abbabf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>computeAlphaBeta</name>
      <anchorfile>classompl_1_1geometric_1_1VFRRT.html</anchorfile>
      <anchor>af64a6f2c7157152b48d22895f0d84763</anchor>
      <arglist>(double omega, const Eigen::VectorXd &amp;vrand, const Eigen::VectorXd &amp;vfield)</arglist>
    </member>
    <member kind="function">
      <type>Motion *</type>
      <name>extendTree</name>
      <anchorfile>classompl_1_1geometric_1_1VFRRT.html</anchorfile>
      <anchor>a966f9a9cdec569a3fe18942b61724fb2</anchor>
      <arglist>(Motion *m, base::State *rstate, const Eigen::VectorXd &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateExplorationEfficiency</name>
      <anchorfile>classompl_1_1geometric_1_1VFRRT.html</anchorfile>
      <anchor>ab0e0a7475bf0911a07a661dd44fcf4e5</anchor>
      <arglist>(Motion *m)</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1VFRRT.html</anchorfile>
      <anchor>a558d367b3223668ebe50b75fa7bc8e77</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1VFRRT.html</anchorfile>
      <anchor>a96450ea9c30e745a1bf607e940d3d4a6</anchor>
      <arglist>() override</arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1VFRRT.html">gVFRRT</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::XXL</name>
    <filename>classompl_1_1geometric_1_1XXL.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::XXL::Layer</class>
    <class kind="struct">ompl::geometric::XXL::Motion</class>
    <class kind="class">ompl::geometric::XXL::PerfectSet</class>
    <class kind="struct">ompl::geometric::XXL::Region</class>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1XXL.html</anchorfile>
      <anchor>a9fb4156a3d9240ca28c15bf33a6e659e</anchor>
      <arglist>(base::PlannerData &amp;data) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1XXL.html</anchorfile>
      <anchor>aeee55a99490cab69be03c8b9295e240b</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1XXL.html</anchorfile>
      <anchor>ae6823aa20e37f1646c304d09c184fa97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1XXL.html</anchorfile>
      <anchor>a09619e894fd2af627e7a42ee1277b218</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>searchForPath</name>
      <anchorfile>classompl_1_1geometric_1_1XXL.html</anchorfile>
      <anchor>a976564a2a34d85a499f35a9d5c994b0b</anchor>
      <arglist>(Layer *layer, const ompl::base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1XXL.html">gXXL</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::XXL::Layer</name>
    <filename>classompl_1_1geometric_1_1XXL_1_1Layer.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::XXL::Motion</name>
    <filename>structompl_1_1geometric_1_1XXL_1_1Motion.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::XXL::PerfectSet</name>
    <filename>classompl_1_1geometric_1_1XXL_1_1PerfectSet.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::XXL::Region</name>
    <filename>structompl_1_1geometric_1_1XXL_1_1Region.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::XXLDecomposition</name>
    <filename>classompl_1_1geometric_1_1XXLDecomposition.html</filename>
    <member kind="function">
      <type></type>
      <name>XXLDecomposition</name>
      <anchorfile>classompl_1_1geometric_1_1XXLDecomposition.html</anchorfile>
      <anchor>af85e6888582e09ddb641879c7000e886</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumRegions</name>
      <anchorfile>classompl_1_1geometric_1_1XXLDecomposition.html</anchorfile>
      <anchor>a89956ca1922211bc8190afb3b0086c58</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1geometric_1_1XXLDecomposition.html</anchorfile>
      <anchor>a30332b19d73e0f4bf8f78174685bcdbf</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>numLayers</name>
      <anchorfile>classompl_1_1geometric_1_1XXLDecomposition.html</anchorfile>
      <anchor>a5f63e7a640b0229562b696ffa3fcd9f8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>locateRegion</name>
      <anchorfile>classompl_1_1geometric_1_1XXLDecomposition.html</anchorfile>
      <anchor>ac2b677a95dd159c038e3248064b3d3e2</anchor>
      <arglist>(const base::State *s) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>locateRegion</name>
      <anchorfile>classompl_1_1geometric_1_1XXLDecomposition.html</anchorfile>
      <anchor>a2a35159cc7c4a58f8522b4a4a18775f8</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;coord) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1XXLDecomposition.html</anchorfile>
      <anchor>a6630b85a7e7469dbeddbca6cd8423f17</anchor>
      <arglist>(int rid, std::vector&lt; int &gt; &amp;neighbors) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getNeighborhood</name>
      <anchorfile>classompl_1_1geometric_1_1XXLDecomposition.html</anchorfile>
      <anchor>a17545335220586a3e67c579dce7a349c</anchor>
      <arglist>(int rid, std::vector&lt; int &gt; &amp;neighborhood) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>distanceHeuristic</name>
      <anchorfile>classompl_1_1geometric_1_1XXLDecomposition.html</anchorfile>
      <anchor>a925bc15bbe9aea8aa33fba9006e30c1f</anchor>
      <arglist>(int r1, int r2) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>sampleFromRegion</name>
      <anchorfile>classompl_1_1geometric_1_1XXLDecomposition.html</anchorfile>
      <anchor>a5c920d57a2e78741744e682108a10fae</anchor>
      <arglist>(int r, base::State *s, const base::State *seed=nullptr) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>sampleFromRegion</name>
      <anchorfile>classompl_1_1geometric_1_1XXLDecomposition.html</anchorfile>
      <anchor>a0daed8ed614d64ee8b1589d789dea254</anchor>
      <arglist>(int r, base::State *s, const base::State *seed, int layer) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>project</name>
      <anchorfile>classompl_1_1geometric_1_1XXLDecomposition.html</anchorfile>
      <anchor>a6c5d9e2a6987fcc438976e6efb95c4df</anchor>
      <arglist>(const base::State *s, std::vector&lt; double &gt; &amp;coord, int layer=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>project</name>
      <anchorfile>classompl_1_1geometric_1_1XXLDecomposition.html</anchorfile>
      <anchor>a23c8844b97d25c45249586a399d7a266</anchor>
      <arglist>(const base::State *s, std::vector&lt; int &gt; &amp;layers) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canSteer</name>
      <anchorfile>classompl_1_1geometric_1_1XXLDecomposition.html</anchorfile>
      <anchor>a9c73993803a907b384d2e7f710379214</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::XXLDecompositionPtr</name>
    <filename>classompl_1_1geometric_1_1XXLDecompositionPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::XXLPlanarDecomposition</name>
    <filename>classompl_1_1geometric_1_1XXLPlanarDecomposition.html</filename>
    <base>ompl::geometric::XXLDecomposition</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumRegions</name>
      <anchorfile>classompl_1_1geometric_1_1XXLPlanarDecomposition.html</anchorfile>
      <anchor>a595223e41045706ad74e08e61e703861</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1geometric_1_1XXLPlanarDecomposition.html</anchorfile>
      <anchor>a0905d4003f7b4d63be059bc7fbecb331</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>numLayers</name>
      <anchorfile>classompl_1_1geometric_1_1XXLPlanarDecomposition.html</anchorfile>
      <anchor>afbb47db52585c3ffc72c2b6178d6b97e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>locateRegion</name>
      <anchorfile>classompl_1_1geometric_1_1XXLPlanarDecomposition.html</anchorfile>
      <anchor>a50029c68a680465f9e37f4e83da4dba5</anchor>
      <arglist>(const base::State *s) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>locateRegion</name>
      <anchorfile>classompl_1_1geometric_1_1XXLPlanarDecomposition.html</anchorfile>
      <anchor>a1969e45685982639476695cbbc512f30</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;coord) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1XXLPlanarDecomposition.html</anchorfile>
      <anchor>a5a9481efc9098c41e34130e73ddd5717</anchor>
      <arglist>(int rid, std::vector&lt; int &gt; &amp;neighbors) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getNeighborhood</name>
      <anchorfile>classompl_1_1geometric_1_1XXLPlanarDecomposition.html</anchorfile>
      <anchor>a5ed801625bfb9f8f4e8feb366aa0337c</anchor>
      <arglist>(int rid, std::vector&lt; int &gt; &amp;neighborhood) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>distanceHeuristic</name>
      <anchorfile>classompl_1_1geometric_1_1XXLPlanarDecomposition.html</anchorfile>
      <anchor>a4b8bfc2192c85a3decce25aa222d9689</anchor>
      <arglist>(int r1, int r2) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>sampleFromRegion</name>
      <anchorfile>classompl_1_1geometric_1_1XXLPlanarDecomposition.html</anchorfile>
      <anchor>a0450ecdbc3264098890e5db931cd0a30</anchor>
      <arglist>(int r, base::State *s, const base::State *seed=nullptr) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>sampleFromRegion</name>
      <anchorfile>classompl_1_1geometric_1_1XXLPlanarDecomposition.html</anchorfile>
      <anchor>a8682cf69dfc84ee6df431c0a4e6aaac2</anchor>
      <arglist>(int r, base::State *s, const base::State *seed, int layer) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>project</name>
      <anchorfile>classompl_1_1geometric_1_1XXLPlanarDecomposition.html</anchorfile>
      <anchor>aac21e7fd11428a94afe50ab6f8e26f6c</anchor>
      <arglist>(const base::State *s, std::vector&lt; double &gt; &amp;coord, int layer=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>project</name>
      <anchorfile>classompl_1_1geometric_1_1XXLPlanarDecomposition.html</anchorfile>
      <anchor>a50c661a7a25ac6caa8bc5d91fd434ee0</anchor>
      <arglist>(const base::State *s, std::vector&lt; int &gt; &amp;layers) const =0</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>gridCellToRid</name>
      <anchorfile>classompl_1_1geometric_1_1XXLPlanarDecomposition.html</anchorfile>
      <anchor>a973c4345e426698806f258965baf58c8</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;cell) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>coordToRegion</name>
      <anchorfile>classompl_1_1geometric_1_1XXLPlanarDecomposition.html</anchorfile>
      <anchor>a1adc8ffa3404d6a20c8b9f58379ecd2f</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;coord) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasDiagonalEdges</name>
      <anchorfile>classompl_1_1geometric_1_1XXLPlanarDecomposition.html</anchorfile>
      <anchor>ad2ca2eaf30df1c17cd54d428e41bbcbc</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::XXLPositionDecomposition</name>
    <filename>classompl_1_1geometric_1_1XXLPositionDecomposition.html</filename>
    <base>ompl::geometric::XXLDecomposition</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumRegions</name>
      <anchorfile>classompl_1_1geometric_1_1XXLPositionDecomposition.html</anchorfile>
      <anchor>aed7acab89db17327d0f73aa5b9b2f17a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1geometric_1_1XXLPositionDecomposition.html</anchorfile>
      <anchor>a8731de60fc623c4a0ed1db3195867b03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>numLayers</name>
      <anchorfile>classompl_1_1geometric_1_1XXLPositionDecomposition.html</anchorfile>
      <anchor>abe950564efd9ee2e2a854070b1cb8b97</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>locateRegion</name>
      <anchorfile>classompl_1_1geometric_1_1XXLPositionDecomposition.html</anchorfile>
      <anchor>aae49fe80e0814f88e614e8102e83b726</anchor>
      <arglist>(const base::State *s) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>locateRegion</name>
      <anchorfile>classompl_1_1geometric_1_1XXLPositionDecomposition.html</anchorfile>
      <anchor>ae867b87b627478fd22f03543b41605b9</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;coord) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1XXLPositionDecomposition.html</anchorfile>
      <anchor>a29ece477198d6e9ceb483f18cc655110</anchor>
      <arglist>(int rid, std::vector&lt; int &gt; &amp;neighbors) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getNeighborhood</name>
      <anchorfile>classompl_1_1geometric_1_1XXLPositionDecomposition.html</anchorfile>
      <anchor>acf889b9ca1194465f6ef6fe0780d5113</anchor>
      <arglist>(int rid, std::vector&lt; int &gt; &amp;neighborhood) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>distanceHeuristic</name>
      <anchorfile>classompl_1_1geometric_1_1XXLPositionDecomposition.html</anchorfile>
      <anchor>a9df447be5391f4369484b68105e1b9f8</anchor>
      <arglist>(int r1, int r2) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>sampleFromRegion</name>
      <anchorfile>classompl_1_1geometric_1_1XXLPositionDecomposition.html</anchorfile>
      <anchor>a51b334bb110136e2b299ec3c99b989d5</anchor>
      <arglist>(int r, base::State *s, const base::State *seed=nullptr) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>sampleFromRegion</name>
      <anchorfile>classompl_1_1geometric_1_1XXLPositionDecomposition.html</anchorfile>
      <anchor>a362ec612f33d22c3157a56e9f4e3a9f9</anchor>
      <arglist>(int r, base::State *s, const base::State *seed, int layer) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>project</name>
      <anchorfile>classompl_1_1geometric_1_1XXLPositionDecomposition.html</anchorfile>
      <anchor>ae6ef470d322ce8dab64b1e39c2aa8e8c</anchor>
      <arglist>(const base::State *s, std::vector&lt; double &gt; &amp;coord, int layer=0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>project</name>
      <anchorfile>classompl_1_1geometric_1_1XXLPositionDecomposition.html</anchorfile>
      <anchor>a07147cd2459e20bacc54c412002224d6</anchor>
      <arglist>(const base::State *s, std::vector&lt; int &gt; &amp;layers) const =0</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>gridCellToRid</name>
      <anchorfile>classompl_1_1geometric_1_1XXLPositionDecomposition.html</anchorfile>
      <anchor>a39ca54988debef37b74dec7601ab5551</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;cell) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>coordToRegion</name>
      <anchorfile>classompl_1_1geometric_1_1XXLPositionDecomposition.html</anchorfile>
      <anchor>afe1e8558047b265024ed4ab6156b989d</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;coord) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasDiagonalEdges</name>
      <anchorfile>classompl_1_1geometric_1_1XXLPositionDecomposition.html</anchorfile>
      <anchor>a333fb183aff9b7c59a3d0d2f1ec38922</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::GreedyKCenters</name>
    <filename>classompl_1_1GreedyKCenters.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::function&lt; double(const _T &amp;, const _T &amp;)&gt;</type>
      <name>DistanceFunction</name>
      <anchorfile>classompl_1_1GreedyKCenters.html</anchorfile>
      <anchor>a4efe9e669d852a90ece40527191d72bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::MatrixXd</type>
      <name>Matrix</name>
      <anchorfile>classompl_1_1GreedyKCenters.html</anchorfile>
      <anchor>afaab15f295d63a4546a552647fa23c1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDistanceFunction</name>
      <anchorfile>classompl_1_1GreedyKCenters.html</anchorfile>
      <anchor>aa46b77a69db20e4c411bbb85956eab21</anchor>
      <arglist>(const DistanceFunction &amp;distFun)</arglist>
    </member>
    <member kind="function">
      <type>const DistanceFunction &amp;</type>
      <name>getDistanceFunction</name>
      <anchorfile>classompl_1_1GreedyKCenters.html</anchorfile>
      <anchor>a9b9bcd71e87170f731f9e48b8b6a055e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>kcenters</name>
      <anchorfile>classompl_1_1GreedyKCenters.html</anchorfile>
      <anchor>ad8e0e7c79e810f3b3827dd8a5a8eeb01</anchor>
      <arglist>(const std::vector&lt; _T &gt; &amp;data, unsigned int k, std::vector&lt; unsigned int &gt; &amp;centers, Matrix &amp;dists)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DistanceFunction</type>
      <name>distFun_</name>
      <anchorfile>classompl_1_1GreedyKCenters.html</anchorfile>
      <anchor>a4c617a02bb7489b3d1e32261f099f113</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1GreedyKCenters.html</anchorfile>
      <anchor>a9f9f1e9cacc57cc0a7c1526406cc94dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::Grid</name>
    <filename>classompl_1_1Grid.html</filename>
    <templarg></templarg>
    <class kind="struct">ompl::Grid::Cell</class>
    <class kind="struct">ompl::Grid::EqualCoordPtr</class>
    <class kind="struct">ompl::Grid::HashFunCoordPtr</class>
    <class kind="struct">ompl::Grid::SortComponents</class>
    <member kind="typedef">
      <type>Eigen::VectorXi</type>
      <name>Coord</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a4dfe6d93f717a9413f75ff0b661baee0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Cell * &gt;</type>
      <name>CellArray</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ae6b4ce01d4402b29c33d33079994d378</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename CoordHash::const_iterator</type>
      <name>iterator</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ac31b9031290d6185aa15667a56511208</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Grid</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>aa11294d2cb47b1e55bacd101b131d3c1</anchor>
      <arglist>(unsigned int dimension)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Grid</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>acace53abca008ae9210248cb2d54739d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>aa6a94d0ecdc11fd7e60d72b24b9d1930</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a58a9f8b580a3caeed96c37dd2e5fffe4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimension</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a118373bcfe70886449d94782b0a7c783</anchor>
      <arglist>(unsigned int dimension)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a34348b5cb9c17d8b4f2f3e762b7fa4a2</anchor>
      <arglist>(const Coord &amp;coord) const</arglist>
    </member>
    <member kind="function">
      <type>Cell *</type>
      <name>getCell</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ab1a51a1006f8529095f12b412a19e859</anchor>
      <arglist>(const Coord &amp;coord) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a20d361c71a9fd21a5d49f6330fc75367</anchor>
      <arglist>(const Cell *cell, CellArray &amp;list) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a18a4496fde6782960c13a5f4c7671bae</anchor>
      <arglist>(const Coord &amp;coord, CellArray &amp;list) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>abfc9b5bfe3d96b5be1d0388b611cbcea</anchor>
      <arglist>(Coord &amp;coord, CellArray &amp;list) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; Cell * &gt; &gt;</type>
      <name>components</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>afb363fa290bdac1d2812b0d068e985d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cell *</type>
      <name>createCell</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a1d0e09b5912dff94caa57aee681053cf</anchor>
      <arglist>(const Coord &amp;coord, CellArray *nbh=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a72386f9ffd43e98d25aa38b224541564</anchor>
      <arglist>(Cell *cell)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ac72fa046a57332c7627126e8d84fb1dc</anchor>
      <arglist>(Cell *cell)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroyCell</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a4d15cc71ece573822af0881fda220f65</anchor>
      <arglist>(Cell *cell) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getContent</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>afb473084ca2688e73a4a6b09ce8dd45d</anchor>
      <arglist>(std::vector&lt; _T &gt; &amp;content) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCoordinates</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a6d77bf0b3307bdf01a38deee198d5c3c</anchor>
      <arglist>(std::vector&lt; Coord * &gt; &amp;coords) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCells</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a94f47f15e9ef9b3aeec5e16d6b9be8c1</anchor>
      <arglist>(CellArray &amp;cells) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printCoord</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a2bec8613da9389cb118cfcd1f1015fb4</anchor>
      <arglist>(Coord &amp;coord, std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a2acee7e9fa181e1ca1335dd8a0be80c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a80e21fbfab2a491c65a93a1e909523bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>status</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a3f294fbd3352504a31c990ff2b2a43af</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ae4d082867db0a9a1f5d8d030c5f622ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ab89fb5bcb59eeb4c2bfbeb65c9a740ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::unordered_map&lt; Coord *, Cell *, HashFunCoordPtr, EqualCoordPtr &gt;</type>
      <name>CoordHash</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a66a7f0446cfe8842b4e642b552a8b5a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ab5f51d3c4ae3f021f17d8435643cd3d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>dimension_</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a8dfdf767f8c14a15fddbdb4bc1e993f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxNeighbors_</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a826614263d30ffcc37924cecfef25471</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordHash</type>
      <name>hash_</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>afbf8751613b70340e9e287d3bb53650d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::Grid::Cell</name>
    <filename>structompl_1_1Grid_1_1Cell.html</filename>
    <member kind="variable">
      <type>_T</type>
      <name>data</name>
      <anchorfile>structompl_1_1Grid_1_1Cell.html</anchorfile>
      <anchor>a9a32dbce70bab52e6d45b0a4d0106366</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Coord</type>
      <name>coord</name>
      <anchorfile>structompl_1_1Grid_1_1Cell.html</anchorfile>
      <anchor>a3c410d94a7026951a4eb7e6966fd6229</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::Grid::EqualCoordPtr</name>
    <filename>structompl_1_1Grid_1_1EqualCoordPtr.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structompl_1_1Grid_1_1EqualCoordPtr.html</anchorfile>
      <anchor>ae3477e25df69367ca4b41f7dde2faaa7</anchor>
      <arglist>(const Coord *const c1, const Coord *const c2) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::Grid::HashFunCoordPtr</name>
    <filename>structompl_1_1Grid_1_1HashFunCoordPtr.html</filename>
    <member kind="function">
      <type>std::size_t</type>
      <name>operator()</name>
      <anchorfile>structompl_1_1Grid_1_1HashFunCoordPtr.html</anchorfile>
      <anchor>a8ab09b684bd7bf6d48d8cd2e79e57b28</anchor>
      <arglist>(const Coord *const s) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::Grid::SortComponents</name>
    <filename>structompl_1_1Grid_1_1SortComponents.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structompl_1_1Grid_1_1SortComponents.html</anchorfile>
      <anchor>a5bf18790d163f1ac3115a163d5b14df6</anchor>
      <arglist>(const std::vector&lt; Cell * &gt; &amp;a, const std::vector&lt; Cell * &gt; &amp;b) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::GridB</name>
    <filename>classompl_1_1GridB.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>ompl::GridN</base>
    <class kind="struct">ompl::GridB::LessThanExternalCell</class>
    <class kind="struct">ompl::GridB::LessThanInternalCell</class>
    <member kind="typedef">
      <type>typename GridN&lt; _T &gt;::Cell</type>
      <name>Cell</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a9c64100fc82be7f1dfc1b07a6669446f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename GridN&lt; _T &gt;::CellArray</type>
      <name>CellArray</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a814aa9c6bd59bc0b621b193d4930dfb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename GridN&lt; _T &gt;::Coord</type>
      <name>Coord</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a89b9087b1351ab5d26785f99b1583d8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*)(Cell *, void *)</type>
      <name>EventCellUpdate</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a54662c0d0ff21c9ab5eaa1a80e1f9244</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridB</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a6f51bf34a19905e875d6bdffa3246b11</anchor>
      <arglist>(unsigned int dimension)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onCellUpdate</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a89bffe3573ef977f63b4ab4ff7759705</anchor>
      <arglist>(EventCellUpdate event, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>Cell *</type>
      <name>topInternal</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>ad7e3648604e7e06d63c595d18edefb2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Cell *</type>
      <name>topExternal</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>adcd6fd9b1cc11a49c45d6216320badda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>countInternal</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>ab053e6a30a308d9da83be70b2e742299</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>countExternal</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a78b32f15b137596941aa3cb81730a74c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fracExternal</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>abef554f7393a0b50adae5833743dd343</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fracInternal</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a0168d43da878bb6557dc0255d4548974</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>aceb50d07f1b2bdb195df8ef2c06999e7</anchor>
      <arglist>(Cell *cell)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateAll</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a177ec08a842589d77338095e36a3b2f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cell *</type>
      <name>createCell</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>ab5b346ddd6e6c21cc2e35a493a59f420</anchor>
      <arglist>(const Coord &amp;coord, CellArray *nbh=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a2d028cfdf6233f097ff43fd70591896b</anchor>
      <arglist>(Cell *cell)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a35d8377f870c0e03fca9f2839d863165</anchor>
      <arglist>(Cell *cell)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a9fc63d3a944813e04db038153e07368b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a19374aa02670366e2d47dd2b45db0f5a</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const override</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>BinaryHeap&lt; CellX *, LessThanInternalCell &gt;</type>
      <name>internalBHeap</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a7a9822c91a89b8c3407c25e24c1d7c25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>BinaryHeap&lt; CellX *, LessThanExternalCell &gt;</type>
      <name>externalBHeap</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a52b79e7840e69d476e0cdb568ed6f03e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupHeaps</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a885d2d151a374acf376617019f0c4f86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clearHeaps</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>ab332ad98c88d0ddc7c2ba9e04eaa6c65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>noCellUpdate</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a24ba3c3dfcd76b0f7f79006252e18928</anchor>
      <arglist>(Cell *, void *)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>setHeapElementI</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a5d5d287741c00a9dba43113064f867d1</anchor>
      <arglist>(typename internalBHeap::Element *element, void *)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>setHeapElementE</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>ae2fb49e37b99d8f9e224c17577f5c622</anchor>
      <arglist>(typename externalBHeap::Element *element, void *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventCellUpdate</type>
      <name>eventCellUpdate_</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a21a662edc0904ba14495d44b2088669f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>eventCellUpdateData_</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>ab229dc7aca157fe152411fe75ad2f73f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>internalBHeap</type>
      <name>internal_</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a00fa01d1103ced09fb7ee3ebee187665</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>externalBHeap</type>
      <name>external_</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>afede0d811f4f9b53abc0f1945b871516</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::GridB::LessThanExternalCell</name>
    <filename>structompl_1_1GridB_1_1LessThanExternalCell.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::GridB::LessThanInternalCell</name>
    <filename>structompl_1_1GridB_1_1LessThanInternalCell.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::GridN</name>
    <filename>classompl_1_1GridN.html</filename>
    <templarg></templarg>
    <base>ompl::Grid</base>
    <class kind="struct">ompl::GridN::Cell</class>
    <member kind="typedef">
      <type>typename Grid&lt; _T &gt;::Cell</type>
      <name>BaseCell</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a9e1067c00569afbcf615025011b266a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Grid&lt; _T &gt;::CellArray</type>
      <name>BaseCellArray</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a96f5b11c5e35cb7144209f860805ba4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Grid&lt; _T &gt;::Coord</type>
      <name>Coord</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a956fca906da92d20c795578e486e46f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Cell * &gt;</type>
      <name>CellArray</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>ab82a159e63a146da22ed01448caad7b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridN</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a19056d56c0b54dd8ef2c3c9d483f1211</anchor>
      <arglist>(unsigned int dimension)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimension</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a8f301e691e48294e1e216d1c7971aa9d</anchor>
      <arglist>(unsigned int dimension)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBounds</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>ae69767d44f200c28b21683ac76d1624d</anchor>
      <arglist>(const Coord &amp;low, const Coord &amp;up)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInteriorCellNeighborLimit</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>ae5d42e023d6aa00ac1d479dad46d7144</anchor>
      <arglist>(unsigned int count)</arglist>
    </member>
    <member kind="function">
      <type>Cell *</type>
      <name>getCell</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a7656f059f2cc09f5839147646310d091</anchor>
      <arglist>(const Coord &amp;coord) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>aa5f609ccc4c4db2bb73c2a6d26df4ef4</anchor>
      <arglist>(const Cell *cell, CellArray &amp;list) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>ac741aaff4a2bc57af17d05eac207c457</anchor>
      <arglist>(const Coord &amp;coord, CellArray &amp;list) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>aaae2a80770d9b9bea447355dbdb53623</anchor>
      <arglist>(Coord &amp;coord, CellArray &amp;list) const</arglist>
    </member>
    <member kind="function">
      <type>BaseCell *</type>
      <name>createCell</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a705ebbeb6cb92398dffb24ea49ed34f4</anchor>
      <arglist>(const Coord &amp;coord, BaseCellArray *nbh=nullptr) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>ad6d7daf6ab4eee599611279d3a6635ba</anchor>
      <arglist>(BaseCell *cell) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCells</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>ae390a456793c108f6a84bc940b709789</anchor>
      <arglist>(CellArray &amp;cells) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned int</type>
      <name>numberOfBoundaryDimensions</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>ad4c133164404bfce4f569911c331c192</anchor>
      <arglist>(const Coord &amp;coord) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>hasBounds_</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>ace239cb56364f32748d8c4a66ec8b31f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>lowBound_</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>acdf65b3cd4603c5d25597e62064751d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>upBound_</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a422a9ee23538f070a2d9704e2ca70ead</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>interiorCellNeighborsLimit_</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a035b9527b8cfd98a6e4f4d7472e668a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>overrideCellNeighborsLimit_</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a1e9cc38ff1df4dca6c9969f73dcad61e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::GridN::Cell</name>
    <filename>structompl_1_1GridN_1_1Cell.html</filename>
    <member kind="variable">
      <type>unsigned int</type>
      <name>neighbors</name>
      <anchorfile>structompl_1_1GridN_1_1Cell.html</anchorfile>
      <anchor>ab454d9ba57e23ae1687e34bde67a4cae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>border</name>
      <anchorfile>structompl_1_1GridN_1_1Cell.html</anchorfile>
      <anchor>adb46d818fb6457e25c0c9455591048c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::LPAstarOnGraph</name>
    <filename>classompl_1_1LPAstarOnGraph.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classompl_1_1LPAstarOnGraph.html</anchorfile>
      <anchor>af5eb5a571ab730cd22545f271bc3f007</anchor>
      <arglist>(std::size_t u)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::msg::OutputHandler</name>
    <filename>classompl_1_1msg_1_1OutputHandler.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>log</name>
      <anchorfile>classompl_1_1msg_1_1OutputHandler.html</anchorfile>
      <anchor>a072c8de5bbe4bea4fc7763b74fcc2f4b</anchor>
      <arglist>(const std::string &amp;text, LogLevel level, const char *filename, int line)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::msg::OutputHandlerFile</name>
    <filename>classompl_1_1msg_1_1OutputHandlerFile.html</filename>
    <base>ompl::msg::OutputHandler</base>
    <member kind="function">
      <type></type>
      <name>OutputHandlerFile</name>
      <anchorfile>classompl_1_1msg_1_1OutputHandlerFile.html</anchorfile>
      <anchor>abc64dc38951bc6cb6e80756b6bf95e81</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>log</name>
      <anchorfile>classompl_1_1msg_1_1OutputHandlerFile.html</anchorfile>
      <anchor>a1491c556f1cea44e15a1afb23f43ea63</anchor>
      <arglist>(const std::string &amp;text, LogLevel level, const char *filename, int line) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::msg::OutputHandlerSTD</name>
    <filename>classompl_1_1msg_1_1OutputHandlerSTD.html</filename>
    <base>ompl::msg::OutputHandler</base>
    <member kind="function">
      <type>void</type>
      <name>log</name>
      <anchorfile>classompl_1_1msg_1_1OutputHandlerSTD.html</anchorfile>
      <anchor>a582e1a90e43fa2b2fb9b66e7b7ae8a60</anchor>
      <arglist>(const std::string &amp;text, LogLevel level, const char *filename, int line) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::NearestNeighbors</name>
    <filename>classompl_1_1NearestNeighbors.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::function&lt; double(const _T &amp;, const _T &amp;)&gt;</type>
      <name>DistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ab4474df83bbe6b2635de9bcea6da93a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>abb8cd1ac5b87a0a01b27aecab2094d8f</anchor>
      <arglist>(const DistanceFunction &amp;distFun)</arglist>
    </member>
    <member kind="function">
      <type>const DistanceFunction &amp;</type>
      <name>getDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac6f8e15588dbd628417afbd6cd7d9593</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>reportsSortedResults</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aadc6ca87a9ec140b7c488dabda079618</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aac3adbd29fa8719b399896bdb79bab3f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>acdec6e843eb3e2f039df9b5b24ce0ad7</anchor>
      <arglist>(const _T &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aae3c2592a0ef5c64f3bde107c144d70a</anchor>
      <arglist>(const std::vector&lt; _T &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af4fcf7cc39c33a4e25e2f7e00b0220c0</anchor>
      <arglist>(const _T &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual _T</type>
      <name>nearest</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af36aec28328e97ba999c51be4f8987c9</anchor>
      <arglist>(const _T &amp;data) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ae3d54c8565ec5ff4f97c31b3d60d5091</anchor>
      <arglist>(const _T &amp;data, std::size_t k, std::vector&lt; _T &gt; &amp;nbh) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a473fbd3b00e2eb4aa6b56c767e702e9c</anchor>
      <arglist>(const _T &amp;data, double radius, std::vector&lt; _T &gt; &amp;nbh) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ad6fe9e5ebff411e8d56ef2201e25dcb3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>list</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ac2d3971a579f748aba6ad2b10f118562</anchor>
      <arglist>(std::vector&lt; _T &gt; &amp;data) const =0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DistanceFunction</type>
      <name>distFun_</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a6f15f3b591fb69b91ca35e504723b54f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::NearestNeighborsFLANN</name>
    <filename>classompl_1_1NearestNeighborsFLANN.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>ompl::NearestNeighbors</base>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>af9f7859744172a05482b8cf77e393ee3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reportsSortedResults</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a28d01f441d81c3aa8d5558f9dd1a4a87</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a5114b0e5289f64c57bf84ae11b23f3f6</anchor>
      <arglist>(const _T &amp;data) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>ad3eb7b33f12fd8f1718f7f7487a9807f</anchor>
      <arglist>(const std::vector&lt; _T &gt; &amp;data) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a937df19373fa1e7c19392dd24eda2cb8</anchor>
      <arglist>(const _T &amp;data) override</arglist>
    </member>
    <member kind="function">
      <type>_T</type>
      <name>nearest</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a88da3c76feedbee4ba4319f410fa20f0</anchor>
      <arglist>(const _T &amp;data) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>adcb05422c6525a618d3fb0af6f32f561</anchor>
      <arglist>(const _T &amp;data, std::size_t k, std::vector&lt; _T &gt; &amp;nbh) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a117e1c9eec4da73c3383598e6276face</anchor>
      <arglist>(const _T &amp;data, double radius, std::vector&lt; _T &gt; &amp;nbh) const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>acf8b91442e6604d4d6e5c05d5b8d8fa4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>list</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a63d9d30bb06275575a29210bb2a607f6</anchor>
      <arglist>(std::vector&lt; _T &gt; &amp;data) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIndexParams</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a8744517fb9f49287501de1e29dce0151</anchor>
      <arglist>(const std::shared_ptr&lt; flann::IndexParams &gt; &amp;params)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::shared_ptr&lt; flann::IndexParams &gt; &amp;</type>
      <name>getIndexParams</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a3b45a436ea320688e9ea193dce3e52b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSearchParams</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a61713a0d38ec52ee242d3f6b21caaf79</anchor>
      <arglist>(const flann::SearchParams &amp;searchParams)</arglist>
    </member>
    <member kind="function">
      <type>flann::SearchParams &amp;</type>
      <name>getSearchParams</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a550e09c5d54d1f157da5385900aef93e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const flann::SearchParams &amp;</type>
      <name>getSearchParams</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a786a02bdcb1b41aedb761e975f067c0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createIndex</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>aad212794536e6ecfddff9b281fde1e00</anchor>
      <arglist>(const flann::Matrix&lt; _T &gt; &amp;mat)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>rebuildIndex</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a7b935f8afe093da0397144ca500f0afc</anchor>
      <arglist>(unsigned int capacity=0)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; _T &gt;</type>
      <name>data_</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a5cff9cb3adfe57413fa7dbf17ed32c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>flann::Index&lt; _Dist &gt; *</type>
      <name>index_</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>ab3a4cee81352c5baa2526b0579bf0206</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; flann::IndexParams &gt;</type>
      <name>params_</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a125e83d30f061dbd1f45f6f495de6e44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>flann::SearchParams</type>
      <name>searchParams_</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>ab15a612bcea206654d9ff23b36a719bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>dimension_</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a64354375954f00fce065c2520ee8bba3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::NearestNeighborsFLANNHierarchicalClustering</name>
    <filename>classompl_1_1NearestNeighborsFLANNHierarchicalClustering.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>NearestNeighborsFLANN&lt; _T, FLANNDistance&lt; _T &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>ompl::NearestNeighborsFLANNLinear</name>
    <filename>classompl_1_1NearestNeighborsFLANNLinear.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>NearestNeighborsFLANN&lt; _T, FLANNDistance&lt; _T &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>ompl::NearestNeighborsGNAT</name>
    <filename>classompl_1_1NearestNeighborsGNAT.html</filename>
    <templarg></templarg>
    <base>ompl::NearestNeighbors</base>
    <class kind="class">ompl::NearestNeighborsGNAT::Node</class>
    <member kind="function">
      <type>void</type>
      <name>setDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>abf9fd332568e46b173caa069cb3d7b65</anchor>
      <arglist>(const typename NearestNeighbors&lt; _T &gt;::DistanceFunction &amp;distFun) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a2ae0a5855cb97c01f8def5013d351296</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reportsSortedResults</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a28597987114d643f33afaf1f94aeafcc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>ac2ab166f10167e07b55a3fe5c88195bc</anchor>
      <arglist>(const _T &amp;data) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a42fb426d77c7f1cc6a89d6f6e06a67da</anchor>
      <arglist>(const std::vector&lt; _T &gt; &amp;data) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rebuildDataStructure</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a5a5d1ed1969d8a94096af37c2212953c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a48879f4f40c84792378ccc4823041bbc</anchor>
      <arglist>(const _T &amp;data) override</arglist>
    </member>
    <member kind="function">
      <type>_T</type>
      <name>nearest</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a252bb6d2aa3ff3edf540d0b041d4e892</anchor>
      <arglist>(const _T &amp;data) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>af59c70ac7e6fa37e2e555fad4915b9a9</anchor>
      <arglist>(const _T &amp;data, std::size_t k, std::vector&lt; _T &gt; &amp;nbh) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a9e10038b16f17ae175d2cee8e43308d6</anchor>
      <arglist>(const _T &amp;data, double radius, std::vector&lt; _T &gt; &amp;nbh) const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>aca63a6fbdbe2d1938084f01d7847da5d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>list</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a83fdc5ea599a2025a2f8e10d92e7175e</anchor>
      <arglist>(std::vector&lt; _T &gt; &amp;data) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isRemoved</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a6bb84334105d10e972f3687ac00a3793</anchor>
      <arglist>(const _T &amp;data) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>nearestKInternal</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a6d09afe7aa8b588270ab61f64d3026c6</anchor>
      <arglist>(const _T &amp;data, std::size_t k, NearQueue &amp;nbhQueue) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>nearestRInternal</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>adbd6149cb209843d3870193e0d71654b</anchor>
      <arglist>(const _T &amp;data, double radius, NearQueue &amp;nbhQueue) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>postprocessNearest</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a03bc066eb387dda356059d0690095c00</anchor>
      <arglist>(NearQueue &amp;nbhQueue, std::vector&lt; _T &gt; &amp;nbh) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Node *</type>
      <name>tree_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>af71f11d8395bb7ab208df7cf03351aaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>degree_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a9d705ed546c919cd52c428255a0c1a9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>minDegree_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a0843613b6418efbb2b417c37789246c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxDegree_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a925bada72c7c7e7826acdc1581a0a920</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxNumPtsPerLeaf_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a41c47b9f460e190bfadc2dc6f07cae3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>size_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a40bd930123e198450f10736efe73a970</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>rebuildSize_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a2da7487ea1149c183ec8560280855a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>removedCacheSize_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a79547bf4b75f57dcf2d736c11f612b1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GreedyKCenters&lt; _T &gt;</type>
      <name>pivotSelector_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a36b2e4bad87ded77f629a48425156bdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_set&lt; const _T * &gt;</type>
      <name>removed_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>accc6371f2e2fdb66b70b3b7a4cdb3a87</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a1e1b937c81eb1d184ffa588589bcc07f</anchor>
      <arglist>(std::ostream &amp;out, const NearestNeighborsGNAT&lt; _T &gt; &amp;gnat)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::NearestNeighborsGNAT::Node</name>
    <filename>classompl_1_1NearestNeighborsGNAT_1_1Node.html</filename>
    <member kind="function">
      <type></type>
      <name>Node</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT_1_1Node.html</anchorfile>
      <anchor>a4197d042c840312c232db87908d6878a</anchor>
      <arglist>(int degree, int capacity, _T pivot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateRadius</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT_1_1Node.html</anchorfile>
      <anchor>a3fea6c3f1208595ec4674418067a34ea</anchor>
      <arglist>(double dist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateRange</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT_1_1Node.html</anchorfile>
      <anchor>afc24a1f4b39957f6e7742b684deb741b</anchor>
      <arglist>(unsigned int i, double dist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT_1_1Node.html</anchorfile>
      <anchor>a2df84056b435a85ff89f1df8f4bc1e6a</anchor>
      <arglist>(GNAT &amp;gnat, const _T &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>needToSplit</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT_1_1Node.html</anchorfile>
      <anchor>a6a1d4dcd213a9b3e3172189d37c6f0e6</anchor>
      <arglist>(const GNAT &amp;gnat) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>split</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT_1_1Node.html</anchorfile>
      <anchor>a541428ab978630f4b8a25db60850f9c5</anchor>
      <arglist>(GNAT &amp;gnat)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>insertNeighborK</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT_1_1Node.html</anchorfile>
      <anchor>a1e8df394c5e108ae52da464892358c17</anchor>
      <arglist>(NearQueue &amp;nbh, std::size_t k, const _T &amp;data, const _T &amp;key, double dist) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT_1_1Node.html</anchorfile>
      <anchor>aab62268d91b405e4b6059cc675fafed3</anchor>
      <arglist>(const GNAT &amp;gnat, const _T &amp;data, std::size_t k, NearQueue &amp;nbh, NodeQueue &amp;nodeQueue, bool &amp;isPivot) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertNeighborR</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT_1_1Node.html</anchorfile>
      <anchor>a2be68eee0de6cace77bbfeaf862d343e</anchor>
      <arglist>(NearQueue &amp;nbh, double r, const _T &amp;data, double dist) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT_1_1Node.html</anchorfile>
      <anchor>a951d323325039485db30b500969d6afd</anchor>
      <arglist>(const GNAT &amp;gnat, const _T &amp;data, double r, NearQueue &amp;nbh, NodeQueue &amp;nodeQueue) const</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>degree_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT_1_1Node.html</anchorfile>
      <anchor>af2c95b71712957d839d5c200a293725d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const _T</type>
      <name>pivot_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT_1_1Node.html</anchorfile>
      <anchor>a5cd86d473687a1ba9a24514f854cb8ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>minRadius_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT_1_1Node.html</anchorfile>
      <anchor>a46475fd63721c3b3c75b009b200358fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>maxRadius_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT_1_1Node.html</anchorfile>
      <anchor>aa91ee97e818b369b8fda56967cfb7347</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>minRange_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT_1_1Node.html</anchorfile>
      <anchor>a1ca0e0c705f46204916de6e5fa3d1b3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>maxRange_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT_1_1Node.html</anchorfile>
      <anchor>aac25f4b4c74f0ba693c5e274119cf5ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; _T &gt;</type>
      <name>data_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT_1_1Node.html</anchorfile>
      <anchor>a3182d76413e664a9d60073a367365138</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Node * &gt;</type>
      <name>children_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT_1_1Node.html</anchorfile>
      <anchor>ab5d87a0606b3fee261ea40c69983b111</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::NearestNeighborsGNATNoThreadSafety</name>
    <filename>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</filename>
    <templarg></templarg>
    <base>ompl::NearestNeighbors</base>
    <class kind="class">ompl::NearestNeighborsGNATNoThreadSafety::Node</class>
    <member kind="function">
      <type>void</type>
      <name>setDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>af003eba0a7b1c82fec1c7fd0799474c9</anchor>
      <arglist>(const typename NearestNeighbors&lt; _T &gt;::DistanceFunction &amp;distFun) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>af58a8ae3d74f561f0d1152a8dc259bb6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reportsSortedResults</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a05226daa78ba92f95ded39d45e524c51</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>ac83e682c6768608c17f91d9bfcc72730</anchor>
      <arglist>(const _T &amp;data) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>aaf3551a2d81473e658adb1697b448fd6</anchor>
      <arglist>(const std::vector&lt; _T &gt; &amp;data) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rebuildDataStructure</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>af3717a4ddc0fff565b500ce7a438d034</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a8842ec1f8dd7b335636a46d5b17322d5</anchor>
      <arglist>(const _T &amp;data) override</arglist>
    </member>
    <member kind="function">
      <type>_T</type>
      <name>nearest</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a8672bdf83e3093b0164fe52003e4dda5</anchor>
      <arglist>(const _T &amp;data) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>ac5e0af9bdd87ba19266265f321eb0c61</anchor>
      <arglist>(const _T &amp;data, std::size_t k, std::vector&lt; _T &gt; &amp;nbh) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a40e2410b79ba7328cb9548591ba23667</anchor>
      <arglist>(const _T &amp;data, double radius, std::vector&lt; _T &gt; &amp;nbh) const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>aa3a2710689996f0aadfaf6a7e576e8d3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>list</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>af189efcf926a1df467dc7493cb5b5e42</anchor>
      <arglist>(std::vector&lt; _T &gt; &amp;data) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isRemoved</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>ac71112f32361dc0cb855b2a1a5e7b517</anchor>
      <arglist>(const _T &amp;data) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>nearestKInternal</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a7a15354a7143c3f8f61aa71a03ea9060</anchor>
      <arglist>(const _T &amp;data, std::size_t k) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>nearestRInternal</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a5a1d6edfdde32daa9e5c847f6981e12a</anchor>
      <arglist>(const _T &amp;data, double radius) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>postprocessNearest</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a29b9d2c3dc13387158b2ca97260324b1</anchor>
      <arglist>(std::vector&lt; _T &gt; &amp;nbh) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Node *</type>
      <name>tree_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a2b49cb68c80321a951ff19756cf5191e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>degree_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a8959464f3e38151e2292e4c1858f58c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>minDegree_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a4ba5298198ef2188b9e3f956462193c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxDegree_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a4d1d3a2402968ff67980675bf78380e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxNumPtsPerLeaf_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a77fb35650377c5917f1383a3fdc618eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>size_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>aa458a54056dcfae4d9700220c0c31591</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>rebuildSize_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a6a9f147a6e698731e37315f647c1e19c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>removedCacheSize_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a8ef42c25ab1f81812a2ec9abee28a76a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GreedyKCenters&lt; _T &gt;</type>
      <name>pivotSelector_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>aad11fc2ef17a9015c19a28ec24f3b703</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_set&lt; const _T * &gt;</type>
      <name>removed_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a67ba40aba48e6357bad78d022e0d7914</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeQueue</type>
      <name>nodeQueue_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a7ab94ab52946fe49dab384c7e14d0a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Permutation</type>
      <name>permutation_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>acf47844443e2f2d5a8ab3b0d5f4392d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>pivots_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a2d085f6316b3a5c7f378d19b7765d006</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GreedyKCenters&lt; _T &gt;::Matrix</type>
      <name>distances_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a925191fb1c63bcdfad0915dde2724036</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>aefae7627603eaea6da67d53ed3fc3ac6</anchor>
      <arglist>(std::ostream &amp;out, const NearestNeighborsGNATNoThreadSafety&lt; _T &gt; &amp;gnat)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeQueue</type>
      <name>nodeQueue_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a7ab94ab52946fe49dab384c7e14d0a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Permutation</type>
      <name>permutation_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>acf47844443e2f2d5a8ab3b0d5f4392d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>pivots_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a2d085f6316b3a5c7f378d19b7765d006</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GreedyKCenters&lt; _T &gt;::Matrix</type>
      <name>distances_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a925191fb1c63bcdfad0915dde2724036</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::NearestNeighborsGNATNoThreadSafety::Node</name>
    <filename>classompl_1_1NearestNeighborsGNATNoThreadSafety_1_1Node.html</filename>
    <member kind="function">
      <type></type>
      <name>Node</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety_1_1Node.html</anchorfile>
      <anchor>a0058ee645b91c46176ef116355df0b43</anchor>
      <arglist>(int degree, int capacity, _T pivot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateRadius</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety_1_1Node.html</anchorfile>
      <anchor>a8d7f7421814fe7cde19f62eedc0a0f1a</anchor>
      <arglist>(double dist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateRange</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety_1_1Node.html</anchorfile>
      <anchor>aba1ab1794c0b2f6e301736c1ff5ae00e</anchor>
      <arglist>(unsigned int i, double dist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety_1_1Node.html</anchorfile>
      <anchor>ac24b88c00ffa8d57ad823da0ece6d2ae</anchor>
      <arglist>(GNAT &amp;gnat, const _T &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>needToSplit</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety_1_1Node.html</anchorfile>
      <anchor>a741020abeb8fe4a7a49a1adf40067fa9</anchor>
      <arglist>(const GNAT &amp;gnat) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>split</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety_1_1Node.html</anchorfile>
      <anchor>a07a9ee86348d6296a66d05e5cdea7273</anchor>
      <arglist>(GNAT &amp;gnat)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>insertNeighborK</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety_1_1Node.html</anchorfile>
      <anchor>a7bb4e0a93625e6dadd56e5f22fbe9f88</anchor>
      <arglist>(NearQueue &amp;nbh, std::size_t k, const _T &amp;data, const _T &amp;key, double dist) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety_1_1Node.html</anchorfile>
      <anchor>a14733a46782d76bc0178611b7ee94212</anchor>
      <arglist>(const GNAT &amp;gnat, const _T &amp;data, std::size_t k, bool &amp;isPivot) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertNeighborR</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety_1_1Node.html</anchorfile>
      <anchor>aa437cbfee4acf7963c00f6cb54dac53d</anchor>
      <arglist>(NearQueue &amp;nbh, double r, const _T &amp;data, double dist) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety_1_1Node.html</anchorfile>
      <anchor>a4e639ca86a05acfcb10e5aa64df06653</anchor>
      <arglist>(const GNAT &amp;gnat, const _T &amp;data, double r) const</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>degree_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety_1_1Node.html</anchorfile>
      <anchor>ae0171b70bcc604b70703695b12be761b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const _T</type>
      <name>pivot_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety_1_1Node.html</anchorfile>
      <anchor>a4fc9de301c94bf274b4fbaadd791b73b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>minRadius_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety_1_1Node.html</anchorfile>
      <anchor>a68c90a817c59dc685e5aff26580af6d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>maxRadius_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety_1_1Node.html</anchorfile>
      <anchor>abd0b96392f38f24a5009a02b19626aed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>minRange_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety_1_1Node.html</anchorfile>
      <anchor>ae64ef29b6600d602d454799db0a21e81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>maxRange_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety_1_1Node.html</anchorfile>
      <anchor>a934a638c3b5715bace7cf291fc879dd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; _T &gt;</type>
      <name>data_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety_1_1Node.html</anchorfile>
      <anchor>ad9442c6b66a9d49a20581097acd08ebc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Node * &gt;</type>
      <name>children_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety_1_1Node.html</anchorfile>
      <anchor>a3ae41e7d52869397908d22209e8a49e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>distToPivot_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety_1_1Node.html</anchorfile>
      <anchor>a439f168fc524940ac08e1ed1a14e885c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::NearestNeighborsLinear</name>
    <filename>classompl_1_1NearestNeighborsLinear.html</filename>
    <templarg></templarg>
    <base>ompl::NearestNeighbors</base>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1NearestNeighborsLinear.html</anchorfile>
      <anchor>a73b5fa878ccde0c1e6553c3cb1ee644e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reportsSortedResults</name>
      <anchorfile>classompl_1_1NearestNeighborsLinear.html</anchorfile>
      <anchor>ac7b0d745c204e893d745f05eb929fa91</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighborsLinear.html</anchorfile>
      <anchor>a6d45d630045482b6b56bbb60f128e863</anchor>
      <arglist>(const _T &amp;data) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighborsLinear.html</anchorfile>
      <anchor>adc80eecf7ec375c65630b4a27a54151a</anchor>
      <arglist>(const std::vector&lt; _T &gt; &amp;data) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1NearestNeighborsLinear.html</anchorfile>
      <anchor>a9efa24e8a4aafe9033b3f2529d63a395</anchor>
      <arglist>(const _T &amp;data) override</arglist>
    </member>
    <member kind="function">
      <type>_T</type>
      <name>nearest</name>
      <anchorfile>classompl_1_1NearestNeighborsLinear.html</anchorfile>
      <anchor>a39a6cdabdcd8de9178f16d576e4a6495</anchor>
      <arglist>(const _T &amp;data) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighborsLinear.html</anchorfile>
      <anchor>aa89be38200d2876d9ef5d13ae6b33131</anchor>
      <arglist>(const _T &amp;data, std::size_t k, std::vector&lt; _T &gt; &amp;nbh) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighborsLinear.html</anchorfile>
      <anchor>a48b08a7a1e0b0dd923d0c10c2d12369f</anchor>
      <arglist>(const _T &amp;data, double radius, std::vector&lt; _T &gt; &amp;nbh) const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1NearestNeighborsLinear.html</anchorfile>
      <anchor>a1fc78c1aba4d7a0a9e415f547f22c04b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>list</name>
      <anchorfile>classompl_1_1NearestNeighborsLinear.html</anchorfile>
      <anchor>a0fa1f859b48f5f08260bf382e0d38224</anchor>
      <arglist>(std::vector&lt; _T &gt; &amp;data) const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; _T &gt;</type>
      <name>data_</name>
      <anchorfile>classompl_1_1NearestNeighborsLinear.html</anchorfile>
      <anchor>a6af69c36b87793d1004d15b986117182</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::NearestNeighborsSqrtApprox</name>
    <filename>classompl_1_1NearestNeighborsSqrtApprox.html</filename>
    <templarg></templarg>
    <base>ompl::NearestNeighborsLinear</base>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1NearestNeighborsSqrtApprox.html</anchorfile>
      <anchor>a9048a23e845a0f51b4105ac451350003</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighborsSqrtApprox.html</anchorfile>
      <anchor>a52f728837c991aba73ac643028bfa5a3</anchor>
      <arglist>(const _T &amp;data) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighborsSqrtApprox.html</anchorfile>
      <anchor>a04660cbb2850b92b6b771fff6320f7f0</anchor>
      <arglist>(const std::vector&lt; _T &gt; &amp;data) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1NearestNeighborsSqrtApprox.html</anchorfile>
      <anchor>a1d455125a27e9e8f83ea89490c1e6afb</anchor>
      <arglist>(const _T &amp;data) override</arglist>
    </member>
    <member kind="function">
      <type>_T</type>
      <name>nearest</name>
      <anchorfile>classompl_1_1NearestNeighborsSqrtApprox.html</anchorfile>
      <anchor>a8347e9996cd37cc227911c902f8f6ed2</anchor>
      <arglist>(const _T &amp;data) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateCheckCount</name>
      <anchorfile>classompl_1_1NearestNeighborsSqrtApprox.html</anchorfile>
      <anchor>abab5eb276a0d9fdc737bd47919e2d3ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>checks_</name>
      <anchorfile>classompl_1_1NearestNeighborsSqrtApprox.html</anchorfile>
      <anchor>af5cfd5ec0b959ec740b192f08999d7d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>offset_</name>
      <anchorfile>classompl_1_1NearestNeighborsSqrtApprox.html</anchorfile>
      <anchor>ad52b7cdb2a00ed4f0df7af2faf9dae4b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::PDF</name>
    <filename>classompl_1_1PDF.html</filename>
    <templarg></templarg>
    <class kind="class">ompl::PDF::Element</class>
    <member kind="function">
      <type></type>
      <name>PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ae06cfb65d4f89b2addffc958db09dd82</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a5b46002df3734b53e8340a031ec081cc</anchor>
      <arglist>(const std::vector&lt; _T &gt; &amp;d, const std::vector&lt; double &gt; &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a9f6f99197d8379496126a1a48021d149</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Element * &gt; &amp;</type>
      <name>getElements</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a29fb4c88ce0dee0d6bc4b409fe2898ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>add</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ae0e20ec9697abbbff4eb5ca7f06c04f7</anchor>
      <arglist>(const _T &amp;d, const double w)</arglist>
    </member>
    <member kind="function">
      <type>_T &amp;</type>
      <name>sample</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>aaafdcee8b5e225bcc81006fe5d960440</anchor>
      <arglist>(double r) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a5a6869bcc93cf5b5483048cd26dcb635</anchor>
      <arglist>(Element *elem, const double w)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWeight</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a298671738fdadeecf4c5aa4ba3c947ab</anchor>
      <arglist>(const Element *elem) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>abb42f3f0ae997173f6d4368c5d5aec6e</anchor>
      <arglist>(Element *elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>acaa1582a3143b6d282186d6c75dd8cf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ad590bf20b34d4e87a5d220ff52d6973d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const _T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ad8be9b35371beadd6a8d5cd636d44039</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a2f35456fba983f70cd62e1d75174662d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printTree</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ac1c19cac51e316a6db3266686c794d41</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::PDF::Element</name>
    <filename>classompl_1_1PDF_1_1Element.html</filename>
    <member kind="variable">
      <type>_T</type>
      <name>data_</name>
      <anchorfile>classompl_1_1PDF_1_1Element.html</anchorfile>
      <anchor>a74bab4cc2921bfdd11012d34fca1d6f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::Permutation</name>
    <filename>classompl_1_1Permutation.html</filename>
    <member kind="function">
      <type></type>
      <name>Permutation</name>
      <anchorfile>classompl_1_1Permutation.html</anchorfile>
      <anchor>acb149deb21b2337d7ce463f1babf5e28</anchor>
      <arglist>(std::size_t n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>permute</name>
      <anchorfile>classompl_1_1Permutation.html</anchorfile>
      <anchor>ac69487500e408e9c4e135625c4a1d861</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::PPM</name>
    <filename>classompl_1_1PPM.html</filename>
    <class kind="struct">ompl::PPM::Color</class>
    <member kind="function">
      <type>void</type>
      <name>loadFile</name>
      <anchorfile>classompl_1_1PPM.html</anchorfile>
      <anchor>a2a2e18b226ae88b23ea4d0b8e50b5a38</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveFile</name>
      <anchorfile>classompl_1_1PPM.html</anchorfile>
      <anchor>af035ef0485e02411c0e6d4c7066c50ed</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getWidth</name>
      <anchorfile>classompl_1_1PPM.html</anchorfile>
      <anchor>aa4057bddb0453e489a2a2bb480dbbf96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getHeight</name>
      <anchorfile>classompl_1_1PPM.html</anchorfile>
      <anchor>a80609a8d8bba8f119ceb025ced4f331f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classompl_1_1PPM.html</anchorfile>
      <anchor>ad3950fc7b8768e36f0c77cd65c834f67</anchor>
      <arglist>(unsigned int width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classompl_1_1PPM.html</anchorfile>
      <anchor>af992ebc83113f5c5a3a43c7b3f66b0e7</anchor>
      <arglist>(unsigned int height)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Color &gt; &amp;</type>
      <name>getPixels</name>
      <anchorfile>classompl_1_1PPM.html</anchorfile>
      <anchor>a54f9fb14c2fc5fc6abfcee5d2be51567</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Color &gt; &amp;</type>
      <name>getPixels</name>
      <anchorfile>classompl_1_1PPM.html</anchorfile>
      <anchor>a52b6aad2f738e99847153c9600c573fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Color &amp;</type>
      <name>getPixel</name>
      <anchorfile>classompl_1_1PPM.html</anchorfile>
      <anchor>a972eabc38c3706da7adab9a3cc95dc3f</anchor>
      <arglist>(const int row, const int col) const</arglist>
    </member>
    <member kind="function">
      <type>Color &amp;</type>
      <name>getPixel</name>
      <anchorfile>classompl_1_1PPM.html</anchorfile>
      <anchor>a13896ca755f07d350a3d7a4d95f16674</anchor>
      <arglist>(const int row, const int col)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::PPM::Color</name>
    <filename>structompl_1_1PPM_1_1Color.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::ProlateHyperspheroid</name>
    <filename>classompl_1_1ProlateHyperspheroid.html</filename>
    <member kind="function">
      <type></type>
      <name>ProlateHyperspheroid</name>
      <anchorfile>classompl_1_1ProlateHyperspheroid.html</anchorfile>
      <anchor>af062656026512ff07095eaf6ff0d633d</anchor>
      <arglist>(unsigned int n, const double focus1[], const double focus2[])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransverseDiameter</name>
      <anchorfile>classompl_1_1ProlateHyperspheroid.html</anchorfile>
      <anchor>a76a16bf0a6e4d69a2cb9b3b53e520c4a</anchor>
      <arglist>(double transverseDiameter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform</name>
      <anchorfile>classompl_1_1ProlateHyperspheroid.html</anchorfile>
      <anchor>ae1be90ac135d316b54fbd719109435db</anchor>
      <arglist>(const double sphere[], double phs[]) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInPhs</name>
      <anchorfile>classompl_1_1ProlateHyperspheroid.html</anchorfile>
      <anchor>a070b6d62f8d693544487b5813f7c90a5</anchor>
      <arglist>(const double point[]) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOnPhs</name>
      <anchorfile>classompl_1_1ProlateHyperspheroid.html</anchorfile>
      <anchor>a2a8945f2f5694081ffe9aac288168d45</anchor>
      <arglist>(const double point[]) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getPhsDimension</name>
      <anchorfile>classompl_1_1ProlateHyperspheroid.html</anchorfile>
      <anchor>a84f79b30175434d9214defd0f762e5d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPhsMeasure</name>
      <anchorfile>classompl_1_1ProlateHyperspheroid.html</anchorfile>
      <anchor>abeecf257500abba168ed8cb2c6aff67b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPhsMeasure</name>
      <anchorfile>classompl_1_1ProlateHyperspheroid.html</anchorfile>
      <anchor>adfb3185e9843319e5204422181a80559</anchor>
      <arglist>(double tranDiam) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMinTransverseDiameter</name>
      <anchorfile>classompl_1_1ProlateHyperspheroid.html</anchorfile>
      <anchor>a56ea5b0c486453a06f858075472f704c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPathLength</name>
      <anchorfile>classompl_1_1ProlateHyperspheroid.html</anchorfile>
      <anchor>ab52b4be51ae8b347f42079af966a9822</anchor>
      <arglist>(const double point[]) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1ProlateHyperspheroid.html</anchorfile>
      <anchor>afe0b8ac114aba0fc4fc281c03d3d645f</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::RNG</name>
    <filename>classompl_1_1RNG.html</filename>
    <member kind="function">
      <type></type>
      <name>RNG</name>
      <anchorfile>classompl_1_1RNG.html</anchorfile>
      <anchor>a95878438c4bc3fa1b8c000543a91d16e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RNG</name>
      <anchorfile>classompl_1_1RNG.html</anchorfile>
      <anchor>a15ad25463fdddf00f028db5da2cecf1a</anchor>
      <arglist>(std::uint_fast32_t localSeed)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>uniform01</name>
      <anchorfile>classompl_1_1RNG.html</anchorfile>
      <anchor>af9450941c808fc53f30173c364bbfd25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>uniformReal</name>
      <anchorfile>classompl_1_1RNG.html</anchorfile>
      <anchor>a691ddf8d21630c69d4ba3f8b1f8c449f</anchor>
      <arglist>(double lower_bound, double upper_bound)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>uniformInt</name>
      <anchorfile>classompl_1_1RNG.html</anchorfile>
      <anchor>ad122fd3309d2a2c72ca1dd665c1a2803</anchor>
      <arglist>(int lower_bound, int upper_bound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>uniformBool</name>
      <anchorfile>classompl_1_1RNG.html</anchorfile>
      <anchor>acf5a5eac4ab0ffc8aa337facac60c491</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gaussian01</name>
      <anchorfile>classompl_1_1RNG.html</anchorfile>
      <anchor>a75aacd082ebc60a2e63120d6a384f835</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gaussian</name>
      <anchorfile>classompl_1_1RNG.html</anchorfile>
      <anchor>a13631925b09cc5bc7d977240bf67cfd3</anchor>
      <arglist>(double mean, double stddev)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>halfNormalReal</name>
      <anchorfile>classompl_1_1RNG.html</anchorfile>
      <anchor>aa042546370a4144a4250ee30052496d5</anchor>
      <arglist>(double r_min, double r_max, double focus=3.0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>halfNormalInt</name>
      <anchorfile>classompl_1_1RNG.html</anchorfile>
      <anchor>a26c0a9c26d9a34e2f6004536dc92bf1d</anchor>
      <arglist>(int r_min, int r_max, double focus=3.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quaternion</name>
      <anchorfile>classompl_1_1RNG.html</anchorfile>
      <anchor>a082bc8ed509e999acea09880447a7955</anchor>
      <arglist>(double value[4])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eulerRPY</name>
      <anchorfile>classompl_1_1RNG.html</anchorfile>
      <anchor>a2a356471002c4ffe5dbf5aa5bfea9ef6</anchor>
      <arglist>(double value[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLocalSeed</name>
      <anchorfile>classompl_1_1RNG.html</anchorfile>
      <anchor>a49c340e231c073a5acb44f7b99a2ebc9</anchor>
      <arglist>(std::uint_fast32_t localSeed)</arglist>
    </member>
    <member kind="function">
      <type>std::uint_fast32_t</type>
      <name>getLocalSeed</name>
      <anchorfile>classompl_1_1RNG.html</anchorfile>
      <anchor>af985f634434e1689e5ee3c4b41a530a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uniformNormalVector</name>
      <anchorfile>classompl_1_1RNG.html</anchorfile>
      <anchor>a62089151d89c30b1037b84d278bfbf2c</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uniformInBall</name>
      <anchorfile>classompl_1_1RNG.html</anchorfile>
      <anchor>a71e2707a3685787fcc6c236b61497169</anchor>
      <arglist>(double r, std::vector&lt; double &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uniformProlateHyperspheroidSurface</name>
      <anchorfile>classompl_1_1RNG.html</anchorfile>
      <anchor>aa3c1ab3770a7a7d46e7cb2326f6bd4cb</anchor>
      <arglist>(const std::shared_ptr&lt; const ProlateHyperspheroid &gt; &amp;phsPtr, double value[])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uniformProlateHyperspheroid</name>
      <anchorfile>classompl_1_1RNG.html</anchorfile>
      <anchor>a848b4d46ba9103398687f3b5b9ecdc4c</anchor>
      <arglist>(const std::shared_ptr&lt; const ProlateHyperspheroid &gt; &amp;phsPtr, double value[])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shuffle</name>
      <anchorfile>classompl_1_1RNG.html</anchorfile>
      <anchor>a6dbfa3c3ecf8dde22d525abb388137b0</anchor>
      <arglist>(RandomAccessIterator first, RandomAccessIterator last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setSeed</name>
      <anchorfile>classompl_1_1RNG.html</anchorfile>
      <anchor>a5a2d71d1c12f13707457c9461807ee2c</anchor>
      <arglist>(std::uint_fast32_t seed)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::uint_fast32_t</type>
      <name>getSeed</name>
      <anchorfile>classompl_1_1RNG.html</anchorfile>
      <anchor>a9b59291cc9599888d41a1b7a748aa5fe</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::time::ProgressDisplay</name>
    <filename>classompl_1_1time_1_1ProgressDisplay.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::tools::Benchmark</name>
    <filename>classompl_1_1tools_1_1Benchmark.html</filename>
    <class kind="struct">ompl::tools::Benchmark::CompleteExperiment</class>
    <class kind="struct">ompl::tools::Benchmark::PlannerExperiment</class>
    <class kind="struct">ompl::tools::Benchmark::Request</class>
    <class kind="struct">ompl::tools::Benchmark::Status</class>
    <member kind="typedef">
      <type>std::map&lt; std::string, std::string &gt;</type>
      <name>RunProperties</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>ad660e80e710f6fd524d865bc232311e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(const base::PlannerPtr &amp;)&gt;</type>
      <name>PreSetupEvent</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a23533c490c5ae9617b9aeff21cb3929f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(const base::PlannerPtr &amp;, RunProperties &amp;)&gt;</type>
      <name>PostSetupEvent</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a75b718cb770089ade746bcb12c74b832</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Benchmark</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>ade874bfcc461409dbe925aa6ee0bcbd3</anchor>
      <arglist>(geometric::SimpleSetup &amp;setup, const std::string &amp;name=std::string())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Benchmark</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a85887f3c709f330558df3f9c2217d177</anchor>
      <arglist>(control::SimpleSetup &amp;setup, const std::string &amp;name=std::string())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addExperimentParameter</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>afab48f173edc785ee005301642b1afb1</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;type, const std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, std::string &gt; &amp;</type>
      <name>getExperimentParameters</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a88a000a67ca0365cf73bb0980e2cb598</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numExperimentParameters</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a96a5e5c2c1465e95ec5a5ea57c449518</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExperimentName</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a5cd270d95be4b130654bb6f3b978badf</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getExperimentName</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>ab9d802e65eeb24b1d5f8284b866f7f75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPlanner</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a86fdc0094b39debe8ee310a9e2de8e31</anchor>
      <arglist>(const base::PlannerPtr &amp;planner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPlannerAllocator</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a9641c6a479d33dc5e59a836bdd511fa4</anchor>
      <arglist>(const base::PlannerAllocator &amp;pa)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearPlanners</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a3dd03001e2d2afb0dc209fe8f6980f58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlannerSwitchEvent</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a641cd9b520392c02eefd1ce96ec07a4e</anchor>
      <arglist>(const PreSetupEvent &amp;event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPreRunEvent</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a405e0a2857e17e93992ca9e642618787</anchor>
      <arglist>(const PreSetupEvent &amp;event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPostRunEvent</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a8c97a673cf3d27b4c8d6dbc592b56ce4</anchor>
      <arglist>(const PostSetupEvent &amp;event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>benchmark</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a3257cb8dccc15037e81c0f235c61a7e8</anchor>
      <arglist>(const Request &amp;req)</arglist>
    </member>
    <member kind="function">
      <type>const Status &amp;</type>
      <name>getStatus</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a48a9c1eadaa6e5a06e797975f89f0da5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CompleteExperiment &amp;</type>
      <name>getRecordedExperimentData</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a5556df8df0b7026667042b384e09e42a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>saveResultsToStream</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a9f63b0b4e3de67b937bfa3022caf7348</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>saveResultsToFile</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>ac3a46507c4b8f4a3379ecca534f4ca93</anchor>
      <arglist>(const char *filename) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>saveResultsToFile</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a979f5df0704b89e7da4a1c29ab857a02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>geometric::SimpleSetup *</type>
      <name>gsetup_</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a8a562ed0d721cffc94c8aa0a2e565a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>control::SimpleSetup *</type>
      <name>csetup_</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a74f68df4ca4750779c5a2d5ef202c27e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; base::PlannerPtr &gt;</type>
      <name>planners_</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a3e166b0c8a0e8c935ec5b5f8627ed119</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CompleteExperiment</type>
      <name>exp_</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a6a7267b64dbde28d9b505ffac55c217e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Status</type>
      <name>status_</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a28b6c76500d022dba4a8bc075bdcc5d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PreSetupEvent</type>
      <name>plannerSwitch_</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a1bf6e6b434ae98d6d54808d5e65ded43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PreSetupEvent</type>
      <name>preRun_</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>ab3b2565d2fb0362bff5fbdd0d0080159</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PostSetupEvent</type>
      <name>postRun_</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a48b0e489b98ae6d5801f730467430bc1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::tools::Benchmark::CompleteExperiment</name>
    <filename>structompl_1_1tools_1_1Benchmark_1_1CompleteExperiment.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1CompleteExperiment.html</anchorfile>
      <anchor>afbe731482939c3147ef29b7e66a417d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; PlannerExperiment &gt;</type>
      <name>planners</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1CompleteExperiment.html</anchorfile>
      <anchor>a7341ae70fc4d72e580d56df8aebef2e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>maxTime</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1CompleteExperiment.html</anchorfile>
      <anchor>a6e2afb5aa508d11d99c8c900ac185e31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>maxMem</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1CompleteExperiment.html</anchorfile>
      <anchor>acf7f8e1be434e3d9232985a1a1fe8bb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>runCount</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1CompleteExperiment.html</anchorfile>
      <anchor>a9c8a6e8d4bef143a7bf69ec4ea8e2c67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>time::point</type>
      <name>startTime</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1CompleteExperiment.html</anchorfile>
      <anchor>a1ad2ed8592172cb1d976584fa29d9c30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>totalDuration</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1CompleteExperiment.html</anchorfile>
      <anchor>a4ff470f8a256307379d1b739df30ba1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>setupInfo</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1CompleteExperiment.html</anchorfile>
      <anchor>ae421cc31f15ae5f738618da2d3a94d1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::uint_fast32_t</type>
      <name>seed</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1CompleteExperiment.html</anchorfile>
      <anchor>a90d9e1427aabb29d9e2a7587e6440ac5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>host</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1CompleteExperiment.html</anchorfile>
      <anchor>ac282bd0d6ecc36a2ff8fb66dd8a05c02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>cpuInfo</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1CompleteExperiment.html</anchorfile>
      <anchor>a4aa91e531666d7140810a65b2e489b2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; std::string, std::string &gt;</type>
      <name>parameters</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1CompleteExperiment.html</anchorfile>
      <anchor>a7012b4d10d4fe0280f8403e7f5f67860</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::tools::Benchmark::PlannerExperiment</name>
    <filename>structompl_1_1tools_1_1Benchmark_1_1PlannerExperiment.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1PlannerExperiment.html</anchorfile>
      <anchor>ac03fb585834a6e081ece6f6ccc402158</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; RunProperties &gt;</type>
      <name>runs</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1PlannerExperiment.html</anchorfile>
      <anchor>abbfb1d6bae161a16ea1f2d08b41bf4e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>progressPropertyNames</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1PlannerExperiment.html</anchorfile>
      <anchor>a8cab8dc9d760daa1726f055ac6d2252e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; RunProgressData &gt;</type>
      <name>runsProgressData</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1PlannerExperiment.html</anchorfile>
      <anchor>ae181cf473036c591985bd0a2d8dea589</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RunProperties</type>
      <name>common</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1PlannerExperiment.html</anchorfile>
      <anchor>abc46f29154525e0ee1e18331a1d9ffa4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::tools::Benchmark::Request</name>
    <filename>structompl_1_1tools_1_1Benchmark_1_1Request.html</filename>
    <member kind="function">
      <type></type>
      <name>Request</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1Request.html</anchorfile>
      <anchor>ad931794d36f22235d3d3c81b930aa109</anchor>
      <arglist>(double maxTime=5.0, double maxMem=4096.0, unsigned int runCount=100, double timeBetweenUpdates=0.05, bool displayProgress=true, bool saveConsoleOutput=true, bool simplify=true)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>maxTime</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1Request.html</anchorfile>
      <anchor>ae29e119a2a3ca7d1325f701159a7636a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>maxMem</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1Request.html</anchorfile>
      <anchor>a12b3d959f8e7349120cdd87ef21f72b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>runCount</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1Request.html</anchorfile>
      <anchor>a0252082e35f936c93c86eabf0d713e01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>timeBetweenUpdates</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1Request.html</anchorfile>
      <anchor>a7f308d71127840e12c6fedfe2668d652</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>displayProgress</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1Request.html</anchorfile>
      <anchor>a0e63ef873358346cfb78a69121dfd2ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>saveConsoleOutput</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1Request.html</anchorfile>
      <anchor>a882d384685f86176fbb441c256d34044</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>simplify</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1Request.html</anchorfile>
      <anchor>af7c98e06da0e8b8181a5feec8b57ac6d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::tools::Benchmark::Status</name>
    <filename>structompl_1_1tools_1_1Benchmark_1_1Status.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>running</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1Status.html</anchorfile>
      <anchor>a4fa5303fcbae2c3ca68e050bc220eb6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>activePlanner</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1Status.html</anchorfile>
      <anchor>ae55a5240665b668a98d772f20dd8e896</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>activeRun</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1Status.html</anchorfile>
      <anchor>a898b2051fc610aac110391b821ddbe19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>progressPercentage</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1Status.html</anchorfile>
      <anchor>ac8f03ae95e93e777ad9742aa7bcde3be</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::tools::DynamicTimeWarp</name>
    <filename>classompl_1_1tools_1_1DynamicTimeWarp.html</filename>
    <member kind="function">
      <type>double</type>
      <name>calcDTWDistance</name>
      <anchorfile>classompl_1_1tools_1_1DynamicTimeWarp.html</anchorfile>
      <anchor>af6bfda18f118e802736a7d627876de66</anchor>
      <arglist>(const og::PathGeometric &amp;path1, const og::PathGeometric &amp;path2) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPathsScore</name>
      <anchorfile>classompl_1_1tools_1_1DynamicTimeWarp.html</anchorfile>
      <anchor>a65ae6d4dbb03e9c55203509cdacb539d</anchor>
      <arglist>(const og::PathGeometric &amp;path1, const og::PathGeometric &amp;path2) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::tools::ExperienceSetup</name>
    <filename>classompl_1_1tools_1_1ExperienceSetup.html</filename>
    <base>ompl::geometric::SimpleSetup</base>
    <class kind="struct">ompl::tools::ExperienceSetup::ExperienceLog</class>
    <class kind="struct">ompl::tools::ExperienceSetup::ExperienceStats</class>
    <member kind="function">
      <type></type>
      <name>ExperienceSetup</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>af8b43ed0577cd1c6ff65cb20e0205817</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExperienceSetup</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>a17e117263e19ed9060da471fad0f7834</anchor>
      <arglist>(const base::StateSpacePtr &amp;space)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logInitialize</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>a2a274a70a325bc7bf478b2559b9ddf68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertLogToString</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>a4c3ad0eb4683cdb94c0905a340a5ec26</anchor>
      <arglist>(const ExperienceLog &amp;log)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>printResultsInfo</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>ab856c906b1852fd7b361cb9a6eb8a74a</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>printLogs</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>ac40d613899c69961eabcda9e92cde915</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveDataLog</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>a919d07ec1a21340bebf512693665be76</anchor>
      <arglist>(std::ostream &amp;out=std::cout)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setRepairPlanner</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>ab4357db72bb8814d183cdcd6ba43b9e2</anchor>
      <arglist>(const base::PlannerPtr &amp;planner)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>a3e2e150b39d27972485dcd8b3aedb5c5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>saveIfChanged</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>a4c3684e487702baf56058004327e7dfa</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enablePlanningFromRecall</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>a3a88a2c9b4dbb55b8b12562391cc5846</anchor>
      <arglist>(bool enable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enablePlanningFromScratch</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>a00682838d91d3f9af46ba8de4d652068</anchor>
      <arglist>(bool enable)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getAllPlannerDatas</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>ac2f18a7d4f0a9742637d7626bfa20e1f</anchor>
      <arglist>(std::vector&lt; ompl::base::PlannerDataPtr &gt; &amp;plannerDatas) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>getExperiencesCount</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>a957c14664ab2f1c90e31c59781e4f307</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getFilePath</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>abae8e5957cdaa7de45a47b4a0ab7d7fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setFilePath</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>a1770985c7547dfb08beeb5b332f1d2aa</anchor>
      <arglist>(const std::string &amp;filePath)</arglist>
    </member>
    <member kind="function">
      <type>const ExperienceStats &amp;</type>
      <name>getStats</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>a8add1e41d7fa89cead2793d3ffabe09a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>doPostProcessing</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>aa5e8cf4418760ccccc5c1c55f6865d69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>recallEnabled_</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>ad1562726a66a34e2d0bd2fdfb80a9bfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>scratchEnabled_</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>aebb90ec592e29bddf24a4af092e65cbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>filePath_</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>a1cfa5e779e8f2704c93517c96ca162da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExperienceStats</type>
      <name>stats_</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>a9e9c568354ff6c2de85e3a341c747631</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::tools::ExperienceSetup::ExperienceLog</name>
    <filename>structompl_1_1tools_1_1ExperienceSetup_1_1ExperienceLog.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::tools::ExperienceSetup::ExperienceStats</name>
    <filename>structompl_1_1tools_1_1ExperienceSetup_1_1ExperienceStats.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::tools::Lightning</name>
    <filename>classompl_1_1tools_1_1Lightning.html</filename>
    <base>ompl::tools::ExperienceSetup</base>
    <member kind="function">
      <type></type>
      <name>Lightning</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>af148743f9ddd1ab99bf6eeb994b4fd1b</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Lightning</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>af60e1927f5d6d9c90e1b203f1363b2ef</anchor>
      <arglist>(const base::StateSpacePtr &amp;space)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printResultsInfo</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>aa50d17d7f5ded255ab0d9165507a2658</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printLogs</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>a5c80dc456d37d58c062c9d04b2919561</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const override</arglist>
    </member>
    <member kind="function">
      <type>ompl::geometric::LightningRetrieveRepair &amp;</type>
      <name>getLightningRetrieveRepairPlanner</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>abeb6f425c04af5c07cc0dc123da12670</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRepairPlanner</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>af7cbb0f71aac753444a3a27e4e8b1f4a</anchor>
      <arglist>(const base::PlannerPtr &amp;planner) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlannerAllocator</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>ad68b628a897631ca4c0598d1bc9ecf1b</anchor>
      <arglist>(const base::PlannerAllocator &amp;pa)</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>ae9f63edb08b438985f476fac39544c70</anchor>
      <arglist>(double time=1.0) override</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>a506a395a4e856dff38f2b31d9102268a</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>save</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>a7a609a9e8089cfdfc41d22c887ff2dc5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>saveIfChanged</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>a6501a1a4bc14a44ddf25969ac7de37b8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>a3e314d4d2530f206cae0ab27f7e5b44f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>aeb33b1779560e5b49c5c6e7cecdafc44</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>ac829824a189de69ce5704de0a794f550</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAllPlannerDatas</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>a95e9eb5ffa291abd95412c7ef89905b3</anchor>
      <arglist>(std::vector&lt; ompl::base::PlannerDataPtr &gt; &amp;plannerDatas) const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getExperiencesCount</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>a22474031bf9399074d0f52014351b3a6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertPlannerData</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>ad0add8a9901cfccc90a0207cc9e2b583</anchor>
      <arglist>(const ompl::base::PlannerDataPtr &amp;plannerData, ompl::geometric::PathGeometric &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>const ompl::tools::DynamicTimeWarpPtr &amp;</type>
      <name>getDynamicTimeWarp</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>a9ccd7eb9c66d02c04f12036770f9fad9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>reversePathIfNecessary</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>aae1345dd7412346e8c35bc92151e4759</anchor>
      <arglist>(ompl::geometric::PathGeometric &amp;path1, ompl::geometric::PathGeometric &amp;path2)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::PlannerPtr</type>
      <name>rrPlanner_</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>aacb5a20e2734797c87fceaab13e520bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ompl::tools::ParallelPlanPtr</type>
      <name>pp_</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>aa25e598cfef46554837f859b26ca3c3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ompl::tools::LightningDBPtr</type>
      <name>experienceDB_</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>a0a42b706f228b4bf3b01ff3d1fefa904</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ompl::tools::DynamicTimeWarpPtr</type>
      <name>dtw_</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>afe2a5c7f41d978e90a66d81a20920a6c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::tools::LightningDB</name>
    <filename>classompl_1_1tools_1_1LightningDB.html</filename>
    <member kind="function">
      <type></type>
      <name>LightningDB</name>
      <anchorfile>classompl_1_1tools_1_1LightningDB.html</anchorfile>
      <anchor>a2f66cffe479034cef4d0d0f54edc3cb3</anchor>
      <arglist>(const base::StateSpacePtr &amp;space)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LightningDB</name>
      <anchorfile>classompl_1_1tools_1_1LightningDB.html</anchorfile>
      <anchor>a2bc311d02286154535987b6375317f37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load</name>
      <anchorfile>classompl_1_1tools_1_1LightningDB.html</anchorfile>
      <anchor>adac169bc8e2d1ac32e500a6583bde8d3</anchor>
      <arglist>(const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPath</name>
      <anchorfile>classompl_1_1tools_1_1LightningDB.html</anchorfile>
      <anchor>ab18f978add52fa4727966bf351a8bd6d</anchor>
      <arglist>(geometric::PathGeometric &amp;solutionPath, double &amp;insertionTime)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>saveIfChanged</name>
      <anchorfile>classompl_1_1tools_1_1LightningDB.html</anchorfile>
      <anchor>abfeebec4c7372bbda89b1aa2a6ae9645</anchor>
      <arglist>(const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>save</name>
      <anchorfile>classompl_1_1tools_1_1LightningDB.html</anchorfile>
      <anchor>abf4408321190f604f4ac9c0d30c0c5b1</anchor>
      <arglist>(const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAllPlannerDatas</name>
      <anchorfile>classompl_1_1tools_1_1LightningDB.html</anchorfile>
      <anchor>a1f749dd6c1eab506dbcdad2efda9973e</anchor>
      <arglist>(std::vector&lt; ompl::base::PlannerDataPtr &gt; &amp;plannerDatas) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ompl::base::PlannerDataPtr &gt;</type>
      <name>findNearestStartGoal</name>
      <anchorfile>classompl_1_1tools_1_1LightningDB.html</anchorfile>
      <anchor>af38421240dd876aa4c5b5a0fdacf3fb8</anchor>
      <arglist>(int nearestK, const base::State *start, const base::State *goal)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getExperiencesCount</name>
      <anchorfile>classompl_1_1tools_1_1LightningDB.html</anchorfile>
      <anchor>acd551dd68be1b7ffe8a789e347be4e5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getStatesCount</name>
      <anchorfile>classompl_1_1tools_1_1LightningDB.html</anchorfile>
      <anchor>a15dfdddba85897bf91753cc9cc8d1e5d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumUnsavedPaths</name>
      <anchorfile>classompl_1_1tools_1_1LightningDB.html</anchorfile>
      <anchor>a87ed719a9289976345071ffb809cfb75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classompl_1_1tools_1_1LightningDB.html</anchorfile>
      <anchor>af4dcfa3862443cb63e8adaa8817ea976</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::SpaceInformationPtr</type>
      <name>si_</name>
      <anchorfile>classompl_1_1tools_1_1LightningDB.html</anchorfile>
      <anchor>a743877fc7aafd42d80166c341e751504</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ompl::base::PlannerDataStorage</type>
      <name>plannerDataStorage_</name>
      <anchorfile>classompl_1_1tools_1_1LightningDB.html</anchorfile>
      <anchor>aa9c6d05ba4d4109d520a755995bf7ba0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::tools::OptimizePlan</name>
    <filename>classompl_1_1tools_1_1OptimizePlan.html</filename>
    <member kind="function">
      <type></type>
      <name>OptimizePlan</name>
      <anchorfile>classompl_1_1tools_1_1OptimizePlan.html</anchorfile>
      <anchor>a987dce1eaf7644ee7e23a2d3938ad060</anchor>
      <arglist>(const base::ProblemDefinitionPtr &amp;pdef)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPlanner</name>
      <anchorfile>classompl_1_1tools_1_1OptimizePlan.html</anchorfile>
      <anchor>a10d2adad0c5bcbe0c7c1d247db2eb9b9</anchor>
      <arglist>(const base::PlannerPtr &amp;planner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPlannerAllocator</name>
      <anchorfile>classompl_1_1tools_1_1OptimizePlan.html</anchorfile>
      <anchor>a8132f5c49c22b05d72e8146169006c65</anchor>
      <arglist>(const base::PlannerAllocator &amp;pa)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearPlanners</name>
      <anchorfile>classompl_1_1tools_1_1OptimizePlan.html</anchorfile>
      <anchor>a2246259e1289280eb7c009ae98b7f868</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const base::ProblemDefinitionPtr &amp;</type>
      <name>getProblemDefinition</name>
      <anchorfile>classompl_1_1tools_1_1OptimizePlan.html</anchorfile>
      <anchor>a099dbb94dced7b495d5a03b7988bd238</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>base::ProblemDefinitionPtr &amp;</type>
      <name>getProblemDefinition</name>
      <anchorfile>classompl_1_1tools_1_1OptimizePlan.html</anchorfile>
      <anchor>ad0259133a424bff7fb9efc302f6710aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1tools_1_1OptimizePlan.html</anchorfile>
      <anchor>a7defd2cde3ea43b4677213aca089a702</anchor>
      <arglist>(double solveTime, unsigned int maxSol=10, unsigned int nthreads=1)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParallelPlan</type>
      <name>pp_</name>
      <anchorfile>classompl_1_1tools_1_1OptimizePlan.html</anchorfile>
      <anchor>a58e79fbd8e80b02288779d33fce39a08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; base::PlannerPtr &gt;</type>
      <name>planners_</name>
      <anchorfile>classompl_1_1tools_1_1OptimizePlan.html</anchorfile>
      <anchor>aaa6bccd0a8dce8d86831a8ecb3ff8fbb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::tools::ParallelPlan</name>
    <filename>classompl_1_1tools_1_1ParallelPlan.html</filename>
    <member kind="function">
      <type></type>
      <name>ParallelPlan</name>
      <anchorfile>classompl_1_1tools_1_1ParallelPlan.html</anchorfile>
      <anchor>a948f7be33f9278616b2d6544f794cff4</anchor>
      <arglist>(const base::ProblemDefinitionPtr &amp;pdef)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPlanner</name>
      <anchorfile>classompl_1_1tools_1_1ParallelPlan.html</anchorfile>
      <anchor>a5249639994ad99171ec20d927c024d9c</anchor>
      <arglist>(const base::PlannerPtr &amp;planner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPlannerAllocator</name>
      <anchorfile>classompl_1_1tools_1_1ParallelPlan.html</anchorfile>
      <anchor>a6b50af9f331814868450ea764c56ac4d</anchor>
      <arglist>(const base::PlannerAllocator &amp;pa)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearHybridizationPaths</name>
      <anchorfile>classompl_1_1tools_1_1ParallelPlan.html</anchorfile>
      <anchor>af134c34398a1e28ce9cdfac193429754</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearPlanners</name>
      <anchorfile>classompl_1_1tools_1_1ParallelPlan.html</anchorfile>
      <anchor>ac83642ddb6166656e07d8ce8abd6fcd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const base::ProblemDefinitionPtr &amp;</type>
      <name>getProblemDefinition</name>
      <anchorfile>classompl_1_1tools_1_1ParallelPlan.html</anchorfile>
      <anchor>a2692de35cb2459ef8bcd07b447bc3108</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>base::ProblemDefinitionPtr &amp;</type>
      <name>getProblemDefinition</name>
      <anchorfile>classompl_1_1tools_1_1ParallelPlan.html</anchorfile>
      <anchor>aeab0815cca49ec777011b5aabd4937eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1tools_1_1ParallelPlan.html</anchorfile>
      <anchor>adec2cb17fadfd6232577f8e7d572f8f1</anchor>
      <arglist>(double solveTime, bool hybridize=true)</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1tools_1_1ParallelPlan.html</anchorfile>
      <anchor>a81a168d8259aa61aa213da66e13722eb</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc, bool hybridize=true)</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1tools_1_1ParallelPlan.html</anchorfile>
      <anchor>acfcbc69d5e3a871a83c3ed024aff959e</anchor>
      <arglist>(double solveTime, std::size_t minSolCount, std::size_t maxSolCount, bool hybridize=true)</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1tools_1_1ParallelPlan.html</anchorfile>
      <anchor>aff62b7ded2affd4f95b268f5b329137c</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc, std::size_t minSolCount, std::size_t maxSolCount, bool hybridize=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>solveOne</name>
      <anchorfile>classompl_1_1tools_1_1ParallelPlan.html</anchorfile>
      <anchor>aac59a889361c61883f064f47263413cf</anchor>
      <arglist>(base::Planner *planner, std::size_t minSolCount, const base::PlannerTerminationCondition *ptc)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>solveMore</name>
      <anchorfile>classompl_1_1tools_1_1ParallelPlan.html</anchorfile>
      <anchor>a9e0e35fc1ef0885798ed1635ae2d9df9</anchor>
      <arglist>(base::Planner *planner, std::size_t minSolCount, std::size_t maxSolCount, const base::PlannerTerminationCondition *ptc)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ProblemDefinitionPtr</type>
      <name>pdef_</name>
      <anchorfile>classompl_1_1tools_1_1ParallelPlan.html</anchorfile>
      <anchor>aa0673c19459faaa24da1a1685483c412</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; base::PlannerPtr &gt;</type>
      <name>planners_</name>
      <anchorfile>classompl_1_1tools_1_1ParallelPlan.html</anchorfile>
      <anchor>af7103aa29f496c2ecc2e471cb7e18e60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>geometric::PathHybridizationPtr</type>
      <name>phybrid_</name>
      <anchorfile>classompl_1_1tools_1_1ParallelPlan.html</anchorfile>
      <anchor>aea34f6b7d308d255a2a45e3f4bf42f6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::mutex</type>
      <name>phlock_</name>
      <anchorfile>classompl_1_1tools_1_1ParallelPlan.html</anchorfile>
      <anchor>ad375de2e9cd3af18c1575d41adb7def0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::tools::PlannerMonitor</name>
    <filename>classompl_1_1tools_1_1PlannerMonitor.html</filename>
    <member kind="function">
      <type></type>
      <name>PlannerMonitor</name>
      <anchorfile>classompl_1_1tools_1_1PlannerMonitor.html</anchorfile>
      <anchor>aa0e38218efc49f9f78ee10974c0bd919</anchor>
      <arglist>(base::PlannerPtr planner, std::ostream &amp;out, double period=0.5, bool autoStart=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PlannerMonitor</name>
      <anchorfile>classompl_1_1tools_1_1PlannerMonitor.html</anchorfile>
      <anchor>a22ad6a17d1d23d4c25e6b8b9b49af4a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startMonitor</name>
      <anchorfile>classompl_1_1tools_1_1PlannerMonitor.html</anchorfile>
      <anchor>a675f2056ed96b680489cfed76de1388b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopMonitor</name>
      <anchorfile>classompl_1_1tools_1_1PlannerMonitor.html</anchorfile>
      <anchor>ad050a2eb4bb5e381695e1ae55a0fd367</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::tools::Profiler</name>
    <filename>classompl_1_1tools_1_1Profiler.html</filename>
    <class kind="class">ompl::tools::Profiler::ScopedBlock</class>
    <class kind="class">ompl::tools::Profiler::ScopedStart</class>
    <member kind="function">
      <type></type>
      <name>Profiler</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>ae5e4b7c2dadc5e4d671b3b4a19a738ea</anchor>
      <arglist>(bool printOnDestroy=false, bool autoStart=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Profiler</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a3fe921fbbd004300bf7aec938a5b566c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>ad5a95b01527f558c61b5a60734e61557</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>af5ea8d2ca7c920e0afb306469141794c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>ab0d0af1965eb54113e8b8dcc17eeaa71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>event</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>afc2f152cc2b136d2ea7ee4cff530eb7f</anchor>
      <arglist>(const std::string &amp;name, const unsigned int times=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>average</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>ae264470e9c5534a01a3b652138d704ef</anchor>
      <arglist>(const std::string &amp;name, const double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>begin</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a73f8db5bef259e72aa7d945d40eec6a9</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>end</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>af8ff1c4e783163740d3be615dfd50f50</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a64844f64105f7bb5d39ea259e0e00fa7</anchor>
      <arglist>(std::ostream &amp;out=std::cout, bool merge=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>console</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a4b148a821f6d8855008a6e528c3c22c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>running</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a724a741970f15dbb031c462db4553d64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Profiler &amp;</type>
      <name>Instance</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a6f65deca6dcad1a282dc967fd1ce1fc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Start</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>abffe7c4627124c028b1541b35f5ad59e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Stop</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a96bd99ebef801eda91dd731e749f5598</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Clear</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>af750a3320ddcc6282e9c45779efd389d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Event</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>ae5deccf4701d811da70333a159674fb2</anchor>
      <arglist>(const std::string &amp;name, const unsigned int times=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Average</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a22a9c18b1332df658eac4bc31f757d58</anchor>
      <arglist>(const std::string &amp;name, const double value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Begin</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>abade0a7c40c3ee768fc1edaf49571cf6</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>End</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a79cc35d2e207cc15ce709a9fc3149c70</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Status</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a4bdcb925cd61a10c5f50eb64046f2871</anchor>
      <arglist>(std::ostream &amp;out=std::cout, bool merge=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Console</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>ab88cc9ecd1d8a72aee5695680cb8484f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Running</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>ab8afd7647ac8b228ac64c3c94963f13c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::tools::Profiler::ScopedBlock</name>
    <filename>classompl_1_1tools_1_1Profiler_1_1ScopedBlock.html</filename>
    <member kind="function">
      <type></type>
      <name>ScopedBlock</name>
      <anchorfile>classompl_1_1tools_1_1Profiler_1_1ScopedBlock.html</anchorfile>
      <anchor>a3c213fe2f0e0a97b145d1c7d1ee9958b</anchor>
      <arglist>(const std::string &amp;name, Profiler &amp;prof=Profiler::Instance())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::tools::Profiler::ScopedStart</name>
    <filename>classompl_1_1tools_1_1Profiler_1_1ScopedStart.html</filename>
    <member kind="function">
      <type></type>
      <name>ScopedStart</name>
      <anchorfile>classompl_1_1tools_1_1Profiler_1_1ScopedStart.html</anchorfile>
      <anchor>a9a6a6c0c28acf4bb834c0dec97cf4028</anchor>
      <arglist>(Profiler &amp;prof=Profiler::Instance())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::tools::SelfConfig</name>
    <filename>classompl_1_1tools_1_1SelfConfig.html</filename>
    <member kind="function">
      <type></type>
      <name>SelfConfig</name>
      <anchorfile>classompl_1_1tools_1_1SelfConfig.html</anchorfile>
      <anchor>ad0dca5fbc79a2687b39aa2c8bb15143b</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si, const std::string &amp;context=std::string())</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getProbabilityOfValidState</name>
      <anchorfile>classompl_1_1tools_1_1SelfConfig.html</anchorfile>
      <anchor>a67305a8d57f0737733c25f4fb32b13ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAverageValidMotionLength</name>
      <anchorfile>classompl_1_1tools_1_1SelfConfig.html</anchorfile>
      <anchor>a9bb25d080de0eaaaaad1600eda88ee26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configureValidStateSamplingAttempts</name>
      <anchorfile>classompl_1_1tools_1_1SelfConfig.html</anchorfile>
      <anchor>a2af548317b0f4784dd862de0274cfa74</anchor>
      <arglist>(unsigned int &amp;attempts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configurePlannerRange</name>
      <anchorfile>classompl_1_1tools_1_1SelfConfig.html</anchorfile>
      <anchor>a65bff53ea4bc6f158342a856175ab9a6</anchor>
      <arglist>(double &amp;range)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configureProjectionEvaluator</name>
      <anchorfile>classompl_1_1tools_1_1SelfConfig.html</anchorfile>
      <anchor>a6af441eace888354bcc5afe172561d62</anchor>
      <arglist>(base::ProjectionEvaluatorPtr &amp;proj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classompl_1_1tools_1_1SelfConfig.html</anchorfile>
      <anchor>aa5fa54e33a69be0f136c91d89f3b1feb</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NearestNeighbors&lt; _T &gt; *</type>
      <name>getDefaultNearestNeighbors</name>
      <anchorfile>classompl_1_1tools_1_1SelfConfig.html</anchorfile>
      <anchor>a6234444fd75f10224dff2e1a342998ea</anchor>
      <arglist>(const base::Planner *planner)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static base::PlannerPtr</type>
      <name>getDefaultPlanner</name>
      <anchorfile>classompl_1_1tools_1_1SelfConfig.html</anchorfile>
      <anchor>ae9f747585a0c3fdc50667d9f8a39095d</anchor>
      <arglist>(const base::GoalPtr &amp;goal)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::tools::Thunder</name>
    <filename>classompl_1_1tools_1_1Thunder.html</filename>
    <base>ompl::tools::ExperienceSetup</base>
    <member kind="function">
      <type></type>
      <name>Thunder</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>a38d1a4f9f7f760f43593ea3cb24242b5</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Thunder</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>a2dff3b6c8944feecaae7e3591963afba</anchor>
      <arglist>(const base::StateSpacePtr &amp;space)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printResultsInfo</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>a10144879857abd42ee538933ae287b00</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printLogs</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>a12cc04daee456821474acef76b42a711</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const override</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::PlannerPtr &amp;</type>
      <name>getPlanner</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>af4eddbcd0610d3c84b192e76081144a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ompl::geometric::ThunderRetrieveRepair &amp;</type>
      <name>getRetrieveRepairPlanner</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>af0e0e9fbfe5956169be1ef37ab63d4ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRepairPlanner</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>aead79e0b54e9fdd8516e09e07ae080af</anchor>
      <arglist>(const base::PlannerPtr &amp;planner) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlannerAllocator</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>ab0374be3a3904e7c487618335ea26917</anchor>
      <arglist>(const base::PlannerAllocator &amp;pa)</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>a267c69af570cf239f7f40556c199f1c0</anchor>
      <arglist>(double time=1.0) override</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>ae28d863057acaaf7d87ad5a1fab5178c</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>save</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>a3c66dff54ec8b1eb9da452bc46f4d57f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>saveIfChanged</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>a7197d4d3f0eb256ae04d77630cd4cfeb</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>a3d12ae81915ba817030dc8377edd3159</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>a37b484f775e170be89c27e6dfcc67e85</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>aabdd5243a8add54dc82e02e886594c7b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAllPlannerDatas</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>af2d5f395d2a588954f133ab156b936d5</anchor>
      <arglist>(std::vector&lt; ompl::base::PlannerDataPtr &gt; &amp;plannerDatas) const override</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getExperiencesCount</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>a84c430d78fd007a641863f404fde822b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertPlannerData</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>ad23fad5b39ac3a0be7c2f901a8653439</anchor>
      <arglist>(const ompl::base::PlannerDataPtr &amp;plannerData, ompl::geometric::PathGeometric &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reversePathIfNecessary</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>a06addf301accf4b73095d175ed53eb4c</anchor>
      <arglist>(ompl::geometric::PathGeometric &amp;path1, ompl::geometric::PathGeometric &amp;path2)</arglist>
    </member>
    <member kind="function">
      <type>ompl::tools::ThunderDBPtr</type>
      <name>getExperienceDB</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>aa874182b1c1b262029bf252093f54ecc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doPostProcessing</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>a1150ee3b6e2479f91835d03ca2e1a527</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::PlannerPtr</type>
      <name>rrPlanner_</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>ad6f9adaa0a0351fb4d26e20520d6f7fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::PlannerPtr</type>
      <name>planner2_</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>a37bc1768a60827de512f48231f1f77ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>dualThreadScratchEnabled_</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>aa5c1c232d2da8da84b764de55be25b41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ompl::tools::ParallelPlanPtr</type>
      <name>pp_</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>ab30c6078c437d13e9390ab0367ad87d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ompl::tools::ThunderDBPtr</type>
      <name>experienceDB_</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>aab584251f4276dc566cf1b7eb540367f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ompl::geometric::PathGeometric &gt;</type>
      <name>queuedSolutionPaths_</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>a747aba773c961953e490c9246c2be23f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::tools::ThunderDB</name>
    <filename>classompl_1_1tools_1_1ThunderDB.html</filename>
    <member kind="function">
      <type></type>
      <name>ThunderDB</name>
      <anchorfile>classompl_1_1tools_1_1ThunderDB.html</anchorfile>
      <anchor>a328194ca0f4107a87164c44f3f799cab</anchor>
      <arglist>(const base::StateSpacePtr &amp;space)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ThunderDB</name>
      <anchorfile>classompl_1_1tools_1_1ThunderDB.html</anchorfile>
      <anchor>a946a107d62ef5706fae8b86ebdc0822a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load</name>
      <anchorfile>classompl_1_1tools_1_1ThunderDB.html</anchorfile>
      <anchor>a68c87a71cf6261652de79eded14f9f5d</anchor>
      <arglist>(const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addPath</name>
      <anchorfile>classompl_1_1tools_1_1ThunderDB.html</anchorfile>
      <anchor>ab1e9308508a46b78c82edbea97c1c30f</anchor>
      <arglist>(ompl::geometric::PathGeometric &amp;solutionPath, double &amp;insertionTime)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>saveIfChanged</name>
      <anchorfile>classompl_1_1tools_1_1ThunderDB.html</anchorfile>
      <anchor>a058797a803c3f7b2cc5ecca08802a333</anchor>
      <arglist>(const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>save</name>
      <anchorfile>classompl_1_1tools_1_1ThunderDB.html</anchorfile>
      <anchor>a7f8d0e5cb4af3218e9de6b36433a10e7</anchor>
      <arglist>(const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAllPlannerDatas</name>
      <anchorfile>classompl_1_1tools_1_1ThunderDB.html</anchorfile>
      <anchor>ad8895251494080021d9382b35edcc5e2</anchor>
      <arglist>(std::vector&lt; ompl::base::PlannerDataPtr &gt; &amp;plannerDatas) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSPARSdb</name>
      <anchorfile>classompl_1_1tools_1_1ThunderDB.html</anchorfile>
      <anchor>a295766e2032f08b0d66251fca7c39e2f</anchor>
      <arglist>(ompl::tools::SPARSdbPtr &amp;prm)</arglist>
    </member>
    <member kind="function">
      <type>ompl::tools::SPARSdbPtr &amp;</type>
      <name>getSPARSdb</name>
      <anchorfile>classompl_1_1tools_1_1ThunderDB.html</anchorfile>
      <anchor>a13a4c88fd7e1ed8b8688e2a3523af477</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findNearestStartGoal</name>
      <anchorfile>classompl_1_1tools_1_1ThunderDB.html</anchorfile>
      <anchor>ad9d61568cbf13a644bd858becf85cf05</anchor>
      <arglist>(int nearestK, const base::State *start, const base::State *goal, ompl::geometric::SPARSdb::CandidateSolution &amp;candidateSolution, const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>debugVertex</name>
      <anchorfile>classompl_1_1tools_1_1ThunderDB.html</anchorfile>
      <anchor>aaa06b40e582b3890826cfd541ac304a5</anchor>
      <arglist>(const ompl::base::PlannerDataVertex &amp;vertex)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPathsInserted</name>
      <anchorfile>classompl_1_1tools_1_1ThunderDB.html</anchorfile>
      <anchor>ac723d9dfa094fde9e46c880e69a91cd2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getSavingEnabled</name>
      <anchorfile>classompl_1_1tools_1_1ThunderDB.html</anchorfile>
      <anchor>a69bbb2ed9428baf257066ae27dd9d68e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSavingEnabled</name>
      <anchorfile>classompl_1_1tools_1_1ThunderDB.html</anchorfile>
      <anchor>a307985115f34a69d59f20452ff691f20</anchor>
      <arglist>(bool saving_enabled)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classompl_1_1tools_1_1ThunderDB.html</anchorfile>
      <anchor>ae1478d1a938ea26df09a06710befe5d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::SpaceInformationPtr</type>
      <name>si_</name>
      <anchorfile>classompl_1_1tools_1_1ThunderDB.html</anchorfile>
      <anchor>af04cd24ed51c58b76e909967a5f143ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ompl::base::PlannerDataStorage</type>
      <name>plannerDataStorage_</name>
      <anchorfile>classompl_1_1tools_1_1ThunderDB.html</anchorfile>
      <anchor>a27b1af65beb94d58e429b6aaa120c41c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PDF&lt; GridCell * &gt;</name>
    <filename>classompl_1_1PDF.html</filename>
    <member kind="function">
      <type></type>
      <name>PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ae06cfb65d4f89b2addffc958db09dd82</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a5b46002df3734b53e8340a031ec081cc</anchor>
      <arglist>(const std::vector&lt; GridCell * &gt; &amp;d, const std::vector&lt; double &gt; &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a9f6f99197d8379496126a1a48021d149</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Element * &gt; &amp;</type>
      <name>getElements</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a29fb4c88ce0dee0d6bc4b409fe2898ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>add</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ae0e20ec9697abbbff4eb5ca7f06c04f7</anchor>
      <arglist>(const GridCell * &amp;d, const double w)</arglist>
    </member>
    <member kind="function">
      <type>GridCell * &amp;</type>
      <name>sample</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>aaafdcee8b5e225bcc81006fe5d960440</anchor>
      <arglist>(double r) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a5a6869bcc93cf5b5483048cd26dcb635</anchor>
      <arglist>(Element *elem, const double w)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWeight</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a298671738fdadeecf4c5aa4ba3c947ab</anchor>
      <arglist>(const Element *elem) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>abb42f3f0ae997173f6d4368c5d5aec6e</anchor>
      <arglist>(Element *elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>acaa1582a3143b6d282186d6c75dd8cf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ad590bf20b34d4e87a5d220ff52d6973d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const GridCell * &amp;</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ad8be9b35371beadd6a8d5cd636d44039</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a2f35456fba983f70cd62e1d75174662d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printTree</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ac1c19cac51e316a6db3266686c794d41</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PDF&lt; int &gt;</name>
    <filename>classompl_1_1PDF.html</filename>
    <member kind="function">
      <type></type>
      <name>PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ae06cfb65d4f89b2addffc958db09dd82</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a5b46002df3734b53e8340a031ec081cc</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;d, const std::vector&lt; double &gt; &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a9f6f99197d8379496126a1a48021d149</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Element * &gt; &amp;</type>
      <name>getElements</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a29fb4c88ce0dee0d6bc4b409fe2898ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>add</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ae0e20ec9697abbbff4eb5ca7f06c04f7</anchor>
      <arglist>(const int &amp;d, const double w)</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>sample</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>aaafdcee8b5e225bcc81006fe5d960440</anchor>
      <arglist>(double r) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a5a6869bcc93cf5b5483048cd26dcb635</anchor>
      <arglist>(Element *elem, const double w)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWeight</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a298671738fdadeecf4c5aa4ba3c947ab</anchor>
      <arglist>(const Element *elem) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>abb42f3f0ae997173f6d4368c5d5aec6e</anchor>
      <arglist>(Element *elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>acaa1582a3143b6d282186d6c75dd8cf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ad590bf20b34d4e87a5d220ff52d6973d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int &amp;</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ad8be9b35371beadd6a8d5cd636d44039</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a2f35456fba983f70cd62e1d75174662d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printTree</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ac1c19cac51e316a6db3266686c794d41</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PDF&lt; ompl::base::AtlasChart * &gt;</name>
    <filename>classompl_1_1PDF.html</filename>
    <member kind="function">
      <type></type>
      <name>PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ae06cfb65d4f89b2addffc958db09dd82</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a5b46002df3734b53e8340a031ec081cc</anchor>
      <arglist>(const std::vector&lt; ompl::base::AtlasChart * &gt; &amp;d, const std::vector&lt; double &gt; &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a9f6f99197d8379496126a1a48021d149</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Element * &gt; &amp;</type>
      <name>getElements</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a29fb4c88ce0dee0d6bc4b409fe2898ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>add</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ae0e20ec9697abbbff4eb5ca7f06c04f7</anchor>
      <arglist>(const ompl::base::AtlasChart * &amp;d, const double w)</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::AtlasChart * &amp;</type>
      <name>sample</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>aaafdcee8b5e225bcc81006fe5d960440</anchor>
      <arglist>(double r) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a5a6869bcc93cf5b5483048cd26dcb635</anchor>
      <arglist>(Element *elem, const double w)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWeight</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a298671738fdadeecf4c5aa4ba3c947ab</anchor>
      <arglist>(const Element *elem) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>abb42f3f0ae997173f6d4368c5d5aec6e</anchor>
      <arglist>(Element *elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>acaa1582a3143b6d282186d6c75dd8cf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ad590bf20b34d4e87a5d220ff52d6973d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ompl::base::AtlasChart * &amp;</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ad8be9b35371beadd6a8d5cd636d44039</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a2f35456fba983f70cd62e1d75174662d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printTree</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ac1c19cac51e316a6db3266686c794d41</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PDF&lt; ompl::control::LTLPlanner::Motion * &gt;</name>
    <filename>classompl_1_1PDF.html</filename>
    <member kind="function">
      <type></type>
      <name>PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ae06cfb65d4f89b2addffc958db09dd82</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a5b46002df3734b53e8340a031ec081cc</anchor>
      <arglist>(const std::vector&lt; ompl::control::LTLPlanner::Motion * &gt; &amp;d, const std::vector&lt; double &gt; &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a9f6f99197d8379496126a1a48021d149</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Element * &gt; &amp;</type>
      <name>getElements</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a29fb4c88ce0dee0d6bc4b409fe2898ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>add</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ae0e20ec9697abbbff4eb5ca7f06c04f7</anchor>
      <arglist>(const ompl::control::LTLPlanner::Motion * &amp;d, const double w)</arglist>
    </member>
    <member kind="function">
      <type>ompl::control::LTLPlanner::Motion * &amp;</type>
      <name>sample</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>aaafdcee8b5e225bcc81006fe5d960440</anchor>
      <arglist>(double r) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a5a6869bcc93cf5b5483048cd26dcb635</anchor>
      <arglist>(Element *elem, const double w)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWeight</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a298671738fdadeecf4c5aa4ba3c947ab</anchor>
      <arglist>(const Element *elem) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>abb42f3f0ae997173f6d4368c5d5aec6e</anchor>
      <arglist>(Element *elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>acaa1582a3143b6d282186d6c75dd8cf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ad590bf20b34d4e87a5d220ff52d6973d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ompl::control::LTLPlanner::Motion * &amp;</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ad8be9b35371beadd6a8d5cd636d44039</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a2f35456fba983f70cd62e1d75174662d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printTree</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ac1c19cac51e316a6db3266686c794d41</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PDF&lt; ompl::control::ProductGraph::State * &gt;</name>
    <filename>classompl_1_1PDF.html</filename>
    <member kind="function">
      <type></type>
      <name>PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ae06cfb65d4f89b2addffc958db09dd82</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a5b46002df3734b53e8340a031ec081cc</anchor>
      <arglist>(const std::vector&lt; ompl::control::ProductGraph::State * &gt; &amp;d, const std::vector&lt; double &gt; &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a9f6f99197d8379496126a1a48021d149</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Element * &gt; &amp;</type>
      <name>getElements</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a29fb4c88ce0dee0d6bc4b409fe2898ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>add</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ae0e20ec9697abbbff4eb5ca7f06c04f7</anchor>
      <arglist>(const ompl::control::ProductGraph::State * &amp;d, const double w)</arglist>
    </member>
    <member kind="function">
      <type>ompl::control::ProductGraph::State * &amp;</type>
      <name>sample</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>aaafdcee8b5e225bcc81006fe5d960440</anchor>
      <arglist>(double r) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a5a6869bcc93cf5b5483048cd26dcb635</anchor>
      <arglist>(Element *elem, const double w)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWeight</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a298671738fdadeecf4c5aa4ba3c947ab</anchor>
      <arglist>(const Element *elem) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>abb42f3f0ae997173f6d4368c5d5aec6e</anchor>
      <arglist>(Element *elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>acaa1582a3143b6d282186d6c75dd8cf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ad590bf20b34d4e87a5d220ff52d6973d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ompl::control::ProductGraph::State * &amp;</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ad8be9b35371beadd6a8d5cd636d44039</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a2f35456fba983f70cd62e1d75174662d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printTree</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ac1c19cac51e316a6db3266686c794d41</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PDF&lt; ompl::geometric::BiEST::Motion * &gt;</name>
    <filename>classompl_1_1PDF.html</filename>
    <member kind="function">
      <type></type>
      <name>PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ae06cfb65d4f89b2addffc958db09dd82</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a5b46002df3734b53e8340a031ec081cc</anchor>
      <arglist>(const std::vector&lt; ompl::geometric::BiEST::Motion * &gt; &amp;d, const std::vector&lt; double &gt; &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a9f6f99197d8379496126a1a48021d149</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Element * &gt; &amp;</type>
      <name>getElements</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a29fb4c88ce0dee0d6bc4b409fe2898ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>add</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ae0e20ec9697abbbff4eb5ca7f06c04f7</anchor>
      <arglist>(const ompl::geometric::BiEST::Motion * &amp;d, const double w)</arglist>
    </member>
    <member kind="function">
      <type>ompl::geometric::BiEST::Motion * &amp;</type>
      <name>sample</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>aaafdcee8b5e225bcc81006fe5d960440</anchor>
      <arglist>(double r) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a5a6869bcc93cf5b5483048cd26dcb635</anchor>
      <arglist>(Element *elem, const double w)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWeight</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a298671738fdadeecf4c5aa4ba3c947ab</anchor>
      <arglist>(const Element *elem) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>abb42f3f0ae997173f6d4368c5d5aec6e</anchor>
      <arglist>(Element *elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>acaa1582a3143b6d282186d6c75dd8cf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ad590bf20b34d4e87a5d220ff52d6973d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ompl::geometric::BiEST::Motion * &amp;</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ad8be9b35371beadd6a8d5cd636d44039</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a2f35456fba983f70cd62e1d75174662d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printTree</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ac1c19cac51e316a6db3266686c794d41</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PDF&lt; ompl::geometric::EST::Motion * &gt;</name>
    <filename>classompl_1_1PDF.html</filename>
    <member kind="function">
      <type></type>
      <name>PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ae06cfb65d4f89b2addffc958db09dd82</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a5b46002df3734b53e8340a031ec081cc</anchor>
      <arglist>(const std::vector&lt; ompl::geometric::EST::Motion * &gt; &amp;d, const std::vector&lt; double &gt; &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a9f6f99197d8379496126a1a48021d149</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Element * &gt; &amp;</type>
      <name>getElements</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a29fb4c88ce0dee0d6bc4b409fe2898ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>add</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ae0e20ec9697abbbff4eb5ca7f06c04f7</anchor>
      <arglist>(const ompl::geometric::EST::Motion * &amp;d, const double w)</arglist>
    </member>
    <member kind="function">
      <type>ompl::geometric::EST::Motion * &amp;</type>
      <name>sample</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>aaafdcee8b5e225bcc81006fe5d960440</anchor>
      <arglist>(double r) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a5a6869bcc93cf5b5483048cd26dcb635</anchor>
      <arglist>(Element *elem, const double w)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWeight</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a298671738fdadeecf4c5aa4ba3c947ab</anchor>
      <arglist>(const Element *elem) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>abb42f3f0ae997173f6d4368c5d5aec6e</anchor>
      <arglist>(Element *elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>acaa1582a3143b6d282186d6c75dd8cf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ad590bf20b34d4e87a5d220ff52d6973d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ompl::geometric::EST::Motion * &amp;</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ad8be9b35371beadd6a8d5cd636d44039</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a2f35456fba983f70cd62e1d75174662d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printTree</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ac1c19cac51e316a6db3266686c794d41</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PlanarManipTaskSpaceConfig</name>
    <filename>classPlanarManipTaskSpaceConfig.html</filename>
    <base>ompl::geometric::TaskSpaceConfig</base>
  </compound>
  <compound kind="class">
    <name>PlanarManipulator</name>
    <filename>classPlanarManipulator.html</filename>
  </compound>
  <compound kind="class">
    <name>PlanarManipulatorCollisionChecker</name>
    <filename>classPlanarManipulatorCollisionChecker.html</filename>
    <base>ompl::base::StateValidityChecker</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isValid</name>
      <anchorfile>classPlanarManipulatorCollisionChecker.html</anchorfile>
      <anchor>a9a8057f0aff04d0591702a22db2adbfe</anchor>
      <arglist>(const ompl::base::State *state) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PlanarManipulatorIKGoal</name>
    <filename>classPlanarManipulatorIKGoal.html</filename>
    <base>ompl::base::GoalLazySamples</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>distanceGoal</name>
      <anchorfile>classPlanarManipulatorIKGoal.html</anchorfile>
      <anchor>a24e30d96287e7723c0ee4bb7e7d105f6</anchor>
      <arglist>(const ompl::base::State *st) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PlanarManipulatorStateSpace</name>
    <filename>classPlanarManipulatorStateSpace.html</filename>
    <base>ompl::base::RealVectorStateSpace</base>
  </compound>
  <compound kind="class">
    <name>PMXXLDecomposition</name>
    <filename>classPMXXLDecomposition.html</filename>
    <base>ompl::geometric::XXLPlanarDecomposition</base>
    <member kind="function">
      <type></type>
      <name>PMXXLDecomposition</name>
      <anchorfile>classPMXXLDecomposition.html</anchorfile>
      <anchor>a3ab827755edeceafbbd05dfb7a07349f</anchor>
      <arglist>(ompl::base::SpaceInformationPtr si, const PlanarManipulator *manip, const ompl::base::RealVectorBounds &amp;xyBounds, const std::vector&lt; int &gt; &amp;xySlices, const int thetaSlices, std::vector&lt; int &gt; &amp;projectedJoints, bool diagonalEdges)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>numLayers</name>
      <anchorfile>classPMXXLDecomposition.html</anchorfile>
      <anchor>a017e09e885e19a129d21412c6c6522d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>sampleFromRegion</name>
      <anchorfile>classPMXXLDecomposition.html</anchorfile>
      <anchor>af362409b080e5372a5ca6c53c523cc5a</anchor>
      <arglist>(int r, ompl::base::State *s, const ompl::base::State *seed=nullptr) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>sampleFromRegion</name>
      <anchorfile>classPMXXLDecomposition.html</anchorfile>
      <anchor>a94a8148b4cda2c20822f9e387bbeabd6</anchor>
      <arglist>(int r, ompl::base::State *s, const ompl::base::State *seed, int layer) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>project</name>
      <anchorfile>classPMXXLDecomposition.html</anchorfile>
      <anchor>a60645858805295437847dacd7f69f5b2</anchor>
      <arglist>(const ompl::base::State *s, std::vector&lt; double &gt; &amp;coord, int layer=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>project</name>
      <anchorfile>classPMXXLDecomposition.html</anchorfile>
      <anchor>a39c19acbab418c3774d9048fe21085f8</anchor>
      <arglist>(const ompl::base::State *s, std::vector&lt; int &gt; &amp;layers) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Point2DPlanning::Plane2DEnvironment</name>
    <filename>classPoint2DPlanning_1_1Plane2DEnvironment.html</filename>
  </compound>
  <compound kind="class">
    <name>PolyWorld</name>
    <filename>classPolyWorld.html</filename>
  </compound>
  <compound kind="class">
    <name>SamplerSelector&lt; ompl::base::StateSampler &gt;</name>
    <filename>structompl_1_1base_1_1SamplerSelector.html</filename>
  </compound>
  <compound kind="class">
    <name>SamplerSelector&lt; ompl::base::ValidStateSampler &gt;</name>
    <filename>structompl_1_1base_1_1SamplerSelector.html</filename>
  </compound>
  <compound kind="struct">
    <name>Segment</name>
    <filename>structSegment.html</filename>
  </compound>
  <compound kind="class">
    <name>StateSamplerArray&lt; ompl::base::StateSampler &gt;</name>
    <filename>classompl_1_1base_1_1StateSamplerArray.html</filename>
    <member kind="typedef">
      <type>typename SamplerSelector&lt; ompl::base::StateSampler &gt;::SamplerPtr</type>
      <name>SamplerPtr</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>a7a9d75d8d7b40996bde5642fea18dc29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename SamplerSelector&lt; ompl::base::StateSampler &gt;::Sampler</type>
      <name>Sampler</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>aca7f99bda51091573e4eaf377f867d49</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateSamplerArray</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>a5d9c7fc2ef129b81f4f4b350b4c1faf8</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateSamplerArray</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>a4b2695cf7992fe63c9364b7df8ef18d3</anchor>
      <arglist>(const SpaceInformation *si)</arglist>
    </member>
    <member kind="function">
      <type>Sampler *</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>ab8bf640ce48d3071435a37a9b090566c</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>aee87211c80826b2fddf610bf213f0a9e</anchor>
      <arglist>(std::size_t count)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>ab524ec36b8574db4d1dde92496974a28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>a8d28df7c315cfec6047dc60dcb78b8f7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StateSamplerArray&lt; ompl::base::ValidStateSampler &gt;</name>
    <filename>classompl_1_1base_1_1StateSamplerArray.html</filename>
    <member kind="typedef">
      <type>typename SamplerSelector&lt; ompl::base::ValidStateSampler &gt;::SamplerPtr</type>
      <name>SamplerPtr</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>a7a9d75d8d7b40996bde5642fea18dc29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename SamplerSelector&lt; ompl::base::ValidStateSampler &gt;::Sampler</type>
      <name>Sampler</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>aca7f99bda51091573e4eaf377f867d49</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateSamplerArray</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>a5d9c7fc2ef129b81f4f4b350b4c1faf8</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateSamplerArray</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>a4b2695cf7992fe63c9364b7df8ef18d3</anchor>
      <arglist>(const SpaceInformation *si)</arglist>
    </member>
    <member kind="function">
      <type>Sampler *</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>ab8bf640ce48d3071435a37a9b090566c</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>aee87211c80826b2fddf610bf213f0a9e</anchor>
      <arglist>(std::size_t count)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>ab524ec36b8574db4d1dde92496974a28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>a8d28df7c315cfec6047dc60dcb78b8f7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; std::pair&lt; U, V &gt; &gt;</name>
    <filename>structstd_1_1hash_3_01std_1_1pair_3_01U_00_01V_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; std::vector&lt; T &gt; &gt;</name>
    <filename>structstd_1_1hash_3_01std_1_1vector_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="namespace">
    <name>ompl</name>
    <filename>namespaceompl.html</filename>
    <namespace>ompl::base</namespace>
    <namespace>ompl::control</namespace>
    <namespace>ompl::geometric</namespace>
    <namespace>ompl::machine</namespace>
    <namespace>ompl::magic</namespace>
    <namespace>ompl::msg</namespace>
    <namespace>ompl::time</namespace>
    <namespace>ompl::tools</namespace>
    <class kind="class">ompl::AdjacencyList</class>
    <class kind="class">ompl::BinaryHeap</class>
    <class kind="class">ompl::DynamicSSSP</class>
    <class kind="class">ompl::Exception</class>
    <class kind="class">ompl::FLANNDistance</class>
    <class kind="class">ompl::GreedyKCenters</class>
    <class kind="class">ompl::Grid</class>
    <class kind="class">ompl::GridB</class>
    <class kind="class">ompl::GridN</class>
    <class kind="class">ompl::LPAstarOnGraph</class>
    <class kind="class">ompl::NearestNeighbors</class>
    <class kind="class">ompl::NearestNeighborsFLANN</class>
    <class kind="class">ompl::NearestNeighborsFLANNHierarchicalClustering</class>
    <class kind="class">ompl::NearestNeighborsFLANNLinear</class>
    <class kind="class">ompl::NearestNeighborsGNAT</class>
    <class kind="class">ompl::NearestNeighborsGNATNoThreadSafety</class>
    <class kind="class">ompl::NearestNeighborsLinear</class>
    <class kind="class">ompl::NearestNeighborsSqrtApprox</class>
    <class kind="class">ompl::PDF</class>
    <class kind="class">ompl::Permutation</class>
    <class kind="class">ompl::PPM</class>
    <class kind="class">ompl::ProlateHyperspheroid</class>
    <class kind="class">ompl::RNG</class>
    <member kind="function">
      <type>double</type>
      <name>nBallMeasure</name>
      <anchorfile>namespaceompl.html</anchorfile>
      <anchor>a233b299e1ff503752e7c0bebef59ac54</anchor>
      <arglist>(unsigned int N, double r)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unitNBallMeasure</name>
      <anchorfile>namespaceompl.html</anchorfile>
      <anchor>ac07d992fd77292786e9cdc9a0cadaeb0</anchor>
      <arglist>(unsigned int N)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>prolateHyperspheroidMeasure</name>
      <anchorfile>namespaceompl.html</anchorfile>
      <anchor>a6c1f0987bd0b549658bd65925d03e3e9</anchor>
      <arglist>(unsigned int N, double dFoci, double dTransverse)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>stof</name>
      <anchorfile>namespaceompl.html</anchorfile>
      <anchor>ab065cf50eed9ea179f2bf841f0a7b859</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stod</name>
      <anchorfile>namespaceompl.html</anchorfile>
      <anchor>ab649cb537776c3a149bca7cf7f7c51c2</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>stold</name>
      <anchorfile>namespaceompl.html</anchorfile>
      <anchor>ab0cd45938b2dc3d9fce58a601ad37b87</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>namespaceompl.html</anchorfile>
      <anchor>a6e6c38ce80fbb8f10d826bb19b64735a</anchor>
      <arglist>(float val)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>namespaceompl.html</anchorfile>
      <anchor>af6ea1e987fc83522088e39df1f36696b</anchor>
      <arglist>(double val)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>namespaceompl.html</anchorfile>
      <anchor>aa5f03752d2f5bb0784301647d9b31183</anchor>
      <arglist>(long double val)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ompl::base</name>
    <filename>namespaceompl_1_1base.html</filename>
    <class kind="class">ompl::base::AllValidStateValidityChecker</class>
    <class kind="class">ompl::base::AtlasChart</class>
    <class kind="class">ompl::base::AtlasStateSampler</class>
    <class kind="class">ompl::base::AtlasStateSpace</class>
    <class kind="class">ompl::base::BridgeTestValidStateSampler</class>
    <class kind="class">ompl::base::CForestStateSampler</class>
    <class kind="class">ompl::base::CForestStateSpaceWrapper</class>
    <class kind="class">ompl::base::CompoundState</class>
    <class kind="class">ompl::base::CompoundStateSampler</class>
    <class kind="class">ompl::base::CompoundStateSpace</class>
    <class kind="class">ompl::base::ConstrainedMotionValidator</class>
    <class kind="class">ompl::base::ConstrainedSpaceInformation</class>
    <class kind="class">ompl::base::ConstrainedStateSpace</class>
    <class kind="class">ompl::base::ConstrainedValidStateSampler</class>
    <class kind="class">ompl::base::Constraint</class>
    <class kind="class">ompl::base::ConstraintIntersection</class>
    <class kind="class">ompl::base::ConstraintObjective</class>
    <class kind="class">ompl::base::Cost</class>
    <class kind="class">ompl::base::CostConvergenceTerminationCondition</class>
    <class kind="class">ompl::base::DeterministicSequence</class>
    <class kind="class">ompl::base::DeterministicStateSampler</class>
    <class kind="class">ompl::base::DiscreteMotionValidator</class>
    <class kind="class">ompl::base::DiscreteStateSampler</class>
    <class kind="class">ompl::base::DiscreteStateSpace</class>
    <class kind="class">ompl::base::DubinsMotionValidator</class>
    <class kind="class">ompl::base::DubinsStateSpace</class>
    <class kind="class">ompl::base::GaussianValidStateSampler</class>
    <class kind="class">ompl::base::GenericParam</class>
    <class kind="class">ompl::base::Goal</class>
    <class kind="class">ompl::base::GoalLazySamples</class>
    <class kind="class">ompl::base::GoalRegion</class>
    <class kind="class">ompl::base::GoalSampleableRegion</class>
    <class kind="class">ompl::base::GoalSpace</class>
    <class kind="class">ompl::base::GoalState</class>
    <class kind="class">ompl::base::GoalStates</class>
    <class kind="class">ompl::base::HaltonSequence</class>
    <class kind="class">ompl::base::HaltonSequence1D</class>
    <class kind="class">ompl::base::InformedSampler</class>
    <class kind="class">ompl::base::InformedStateSampler</class>
    <class kind="class">ompl::base::IterationTerminationCondition</class>
    <class kind="class">ompl::base::MaximizeClearanceValidStateSampler</class>
    <class kind="class">ompl::base::MaximizeMinClearanceObjective</class>
    <class kind="class">ompl::base::MechanicalWorkOptimizationObjective</class>
    <class kind="class">ompl::base::MinimaxObjective</class>
    <class kind="class">ompl::base::MinimumClearanceValidStateSampler</class>
    <class kind="class">ompl::base::MorseEnvironment</class>
    <class kind="class">ompl::base::MorseGoal</class>
    <class kind="class">ompl::base::MorseProjection</class>
    <class kind="class">ompl::base::MorseStateSpace</class>
    <class kind="class">ompl::base::MorseStateValidityChecker</class>
    <class kind="class">ompl::base::MorseTerminationCondition</class>
    <class kind="class">ompl::base::MotionValidator</class>
    <class kind="class">ompl::base::MultiOptimizationObjective</class>
    <class kind="class">ompl::base::ObstacleBasedValidStateSampler</class>
    <class kind="class">ompl::base::OptimizationObjective</class>
    <class kind="class">ompl::base::OrderedInfSampler</class>
    <class kind="class">ompl::base::ParamSet</class>
    <class kind="class">ompl::base::Path</class>
    <class kind="class">ompl::base::PathLengthDirectInfSampler</class>
    <class kind="class">ompl::base::PathLengthOptimizationObjective</class>
    <class kind="class">ompl::base::Planner</class>
    <class kind="class">ompl::base::PlannerData</class>
    <class kind="class">ompl::base::PlannerDataEdge</class>
    <class kind="class">ompl::base::PlannerDataStorage</class>
    <class kind="class">ompl::base::PlannerDataVertex</class>
    <class kind="class">ompl::base::PlannerDataVertexAnnotated</class>
    <class kind="class">ompl::base::PlannerInputStates</class>
    <class kind="struct">ompl::base::PlannerSolution</class>
    <class kind="struct">ompl::base::PlannerSpecs</class>
    <class kind="struct">ompl::base::PlannerStatus</class>
    <class kind="class">ompl::base::PlannerTerminationCondition</class>
    <class kind="class">ompl::base::PrecomputedSequence</class>
    <class kind="class">ompl::base::PrecomputedStateSampler</class>
    <class kind="class">ompl::base::ProblemDefinition</class>
    <class kind="class">ompl::base::ProjectedStateSampler</class>
    <class kind="class">ompl::base::ProjectedStateSpace</class>
    <class kind="class">ompl::base::ProjectionEvaluator</class>
    <class kind="class">ompl::base::ProjectionMatrix</class>
    <class kind="class">ompl::base::RealVectorBounds</class>
    <class kind="class">ompl::base::RealVectorDeterministicStateSampler</class>
    <class kind="class">ompl::base::RealVectorIdentityProjectionEvaluator</class>
    <class kind="class">ompl::base::RealVectorLinearProjectionEvaluator</class>
    <class kind="class">ompl::base::RealVectorOrthogonalProjectionEvaluator</class>
    <class kind="class">ompl::base::RealVectorRandomLinearProjectionEvaluator</class>
    <class kind="class">ompl::base::RealVectorStateSampler</class>
    <class kind="class">ompl::base::RealVectorStateSpace</class>
    <class kind="class">ompl::base::ReedsSheppMotionValidator</class>
    <class kind="class">ompl::base::ReedsSheppStateSpace</class>
    <class kind="class">ompl::base::RejectionInfSampler</class>
    <class kind="struct">ompl::base::SamplerSelector</class>
    <class kind="class">ompl::base::ScopedState</class>
    <class kind="class">ompl::base::SE2DeterministicStateSampler</class>
    <class kind="class">ompl::base::SE2StateSpace</class>
    <class kind="class">ompl::base::SE3StateSpace</class>
    <class kind="class">ompl::base::SO2DeterministicStateSampler</class>
    <class kind="class">ompl::base::SO2StateSampler</class>
    <class kind="class">ompl::base::SO2StateSpace</class>
    <class kind="class">ompl::base::SO3StateSampler</class>
    <class kind="class">ompl::base::SO3StateSpace</class>
    <class kind="class">ompl::base::SolutionNonExistenceProof</class>
    <class kind="class">ompl::base::SpaceInformation</class>
    <class kind="class">ompl::base::SpecificParam</class>
    <class kind="class">ompl::base::State</class>
    <class kind="class">ompl::base::StateCostIntegralObjective</class>
    <class kind="class">ompl::base::StateSampler</class>
    <class kind="class">ompl::base::StateSamplerArray</class>
    <class kind="class">ompl::base::StateSpace</class>
    <class kind="class">ompl::base::StateStorage</class>
    <class kind="class">ompl::base::StateStorageWithMetadata</class>
    <class kind="class">ompl::base::StateValidityChecker</class>
    <class kind="struct">ompl::base::StateValidityCheckerSpecs</class>
    <class kind="class">ompl::base::SubspaceProjectionEvaluator</class>
    <class kind="class">ompl::base::SubspaceStateSampler</class>
    <class kind="class">ompl::base::TangentBundleSpaceInformation</class>
    <class kind="class">ompl::base::TangentBundleStateSpace</class>
    <class kind="class">ompl::base::TimeStateSampler</class>
    <class kind="class">ompl::base::TimeStateSpace</class>
    <class kind="class">ompl::base::TypedSpaceInformation</class>
    <class kind="class">ompl::base::TypedStateValidityChecker</class>
    <class kind="class">ompl::base::UniformValidStateSampler</class>
    <class kind="class">ompl::base::ValidStateSampler</class>
    <class kind="class">ompl::base::VFMechanicalWorkOptimizationObjective</class>
    <class kind="class">ompl::base::VFUpstreamCriterionOptimizationObjective</class>
    <class kind="class">ompl::base::WrapperProjectionEvaluator</class>
    <class kind="class">ompl::base::WrapperStateSampler</class>
    <class kind="class">ompl::base::WrapperStateSpace</class>
    <member kind="typedef">
      <type>std::function&lt; bool(const GoalLazySamples *, State *)&gt;</type>
      <name>GoalSamplingFn</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a48de5cc2d74ab81ac4d302045ed5f06b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; Cost(const State *, const Goal *)&gt;</type>
      <name>CostToGoHeuristic</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a283e06df73e9f4dd5e6774c19b0b5ed5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; PlannerPtr(const SpaceInformationPtr &amp;)&gt;</type>
      <name>PlannerAllocator</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a301d8c702c92a85d73832f79cb989ee5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; bool()&gt;</type>
      <name>PlannerTerminationConditionFn</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a5c218cde462780a4502dfc561708e903</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(const Planner *, const std::vector&lt; const base::State * &gt; &amp;, const Cost)&gt;</type>
      <name>ReportIntermediateSolutionFn</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a2654ca90af54f839e5aa8936f1e23351</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ScopedState&lt;&gt; &gt;</type>
      <name>ScopedStatePtr</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a1de6e14c387f69a1f6c0ea4e6109464f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; bool(const State *)&gt;</type>
      <name>StateValidityCheckerFn</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a7cd31d19ef5b789b0bff97bf6e249ebf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; StateSamplerPtr(const StateSpace *)&gt;</type>
      <name>StateSamplerAllocator</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a729f324a0a979bd7087e3d279bbdd77e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>StateStorageWithMetadata&lt; std::vector&lt; std::size_t &gt; &gt;</type>
      <name>GraphStateStorage</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>aeb8d5c8d351d2337f79cabe4ee1f51dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; ValidStateSamplerPtr(const SpaceInformation *)&gt;</type>
      <name>ValidStateSamplerAllocator</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>afe1d1e8c2e70b9876dd5621027eb19f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>GoalType</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a1620a159019faf720c550eeca5723f55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GOAL_ANY</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a1620a159019faf720c550eeca5723f55a63728e6f4a505262163e918202bd1785</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GOAL_REGION</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a1620a159019faf720c550eeca5723f55a45bf52626bee439d29a04158d867a979</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GOAL_SAMPLEABLE_REGION</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a1620a159019faf720c550eeca5723f55a6fb685fa51055688c4e130094225b7f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GOAL_STATE</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a1620a159019faf720c550eeca5723f55a451d783254d6bb398c15495e87bc1b86</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GOAL_STATES</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a1620a159019faf720c550eeca5723f55a80679771e14cf79b8baf3e5ecae20142</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GOAL_LAZY_SAMPLES</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a1620a159019faf720c550eeca5723f55a15dee78752265020cab91cf866fee69d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>AdvancedStateCopyOperation</name>
      <anchorfile>group__advancedStateCopy.html</anchorfile>
      <anchor>gaa66678b1f585228b1da65ed979c98211</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_DATA_COPIED</name>
      <anchorfile>group__advancedStateCopy.html</anchorfile>
      <anchor>ggaa66678b1f585228b1da65ed979c98211a6a78901c9c5abb5764843684670e231d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOME_DATA_COPIED</name>
      <anchorfile>group__advancedStateCopy.html</anchorfile>
      <anchor>ggaa66678b1f585228b1da65ed979c98211a6068072d46749cddb0526c9f2eb9796b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALL_DATA_COPIED</name>
      <anchorfile>group__advancedStateCopy.html</anchorfile>
      <anchor>ggaa66678b1f585228b1da65ed979c98211a1dde9fa1931003165d3821f133337e69</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>StateSpaceType</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a056b022e14fe04a75f81789947353920</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_SPACE_UNKNOWN</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a056b022e14fe04a75f81789947353920a4247bd6859b13c6482caed7f9dd9996d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_SPACE_REAL_VECTOR</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a056b022e14fe04a75f81789947353920abb95f16481daa006d055bad7060b8fbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_SPACE_SO2</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a056b022e14fe04a75f81789947353920aca07fe8d9ce9fe45ad5d1b2d90c8c1fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_SPACE_SO3</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a056b022e14fe04a75f81789947353920ae9ec8f7cf5204246a32a44768d843fb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_SPACE_SE2</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a056b022e14fe04a75f81789947353920a197336a12b06210c42899c5b53c298b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_SPACE_SE3</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a056b022e14fe04a75f81789947353920acc8d4a06096c378b5473fe4caf8171f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_SPACE_TIME</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a056b022e14fe04a75f81789947353920afc515ecf796d311c9ae7ae879fb63158</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_SPACE_DISCRETE</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a056b022e14fe04a75f81789947353920a56b36a6f5b0a8ae48be0baa7e348def3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_SPACE_TYPE_COUNT</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a056b022e14fe04a75f81789947353920aa011308faae02860d3e6fe26be28c167</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a5708f022c6261accef3b9c0fb4d96f90</anchor>
      <arglist>(std::ostream &amp;stream, Cost c)</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>goalRegionCostToGo</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a009050ed9b663bc4d6d4dbbee94c40b8</anchor>
      <arglist>(const State *state, const Goal *goal)</arglist>
    </member>
    <member kind="function">
      <type>OptimizationObjectivePtr</type>
      <name>operator+</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a5ac52d1250b648cdc3ae2ae59591f52f</anchor>
      <arglist>(const OptimizationObjectivePtr &amp;a, const OptimizationObjectivePtr &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>OptimizationObjectivePtr</type>
      <name>operator*</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>aba3369908c62475f826046ed5b3e934e</anchor>
      <arglist>(double weight, const OptimizationObjectivePtr &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>OptimizationObjectivePtr</type>
      <name>operator*</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>af27331877d933e19efeb2fe603a69c1a</anchor>
      <arglist>(const OptimizationObjectivePtr &amp;a, double weight)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>aec89bfe00ba3673d7488252b4267ed0d</anchor>
      <arglist>(std::ostream &amp;out, const PlannerStatus &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>PlannerTerminationCondition</type>
      <name>plannerNonTerminatingCondition</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a9ffbc7124ed20dc1331a8c6f40a8f05e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PlannerTerminationCondition</type>
      <name>plannerAlwaysTerminatingCondition</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a1125deb13109d3f27b3acab34d79c09c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PlannerTerminationCondition</type>
      <name>plannerOrTerminationCondition</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a743743b4754208eb83ecb3ab20e4df4c</anchor>
      <arglist>(const PlannerTerminationCondition &amp;c1, const PlannerTerminationCondition &amp;c2)</arglist>
    </member>
    <member kind="function">
      <type>PlannerTerminationCondition</type>
      <name>plannerAndTerminationCondition</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a6fe113eda8e4fb7306a5849f392db50b</anchor>
      <arglist>(const PlannerTerminationCondition &amp;c1, const PlannerTerminationCondition &amp;c2)</arglist>
    </member>
    <member kind="function">
      <type>PlannerTerminationCondition</type>
      <name>timedPlannerTerminationCondition</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>ae26e5f143063be389fba4906d438a381</anchor>
      <arglist>(double duration)</arglist>
    </member>
    <member kind="function">
      <type>PlannerTerminationCondition</type>
      <name>timedPlannerTerminationCondition</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a8344c024db04a8e51f226bf26825d372</anchor>
      <arglist>(time::duration duration)</arglist>
    </member>
    <member kind="function">
      <type>PlannerTerminationCondition</type>
      <name>timedPlannerTerminationCondition</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a4b50516a130c05ecc0e420dd64d6a81e</anchor>
      <arglist>(double duration, double interval)</arglist>
    </member>
    <member kind="function">
      <type>PlannerTerminationCondition</type>
      <name>exactSolnPlannerTerminationCondition</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a71261936b94c44c59a9f26168b30ea1f</anchor>
      <arglist>(const ompl::base::ProblemDefinitionPtr &amp;pdef)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>group__stateAndSpaceOperators.html</anchorfile>
      <anchor>ga7e6a8dfe3e0d56f11807e7817cf1c8c9</anchor>
      <arglist>(std::ostream &amp;out, const ScopedState&lt; T &gt; &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>ScopedState&lt; T &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>group__stateAndSpaceOperators.html</anchorfile>
      <anchor>ga5e5f40dc3239b5a4306609f8df5b8240</anchor>
      <arglist>(ScopedState&lt; T &gt; &amp;to, const ScopedState&lt; Y &gt; &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ScopedState&lt; T &gt; &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>group__stateAndSpaceOperators.html</anchorfile>
      <anchor>gaaf35354f70335067bcea8695958f2867</anchor>
      <arglist>(const ScopedState&lt; T &gt; &amp;from, ScopedState&lt; Y &gt; &amp;to)</arglist>
    </member>
    <member kind="function">
      <type>const ScopedState</type>
      <name>operator^</name>
      <anchorfile>group__stateAndSpaceOperators.html</anchorfile>
      <anchor>ga5d4bd70ea0237a80013a71dc2bb7daf1</anchor>
      <arglist>(const ScopedState&lt; T &gt; &amp;a, const ScopedState&lt; Y &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>AdvancedStateCopyOperation</type>
      <name>copyStateData</name>
      <anchorfile>group__advancedStateCopy.html</anchorfile>
      <anchor>ga26c3eda924eb78902a00170c46400a27</anchor>
      <arglist>(const StateSpacePtr &amp;destS, State *dest, const StateSpacePtr &amp;sourceS, const State *source)</arglist>
    </member>
    <member kind="function">
      <type>AdvancedStateCopyOperation</type>
      <name>copyStateData</name>
      <anchorfile>group__advancedStateCopy.html</anchorfile>
      <anchor>ga12cc0040b196f116961d6cae8a62f5d0</anchor>
      <arglist>(const StateSpace *destS, State *dest, const StateSpace *sourceS, const State *source)</arglist>
    </member>
    <member kind="function">
      <type>AdvancedStateCopyOperation</type>
      <name>copyStateData</name>
      <anchorfile>group__advancedStateCopy.html</anchorfile>
      <anchor>gab3308e05354b6e3e4175edb47d9cc46b</anchor>
      <arglist>(const StateSpacePtr &amp;destS, State *dest, const StateSpacePtr &amp;sourceS, const State *source, const std::vector&lt; std::string &gt; &amp;subspaces)</arglist>
    </member>
    <member kind="function">
      <type>AdvancedStateCopyOperation</type>
      <name>copyStateData</name>
      <anchorfile>group__advancedStateCopy.html</anchorfile>
      <anchor>gae1931f1fa53bb85eadfe033a3fc91d4c</anchor>
      <arglist>(const StateSpace *destS, State *dest, const StateSpace *sourceS, const State *source, const std::vector&lt; std::string &gt; &amp;subspaces)</arglist>
    </member>
    <member kind="function">
      <type>StateSpacePtr</type>
      <name>operator+</name>
      <anchorfile>group__stateAndSpaceOperators.html</anchorfile>
      <anchor>ga1a2a068c3ba88614e32425cf4c493261</anchor>
      <arglist>(const StateSpacePtr &amp;a, const StateSpacePtr &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>StateSpacePtr</type>
      <name>operator-</name>
      <anchorfile>group__stateAndSpaceOperators.html</anchorfile>
      <anchor>ga849c861f1e209144fbab68a95c479eb8</anchor>
      <arglist>(const StateSpacePtr &amp;a, const StateSpacePtr &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>StateSpacePtr</type>
      <name>operator-</name>
      <anchorfile>group__stateAndSpaceOperators.html</anchorfile>
      <anchor>gae1b5c9d6ea57481723cf8a9683a4eabc</anchor>
      <arglist>(const StateSpacePtr &amp;a, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>StateSpacePtr</type>
      <name>operator*</name>
      <anchorfile>group__stateAndSpaceOperators.html</anchorfile>
      <anchor>ga16229a85742bb392d45ea9fdc49d7434</anchor>
      <arglist>(const StateSpacePtr &amp;a, const StateSpacePtr &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ompl::control</name>
    <filename>namespaceompl_1_1control.html</filename>
    <class kind="class">ompl::control::Automaton</class>
    <class kind="class">ompl::control::CompoundControl</class>
    <class kind="class">ompl::control::CompoundControlSampler</class>
    <class kind="class">ompl::control::CompoundControlSpace</class>
    <class kind="class">ompl::control::Control</class>
    <class kind="class">ompl::control::ControlSampler</class>
    <class kind="class">ompl::control::ControlSpace</class>
    <class kind="class">ompl::control::Decomposition</class>
    <class kind="class">ompl::control::DirectedControlSampler</class>
    <class kind="class">ompl::control::DiscreteControlSampler</class>
    <class kind="class">ompl::control::DiscreteControlSpace</class>
    <class kind="class">ompl::control::EST</class>
    <class kind="class">ompl::control::GridDecomposition</class>
    <class kind="class">ompl::control::KPIECE1</class>
    <class kind="class">ompl::control::LTLPlanner</class>
    <class kind="class">ompl::control::LTLProblemDefinition</class>
    <class kind="class">ompl::control::LTLSpaceInformation</class>
    <class kind="class">ompl::control::MorseControlSpace</class>
    <class kind="class">ompl::control::MorseSimpleSetup</class>
    <class kind="class">ompl::control::MorseStatePropagator</class>
    <class kind="class">ompl::control::ODEAdaptiveSolver</class>
    <class kind="class">ompl::control::ODEBasicSolver</class>
    <class kind="class">ompl::control::ODEErrorSolver</class>
    <class kind="class">ompl::control::ODESolver</class>
    <class kind="class">ompl::control::OpenDEControlSpace</class>
    <class kind="class">ompl::control::OpenDEEnvironment</class>
    <class kind="class">ompl::control::OpenDESimpleSetup</class>
    <class kind="class">ompl::control::OpenDEStatePropagator</class>
    <class kind="class">ompl::control::OpenDEStateSpace</class>
    <class kind="class">ompl::control::OpenDEStateValidityChecker</class>
    <class kind="class">ompl::control::PathControl</class>
    <class kind="class">ompl::control::PDST</class>
    <class kind="class">ompl::control::PlannerData</class>
    <class kind="class">ompl::control::PlannerDataEdgeControl</class>
    <class kind="class">ompl::control::PlannerDataStorage</class>
    <class kind="class">ompl::control::ProductGraph</class>
    <class kind="class">ompl::control::PropositionalDecomposition</class>
    <class kind="class">ompl::control::PropositionalTriangularDecomposition</class>
    <class kind="class">ompl::control::RealVectorControlSpace</class>
    <class kind="class">ompl::control::RealVectorControlUniformSampler</class>
    <class kind="class">ompl::control::RRT</class>
    <class kind="class">ompl::control::SimpleDirectedControlSampler</class>
    <class kind="class">ompl::control::SimpleSetup</class>
    <class kind="class">ompl::control::SpaceInformation</class>
    <class kind="class">ompl::control::SST</class>
    <class kind="class">ompl::control::StatePropagator</class>
    <class kind="class">ompl::control::SteeredControlSampler</class>
    <class kind="class">ompl::control::Syclop</class>
    <class kind="class">ompl::control::SyclopEST</class>
    <class kind="class">ompl::control::SyclopRRT</class>
    <class kind="class">ompl::control::TriangularDecomposition</class>
    <class kind="class">ompl::control::World</class>
    <member kind="typedef">
      <type>std::function&lt; ControlSamplerPtr(const ControlSpace *)&gt;</type>
      <name>ControlSamplerAllocator</name>
      <anchorfile>namespaceompl_1_1control.html</anchorfile>
      <anchor>afe1127695e8497f3c41d6666f4706611</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; DirectedControlSamplerPtr(const SpaceInformation *)&gt;</type>
      <name>DirectedControlSamplerAllocator</name>
      <anchorfile>namespaceompl_1_1control.html</anchorfile>
      <anchor>a18cd0b32021fd69410637ee90b49dc5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(const base::State *, const Control *, const double, base::State *)&gt;</type>
      <name>StatePropagatorFn</name>
      <anchorfile>namespaceompl_1_1control.html</anchorfile>
      <anchor>a702e001a3d98ffee40360fbf28ff3a78</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ControlSpaceType</name>
      <anchorfile>namespaceompl_1_1control.html</anchorfile>
      <anchor>a8ef3a914bab4a26743f94faacc68cc4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONTROL_SPACE_UNKNOWN</name>
      <anchorfile>namespaceompl_1_1control.html</anchorfile>
      <anchor>a8ef3a914bab4a26743f94faacc68cc4aa1cbb04754e9842f008148d60f77e1ee7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONTROL_SPACE_REAL_VECTOR</name>
      <anchorfile>namespaceompl_1_1control.html</anchorfile>
      <anchor>a8ef3a914bab4a26743f94faacc68cc4aa32cb7ded005825e33c70249fd37bd8fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONTROL_SPACE_DISCRETE</name>
      <anchorfile>namespaceompl_1_1control.html</anchorfile>
      <anchor>a8ef3a914bab4a26743f94faacc68cc4aa300401d78a0a1dc45f9ce85cbbd544d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONTROL_SPACE_TYPE_COUNT</name>
      <anchorfile>namespaceompl_1_1control.html</anchorfile>
      <anchor>a8ef3a914bab4a26743f94faacc68cc4aa025af6fc6a9e8f1bce95beb83c495747</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ompl::geometric</name>
    <filename>namespaceompl_1_1geometric.html</filename>
    <class kind="class">ompl::geometric::ABITstar</class>
    <class kind="class">ompl::geometric::AITstar</class>
    <class kind="class">ompl::geometric::AnytimePathShortening</class>
    <class kind="class">ompl::geometric::BFMT</class>
    <class kind="class">ompl::geometric::BiEST</class>
    <class kind="class">ompl::geometric::BiRLRT</class>
    <class kind="class">ompl::geometric::BiTRRT</class>
    <class kind="class">ompl::geometric::BITstar</class>
    <class kind="class">ompl::geometric::BKPIECE1</class>
    <class kind="class">ompl::geometric::CForest</class>
    <class kind="class">ompl::geometric::Discretization</class>
    <class kind="class">ompl::geometric::EST</class>
    <class kind="class">ompl::geometric::FMT</class>
    <class kind="class">ompl::geometric::GeneticSearch</class>
    <class kind="class">ompl::geometric::HillClimbing</class>
    <class kind="class">ompl::geometric::InformedRRTstar</class>
    <class kind="class">ompl::geometric::KBoundedStrategy</class>
    <class kind="class">ompl::geometric::KPIECE1</class>
    <class kind="class">ompl::geometric::KStarStrategy</class>
    <class kind="class">ompl::geometric::KStrategy</class>
    <class kind="class">ompl::geometric::LazyLBTRRT</class>
    <class kind="class">ompl::geometric::LazyPRM</class>
    <class kind="class">ompl::geometric::LazyPRMstar</class>
    <class kind="class">ompl::geometric::LazyRRT</class>
    <class kind="class">ompl::geometric::LBKPIECE1</class>
    <class kind="class">ompl::geometric::LBTRRT</class>
    <class kind="class">ompl::geometric::LightningRetrieveRepair</class>
    <class kind="class">ompl::geometric::MultiQuotient</class>
    <class kind="class">ompl::geometric::PathGeometric</class>
    <class kind="class">ompl::geometric::PathHybridization</class>
    <class kind="class">ompl::geometric::PathSimplifier</class>
    <class kind="class">ompl::geometric::PDST</class>
    <class kind="class">ompl::geometric::PRM</class>
    <class kind="class">ompl::geometric::PRMstar</class>
    <class kind="class">ompl::geometric::ProjEST</class>
    <class kind="class">ompl::geometric::pRRT</class>
    <class kind="class">ompl::geometric::pSBL</class>
    <class kind="class">ompl::geometric::QRRTImpl</class>
    <class kind="class">ompl::geometric::QuotientSpace</class>
    <class kind="class">ompl::geometric::QuotientSpaceGraph</class>
    <class kind="class">ompl::geometric::RLRT</class>
    <class kind="class">ompl::geometric::RRT</class>
    <class kind="class">ompl::geometric::RRTConnect</class>
    <class kind="class">ompl::geometric::RRTsharp</class>
    <class kind="class">ompl::geometric::RRTstar</class>
    <class kind="class">ompl::geometric::RRTXstatic</class>
    <class kind="class">ompl::geometric::SBL</class>
    <class kind="class">ompl::geometric::SimpleSetup</class>
    <class kind="class">ompl::geometric::SORRTstar</class>
    <class kind="class">ompl::geometric::SPARS</class>
    <class kind="class">ompl::geometric::SPARSdb</class>
    <class kind="class">ompl::geometric::SPARStwo</class>
    <class kind="class">ompl::geometric::SST</class>
    <class kind="class">ompl::geometric::STRIDE</class>
    <class kind="class">ompl::geometric::TaskSpaceConfig</class>
    <class kind="class">ompl::geometric::ThunderRetrieveRepair</class>
    <class kind="class">ompl::geometric::TRRT</class>
    <class kind="class">ompl::geometric::TSRRT</class>
    <class kind="class">ompl::geometric::VFRRT</class>
    <class kind="class">ompl::geometric::XXL</class>
    <class kind="class">ompl::geometric::XXLDecomposition</class>
    <class kind="class">ompl::geometric::XXLPlanarDecomposition</class>
    <class kind="class">ompl::geometric::XXLPositionDecomposition</class>
    <member kind="typedef">
      <type>ompl::geometric::MultiQuotient&lt; ompl::geometric::QRRTImpl &gt;</type>
      <name>QRRT</name>
      <anchorfile>namespaceompl_1_1geometric.html</anchorfile>
      <anchor>aa11c6b0727b8ff657011cd4a772d8cdc</anchor>
      <arglist></arglist>
      <docanchor file="namespaceompl_1_1geometric.html">QRRT</docanchor>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ompl::machine</name>
    <filename>namespaceompl_1_1machine.html</filename>
    <member kind="typedef">
      <type>unsigned long long</type>
      <name>MemUsage_t</name>
      <anchorfile>namespaceompl_1_1machine.html</anchorfile>
      <anchor>ab382994b8b47d80d0e7a2a7fb16c7a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>MemUsage_t</type>
      <name>getProcessMemoryUsage</name>
      <anchorfile>namespaceompl_1_1machine.html</anchorfile>
      <anchor>a263d0e9d43cd9e10edb468b97f46a198</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getHostname</name>
      <anchorfile>namespaceompl_1_1machine.html</anchorfile>
      <anchor>a72f733ca0ea9660e62e7d78887778494</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getCPUInfo</name>
      <anchorfile>namespaceompl_1_1machine.html</anchorfile>
      <anchor>a75c4da4e42a1de9050a171213135fa26</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ompl::magic</name>
    <filename>namespaceompl_1_1magic.html</filename>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>CONSTRAINT_PROJECTION_TOLERANCE</name>
      <anchorfile>namespaceompl_1_1magic.html</anchorfile>
      <anchor>acf7675c13db11a313003955552b8708c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>CONSTRAINT_PROJECTION_MAX_ITERATIONS</name>
      <anchorfile>namespaceompl_1_1magic.html</anchorfile>
      <anchor>ae5ab55799bfff2e34d89258bfb0a7536</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>DEFAULT_NEAREST_NEIGHBORS_LAZY</name>
      <anchorfile>namespaceompl_1_1magic.html</anchorfile>
      <anchor>a0a89e52c164508dca142f36623fe2759</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>MIN_ADDED_SEGMENTS_FOR_LAZY_OPTIMIZATION</name>
      <anchorfile>namespaceompl_1_1magic.html</anchorfile>
      <anchor>a5ab4f8cb7b6975e069b111de7bd34557</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>MAX_RANDOM_BOUNCE_STEPS</name>
      <anchorfile>namespaceompl_1_1magic.html</anchorfile>
      <anchor>acf09430426a57052295791746f014f12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>ROADMAP_BUILD_TIME</name>
      <anchorfile>namespaceompl_1_1magic.html</anchorfile>
      <anchor>a3497680b3a4a3351ff97f12d813833b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>DEFAULT_NEAREST_NEIGHBORS</name>
      <anchorfile>namespaceompl_1_1magic.html</anchorfile>
      <anchor>a44f09b05d50332500c8b681d441f91d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>VFRRT_MEAN_NORM_SAMPLES</name>
      <anchorfile>namespaceompl_1_1magic.html</anchorfile>
      <anchor>a4cac6a9cef27adb1c435430d84bfca65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>MAX_CLIMB_NO_UPDATE_STEPS</name>
      <anchorfile>namespaceompl_1_1magic.html</anchorfile>
      <anchor>aeaa1ad057b7005ba95ba870756096b62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>GAP_COST_FRACTION</name>
      <anchorfile>namespaceompl_1_1magic.html</anchorfile>
      <anchor>a7579f652397414b97106db5698588348</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>PROJECTION_DIMENSION_SPLITS</name>
      <anchorfile>namespaceompl_1_1magic.html</anchorfile>
      <anchor>a89c2a3791d4d4579c36593a70f00588d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>PROJECTION_EXTENTS_SAMPLES</name>
      <anchorfile>namespaceompl_1_1magic.html</anchorfile>
      <anchor>a481cf3e5cb49a237be7b21dc05fbfeae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>PROJECTION_EXPAND_FACTOR</name>
      <anchorfile>namespaceompl_1_1magic.html</anchorfile>
      <anchor>abb245aac6dafd57e58b371fd89b136e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>MAX_MOTION_LENGTH_AS_SPACE_EXTENT_FRACTION</name>
      <anchorfile>namespaceompl_1_1magic.html</anchorfile>
      <anchor>abfb9e851ce1422c2114373bcf1ed7224</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>COST_MAX_MOTION_LENGTH_AS_SPACE_EXTENT_FRACTION</name>
      <anchorfile>namespaceompl_1_1magic.html</anchorfile>
      <anchor>a3c9c3d6c0ee87fea2dbc5fa7484d15fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>STD_DEV_AS_SPACE_EXTENT_FRACTION</name>
      <anchorfile>namespaceompl_1_1magic.html</anchorfile>
      <anchor>a711b7ddf17029ddcf154a1ecd3d583fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>MAX_VALID_SAMPLE_ATTEMPTS</name>
      <anchorfile>namespaceompl_1_1magic.html</anchorfile>
      <anchor>a22100e2fff9398fce45cfc11e21451f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>FIND_VALID_STATE_ATTEMPTS_WITHOUT_TERMINATION_CHECK</name>
      <anchorfile>namespaceompl_1_1magic.html</anchorfile>
      <anchor>a165c9405d5064e4101020d43163ec822</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>TEST_STATE_COUNT</name>
      <anchorfile>namespaceompl_1_1magic.html</anchorfile>
      <anchor>ad96353c64e790206f36a2fb9b2c7d646</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>NEAREST_K_RECALL_SOLUTIONS</name>
      <anchorfile>namespaceompl_1_1magic.html</anchorfile>
      <anchor>aab27b6368cce8238fff3d0ab01ad08d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ompl::msg</name>
    <filename>namespaceompl_1_1msg.html</filename>
    <class kind="class">ompl::msg::OutputHandler</class>
    <class kind="class">ompl::msg::OutputHandlerFile</class>
    <class kind="class">ompl::msg::OutputHandlerSTD</class>
    <member kind="enumeration">
      <type></type>
      <name>LogLevel</name>
      <anchorfile>namespaceompl_1_1msg.html</anchorfile>
      <anchor>ace832246a7b4bc5a50dde93a7e29a6b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>noOutputHandler</name>
      <anchorfile>namespaceompl_1_1msg.html</anchorfile>
      <anchor>a83e28f524a5576a73bb062523bbdc53d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restorePreviousOutputHandler</name>
      <anchorfile>namespaceompl_1_1msg.html</anchorfile>
      <anchor>ae944620cc2012c5ffe07e8bb6186d28c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useOutputHandler</name>
      <anchorfile>namespaceompl_1_1msg.html</anchorfile>
      <anchor>a66fd8fd39855d4166ff40164fe4d9d6b</anchor>
      <arglist>(OutputHandler *oh)</arglist>
    </member>
    <member kind="function">
      <type>OutputHandler *</type>
      <name>getOutputHandler</name>
      <anchorfile>namespaceompl_1_1msg.html</anchorfile>
      <anchor>a0e9a5d161592281f8caf01b0c8b2e746</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLogLevel</name>
      <anchorfile>namespaceompl_1_1msg.html</anchorfile>
      <anchor>a1c18c4617e713817e0e4fe7dc5c5c864</anchor>
      <arglist>(LogLevel level)</arglist>
    </member>
    <member kind="function">
      <type>LogLevel</type>
      <name>getLogLevel</name>
      <anchorfile>namespaceompl_1_1msg.html</anchorfile>
      <anchor>ad43f0d2a008f25720e8111395c5ff314</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>log</name>
      <anchorfile>namespaceompl_1_1msg.html</anchorfile>
      <anchor>affe7852f27c06f98af7eb2579f1e5350</anchor>
      <arglist>(const char *file, int line, LogLevel level, const char *m,...)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ompl::time</name>
    <filename>namespaceompl_1_1time.html</filename>
    <class kind="class">ompl::time::ProgressDisplay</class>
    <member kind="typedef">
      <type>std::chrono::system_clock::time_point</type>
      <name>point</name>
      <anchorfile>namespaceompl_1_1time.html</anchorfile>
      <anchor>a4bbc20223e0b408d4a59f453a1ae7a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::chrono::system_clock::duration</type>
      <name>duration</name>
      <anchorfile>namespaceompl_1_1time.html</anchorfile>
      <anchor>ae77961d01352b61e3fcd521ec3e5d59a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>point</type>
      <name>now</name>
      <anchorfile>namespaceompl_1_1time.html</anchorfile>
      <anchor>a5da903c529cfbbce79900b7c1cbc6cc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>duration</type>
      <name>seconds</name>
      <anchorfile>namespaceompl_1_1time.html</anchorfile>
      <anchor>acac374ab4374adb207edb38cedb7fbb1</anchor>
      <arglist>(double sec)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>seconds</name>
      <anchorfile>namespaceompl_1_1time.html</anchorfile>
      <anchor>a1257da2e008e9deb3231ac862ab6dd64</anchor>
      <arglist>(const duration &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>as_string</name>
      <anchorfile>namespaceompl_1_1time.html</anchorfile>
      <anchor>ae8d794354a37128403aba90a187fe532</anchor>
      <arglist>(const point &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ompl::tools</name>
    <filename>namespaceompl_1_1tools.html</filename>
    <class kind="class">ompl::tools::Benchmark</class>
    <class kind="class">ompl::tools::DynamicTimeWarp</class>
    <class kind="class">ompl::tools::ExperienceSetup</class>
    <class kind="class">ompl::tools::Lightning</class>
    <class kind="class">ompl::tools::LightningDB</class>
    <class kind="class">ompl::tools::OptimizePlan</class>
    <class kind="class">ompl::tools::ParallelPlan</class>
    <class kind="class">ompl::tools::PlannerMonitor</class>
    <class kind="class">ompl::tools::Profiler</class>
    <class kind="class">ompl::tools::SelfConfig</class>
    <class kind="class">ompl::tools::Thunder</class>
    <class kind="class">ompl::tools::ThunderDB</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ompl::geometric::SPARSdb &gt;</type>
      <name>SPARSdbPtr</name>
      <anchorfile>namespaceompl_1_1tools.html</anchorfile>
      <anchor>a7369c3bd0449509dfc5fcd9a8c5b7bd8</anchor>
      <arglist></arglist>
      <docanchor file="namespaceompl_1_1tools.html">ThunderDB</docanchor>
    </member>
  </compound>
  <compound kind="group">
    <name>demos</name>
    <title>Demos</title>
    <filename>group__demos.html</filename>
  </compound>
  <compound kind="group">
    <name>advancedStateCopy</name>
    <title>Advanced methods for copying states</title>
    <filename>group__advancedStateCopy.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>AdvancedStateCopyOperation</name>
      <anchorfile>group__advancedStateCopy.html</anchorfile>
      <anchor>gaa66678b1f585228b1da65ed979c98211</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_DATA_COPIED</name>
      <anchorfile>group__advancedStateCopy.html</anchorfile>
      <anchor>ggaa66678b1f585228b1da65ed979c98211a6a78901c9c5abb5764843684670e231d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOME_DATA_COPIED</name>
      <anchorfile>group__advancedStateCopy.html</anchorfile>
      <anchor>ggaa66678b1f585228b1da65ed979c98211a6068072d46749cddb0526c9f2eb9796b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALL_DATA_COPIED</name>
      <anchorfile>group__advancedStateCopy.html</anchorfile>
      <anchor>ggaa66678b1f585228b1da65ed979c98211a1dde9fa1931003165d3821f133337e69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>AdvancedStateCopyOperation</type>
      <name>copyStateData</name>
      <anchorfile>group__advancedStateCopy.html</anchorfile>
      <anchor>ga26c3eda924eb78902a00170c46400a27</anchor>
      <arglist>(const StateSpacePtr &amp;destS, State *dest, const StateSpacePtr &amp;sourceS, const State *source)</arglist>
    </member>
    <member kind="function">
      <type>AdvancedStateCopyOperation</type>
      <name>copyStateData</name>
      <anchorfile>group__advancedStateCopy.html</anchorfile>
      <anchor>ga12cc0040b196f116961d6cae8a62f5d0</anchor>
      <arglist>(const StateSpace *destS, State *dest, const StateSpace *sourceS, const State *source)</arglist>
    </member>
    <member kind="function">
      <type>AdvancedStateCopyOperation</type>
      <name>copyStateData</name>
      <anchorfile>group__advancedStateCopy.html</anchorfile>
      <anchor>gab3308e05354b6e3e4175edb47d9cc46b</anchor>
      <arglist>(const StateSpacePtr &amp;destS, State *dest, const StateSpacePtr &amp;sourceS, const State *source, const std::vector&lt; std::string &gt; &amp;subspaces)</arglist>
    </member>
    <member kind="function">
      <type>AdvancedStateCopyOperation</type>
      <name>copyStateData</name>
      <anchorfile>group__advancedStateCopy.html</anchorfile>
      <anchor>gae1931f1fa53bb85eadfe033a3fc91d4c</anchor>
      <arglist>(const StateSpace *destS, State *dest, const StateSpace *sourceS, const State *source, const std::vector&lt; std::string &gt; &amp;subspaces)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>logging</name>
    <title>Logging Macros</title>
    <filename>group__logging.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>OMPL_ERROR</name>
      <anchorfile>group__logging.html</anchorfile>
      <anchor>ga05ad3ae88188e7f248748785afd2b882</anchor>
      <arglist>(fmt,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OMPL_WARN</name>
      <anchorfile>group__logging.html</anchorfile>
      <anchor>gab76357dced39cb468d2061d3358f80a6</anchor>
      <arglist>(fmt,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OMPL_INFORM</name>
      <anchorfile>group__logging.html</anchorfile>
      <anchor>ga04bc36d1b8c57ad7e13a8a48451a3a05</anchor>
      <arglist>(fmt,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OMPL_DEBUG</name>
      <anchorfile>group__logging.html</anchorfile>
      <anchor>ga576d0bc79b521f19c5415f330e2b173d</anchor>
      <arglist>(fmt,...)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>stateAndSpaceOperators</name>
    <title>Operators for States and State Spaces</title>
    <filename>group__stateAndSpaceOperators.html</filename>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>group__stateAndSpaceOperators.html</anchorfile>
      <anchor>ga7e6a8dfe3e0d56f11807e7817cf1c8c9</anchor>
      <arglist>(std::ostream &amp;out, const ScopedState&lt; T &gt; &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>ScopedState&lt; T &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>group__stateAndSpaceOperators.html</anchorfile>
      <anchor>ga5e5f40dc3239b5a4306609f8df5b8240</anchor>
      <arglist>(ScopedState&lt; T &gt; &amp;to, const ScopedState&lt; Y &gt; &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ScopedState&lt; T &gt; &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>group__stateAndSpaceOperators.html</anchorfile>
      <anchor>gaaf35354f70335067bcea8695958f2867</anchor>
      <arglist>(const ScopedState&lt; T &gt; &amp;from, ScopedState&lt; Y &gt; &amp;to)</arglist>
    </member>
    <member kind="function">
      <type>const ScopedState</type>
      <name>operator^</name>
      <anchorfile>group__stateAndSpaceOperators.html</anchorfile>
      <anchor>ga5d4bd70ea0237a80013a71dc2bb7daf1</anchor>
      <arglist>(const ScopedState&lt; T &gt; &amp;a, const ScopedState&lt; Y &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>StateSpacePtr</type>
      <name>operator+</name>
      <anchorfile>group__stateAndSpaceOperators.html</anchorfile>
      <anchor>ga1a2a068c3ba88614e32425cf4c493261</anchor>
      <arglist>(const StateSpacePtr &amp;a, const StateSpacePtr &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>StateSpacePtr</type>
      <name>operator-</name>
      <anchorfile>group__stateAndSpaceOperators.html</anchorfile>
      <anchor>ga849c861f1e209144fbab68a95c479eb8</anchor>
      <arglist>(const StateSpacePtr &amp;a, const StateSpacePtr &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>StateSpacePtr</type>
      <name>operator-</name>
      <anchorfile>group__stateAndSpaceOperators.html</anchorfile>
      <anchor>gae1b5c9d6ea57481723cf8a9683a4eabc</anchor>
      <arglist>(const StateSpacePtr &amp;a, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>StateSpacePtr</type>
      <name>operator*</name>
      <anchorfile>group__stateAndSpaceOperators.html</anchorfile>
      <anchor>ga16229a85742bb392d45ea9fdc49d7434</anchor>
      <arglist>(const StateSpacePtr &amp;a, const StateSpacePtr &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>acknowledgements</name>
    <title>Acknowledgements</title>
    <filename>acknowledgements.html</filename>
    <docanchor file="acknowledgements.html">md_ompl_doc_markdown_acknowledgements</docanchor>
  </compound>
  <compound kind="page">
    <name>benchmark</name>
    <title>How to Benchmark Planners</title>
    <filename>benchmark.html</filename>
    <docanchor file="benchmark.html">md_ompl_doc_markdown_benchmark</docanchor>
    <docanchor file="benchmark.html" title="Writing benchmarking code">benchmark_code</docanchor>
    <docanchor file="benchmark.html" title="Processing the benchmarking log file">benchmark_log</docanchor>
    <docanchor file="benchmark.html" title="Sample benchmark results">benchmark_sample_results</docanchor>
    <docanchor file="benchmark.html" title="The benchmark logfile format">benchmark_logfile_format</docanchor>
    <docanchor file="benchmark.html" title="The benchmark database schema">benchmark_database</docanchor>
  </compound>
  <compound kind="page">
    <name>buildOptions</name>
    <title>Build Options</title>
    <filename>buildOptions.html</filename>
    <docanchor file="buildOptions.html">md_ompl_doc_markdown_buildOptions</docanchor>
  </compound>
  <compound kind="page">
    <name>buildSystem</name>
    <title>Integrate Your Own Code with OMPL&apos;s Build System</title>
    <filename>buildSystem.html</filename>
    <docanchor file="buildSystem.html">md_ompl_doc_markdown_buildSystem</docanchor>
  </compound>
  <compound kind="page">
    <name>citations</name>
    <title>Citations</title>
    <filename>citations.html</filename>
    <docanchor file="citations.html">md_ompl_doc_markdown_citations</docanchor>
  </compound>
  <compound kind="page">
    <name>constrainedPlanning</name>
    <title>Constrained Planning</title>
    <filename>constrainedPlanning.html</filename>
    <docanchor file="constrainedPlanning.html">md_ompl_doc_markdown_constrainedPlanning</docanchor>
  </compound>
  <compound kind="page">
    <name>constrainedPlanningTutorial</name>
    <title>Constrained Planning Tutorial</title>
    <filename>constrainedPlanningTutorial.html</filename>
    <docanchor file="constrainedPlanningTutorial.html">md_ompl_doc_markdown_constrainedPlanningTutorial</docanchor>
  </compound>
  <compound kind="page">
    <name>contrib</name>
    <title>Submit Your Contribution</title>
    <filename>contrib.html</filename>
    <docanchor file="contrib.html">md_ompl_doc_markdown_contrib</docanchor>
  </compound>
  <compound kind="page">
    <name>demos</name>
    <title>Demos</title>
    <filename>demos.html</filename>
    <docanchor file="demos.html">md_ompl_doc_markdown_demos</docanchor>
  </compound>
  <compound kind="page">
    <name>developers</name>
    <title>Developers</title>
    <filename>developers.html</filename>
    <docanchor file="developers.html">md_ompl_doc_markdown_developers</docanchor>
  </compound>
  <compound kind="page">
    <name>education</name>
    <title>Teaching Module on Motion Planning</title>
    <filename>education.html</filename>
    <docanchor file="education.html">md_ompl_doc_markdown_education</docanchor>
  </compound>
  <compound kind="page">
    <name>FAQ</name>
    <title>Frequently Asked Questions</title>
    <filename>FAQ.html</filename>
    <docanchor file="FAQ.html">md_ompl_doc_markdown_FAQ</docanchor>
  </compound>
  <compound kind="page">
    <name>gallery</name>
    <title>Gallery</title>
    <filename>gallery.html</filename>
    <docanchor file="gallery.html">md_ompl_doc_markdown_gallery</docanchor>
    <docanchor file="gallery.html" title="Planning Using OMPL.app">gallery_omplapp</docanchor>
    <docanchor file="gallery.html" title="Class Project from COMP 450 on Path Optimization">gallery_comp450</docanchor>
  </compound>
  <compound kind="page">
    <name>genericPlanning</name>
    <title>Generic Instructions for Setting Up a Planning Context</title>
    <filename>genericPlanning.html</filename>
    <docanchor file="genericPlanning.html">md_ompl_doc_markdown_genericPlanning</docanchor>
  </compound>
  <compound kind="page">
    <name>geometricPlanningSE3</name>
    <title>Geometric Planning for a Rigid Body in 3D</title>
    <filename>geometricPlanningSE3.html</filename>
    <docanchor file="geometricPlanningSE3.html">md_ompl_doc_markdown_geometricPlanningSE3</docanchor>
    <docanchor file="geometricPlanningSE3.html" title="Using the ompl::geometric::SimpleSetup Class">geometricSimpleSetup</docanchor>
    <docanchor file="geometricPlanningSE3.html" title="Without ompl::geometric::SimpleSetup">withoutGeometricSimpleSetup</docanchor>
  </compound>
  <compound kind="page">
    <name>goalRepresentation</name>
    <title>Representing Goals in OMPL</title>
    <filename>goalRepresentation.html</filename>
    <docanchor file="goalRepresentation.html">md_ompl_doc_markdown_goalRepresentation</docanchor>
  </compound>
  <compound kind="page">
    <name>implementingStateSpaces</name>
    <title>Implementing State Spaces</title>
    <filename>implementingStateSpaces.html</filename>
    <docanchor file="implementingStateSpaces.html">md_ompl_doc_markdown_implementingNewStateSpaces</docanchor>
  </compound>
  <compound kind="page">
    <name>installation</name>
    <title>Installation</title>
    <filename>installation.html</filename>
    <docanchor file="installation.html">md_ompl_doc_markdown_installation</docanchor>
  </compound>
  <compound kind="page">
    <name>installPyPlusPlus</name>
    <title>Installation of Py++</title>
    <filename>installPyPlusPlus.html</filename>
    <docanchor file="installPyPlusPlus.html">md_ompl_doc_markdown_installPyPlusPlus</docanchor>
  </compound>
  <compound kind="page">
    <name>integration</name>
    <title>Integration of OMPL in Other Systems</title>
    <filename>integration.html</filename>
    <docanchor file="integration.html">md_ompl_doc_markdown_integration</docanchor>
    <docanchor file="integration.html" title="MoveIt">integration_moveit</docanchor>
    <docanchor file="integration.html" title="OpenRAVE">integration_openrave</docanchor>
    <docanchor file="integration.html" title="CoppelliaSim">integration_copelliasim</docanchor>
    <docanchor file="integration.html" title="MORSE">integration_morse</docanchor>
    <docanchor file="integration.html" title="The Kautham Project">integration_kautham</docanchor>
    <docanchor file="integration.html" title="VEROSIM">integration_verosim</docanchor>
    <docanchor file="integration.html" title="AIKIDO">integration_aikido</docanchor>
    <docanchor file="integration.html" title="EXOTica">integration_exotica</docanchor>
    <docanchor file="integration.html" title="Robotics Library">integration_rl</docanchor>
    <docanchor file="integration.html" title="SIMS">integration_sims</docanchor>
    <docanchor file="integration.html" title="OMPL.app">integration_omplapp</docanchor>
  </compound>
  <compound kind="page">
    <name>license</name>
    <title>License</title>
    <filename>license.html</filename>
    <docanchor file="license.html">md_ompl_doc_markdown_license</docanchor>
  </compound>
  <compound kind="page">
    <name>mailingLists</name>
    <title>Mailing Lists</title>
    <filename>mailingLists.html</filename>
    <docanchor file="mailingLists.html">md_ompl_doc_markdown_mailingLists</docanchor>
  </compound>
  <compound kind="page">
    <name>morse</name>
    <title>Using OMPL with Morse</title>
    <filename>morse.html</filename>
    <docanchor file="morse.html">md_ompl_doc_markdown_morse</docanchor>
    <docanchor file="morse.html" title="Installation">morseInstallation</docanchor>
    <docanchor file="morse.html" title="Quick Start">morseQuickstart</docanchor>
    <docanchor file="morse.html" title="Setting up an environment">morseSettingUpAnEnvironment</docanchor>
    <docanchor file="morse.html" title="Adding robot(s)">morseAddingRobots</docanchor>
    <docanchor file="morse.html" title="Defining the goal">morseGoal</docanchor>
    <docanchor file="morse.html" title="Bounds configuration and planning">morsePlanning</docanchor>
    <docanchor file="morse.html" title="Playback and animation saving">morsePlayback</docanchor>
    <docanchor file="morse.html" title="Rendering animation videos">morseRendering</docanchor>
    <docanchor file="morse.html" title="Advanced tweaks">morseAdvancedTweaks</docanchor>
  </compound>
  <compound kind="page">
    <name>newPlanner</name>
    <title>Implementing a New Motion Planner</title>
    <filename>newPlanner.html</filename>
    <docanchor file="newPlanner.html">md_ompl_doc_markdown_newPlanner</docanchor>
  </compound>
  <compound kind="page">
    <name>odeint</name>
    <title>Using the ODESolver for Planning with Controls</title>
    <filename>odeint.html</filename>
    <docanchor file="odeint.html">md_ompl_doc_markdown_odeint</docanchor>
  </compound>
  <compound kind="page">
    <name>optimalPlanning</name>
    <title>Optimal Planning</title>
    <filename>optimalPlanning.html</filename>
    <docanchor file="optimalPlanning.html">md_ompl_doc_markdown_optimalPlanning</docanchor>
  </compound>
  <compound kind="page">
    <name>optimalPlanningTutorial</name>
    <title>Optimal Planning Tutorial</title>
    <filename>optimalPlanningTutorial.html</filename>
    <docanchor file="optimalPlanningTutorial.html">md_ompl_doc_markdown_optimalPlanningTutorial</docanchor>
  </compound>
  <compound kind="page">
    <name>optimizationObjectivesTutorial</name>
    <title>Optimization Objectives Tutorial</title>
    <filename>optimizationObjectivesTutorial.html</filename>
    <docanchor file="optimizationObjectivesTutorial.html">md_ompl_doc_markdown_optimizationObjectivesTutorial</docanchor>
  </compound>
  <compound kind="page">
    <name>pathVisualization</name>
    <title>Path Visualization</title>
    <filename>pathVisualization.html</filename>
    <docanchor file="pathVisualization.html">md_ompl_doc_markdown_pathVisualization</docanchor>
  </compound>
  <compound kind="page">
    <name>plannerarena</name>
    <title>OMPL Planner Arena</title>
    <filename>plannerarena.html</filename>
    <docanchor file="plannerarena.html">md_ompl_doc_markdown_plannerarena</docanchor>
  </compound>
  <compound kind="page">
    <name>planners</name>
    <title>Available Planners</title>
    <filename>planners.html</filename>
    <docanchor file="planners.html">md_ompl_doc_markdown_planners</docanchor>
    <docanchor file="planners.html" title="Geometric planners">geometric_planners</docanchor>
    <docanchor file="planners.html" title="Control-based planners">control_planners</docanchor>
  </compound>
  <compound kind="page">
    <name>plannerTerminationConditions</name>
    <title>Planner Termination Conditions</title>
    <filename>plannerTerminationConditions.html</filename>
    <docanchor file="plannerTerminationConditions.html">md_ompl_doc_markdown_plannerTerminationConditions</docanchor>
  </compound>
  <compound kind="page">
    <name>projections</name>
    <title>Use of Projections in OMPL</title>
    <filename>projections.html</filename>
    <docanchor file="projections.html">md_ompl_doc_markdown_projections</docanchor>
  </compound>
  <compound kind="page">
    <name>pybindingsPlanner</name>
    <title>Creating Python Bindings for a New Planner</title>
    <filename>pybindingsPlanner.html</filename>
    <docanchor file="pybindingsPlanner.html">md_ompl_doc_markdown_pybindingsPlanner</docanchor>
    <docanchor file="pybindingsPlanner.html" title="Updating the Python binding generation code">pybinding</docanchor>
    <docanchor file="pybindingsPlanner.html" title="Planner parameters">params</docanchor>
  </compound>
  <compound kind="page">
    <name>python</name>
    <title>Python Bindings</title>
    <filename>python.html</filename>
    <docanchor file="python.html">md_ompl_doc_markdown_python</docanchor>
    <docanchor file="python.html" title="Usage of the Python bindings: Good practices">py_good_practices</docanchor>
    <docanchor file="python.html" title="Important differences between C++ and Python">cpp_py_diffs</docanchor>
    <docanchor file="python.html" title="Differences between the C++ and Python API&apos;s">py_api_diffs</docanchor>
    <docanchor file="python.html" title="A simple example">py_example</docanchor>
    <docanchor file="python.html" title="Creating std::function objects from Python functions">pyfunction_to_stdfunction</docanchor>
    <docanchor file="python.html" title="(Re)generating the Python bindings">updating_python_bindings</docanchor>
    <docanchor file="python.html" title="Code generation">binding_code_generation</docanchor>
    <docanchor file="python.html" title="Compiling the Python modules">compile_bindings</docanchor>
    <docanchor file="python.html" title="Forcing CMake to do The Right Thing">bindings_cmake</docanchor>
  </compound>
  <compound kind="page">
    <name>quotientSpacePlanning</name>
    <title>Quotient Space Planning Framework</title>
    <filename>quotientSpacePlanning.html</filename>
    <docanchor file="quotientSpacePlanning.html">md_ompl_doc_markdown_quotientSpacePlanning</docanchor>
  </compound>
  <compound kind="page">
    <name>quotientSpacePlanningTutorial</name>
    <title>QuotientSpace Planning Tutorial</title>
    <filename>quotientSpacePlanningTutorial.html</filename>
    <docanchor file="quotientSpacePlanningTutorial.html">md_ompl_doc_markdown_quotientSpacePlanningTutorial</docanchor>
  </compound>
  <compound kind="page">
    <name>register</name>
    <title>Registration</title>
    <filename>register.html</filename>
    <docanchor file="register.html">md_ompl_doc_markdown_register</docanchor>
  </compound>
  <compound kind="page">
    <name>releaseNotes</name>
    <title>Release Notes</title>
    <filename>releaseNotes.html</filename>
    <docanchor file="releaseNotes.html">md_ompl_doc_markdown_releaseNotes</docanchor>
  </compound>
  <compound kind="page">
    <name>samplers</name>
    <title>Available State Samplers</title>
    <filename>samplers.html</filename>
    <docanchor file="samplers.html">md_ompl_doc_markdown_samplers</docanchor>
  </compound>
  <compound kind="page">
    <name>spaces</name>
    <title>Available Spaces</title>
    <filename>spaces.html</filename>
    <docanchor file="spaces.html">md_ompl_doc_markdown_spaces</docanchor>
  </compound>
  <compound kind="page">
    <name>stateValidation</name>
    <title>State Validity Checking</title>
    <filename>stateValidation.html</filename>
    <docanchor file="stateValidation.html">md_ompl_doc_markdown_stateValidation</docanchor>
  </compound>
  <compound kind="page">
    <name>styleGuide</name>
    <title>OMPL Style Guide</title>
    <filename>styleGuide.html</filename>
    <docanchor file="styleGuide.html">md_ompl_doc_markdown_styleGuide</docanchor>
  </compound>
  <compound kind="page">
    <name>support</name>
    <title>Get Support</title>
    <filename>support.html</filename>
    <docanchor file="support.html">md_ompl_doc_markdown_support</docanchor>
  </compound>
  <compound kind="page">
    <name>thank-you</name>
    <title>Thank you</title>
    <filename>thank-you.html</filename>
  </compound>
  <compound kind="page">
    <name>thirdparty</name>
    <title>Contributions</title>
    <filename>thirdparty.html</filename>
    <docanchor file="thirdparty.html">md_ompl_doc_markdown_thirdparty</docanchor>
  </compound>
  <compound kind="page">
    <name>tutorials</name>
    <title>Tutorials</title>
    <filename>tutorials.html</filename>
    <docanchor file="tutorials.html">md_ompl_doc_markdown_tutorials</docanchor>
  </compound>
  <compound kind="page">
    <name>workingWithStates</name>
    <title>Working with States and State Spaces</title>
    <filename>workingWithStates.html</filename>
    <docanchor file="workingWithStates.html">md_ompl_doc_markdown_workingWithStates</docanchor>
    <docanchor file="workingWithStates.html" title="Allocating memory for states">stateAlloc</docanchor>
    <docanchor file="workingWithStates.html" title="Working with states">stateOps</docanchor>
    <docanchor file="workingWithStates.html" title="Operators for States and State Spaces">stateAndSpaceOperatorsCopy</docanchor>
  </compound>
  <compound kind="page">
    <name>api_overview</name>
    <title>API Overview</title>
    <filename>api_overview.html</filename>
    <docanchor file="api_overview.html">md__Users_mmoll_build_omplapp_Release_doc_api_overview</docanchor>
  </compound>
  <compound kind="page">
    <name>CForest</name>
    <title>CForest Parallelization Framework</title>
    <filename>CForest.html</filename>
    <docanchor file="CForest.html">md__Users_mmoll_build_omplapp_Release_doc_CForest</docanchor>
    <docanchor file="CForest.html" title="CForest in OMPL">cf_ompl</docanchor>
    <docanchor file="CForest.html" title="Main differences with the paper version">cf_diff</docanchor>
    <docanchor file="CForest.html" title="Example">cf_example</docanchor>
    <docanchor file="CForest.html" title="Results">cf_results</docanchor>
    <docanchor file="CForest.html" title="Advanced information">cf_advanced</docanchor>
    <docanchor file="CForest.html" title="Design and implementation details">cf_implementation</docanchor>
    <docanchor file="CForest.html" title="Limitations">cf_limitations</docanchor>
    <docanchor file="CForest.html" title="Make your planner CForest-compatible">cf_compatible</docanchor>
  </compound>
  <compound kind="page">
    <name>download</name>
    <title>Download</title>
    <filename>download.html</filename>
    <docanchor file="download.html">md__Users_mmoll_build_omplapp_Release_doc_ompl_download</docanchor>
    <docanchor file="download.html" title="Repository">download_repos</docanchor>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>The Open Motion Planning Library</title>
    <filename>index.html</filename>
  </compound>
</tagfile>
