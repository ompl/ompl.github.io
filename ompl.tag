<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>Koules.cpp</name>
    <path>/Users/mmoll/omplapp/ompl/demos/Koules/</path>
    <filename>Koules_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>Console.h</name>
    <path>/Users/mmoll/omplapp/ompl/src/ompl/util/</path>
    <filename>Console_8h</filename>
    <class kind="class">ompl::msg::OutputHandler</class>
    <class kind="class">ompl::msg::OutputHandlerSTD</class>
    <class kind="class">ompl::msg::OutputHandlerFile</class>
    <namespace>ompl</namespace>
    <namespace>ompl::msg</namespace>
    <member kind="define">
      <type>#define</type>
      <name>OMPL_ERROR</name>
      <anchorfile>group__logging.html</anchorfile>
      <anchor>ga05ad3ae88188e7f248748785afd2b882</anchor>
      <arglist>(fmt,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OMPL_WARN</name>
      <anchorfile>group__logging.html</anchorfile>
      <anchor>gaf7bb99b62ae59ab21470b11000efd39e</anchor>
      <arglist>(fmt,...)  </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OMPL_INFORM</name>
      <anchorfile>group__logging.html</anchorfile>
      <anchor>ga04bc36d1b8c57ad7e13a8a48451a3a05</anchor>
      <arglist>(fmt,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OMPL_DEBUG</name>
      <anchorfile>group__logging.html</anchorfile>
      <anchor>ga576d0bc79b521f19c5415f330e2b173d</anchor>
      <arglist>(fmt,...)</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LogLevel</name>
      <anchorfile>namespaceompl_1_1msg.html</anchorfile>
      <anchor>ace832246a7b4bc5a50dde93a7e29a6b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>noOutputHandler</name>
      <anchorfile>namespaceompl_1_1msg.html</anchorfile>
      <anchor>a83e28f524a5576a73bb062523bbdc53d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restorePreviousOutputHandler</name>
      <anchorfile>namespaceompl_1_1msg.html</anchorfile>
      <anchor>ae944620cc2012c5ffe07e8bb6186d28c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useOutputHandler</name>
      <anchorfile>namespaceompl_1_1msg.html</anchorfile>
      <anchor>a66fd8fd39855d4166ff40164fe4d9d6b</anchor>
      <arglist>(OutputHandler *oh)</arglist>
    </member>
    <member kind="function">
      <type>OutputHandler *</type>
      <name>getOutputHandler</name>
      <anchorfile>namespaceompl_1_1msg.html</anchorfile>
      <anchor>a0e9a5d161592281f8caf01b0c8b2e746</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLogLevel</name>
      <anchorfile>namespaceompl_1_1msg.html</anchorfile>
      <anchor>a1c18c4617e713817e0e4fe7dc5c5c864</anchor>
      <arglist>(LogLevel level)</arglist>
    </member>
    <member kind="function">
      <type>LogLevel</type>
      <name>getLogLevel</name>
      <anchorfile>namespaceompl_1_1msg.html</anchorfile>
      <anchor>ad43f0d2a008f25720e8111395c5ff314</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>log</name>
      <anchorfile>namespaceompl_1_1msg.html</anchorfile>
      <anchor>affe7852f27c06f98af7eb2579f1e5350</anchor>
      <arglist>(const char *file, int line, LogLevel level, const char *m,...)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AppBase&lt; CONTROL &gt;</name>
    <filename>classompl_1_1app_1_1AppBase.html</filename>
    <base>ompl::geometric::SimpleSetup</base>
    <base>ompl::app::RigidBodyGeometry</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1app_1_1AppBase.html</anchorfile>
      <anchor>ac88168b98fe9016ae4e576c32e938f5c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOptimizationObjectiveAndThreshold</name>
      <anchorfile>classompl_1_1app_1_1AppBase.html</anchorfile>
      <anchor>a8d6e225163649e9dedf0b5543bcbc031</anchor>
      <arglist>(const std::string &amp;objective, double threshold)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AppBase&lt; GEOMETRIC &gt;</name>
    <filename>classompl_1_1app_1_1AppBase.html</filename>
    <base>ompl::geometric::SimpleSetup</base>
    <base>ompl::app::RigidBodyGeometry</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1app_1_1AppBase.html</anchorfile>
      <anchor>ac88168b98fe9016ae4e576c32e938f5c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOptimizationObjectiveAndThreshold</name>
      <anchorfile>classompl_1_1app_1_1AppBase.html</anchorfile>
      <anchor>a8d6e225163649e9dedf0b5543bcbc031</anchor>
      <arglist>(const std::string &amp;objective, double threshold)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BinaryHeap&lt; BiDirMotion *, BiDirMotionCompare &gt;</name>
    <filename>classompl_1_1BinaryHeap.html</filename>
    <member kind="typedef">
      <type>void(*</type>
      <name>EventAfterInsert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ac67b18bc546f538cbb35c3ce8faca33c</anchor>
      <arglist>)(Element *, void *)</arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>EventBeforeRemove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a9fb57c917b899166b0a08e8c6aef0581</anchor>
      <arglist>)(Element *, void *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onAfterInsert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>adb5a517c064a3844a47cc873fddea796</anchor>
      <arglist>(EventAfterInsert event, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onBeforeRemove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a5a6368ea8193cdbf545f8a57dbaf02f5</anchor>
      <arglist>(EventBeforeRemove event, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>addf7a2e9d0cc43dd05659686f58d695f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>top</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>acfd81ffc1a1a446a903d1407beb2da5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a178e694e35e7864834d765a2819256f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a56848811174698cd9a907e1128e6ce02</anchor>
      <arglist>(Element *element)</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>insert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a7712c8909b596a4d12e0080960bd0274</anchor>
      <arglist>(const BiDirMotion * &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a275aa4aab2088b38df1fa2fd2827fffe</anchor>
      <arglist>(const std::vector&lt; BiDirMotion * &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildFrom</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ac8d1b64b5b7d50cd09380bfa14bbc45d</anchor>
      <arglist>(const std::vector&lt; BiDirMotion * &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rebuild</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>acb0b1a3d8a1f5e7852aec45bae1960dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a8114dc53c4239fe0e199106386898ce3</anchor>
      <arglist>(Element *element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a5ba52c2d67cee1c7fde3af666d4cd9ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a262fb851ec3bf4b057f11b76040390af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getContent</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a47cbd6ea3b6aa270825ed29a850ffc30</anchor>
      <arglist>(std::vector&lt; BiDirMotion * &gt; &amp;content) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ad782d92c652443841ebc310d778a22f0</anchor>
      <arglist>(std::vector&lt; BiDirMotion * &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>BiDirMotionCompare &amp;</type>
      <name>getComparisonOperator</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a99e2aec266c1746cf0f16aa763d00d7f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BinaryHeap&lt; CellX *, LessThanExternalCell &gt;</name>
    <filename>classompl_1_1BinaryHeap.html</filename>
    <member kind="typedef">
      <type>void(*</type>
      <name>EventAfterInsert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ac67b18bc546f538cbb35c3ce8faca33c</anchor>
      <arglist>)(Element *, void *)</arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>EventBeforeRemove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a9fb57c917b899166b0a08e8c6aef0581</anchor>
      <arglist>)(Element *, void *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onAfterInsert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>adb5a517c064a3844a47cc873fddea796</anchor>
      <arglist>(EventAfterInsert event, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onBeforeRemove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a5a6368ea8193cdbf545f8a57dbaf02f5</anchor>
      <arglist>(EventBeforeRemove event, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>addf7a2e9d0cc43dd05659686f58d695f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>top</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>acfd81ffc1a1a446a903d1407beb2da5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a178e694e35e7864834d765a2819256f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a56848811174698cd9a907e1128e6ce02</anchor>
      <arglist>(Element *element)</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>insert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a7712c8909b596a4d12e0080960bd0274</anchor>
      <arglist>(const CellX * &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a275aa4aab2088b38df1fa2fd2827fffe</anchor>
      <arglist>(const std::vector&lt; CellX * &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildFrom</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ac8d1b64b5b7d50cd09380bfa14bbc45d</anchor>
      <arglist>(const std::vector&lt; CellX * &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rebuild</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>acb0b1a3d8a1f5e7852aec45bae1960dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a8114dc53c4239fe0e199106386898ce3</anchor>
      <arglist>(Element *element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a5ba52c2d67cee1c7fde3af666d4cd9ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a262fb851ec3bf4b057f11b76040390af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getContent</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a47cbd6ea3b6aa270825ed29a850ffc30</anchor>
      <arglist>(std::vector&lt; CellX * &gt; &amp;content) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ad782d92c652443841ebc310d778a22f0</anchor>
      <arglist>(std::vector&lt; CellX * &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>LessThanExternalCell &amp;</type>
      <name>getComparisonOperator</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a99e2aec266c1746cf0f16aa763d00d7f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BinaryHeap&lt; CellX *, LessThanInternalCell &gt;</name>
    <filename>classompl_1_1BinaryHeap.html</filename>
    <member kind="typedef">
      <type>void(*</type>
      <name>EventAfterInsert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ac67b18bc546f538cbb35c3ce8faca33c</anchor>
      <arglist>)(Element *, void *)</arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>EventBeforeRemove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a9fb57c917b899166b0a08e8c6aef0581</anchor>
      <arglist>)(Element *, void *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onAfterInsert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>adb5a517c064a3844a47cc873fddea796</anchor>
      <arglist>(EventAfterInsert event, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onBeforeRemove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a5a6368ea8193cdbf545f8a57dbaf02f5</anchor>
      <arglist>(EventBeforeRemove event, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>addf7a2e9d0cc43dd05659686f58d695f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>top</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>acfd81ffc1a1a446a903d1407beb2da5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a178e694e35e7864834d765a2819256f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a56848811174698cd9a907e1128e6ce02</anchor>
      <arglist>(Element *element)</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>insert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a7712c8909b596a4d12e0080960bd0274</anchor>
      <arglist>(const CellX * &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a275aa4aab2088b38df1fa2fd2827fffe</anchor>
      <arglist>(const std::vector&lt; CellX * &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildFrom</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ac8d1b64b5b7d50cd09380bfa14bbc45d</anchor>
      <arglist>(const std::vector&lt; CellX * &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rebuild</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>acb0b1a3d8a1f5e7852aec45bae1960dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a8114dc53c4239fe0e199106386898ce3</anchor>
      <arglist>(Element *element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a5ba52c2d67cee1c7fde3af666d4cd9ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a262fb851ec3bf4b057f11b76040390af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getContent</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a47cbd6ea3b6aa270825ed29a850ffc30</anchor>
      <arglist>(std::vector&lt; CellX * &gt; &amp;content) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ad782d92c652443841ebc310d778a22f0</anchor>
      <arglist>(std::vector&lt; CellX * &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>LessThanInternalCell &amp;</type>
      <name>getComparisonOperator</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a99e2aec266c1746cf0f16aa763d00d7f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BinaryHeap&lt; Motion *, MotionCompare &gt;</name>
    <filename>classompl_1_1BinaryHeap.html</filename>
    <member kind="typedef">
      <type>void(*</type>
      <name>EventAfterInsert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ac67b18bc546f538cbb35c3ce8faca33c</anchor>
      <arglist>)(Element *, void *)</arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>EventBeforeRemove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a9fb57c917b899166b0a08e8c6aef0581</anchor>
      <arglist>)(Element *, void *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onAfterInsert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>adb5a517c064a3844a47cc873fddea796</anchor>
      <arglist>(EventAfterInsert event, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onBeforeRemove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a5a6368ea8193cdbf545f8a57dbaf02f5</anchor>
      <arglist>(EventBeforeRemove event, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>addf7a2e9d0cc43dd05659686f58d695f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>top</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>acfd81ffc1a1a446a903d1407beb2da5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a178e694e35e7864834d765a2819256f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a56848811174698cd9a907e1128e6ce02</anchor>
      <arglist>(Element *element)</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>insert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a7712c8909b596a4d12e0080960bd0274</anchor>
      <arglist>(const Motion * &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a275aa4aab2088b38df1fa2fd2827fffe</anchor>
      <arglist>(const std::vector&lt; Motion * &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildFrom</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ac8d1b64b5b7d50cd09380bfa14bbc45d</anchor>
      <arglist>(const std::vector&lt; Motion * &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rebuild</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>acb0b1a3d8a1f5e7852aec45bae1960dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a8114dc53c4239fe0e199106386898ce3</anchor>
      <arglist>(Element *element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a5ba52c2d67cee1c7fde3af666d4cd9ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a262fb851ec3bf4b057f11b76040390af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getContent</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a47cbd6ea3b6aa270825ed29a850ffc30</anchor>
      <arglist>(std::vector&lt; Motion * &gt; &amp;content) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ad782d92c652443841ebc310d778a22f0</anchor>
      <arglist>(std::vector&lt; Motion * &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>MotionCompare &amp;</type>
      <name>getComparisonOperator</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a99e2aec266c1746cf0f16aa763d00d7f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BinaryHeap&lt; ompl::control::PDST::Motion *, ompl::control::PDST::MotionCompare &gt;</name>
    <filename>classompl_1_1BinaryHeap.html</filename>
    <member kind="typedef">
      <type>void(*</type>
      <name>EventAfterInsert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ac67b18bc546f538cbb35c3ce8faca33c</anchor>
      <arglist>)(Element *, void *)</arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>EventBeforeRemove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a9fb57c917b899166b0a08e8c6aef0581</anchor>
      <arglist>)(Element *, void *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onAfterInsert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>adb5a517c064a3844a47cc873fddea796</anchor>
      <arglist>(EventAfterInsert event, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onBeforeRemove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a5a6368ea8193cdbf545f8a57dbaf02f5</anchor>
      <arglist>(EventBeforeRemove event, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>addf7a2e9d0cc43dd05659686f58d695f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>top</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>acfd81ffc1a1a446a903d1407beb2da5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a178e694e35e7864834d765a2819256f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a56848811174698cd9a907e1128e6ce02</anchor>
      <arglist>(Element *element)</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>insert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a7712c8909b596a4d12e0080960bd0274</anchor>
      <arglist>(const ompl::control::PDST::Motion * &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a275aa4aab2088b38df1fa2fd2827fffe</anchor>
      <arglist>(const std::vector&lt; ompl::control::PDST::Motion * &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildFrom</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ac8d1b64b5b7d50cd09380bfa14bbc45d</anchor>
      <arglist>(const std::vector&lt; ompl::control::PDST::Motion * &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rebuild</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>acb0b1a3d8a1f5e7852aec45bae1960dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a8114dc53c4239fe0e199106386898ce3</anchor>
      <arglist>(Element *element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a5ba52c2d67cee1c7fde3af666d4cd9ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a262fb851ec3bf4b057f11b76040390af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getContent</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a47cbd6ea3b6aa270825ed29a850ffc30</anchor>
      <arglist>(std::vector&lt; ompl::control::PDST::Motion * &gt; &amp;content) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ad782d92c652443841ebc310d778a22f0</anchor>
      <arglist>(std::vector&lt; ompl::control::PDST::Motion * &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>ompl::control::PDST::MotionCompare &amp;</type>
      <name>getComparisonOperator</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a99e2aec266c1746cf0f16aa763d00d7f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BinaryHeap&lt; ompl::geometric::PDST::Motion *, ompl::geometric::PDST::MotionCompare &gt;</name>
    <filename>classompl_1_1BinaryHeap.html</filename>
    <member kind="typedef">
      <type>void(*</type>
      <name>EventAfterInsert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ac67b18bc546f538cbb35c3ce8faca33c</anchor>
      <arglist>)(Element *, void *)</arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>EventBeforeRemove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a9fb57c917b899166b0a08e8c6aef0581</anchor>
      <arglist>)(Element *, void *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onAfterInsert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>adb5a517c064a3844a47cc873fddea796</anchor>
      <arglist>(EventAfterInsert event, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onBeforeRemove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a5a6368ea8193cdbf545f8a57dbaf02f5</anchor>
      <arglist>(EventBeforeRemove event, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>addf7a2e9d0cc43dd05659686f58d695f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>top</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>acfd81ffc1a1a446a903d1407beb2da5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a178e694e35e7864834d765a2819256f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a56848811174698cd9a907e1128e6ce02</anchor>
      <arglist>(Element *element)</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>insert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a7712c8909b596a4d12e0080960bd0274</anchor>
      <arglist>(const ompl::geometric::PDST::Motion * &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a275aa4aab2088b38df1fa2fd2827fffe</anchor>
      <arglist>(const std::vector&lt; ompl::geometric::PDST::Motion * &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildFrom</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ac8d1b64b5b7d50cd09380bfa14bbc45d</anchor>
      <arglist>(const std::vector&lt; ompl::geometric::PDST::Motion * &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rebuild</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>acb0b1a3d8a1f5e7852aec45bae1960dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a8114dc53c4239fe0e199106386898ce3</anchor>
      <arglist>(Element *element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a5ba52c2d67cee1c7fde3af666d4cd9ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a262fb851ec3bf4b057f11b76040390af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getContent</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a47cbd6ea3b6aa270825ed29a850ffc30</anchor>
      <arglist>(std::vector&lt; ompl::geometric::PDST::Motion * &gt; &amp;content) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ad782d92c652443841ebc310d778a22f0</anchor>
      <arglist>(std::vector&lt; ompl::geometric::PDST::Motion * &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>ompl::geometric::PDST::MotionCompare &amp;</type>
      <name>getComparisonOperator</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a99e2aec266c1746cf0f16aa763d00d7f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Discretization&lt; ompl::geometric::BKPIECE1::Motion &gt;</name>
    <filename>classompl_1_1geometric_1_1Discretization.html</filename>
    <member kind="typedef">
      <type>GridB&lt; CellData *, OrderCellsByImportance &gt;</type>
      <name>Grid</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>ac21186181755603cb91938f280e9dbc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::Cell</type>
      <name>Cell</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a810ca49dd7278f5699560d2af1a4bc26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::Coord</type>
      <name>Coord</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a685f1b61176111a7a248f20350f421e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(ompl::geometric::BKPIECE1::Motion *)&gt;</type>
      <name>FreeMotionFn</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a4751b8382ffd0a524df59aea6312c3fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderFraction</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>aac6dfc7acc8db082a84b7bbdadb78e87</anchor>
      <arglist>(double bp)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBorderFraction</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>aede8396b50f3e68cb8de595adbf036a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimension</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>acfdbc5b059330490b55185dda00f0eb1</anchor>
      <arglist>(unsigned int dim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a43c29d951fd5206e08a33931b02c4ddc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a28df4ebd2c0d78eab8b4fc72c6f27d43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>addMotion</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a6ac71e099d8a69dc6c2ee5ff1736a277</anchor>
      <arglist>(ompl::geometric::BKPIECE1::Motion *motion, const Coord &amp;coord, double dist=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selectMotion</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a8db183fa4a3231509336ffb7057805df</anchor>
      <arglist>(ompl::geometric::BKPIECE1::Motion *&amp;smotion, Cell *&amp;scell)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Discretization&lt; ompl::geometric::KPIECE1::Motion &gt;</name>
    <filename>classompl_1_1geometric_1_1Discretization.html</filename>
    <member kind="typedef">
      <type>GridB&lt; CellData *, OrderCellsByImportance &gt;</type>
      <name>Grid</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>ac21186181755603cb91938f280e9dbc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::Cell</type>
      <name>Cell</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a810ca49dd7278f5699560d2af1a4bc26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::Coord</type>
      <name>Coord</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a685f1b61176111a7a248f20350f421e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(ompl::geometric::KPIECE1::Motion *)&gt;</type>
      <name>FreeMotionFn</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a4751b8382ffd0a524df59aea6312c3fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderFraction</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>aac6dfc7acc8db082a84b7bbdadb78e87</anchor>
      <arglist>(double bp)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBorderFraction</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>aede8396b50f3e68cb8de595adbf036a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimension</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>acfdbc5b059330490b55185dda00f0eb1</anchor>
      <arglist>(unsigned int dim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a43c29d951fd5206e08a33931b02c4ddc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a28df4ebd2c0d78eab8b4fc72c6f27d43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>addMotion</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a6ac71e099d8a69dc6c2ee5ff1736a277</anchor>
      <arglist>(ompl::geometric::KPIECE1::Motion *motion, const Coord &amp;coord, double dist=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selectMotion</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a8db183fa4a3231509336ffb7057805df</anchor>
      <arglist>(ompl::geometric::KPIECE1::Motion *&amp;smotion, Cell *&amp;scell)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Discretization&lt; ompl::geometric::LBKPIECE1::Motion &gt;</name>
    <filename>classompl_1_1geometric_1_1Discretization.html</filename>
    <member kind="typedef">
      <type>GridB&lt; CellData *, OrderCellsByImportance &gt;</type>
      <name>Grid</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>ac21186181755603cb91938f280e9dbc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::Cell</type>
      <name>Cell</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a810ca49dd7278f5699560d2af1a4bc26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::Coord</type>
      <name>Coord</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a685f1b61176111a7a248f20350f421e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(ompl::geometric::LBKPIECE1::Motion *)&gt;</type>
      <name>FreeMotionFn</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a4751b8382ffd0a524df59aea6312c3fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderFraction</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>aac6dfc7acc8db082a84b7bbdadb78e87</anchor>
      <arglist>(double bp)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBorderFraction</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>aede8396b50f3e68cb8de595adbf036a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimension</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>acfdbc5b059330490b55185dda00f0eb1</anchor>
      <arglist>(unsigned int dim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a43c29d951fd5206e08a33931b02c4ddc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a28df4ebd2c0d78eab8b4fc72c6f27d43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>addMotion</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a6ac71e099d8a69dc6c2ee5ff1736a277</anchor>
      <arglist>(ompl::geometric::LBKPIECE1::Motion *motion, const Coord &amp;coord, double dist=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selectMotion</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a8db183fa4a3231509336ffb7057805df</anchor>
      <arglist>(ompl::geometric::LBKPIECE1::Motion *&amp;smotion, Cell *&amp;scell)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grid&lt; CellData * &gt;</name>
    <filename>classompl_1_1Grid.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; int &gt;</type>
      <name>Coord</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ada6a72bd91ec78dd8a0806c00055d917</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Cell * &gt;</type>
      <name>CellArray</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a75eda082fd346c84697130d347c1eb2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CoordHash::const_iterator</type>
      <name>iterator</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ac85bc047c9574aea0fb08c1c53701eb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Grid</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>aa11294d2cb47b1e55bacd101b131d3c1</anchor>
      <arglist>(unsigned int dimension)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Grid</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>acace53abca008ae9210248cb2d54739d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>aa6a94d0ecdc11fd7e60d72b24b9d1930</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>aa58eb9423709340be0fa233986c3f6fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimension</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a118373bcfe70886449d94782b0a7c783</anchor>
      <arglist>(unsigned int dimension)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ac6f884d8fc3c401a3610d7e5659e16b9</anchor>
      <arglist>(const Coord &amp;coord) const</arglist>
    </member>
    <member kind="function">
      <type>Cell *</type>
      <name>getCell</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ae563fea4e6a46c741682b6dcbe93ce54</anchor>
      <arglist>(const Coord &amp;coord) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>af462d094f175c8c409237802d875aad2</anchor>
      <arglist>(const Cell *cell, CellArray &amp;list) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a75d952cdcfbf49f084d7ec1434170fbf</anchor>
      <arglist>(const Coord &amp;coord, CellArray &amp;list) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a6a9e29f3d8bb2d337d36f0ba8efb0d45</anchor>
      <arglist>(Coord &amp;coord, CellArray &amp;list) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; Cell * &gt; &gt;</type>
      <name>components</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a27fcbd257ec49b14b88cffd182db8b39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cell *</type>
      <name>createCell</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a1d0e09b5912dff94caa57aee681053cf</anchor>
      <arglist>(const Coord &amp;coord, CellArray *nbh=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a72386f9ffd43e98d25aa38b224541564</anchor>
      <arglist>(Cell *cell)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ac72fa046a57332c7627126e8d84fb1dc</anchor>
      <arglist>(Cell *cell)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroyCell</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a5876a2ff7b1092fd00fc58fee9ad1829</anchor>
      <arglist>(Cell *cell) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getContent</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>afe4fa2e9e3b6db8d57c69daaeb1be0b7</anchor>
      <arglist>(std::vector&lt; CellData * &gt; &amp;content) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCoordinates</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a0864cd4aae571bd30003b7ae82dccbd5</anchor>
      <arglist>(std::vector&lt; Coord * &gt; &amp;coords) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCells</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a5606423660b0f121ad2f227030085a9c</anchor>
      <arglist>(CellArray &amp;cells) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printCoord</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ab586680ae4fb05376c91b114d95e1b7b</anchor>
      <arglist>(Coord &amp;coord, std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a68c59b4c32f76bf4d698305be349faa8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a1b6823f08c397d48bc7e6b2b4567566e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>status</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ac38c23cf1a7f5dea01f49e325ad53371</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a73ad31c53eef29b58c753634b886b49c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a8155d8b764675cec88b3c670bb9cc705</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::unordered_map&lt; Coord *, Cell *, HashFunCoordPtr, EqualCoordPtr &gt;</type>
      <name>CoordHash</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>af21ae5cd41d9e4e3ccebafd6b1c03066</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ab5f51d3c4ae3f021f17d8435643cd3d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>dimension_</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a8dfdf767f8c14a15fddbdb4bc1e993f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxNeighbors_</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a826614263d30ffcc37924cecfef25471</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordHash</type>
      <name>hash_</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>afbf8751613b70340e9e287d3bb53650d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grid&lt; ompl::control::EST::MotionInfo &gt;</name>
    <filename>classompl_1_1Grid.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; int &gt;</type>
      <name>Coord</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ada6a72bd91ec78dd8a0806c00055d917</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Cell * &gt;</type>
      <name>CellArray</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a75eda082fd346c84697130d347c1eb2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CoordHash::const_iterator</type>
      <name>iterator</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ac85bc047c9574aea0fb08c1c53701eb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Grid</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>aa11294d2cb47b1e55bacd101b131d3c1</anchor>
      <arglist>(unsigned int dimension)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Grid</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>acace53abca008ae9210248cb2d54739d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>aa6a94d0ecdc11fd7e60d72b24b9d1930</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>aa58eb9423709340be0fa233986c3f6fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimension</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a118373bcfe70886449d94782b0a7c783</anchor>
      <arglist>(unsigned int dimension)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ac6f884d8fc3c401a3610d7e5659e16b9</anchor>
      <arglist>(const Coord &amp;coord) const</arglist>
    </member>
    <member kind="function">
      <type>Cell *</type>
      <name>getCell</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ae563fea4e6a46c741682b6dcbe93ce54</anchor>
      <arglist>(const Coord &amp;coord) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>af462d094f175c8c409237802d875aad2</anchor>
      <arglist>(const Cell *cell, CellArray &amp;list) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a75d952cdcfbf49f084d7ec1434170fbf</anchor>
      <arglist>(const Coord &amp;coord, CellArray &amp;list) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a6a9e29f3d8bb2d337d36f0ba8efb0d45</anchor>
      <arglist>(Coord &amp;coord, CellArray &amp;list) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; Cell * &gt; &gt;</type>
      <name>components</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a27fcbd257ec49b14b88cffd182db8b39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cell *</type>
      <name>createCell</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a1d0e09b5912dff94caa57aee681053cf</anchor>
      <arglist>(const Coord &amp;coord, CellArray *nbh=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a72386f9ffd43e98d25aa38b224541564</anchor>
      <arglist>(Cell *cell)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ac72fa046a57332c7627126e8d84fb1dc</anchor>
      <arglist>(Cell *cell)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroyCell</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a5876a2ff7b1092fd00fc58fee9ad1829</anchor>
      <arglist>(Cell *cell) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getContent</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>afe4fa2e9e3b6db8d57c69daaeb1be0b7</anchor>
      <arglist>(std::vector&lt; ompl::control::EST::MotionInfo &gt; &amp;content) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCoordinates</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a0864cd4aae571bd30003b7ae82dccbd5</anchor>
      <arglist>(std::vector&lt; Coord * &gt; &amp;coords) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCells</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a5606423660b0f121ad2f227030085a9c</anchor>
      <arglist>(CellArray &amp;cells) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printCoord</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ab586680ae4fb05376c91b114d95e1b7b</anchor>
      <arglist>(Coord &amp;coord, std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a68c59b4c32f76bf4d698305be349faa8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a1b6823f08c397d48bc7e6b2b4567566e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>status</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ac38c23cf1a7f5dea01f49e325ad53371</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a73ad31c53eef29b58c753634b886b49c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a8155d8b764675cec88b3c670bb9cc705</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::unordered_map&lt; Coord *, Cell *, HashFunCoordPtr, EqualCoordPtr &gt;</type>
      <name>CoordHash</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>af21ae5cd41d9e4e3ccebafd6b1c03066</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ab5f51d3c4ae3f021f17d8435643cd3d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>dimension_</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a8dfdf767f8c14a15fddbdb4bc1e993f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxNeighbors_</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a826614263d30ffcc37924cecfef25471</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordHash</type>
      <name>hash_</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>afbf8751613b70340e9e287d3bb53650d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grid&lt; ompl::geometric::ProjEST::MotionInfo &gt;</name>
    <filename>classompl_1_1Grid.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; int &gt;</type>
      <name>Coord</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ada6a72bd91ec78dd8a0806c00055d917</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Cell * &gt;</type>
      <name>CellArray</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a75eda082fd346c84697130d347c1eb2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CoordHash::const_iterator</type>
      <name>iterator</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ac85bc047c9574aea0fb08c1c53701eb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Grid</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>aa11294d2cb47b1e55bacd101b131d3c1</anchor>
      <arglist>(unsigned int dimension)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Grid</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>acace53abca008ae9210248cb2d54739d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>aa6a94d0ecdc11fd7e60d72b24b9d1930</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>aa58eb9423709340be0fa233986c3f6fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimension</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a118373bcfe70886449d94782b0a7c783</anchor>
      <arglist>(unsigned int dimension)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ac6f884d8fc3c401a3610d7e5659e16b9</anchor>
      <arglist>(const Coord &amp;coord) const</arglist>
    </member>
    <member kind="function">
      <type>Cell *</type>
      <name>getCell</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ae563fea4e6a46c741682b6dcbe93ce54</anchor>
      <arglist>(const Coord &amp;coord) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>af462d094f175c8c409237802d875aad2</anchor>
      <arglist>(const Cell *cell, CellArray &amp;list) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a75d952cdcfbf49f084d7ec1434170fbf</anchor>
      <arglist>(const Coord &amp;coord, CellArray &amp;list) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a6a9e29f3d8bb2d337d36f0ba8efb0d45</anchor>
      <arglist>(Coord &amp;coord, CellArray &amp;list) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; Cell * &gt; &gt;</type>
      <name>components</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a27fcbd257ec49b14b88cffd182db8b39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cell *</type>
      <name>createCell</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a1d0e09b5912dff94caa57aee681053cf</anchor>
      <arglist>(const Coord &amp;coord, CellArray *nbh=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a72386f9ffd43e98d25aa38b224541564</anchor>
      <arglist>(Cell *cell)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ac72fa046a57332c7627126e8d84fb1dc</anchor>
      <arglist>(Cell *cell)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroyCell</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a5876a2ff7b1092fd00fc58fee9ad1829</anchor>
      <arglist>(Cell *cell) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getContent</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>afe4fa2e9e3b6db8d57c69daaeb1be0b7</anchor>
      <arglist>(std::vector&lt; ompl::geometric::ProjEST::MotionInfo &gt; &amp;content) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCoordinates</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a0864cd4aae571bd30003b7ae82dccbd5</anchor>
      <arglist>(std::vector&lt; Coord * &gt; &amp;coords) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCells</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a5606423660b0f121ad2f227030085a9c</anchor>
      <arglist>(CellArray &amp;cells) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printCoord</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ab586680ae4fb05376c91b114d95e1b7b</anchor>
      <arglist>(Coord &amp;coord, std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a68c59b4c32f76bf4d698305be349faa8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a1b6823f08c397d48bc7e6b2b4567566e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>status</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ac38c23cf1a7f5dea01f49e325ad53371</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a73ad31c53eef29b58c753634b886b49c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a8155d8b764675cec88b3c670bb9cc705</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::unordered_map&lt; Coord *, Cell *, HashFunCoordPtr, EqualCoordPtr &gt;</type>
      <name>CoordHash</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>af21ae5cd41d9e4e3ccebafd6b1c03066</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ab5f51d3c4ae3f021f17d8435643cd3d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>dimension_</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a8dfdf767f8c14a15fddbdb4bc1e993f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxNeighbors_</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a826614263d30ffcc37924cecfef25471</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordHash</type>
      <name>hash_</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>afbf8751613b70340e9e287d3bb53650d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grid&lt; ompl::geometric::pSBL::MotionInfo &gt;</name>
    <filename>classompl_1_1Grid.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; int &gt;</type>
      <name>Coord</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ada6a72bd91ec78dd8a0806c00055d917</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Cell * &gt;</type>
      <name>CellArray</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a75eda082fd346c84697130d347c1eb2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CoordHash::const_iterator</type>
      <name>iterator</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ac85bc047c9574aea0fb08c1c53701eb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Grid</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>aa11294d2cb47b1e55bacd101b131d3c1</anchor>
      <arglist>(unsigned int dimension)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Grid</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>acace53abca008ae9210248cb2d54739d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>aa6a94d0ecdc11fd7e60d72b24b9d1930</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>aa58eb9423709340be0fa233986c3f6fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimension</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a118373bcfe70886449d94782b0a7c783</anchor>
      <arglist>(unsigned int dimension)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ac6f884d8fc3c401a3610d7e5659e16b9</anchor>
      <arglist>(const Coord &amp;coord) const</arglist>
    </member>
    <member kind="function">
      <type>Cell *</type>
      <name>getCell</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ae563fea4e6a46c741682b6dcbe93ce54</anchor>
      <arglist>(const Coord &amp;coord) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>af462d094f175c8c409237802d875aad2</anchor>
      <arglist>(const Cell *cell, CellArray &amp;list) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a75d952cdcfbf49f084d7ec1434170fbf</anchor>
      <arglist>(const Coord &amp;coord, CellArray &amp;list) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a6a9e29f3d8bb2d337d36f0ba8efb0d45</anchor>
      <arglist>(Coord &amp;coord, CellArray &amp;list) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; Cell * &gt; &gt;</type>
      <name>components</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a27fcbd257ec49b14b88cffd182db8b39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cell *</type>
      <name>createCell</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a1d0e09b5912dff94caa57aee681053cf</anchor>
      <arglist>(const Coord &amp;coord, CellArray *nbh=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a72386f9ffd43e98d25aa38b224541564</anchor>
      <arglist>(Cell *cell)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ac72fa046a57332c7627126e8d84fb1dc</anchor>
      <arglist>(Cell *cell)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroyCell</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a5876a2ff7b1092fd00fc58fee9ad1829</anchor>
      <arglist>(Cell *cell) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getContent</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>afe4fa2e9e3b6db8d57c69daaeb1be0b7</anchor>
      <arglist>(std::vector&lt; ompl::geometric::pSBL::MotionInfo &gt; &amp;content) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCoordinates</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a0864cd4aae571bd30003b7ae82dccbd5</anchor>
      <arglist>(std::vector&lt; Coord * &gt; &amp;coords) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCells</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a5606423660b0f121ad2f227030085a9c</anchor>
      <arglist>(CellArray &amp;cells) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printCoord</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ab586680ae4fb05376c91b114d95e1b7b</anchor>
      <arglist>(Coord &amp;coord, std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a68c59b4c32f76bf4d698305be349faa8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a1b6823f08c397d48bc7e6b2b4567566e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>status</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ac38c23cf1a7f5dea01f49e325ad53371</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a73ad31c53eef29b58c753634b886b49c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a8155d8b764675cec88b3c670bb9cc705</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::unordered_map&lt; Coord *, Cell *, HashFunCoordPtr, EqualCoordPtr &gt;</type>
      <name>CoordHash</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>af21ae5cd41d9e4e3ccebafd6b1c03066</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ab5f51d3c4ae3f021f17d8435643cd3d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>dimension_</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a8dfdf767f8c14a15fddbdb4bc1e993f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxNeighbors_</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a826614263d30ffcc37924cecfef25471</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordHash</type>
      <name>hash_</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>afbf8751613b70340e9e287d3bb53650d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grid&lt; ompl::geometric::SBL::MotionInfo &gt;</name>
    <filename>classompl_1_1Grid.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; int &gt;</type>
      <name>Coord</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ada6a72bd91ec78dd8a0806c00055d917</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Cell * &gt;</type>
      <name>CellArray</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a75eda082fd346c84697130d347c1eb2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CoordHash::const_iterator</type>
      <name>iterator</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ac85bc047c9574aea0fb08c1c53701eb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Grid</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>aa11294d2cb47b1e55bacd101b131d3c1</anchor>
      <arglist>(unsigned int dimension)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Grid</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>acace53abca008ae9210248cb2d54739d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>aa6a94d0ecdc11fd7e60d72b24b9d1930</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>aa58eb9423709340be0fa233986c3f6fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimension</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a118373bcfe70886449d94782b0a7c783</anchor>
      <arglist>(unsigned int dimension)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ac6f884d8fc3c401a3610d7e5659e16b9</anchor>
      <arglist>(const Coord &amp;coord) const</arglist>
    </member>
    <member kind="function">
      <type>Cell *</type>
      <name>getCell</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ae563fea4e6a46c741682b6dcbe93ce54</anchor>
      <arglist>(const Coord &amp;coord) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>af462d094f175c8c409237802d875aad2</anchor>
      <arglist>(const Cell *cell, CellArray &amp;list) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a75d952cdcfbf49f084d7ec1434170fbf</anchor>
      <arglist>(const Coord &amp;coord, CellArray &amp;list) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a6a9e29f3d8bb2d337d36f0ba8efb0d45</anchor>
      <arglist>(Coord &amp;coord, CellArray &amp;list) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; Cell * &gt; &gt;</type>
      <name>components</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a27fcbd257ec49b14b88cffd182db8b39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cell *</type>
      <name>createCell</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a1d0e09b5912dff94caa57aee681053cf</anchor>
      <arglist>(const Coord &amp;coord, CellArray *nbh=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a72386f9ffd43e98d25aa38b224541564</anchor>
      <arglist>(Cell *cell)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ac72fa046a57332c7627126e8d84fb1dc</anchor>
      <arglist>(Cell *cell)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroyCell</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a5876a2ff7b1092fd00fc58fee9ad1829</anchor>
      <arglist>(Cell *cell) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getContent</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>afe4fa2e9e3b6db8d57c69daaeb1be0b7</anchor>
      <arglist>(std::vector&lt; ompl::geometric::SBL::MotionInfo &gt; &amp;content) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCoordinates</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a0864cd4aae571bd30003b7ae82dccbd5</anchor>
      <arglist>(std::vector&lt; Coord * &gt; &amp;coords) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCells</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a5606423660b0f121ad2f227030085a9c</anchor>
      <arglist>(CellArray &amp;cells) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printCoord</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ab586680ae4fb05376c91b114d95e1b7b</anchor>
      <arglist>(Coord &amp;coord, std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a68c59b4c32f76bf4d698305be349faa8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a1b6823f08c397d48bc7e6b2b4567566e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>status</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ac38c23cf1a7f5dea01f49e325ad53371</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a73ad31c53eef29b58c753634b886b49c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a8155d8b764675cec88b3c670bb9cc705</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::unordered_map&lt; Coord *, Cell *, HashFunCoordPtr, EqualCoordPtr &gt;</type>
      <name>CoordHash</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>af21ae5cd41d9e4e3ccebafd6b1c03066</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ab5f51d3c4ae3f021f17d8435643cd3d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>dimension_</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a8dfdf767f8c14a15fddbdb4bc1e993f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxNeighbors_</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a826614263d30ffcc37924cecfef25471</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordHash</type>
      <name>hash_</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>afbf8751613b70340e9e287d3bb53650d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GridB&lt; CellData *, OrderCellsByImportance &gt;</name>
    <filename>classompl_1_1GridB.html</filename>
    <base>GridN&lt; CellData * &gt;</base>
    <member kind="typedef">
      <type>GridN&lt; CellData * &gt;::Cell</type>
      <name>Cell</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a7fd1b48d2b5451f40c57f4e3fba4e4c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridN&lt; CellData * &gt;::CellArray</type>
      <name>CellArray</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a8af7231656ec5aac513048369d7388d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridN&lt; CellData * &gt;::Coord</type>
      <name>Coord</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>ae1ffa2705f26a8916307afa7b020ba49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>EventCellUpdate</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a7af310f35313f4e2342d227138ce156f</anchor>
      <arglist>)(Cell *, void *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridB</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a6f51bf34a19905e875d6bdffa3246b11</anchor>
      <arglist>(unsigned int dimension)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onCellUpdate</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a89bffe3573ef977f63b4ab4ff7759705</anchor>
      <arglist>(EventCellUpdate event, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>Cell *</type>
      <name>topInternal</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a91963302f00507b2c8c52e1b049525d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Cell *</type>
      <name>topExternal</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a59964153d08cd2af9d80cad73aa10b48</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>countInternal</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a4474d70facf47e05f73dda1464760ef2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>countExternal</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a68d281d2f257392080725ccb408fb6b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fracExternal</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>ac7afdbf67ca787a6cb135b10a0227521</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fracInternal</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a179a5009ee225315d07865ff15c673a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>aceb50d07f1b2bdb195df8ef2c06999e7</anchor>
      <arglist>(Cell *cell)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateAll</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a177ec08a842589d77338095e36a3b2f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cell *</type>
      <name>createCell</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>ab5b346ddd6e6c21cc2e35a493a59f420</anchor>
      <arglist>(const Coord &amp;coord, CellArray *nbh=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a2d028cfdf6233f097ff43fd70591896b</anchor>
      <arglist>(Cell *cell)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a35d8377f870c0e03fca9f2839d863165</anchor>
      <arglist>(Cell *cell)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>ad5c6fe7b6616afef1120f34811124286</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>status</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a08fa3fdf1d4a74a1bdab9d99ca5e8925</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>BinaryHeap&lt; CellX *, LessThanInternalCell &gt;</type>
      <name>internalBHeap</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>abf7cedc47aa3e2b2cb87986fcdf9ed44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>BinaryHeap&lt; CellX *, LessThanExternalCell &gt;</type>
      <name>externalBHeap</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a01bc4d75a25963312eecd700ed643399</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupHeaps</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a885d2d151a374acf376617019f0c4f86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clearHeaps</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>ab332ad98c88d0ddc7c2ba9e04eaa6c65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>noCellUpdate</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a24ba3c3dfcd76b0f7f79006252e18928</anchor>
      <arglist>(Cell *, void *)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>setHeapElementI</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a5d5d287741c00a9dba43113064f867d1</anchor>
      <arglist>(typename internalBHeap::Element *element, void *)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>setHeapElementE</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>ae2fb49e37b99d8f9e224c17577f5c622</anchor>
      <arglist>(typename externalBHeap::Element *element, void *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventCellUpdate</type>
      <name>eventCellUpdate_</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a21a662edc0904ba14495d44b2088669f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>eventCellUpdateData_</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>ab229dc7aca157fe152411fe75ad2f73f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>internalBHeap</type>
      <name>internal_</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a00fa01d1103ced09fb7ee3ebee187665</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>externalBHeap</type>
      <name>external_</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>afede0d811f4f9b53abc0f1945b871516</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GridN&lt; CellData * &gt;</name>
    <filename>classompl_1_1GridN.html</filename>
    <base>Grid&lt; CellData * &gt;</base>
    <member kind="typedef">
      <type>Grid&lt; CellData * &gt;::Cell</type>
      <name>BaseCell</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>aa26d52609e9a958a0dee1c774d817f34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid&lt; CellData * &gt;::CellArray</type>
      <name>BaseCellArray</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a4b26a5015ed43cb79442a1d7041ca877</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid&lt; CellData * &gt;::Coord</type>
      <name>Coord</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>ae15a0d9d76a01bc9f98afbed8ce23342</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Cell * &gt;</type>
      <name>CellArray</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a44c57859eaebc6bdc3c9c453662ac252</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridN</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a19056d56c0b54dd8ef2c3c9d483f1211</anchor>
      <arglist>(unsigned int dimension)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimension</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a8f301e691e48294e1e216d1c7971aa9d</anchor>
      <arglist>(unsigned int dimension)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBounds</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>ae69767d44f200c28b21683ac76d1624d</anchor>
      <arglist>(const Coord &amp;low, const Coord &amp;up)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInteriorCellNeighborLimit</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>ae5d42e023d6aa00ac1d479dad46d7144</anchor>
      <arglist>(unsigned int count)</arglist>
    </member>
    <member kind="function">
      <type>Cell *</type>
      <name>getCell</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a55b24fea201c89c9dab91c8624cec4e5</anchor>
      <arglist>(const Coord &amp;coord) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>adfe8ed73a5dc1ce935e9abf51d91682b</anchor>
      <arglist>(const Cell *cell, CellArray &amp;list) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a1ba55b0907ff580f04447d58af044de0</anchor>
      <arglist>(const Coord &amp;coord, CellArray &amp;list) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a6833ae9f28a7b57275faee82437255d9</anchor>
      <arglist>(Coord &amp;coord, CellArray &amp;list) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BaseCell *</type>
      <name>createCell</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a6423dadd35335d4466af7174803f99f9</anchor>
      <arglist>(const Coord &amp;coord, BaseCellArray *nbh=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>abafef2aa6c3f2e6c35ef1a82f10f97c8</anchor>
      <arglist>(BaseCell *cell)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCells</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a1bc2efb9f3533a98381ee2e12da28117</anchor>
      <arglist>(CellArray &amp;cells) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned int</type>
      <name>numberOfBoundaryDimensions</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>ab065311737237a3731d41e0cbc4e1b76</anchor>
      <arglist>(const Coord &amp;coord) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>hasBounds_</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>ace239cb56364f32748d8c4a66ec8b31f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>lowBound_</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>acdf65b3cd4603c5d25597e62064751d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>upBound_</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a422a9ee23538f070a2d9704e2ca70ead</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>interiorCellNeighborsLimit_</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a035b9527b8cfd98a6e4f4d7472e668a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>overrideCellNeighborsLimit_</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a1e9cc38ff1df4dca6c9969f73dcad61e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KoulesControlSampler</name>
    <filename>classKoulesControlSampler.html</filename>
    <base>ompl::control::ControlSampler</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sample</name>
      <anchorfile>classKoulesControlSampler.html</anchorfile>
      <anchor>ad2ef551f9935e44a7f2f0da86c78bbce</anchor>
      <arglist>(ompl::control::Control *control)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sample</name>
      <anchorfile>classKoulesControlSampler.html</anchorfile>
      <anchor>af491e9eb8f838a7f88a24f7586f7ad5b</anchor>
      <arglist>(ompl::control::Control *control, const ompl::base::State *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleNext</name>
      <anchorfile>classKoulesControlSampler.html</anchorfile>
      <anchor>a8872a45c9b897ce5a2b3946a9750e11d</anchor>
      <arglist>(ompl::control::Control *control, const ompl::control::Control *, const ompl::base::State *state)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KoulesControlSpace</name>
    <filename>classKoulesControlSpace.html</filename>
    <base>ompl::control::RealVectorControlSpace</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ompl::control::ControlSamplerPtr</type>
      <name>allocDefaultControlSampler</name>
      <anchorfile>classKoulesControlSpace.html</anchorfile>
      <anchor>ae0b82f497ab449a20e31033e522e91bb</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KoulesDirectedControlSampler</name>
    <filename>classKoulesDirectedControlSampler.html</filename>
    <base>ompl::control::DirectedControlSampler</base>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>sampleTo</name>
      <anchorfile>classKoulesDirectedControlSampler.html</anchorfile>
      <anchor>ae8bee46ee36c230a9ef91e685b0a821a</anchor>
      <arglist>(ompl::control::Control *control, const ompl::base::State *source, ompl::base::State *dest)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>sampleTo</name>
      <anchorfile>classKoulesDirectedControlSampler.html</anchorfile>
      <anchor>ab4d770c001131d3ada9112f132b5375b</anchor>
      <arglist>(ompl::control::Control *control, const ompl::control::Control *, const ompl::base::State *source, ompl::base::State *dest)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KoulesGoal</name>
    <filename>classKoulesGoal.html</filename>
    <base>ompl::base::GoalSampleableRegion</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>distanceGoal</name>
      <anchorfile>classKoulesGoal.html</anchorfile>
      <anchor>a786b684cf1f4d50a13453a39abc87153</anchor>
      <arglist>(const ompl::base::State *st) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleGoal</name>
      <anchorfile>classKoulesGoal.html</anchorfile>
      <anchor>af57e39943bbe4ef8e8a49e9c81faea7f</anchor>
      <arglist>(ompl::base::State *st) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>maxSampleCount</name>
      <anchorfile>classKoulesGoal.html</anchorfile>
      <anchor>a242c756fe93372ca321be14babaa2f84</anchor>
      <arglist>(void) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KoulesProjection</name>
    <filename>classKoulesProjection.html</filename>
    <base>ompl::base::ProjectionEvaluator</base>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classKoulesProjection.html</anchorfile>
      <anchor>a33b15d21da7055f5bcc72e38aea960f0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>defaultCellSizes</name>
      <anchorfile>classKoulesProjection.html</anchorfile>
      <anchor>acb97a003e4d82294b7bc0bddca150f73</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>project</name>
      <anchorfile>classKoulesProjection.html</anchorfile>
      <anchor>af3f63b86a5e35778cc49a1dcc323f896</anchor>
      <arglist>(const ompl::base::State *state, ompl::base::EuclideanProjection &amp;projection) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KoulesSimulator</name>
    <filename>classKoulesSimulator.html</filename>
  </compound>
  <compound kind="class">
    <name>KoulesStatePropagator</name>
    <filename>classKoulesStatePropagator.html</filename>
    <base>ompl::control::StatePropagator</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>propagate</name>
      <anchorfile>classKoulesStatePropagator.html</anchorfile>
      <anchor>a99ead299913471bc223207fc6dfe54e4</anchor>
      <arglist>(const ompl::base::State *start, const ompl::control::Control *control, const double duration, ompl::base::State *result) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::app::AppBase</name>
    <filename>classompl_1_1app_1_1AppBase.html</filename>
    <templarg>T</templarg>
    <base>ompl::geometric::SimpleSetup</base>
    <base>ompl::app::RigidBodyGeometry</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1app_1_1AppBase.html</anchorfile>
      <anchor>ac88168b98fe9016ae4e576c32e938f5c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOptimizationObjectiveAndThreshold</name>
      <anchorfile>classompl_1_1app_1_1AppBase.html</anchorfile>
      <anchor>a8d6e225163649e9dedf0b5543bcbc031</anchor>
      <arglist>(const std::string &amp;objective, double threshold)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::app::AppTypeSelector</name>
    <filename>structompl_1_1app_1_1AppTypeSelector.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="struct">
    <name>ompl::app::AppTypeSelector&lt; CONTROL &gt;</name>
    <filename>structompl_1_1app_1_1AppTypeSelector_3_01CONTROL_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::app::BlimpPlanning</name>
    <filename>classompl_1_1app_1_1BlimpPlanning.html</filename>
    <base>AppBase&lt; CONTROL &gt;</base>
  </compound>
  <compound kind="class">
    <name>ompl::app::DynamicCarPlanning</name>
    <filename>classompl_1_1app_1_1DynamicCarPlanning.html</filename>
    <base>AppBase&lt; CONTROL &gt;</base>
  </compound>
  <compound kind="class">
    <name>ompl::app::FCLContinuousMotionValidator</name>
    <filename>classompl_1_1app_1_1FCLContinuousMotionValidator.html</filename>
    <base>ompl::base::MotionValidator</base>
    <member kind="function">
      <type></type>
      <name>FCLContinuousMotionValidator</name>
      <anchorfile>classompl_1_1app_1_1FCLContinuousMotionValidator.html</anchorfile>
      <anchor>af3be613e94916ac7a0f40cf2d5f4988d</anchor>
      <arglist>(ob::SpaceInformation *si, MotionModel mm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FCLContinuousMotionValidator</name>
      <anchorfile>classompl_1_1app_1_1FCLContinuousMotionValidator.html</anchorfile>
      <anchor>a63e04c2bc95cfa8962f9c13d8cdd035f</anchor>
      <arglist>(const ob::SpaceInformationPtr &amp;si, MotionModel mm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FCLContinuousMotionValidator</name>
      <anchorfile>classompl_1_1app_1_1FCLContinuousMotionValidator.html</anchorfile>
      <anchor>ab3fee34c72d511c90dd849d986660319</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkMotion</name>
      <anchorfile>classompl_1_1app_1_1FCLContinuousMotionValidator.html</anchorfile>
      <anchor>a1aee747f1ad56a75b314da4ff7fbaf5c</anchor>
      <arglist>(const ob::State *s1, const ob::State *s2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkMotion</name>
      <anchorfile>classompl_1_1app_1_1FCLContinuousMotionValidator.html</anchorfile>
      <anchor>a847c322500e4ba0719fac20e5574ce43</anchor>
      <arglist>(const ob::State *s1, const ob::State *s2, std::pair&lt; ob::State *, double &gt; &amp;lastValid) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>defaultSettings</name>
      <anchorfile>classompl_1_1app_1_1FCLContinuousMotionValidator.html</anchorfile>
      <anchor>aab68b5e0916bd3008a2bee7df32ad759</anchor>
      <arglist>(MotionModel mm)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FCLMethodWrapperPtr</type>
      <name>fclWrapper_</name>
      <anchorfile>classompl_1_1app_1_1FCLContinuousMotionValidator.html</anchorfile>
      <anchor>a1b322873027b56407efd3273ade1fcd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ob::StateSpace *</type>
      <name>stateSpace_</name>
      <anchorfile>classompl_1_1app_1_1FCLContinuousMotionValidator.html</anchorfile>
      <anchor>a8c7f1f252db261b07dd69e9303b69905</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::app::FCLMethodWrapper</name>
    <filename>classompl_1_1app_1_1FCLMethodWrapper.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isValid</name>
      <anchorfile>classompl_1_1app_1_1FCLMethodWrapper.html</anchorfile>
      <anchor>a8821696c2e0f3ba0dc80c96be8ff85d5</anchor>
      <arglist>(const base::State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isValid</name>
      <anchorfile>classompl_1_1app_1_1FCLMethodWrapper.html</anchorfile>
      <anchor>ac2f0f346ae290800a697d6d6df4160a7</anchor>
      <arglist>(const base::State *s1, const base::State *s2, double &amp;collisionTime) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>clearance</name>
      <anchorfile>classompl_1_1app_1_1FCLMethodWrapper.html</anchorfile>
      <anchor>ab2d9a1a4edab7ca6d49ea7997eb7e901</anchor>
      <arglist>(const base::State *state) const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>fcl::OBBRSS</type>
      <name>BVType</name>
      <anchorfile>classompl_1_1app_1_1FCLMethodWrapper.html</anchorfile>
      <anchor>af5d1e38a44bc6df81d63fc4352775352</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>fcl::BVHModel&lt; BVType &gt;</type>
      <name>Model</name>
      <anchorfile>classompl_1_1app_1_1FCLMethodWrapper.html</anchorfile>
      <anchor>aeb1d3db7f22dd0fb0cccf948238bc15c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>configure</name>
      <anchorfile>classompl_1_1app_1_1FCLMethodWrapper.html</anchorfile>
      <anchor>a97bbf2ab20ae66135b874efd54956677</anchor>
      <arglist>(const GeometrySpecification &amp;geom)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::pair&lt; std::vector&lt; fcl::Vec3f &gt;, std::vector&lt; fcl::Triangle &gt; &gt;</type>
      <name>getFCLModelFromScene</name>
      <anchorfile>classompl_1_1app_1_1FCLMethodWrapper.html</anchorfile>
      <anchor>aa11aec39abe6862d60507cd9b3e8902b</anchor>
      <arglist>(const aiScene *scene, const aiVector3D &amp;center) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::pair&lt; std::vector&lt; fcl::Vec3f &gt;, std::vector&lt; fcl::Triangle &gt; &gt;</type>
      <name>getFCLModelFromScene</name>
      <anchorfile>classompl_1_1app_1_1FCLMethodWrapper.html</anchorfile>
      <anchor>a6743c4252eb0a88208937d433c82970b</anchor>
      <arglist>(const std::vector&lt; const aiScene * &gt; &amp;scenes, const std::vector&lt; aiVector3D &gt; &amp;center) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Model</type>
      <name>environment_</name>
      <anchorfile>classompl_1_1app_1_1FCLMethodWrapper.html</anchorfile>
      <anchor>ab45f57c532de2c104a8876965f9b1f74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Model * &gt;</type>
      <name>robotParts_</name>
      <anchorfile>classompl_1_1app_1_1FCLMethodWrapper.html</anchorfile>
      <anchor>ac9b79f505ec7db8ce3d0d61356af2011</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GeometricStateExtractor</type>
      <name>extractState_</name>
      <anchorfile>classompl_1_1app_1_1FCLMethodWrapper.html</anchorfile>
      <anchor>a37bfce8cb8f954ea27210d7351b58037</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>selfCollision_</name>
      <anchorfile>classompl_1_1app_1_1FCLMethodWrapper.html</anchorfile>
      <anchor>a34998f54af1fa85ec2ab8ad38e03a2b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FCLPoseFromStateCallback</type>
      <name>poseFromStateCallback_</name>
      <anchorfile>classompl_1_1app_1_1FCLMethodWrapper.html</anchorfile>
      <anchor>af69051c77c5a994424b53866d064584a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::app::FCLStateValidityChecker</name>
    <filename>classompl_1_1app_1_1FCLStateValidityChecker.html</filename>
    <templarg>T</templarg>
    <base>ompl::base::StateValidityChecker</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isValid</name>
      <anchorfile>classompl_1_1app_1_1FCLStateValidityChecker.html</anchorfile>
      <anchor>acdfac608491d3a29f5cb49cacdce782e</anchor>
      <arglist>(const ob::State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>clearance</name>
      <anchorfile>classompl_1_1app_1_1FCLStateValidityChecker.html</anchorfile>
      <anchor>a4cdaa6badc64fa7bbe074fe99c3061af</anchor>
      <arglist>(const ob::State *state) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OMPL_FCL_StateType&lt; T &gt;</type>
      <name>stateConvertor_</name>
      <anchorfile>classompl_1_1app_1_1FCLStateValidityChecker.html</anchorfile>
      <anchor>a59e27926e7f01aee1931fa67fcb15983</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FCLMethodWrapperPtr</type>
      <name>fclWrapper_</name>
      <anchorfile>classompl_1_1app_1_1FCLStateValidityChecker.html</anchorfile>
      <anchor>ae8cfcfea0bd5cb09fe650532315adeb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::app::GBlimpPlanning</name>
    <filename>classompl_1_1app_1_1GBlimpPlanning.html</filename>
    <base>ompl::app::BlimpPlanning</base>
    <base>ompl::app::RenderGeometry</base>
  </compound>
  <compound kind="class">
    <name>ompl::app::GDynamicCarPlanning</name>
    <filename>classompl_1_1app_1_1GDynamicCarPlanning.html</filename>
    <base>ompl::app::DynamicCarPlanning</base>
    <base>ompl::app::RenderGeometry</base>
  </compound>
  <compound kind="class">
    <name>ompl::app::GeometrySpecification</name>
    <filename>classompl_1_1app_1_1GeometrySpecification.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::app::GKinematicCarPlanning</name>
    <filename>classompl_1_1app_1_1GKinematicCarPlanning.html</filename>
    <base>ompl::app::KinematicCarPlanning</base>
    <base>ompl::app::RenderGeometry</base>
  </compound>
  <compound kind="class">
    <name>ompl::app::GQuadrotorPlanning</name>
    <filename>classompl_1_1app_1_1GQuadrotorPlanning.html</filename>
    <base>ompl::app::QuadrotorPlanning</base>
    <base>ompl::app::RenderGeometry</base>
  </compound>
  <compound kind="class">
    <name>ompl::app::GSE2RigidBodyPlanning</name>
    <filename>classompl_1_1app_1_1GSE2RigidBodyPlanning.html</filename>
    <base>ompl::app::SE2RigidBodyPlanning</base>
    <base>ompl::app::RenderGeometry</base>
  </compound>
  <compound kind="class">
    <name>ompl::app::GSE3RigidBodyPlanning</name>
    <filename>classompl_1_1app_1_1GSE3RigidBodyPlanning.html</filename>
    <base>ompl::app::SE3RigidBodyPlanning</base>
    <base>ompl::app::RenderGeometry</base>
  </compound>
  <compound kind="class">
    <name>ompl::app::KinematicCarPlanning</name>
    <filename>classompl_1_1app_1_1KinematicCarPlanning.html</filename>
    <base>AppBase&lt; CONTROL &gt;</base>
  </compound>
  <compound kind="class">
    <name>ompl::app::PQPStateValidityChecker</name>
    <filename>classompl_1_1app_1_1PQPStateValidityChecker.html</filename>
    <templarg>T</templarg>
    <base>ompl::base::StateValidityChecker</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isValid</name>
      <anchorfile>classompl_1_1app_1_1PQPStateValidityChecker.html</anchorfile>
      <anchor>aab9c75595722b666146d4b1d393cc6ac</anchor>
      <arglist>(const base::State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>clearance</name>
      <anchorfile>classompl_1_1app_1_1PQPStateValidityChecker.html</anchorfile>
      <anchor>a887cd5f4cc8c009dd45041abc540c0a4</anchor>
      <arglist>(const base::State *state) const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::shared_ptr&lt; PQP_Model &gt;</type>
      <name>PQPModelPtr</name>
      <anchorfile>classompl_1_1app_1_1PQPStateValidityChecker.html</anchorfile>
      <anchor>a0a4a54849ab1753d1d3c132925710233</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::pair&lt; PQPModelPtr, double &gt;</type>
      <name>getPQPModelFromScene</name>
      <anchorfile>classompl_1_1app_1_1PQPStateValidityChecker.html</anchorfile>
      <anchor>ad5e573ff00483a64bb30fd6f4293cc20</anchor>
      <arglist>(const std::vector&lt; const aiScene * &gt; &amp;scenes, const std::vector&lt; aiVector3D &gt; &amp;center) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::pair&lt; PQPModelPtr, double &gt;</type>
      <name>getPQPModelFromTris</name>
      <anchorfile>classompl_1_1app_1_1PQPStateValidityChecker.html</anchorfile>
      <anchor>a9bcf10ed8f84b026f73cca94815889ca</anchor>
      <arglist>(const std::vector&lt; aiVector3D &gt; &amp;triangles) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; PQPModelPtr &gt;</type>
      <name>robotParts_</name>
      <anchorfile>classompl_1_1app_1_1PQPStateValidityChecker.html</anchorfile>
      <anchor>a88f1c2859ed934fef51ae7632ff9c7c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PQPModelPtr</type>
      <name>environment_</name>
      <anchorfile>classompl_1_1app_1_1PQPStateValidityChecker.html</anchorfile>
      <anchor>a6f0973238182a1b093a777b900665cc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>avgEnvSide_</name>
      <anchorfile>classompl_1_1app_1_1PQPStateValidityChecker.html</anchorfile>
      <anchor>aef05d09cfcff388a862bfb5a5029e775</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>distanceTol_</name>
      <anchorfile>classompl_1_1app_1_1PQPStateValidityChecker.html</anchorfile>
      <anchor>ad859d550c37265ff5eeb2d2381e65f83</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::app::QuadrotorPlanning</name>
    <filename>classompl_1_1app_1_1QuadrotorPlanning.html</filename>
    <base>AppBase&lt; CONTROL &gt;</base>
  </compound>
  <compound kind="class">
    <name>ompl::app::RenderGeometry</name>
    <filename>classompl_1_1app_1_1RenderGeometry.html</filename>
    <member kind="function">
      <type></type>
      <name>RenderGeometry</name>
      <anchorfile>classompl_1_1app_1_1RenderGeometry.html</anchorfile>
      <anchor>a434d7cebe9b8250f3515827b0b57ae37</anchor>
      <arglist>(const RigidBodyGeometry &amp;rbg, const GeometricStateExtractor &amp;se)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::app::RigidBodyGeometry</name>
    <filename>classompl_1_1app_1_1RigidBodyGeometry.html</filename>
    <member kind="function">
      <type></type>
      <name>RigidBodyGeometry</name>
      <anchorfile>classompl_1_1app_1_1RigidBodyGeometry.html</anchorfile>
      <anchor>a7725a8ba5d6559e59ed0fec797c9f82c</anchor>
      <arglist>(MotionModel mtype, CollisionChecker ctype)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RigidBodyGeometry</name>
      <anchorfile>classompl_1_1app_1_1RigidBodyGeometry.html</anchorfile>
      <anchor>a75a03720541d92eecf21911e06d7de0d</anchor>
      <arglist>(MotionModel mtype)</arglist>
    </member>
    <member kind="function">
      <type>aiVector3D</type>
      <name>getRobotCenter</name>
      <anchorfile>classompl_1_1app_1_1RigidBodyGeometry.html</anchorfile>
      <anchor>adadc73a93be62e9e593b5ae07538c126</anchor>
      <arglist>(unsigned int robotIndex) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setEnvironmentMesh</name>
      <anchorfile>classompl_1_1app_1_1RigidBodyGeometry.html</anchorfile>
      <anchor>aeb0d41e6526a0a92786a583a7ff46fac</anchor>
      <arglist>(const std::string &amp;env)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addEnvironmentMesh</name>
      <anchorfile>classompl_1_1app_1_1RigidBodyGeometry.html</anchorfile>
      <anchor>af3035eeb89ea10b3aab320ad18cff671</anchor>
      <arglist>(const std::string &amp;env)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setRobotMesh</name>
      <anchorfile>classompl_1_1app_1_1RigidBodyGeometry.html</anchorfile>
      <anchor>abb53e418388ee15b48cdc683d1778ce0</anchor>
      <arglist>(const std::string &amp;robot)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addRobotMesh</name>
      <anchorfile>classompl_1_1app_1_1RigidBodyGeometry.html</anchorfile>
      <anchor>a4ddf0ba2f9046f45d1af8939aab87ee0</anchor>
      <arglist>(const std::string &amp;robot)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStateValidityCheckerType</name>
      <anchorfile>classompl_1_1app_1_1RigidBodyGeometry.html</anchorfile>
      <anchor>a1193a5ac3418afca23a00620178ce1da</anchor>
      <arglist>(CollisionChecker ctype)</arglist>
    </member>
    <member kind="function">
      <type>const base::StateValidityCheckerPtr &amp;</type>
      <name>allocStateValidityChecker</name>
      <anchorfile>classompl_1_1app_1_1RigidBodyGeometry.html</anchorfile>
      <anchor>a0c2e87c6f133d7cd2918d9856b215d22</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si, const GeometricStateExtractor &amp;se, bool selfCollision)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundsFactor</name>
      <anchorfile>classompl_1_1app_1_1RigidBodyGeometry.html</anchorfile>
      <anchor>af65ad6755f5e3b9c33823827391b7142</anchor>
      <arglist>(double factor)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBoundsFactor</name>
      <anchorfile>classompl_1_1app_1_1RigidBodyGeometry.html</anchorfile>
      <anchor>abccf320c423532d647a3a1dd717c0e6f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundsAddition</name>
      <anchorfile>classompl_1_1app_1_1RigidBodyGeometry.html</anchorfile>
      <anchor>a8a27e27e8667bafb0f66bf04cab38031</anchor>
      <arglist>(double add)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBoundsAddition</name>
      <anchorfile>classompl_1_1app_1_1RigidBodyGeometry.html</anchorfile>
      <anchor>a9f64285bff38265e8713a40862c6659b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>base::RealVectorBounds</type>
      <name>inferEnvironmentBounds</name>
      <anchorfile>classompl_1_1app_1_1RigidBodyGeometry.html</anchorfile>
      <anchor>a04e138ba77e32f01216209c66a8e84f8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>factor_</name>
      <anchorfile>classompl_1_1app_1_1RigidBodyGeometry.html</anchorfile>
      <anchor>abd74d6c1e427f0ea15639bd2e272edac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>add_</name>
      <anchorfile>classompl_1_1app_1_1RigidBodyGeometry.html</anchorfile>
      <anchor>a0478e6dc78c1a6979a7a40c9a197b598</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::shared_ptr&lt; Assimp::Importer &gt; &gt;</type>
      <name>importerEnv_</name>
      <anchorfile>classompl_1_1app_1_1RigidBodyGeometry.html</anchorfile>
      <anchor>abeaaadd2ba1fef9d1715900c0ef3ab1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::shared_ptr&lt; Assimp::Importer &gt; &gt;</type>
      <name>importerRobot_</name>
      <anchorfile>classompl_1_1app_1_1RigidBodyGeometry.html</anchorfile>
      <anchor>ad4aa4e31f084144c08afb23add6bad94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GeometrySpecification</type>
      <name>geom_</name>
      <anchorfile>classompl_1_1app_1_1RigidBodyGeometry.html</anchorfile>
      <anchor>af013a42ce76aceac57ef85a1e4d1f8e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateValidityCheckerPtr</type>
      <name>validitySvc_</name>
      <anchorfile>classompl_1_1app_1_1RigidBodyGeometry.html</anchorfile>
      <anchor>a1cbca57493592cf476a34f001149c8e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CollisionChecker</type>
      <name>ctype_</name>
      <anchorfile>classompl_1_1app_1_1RigidBodyGeometry.html</anchorfile>
      <anchor>a43993f7cee3e77cbc34f966b2709dfb1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::app::SE2MultiRigidBodyPlanning</name>
    <filename>classompl_1_1app_1_1SE2MultiRigidBodyPlanning.html</filename>
    <base>AppBase&lt; GEOMETRIC &gt;</base>
    <member kind="function">
      <type></type>
      <name>SE2MultiRigidBodyPlanning</name>
      <anchorfile>classompl_1_1app_1_1SE2MultiRigidBodyPlanning.html</anchorfile>
      <anchor>a0a5dce7d06dc60c3806609807f95a93d</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::ScopedState</type>
      <name>getDefaultStartState</name>
      <anchorfile>classompl_1_1app_1_1SE2MultiRigidBodyPlanning.html</anchorfile>
      <anchor>a31e7f2afccf0326b954746aac008e4a9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const base::StateSpacePtr &amp;</type>
      <name>getGeometricComponentStateSpace</name>
      <anchorfile>classompl_1_1app_1_1SE2MultiRigidBodyPlanning.html</anchorfile>
      <anchor>a45c56d9a071602c525e44f0940657061</anchor>
      <arglist>(unsigned int index) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const base::State *</type>
      <name>getGeometricComponentStateInternal</name>
      <anchorfile>classompl_1_1app_1_1SE2MultiRigidBodyPlanning.html</anchorfile>
      <anchor>ae7c228c6c3a75d99f519e29b0c8b41cc</anchor>
      <arglist>(const base::State *state, unsigned int index) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>n_</name>
      <anchorfile>classompl_1_1app_1_1SE2MultiRigidBodyPlanning.html</anchorfile>
      <anchor>acf6699333ce0c52970c4a22f510cdd3c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::app::SE2RigidBodyPlanning</name>
    <filename>classompl_1_1app_1_1SE2RigidBodyPlanning.html</filename>
    <base>AppBase&lt; GEOMETRIC &gt;</base>
  </compound>
  <compound kind="class">
    <name>ompl::app::SE3MultiRigidBodyPlanning</name>
    <filename>classompl_1_1app_1_1SE3MultiRigidBodyPlanning.html</filename>
    <base>AppBase&lt; GEOMETRIC &gt;</base>
    <member kind="function">
      <type></type>
      <name>SE3MultiRigidBodyPlanning</name>
      <anchorfile>classompl_1_1app_1_1SE3MultiRigidBodyPlanning.html</anchorfile>
      <anchor>abb3be5663f4ef268b16ce8fedd58b025</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::ScopedState</type>
      <name>getDefaultStartState</name>
      <anchorfile>classompl_1_1app_1_1SE3MultiRigidBodyPlanning.html</anchorfile>
      <anchor>a1017216449a2bd56b8088a08e58010b0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const base::StateSpacePtr &amp;</type>
      <name>getGeometricComponentStateSpace</name>
      <anchorfile>classompl_1_1app_1_1SE3MultiRigidBodyPlanning.html</anchorfile>
      <anchor>ae8924d57601c1836ae71affa9411e0fd</anchor>
      <arglist>(unsigned int index) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const base::State *</type>
      <name>getGeometricComponentStateInternal</name>
      <anchorfile>classompl_1_1app_1_1SE3MultiRigidBodyPlanning.html</anchorfile>
      <anchor>adba36aad09ff5ba1d338938fcb95c189</anchor>
      <arglist>(const base::State *state, unsigned int index) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>n_</name>
      <anchorfile>classompl_1_1app_1_1SE3MultiRigidBodyPlanning.html</anchorfile>
      <anchor>a0846531ab81921b27c73688e13854406</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::app::SE3RigidBodyPlanning</name>
    <filename>classompl_1_1app_1_1SE3RigidBodyPlanning.html</filename>
    <base>AppBase&lt; GEOMETRIC &gt;</base>
  </compound>
  <compound kind="class">
    <name>ompl::base::AllValidStateValidityChecker</name>
    <filename>classompl_1_1base_1_1AllValidStateValidityChecker.html</filename>
    <base>ompl::base::StateValidityChecker</base>
    <member kind="function">
      <type></type>
      <name>AllValidStateValidityChecker</name>
      <anchorfile>classompl_1_1base_1_1AllValidStateValidityChecker.html</anchorfile>
      <anchor>add44d7428ce612f9f3ef979aad817bd1</anchor>
      <arglist>(SpaceInformation *si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AllValidStateValidityChecker</name>
      <anchorfile>classompl_1_1base_1_1AllValidStateValidityChecker.html</anchorfile>
      <anchor>a8d0114667d9a1915cd5992763f5aedfb</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isValid</name>
      <anchorfile>classompl_1_1base_1_1AllValidStateValidityChecker.html</anchorfile>
      <anchor>aa4c4626745ac85cf15e545863caa6282</anchor>
      <arglist>(const State *) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::CForestStateSampler</name>
    <filename>classompl_1_1base_1_1CForestStateSampler.html</filename>
    <base>ompl::base::StateSampler</base>
    <member kind="function">
      <type></type>
      <name>CForestStateSampler</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSampler.html</anchorfile>
      <anchor>ac849349712a0e1d0820f1822520cc0c7</anchor>
      <arglist>(const StateSpace *space, StateSamplerPtr sampler)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CForestStateSampler</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSampler.html</anchorfile>
      <anchor>a8c4dd8878454e969cf24b3c16abbc4cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSampler.html</anchorfile>
      <anchor>aee67dbc1741ab429bcf275ff445f007f</anchor>
      <arglist>(State *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleUniformNear</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSampler.html</anchorfile>
      <anchor>a9dd66c1daa378f86dc1a731046458b5d</anchor>
      <arglist>(State *state, const State *near, const double distance)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleGaussian</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSampler.html</anchorfile>
      <anchor>abcb7ce5d91bfead0a538bc42ca351810</anchor>
      <arglist>(State *state, const State *mean, const double stdDev)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStatesToSample</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSampler.html</anchorfile>
      <anchor>af3add105483046a065b6842ea41ba952</anchor>
      <arglist>(const std::vector&lt; const State * &gt; &amp;states)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getNextSample</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSampler.html</anchorfile>
      <anchor>ae1cdb7c0a4877622dcb929aa0b91432c</anchor>
      <arglist>(State *state)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; State * &gt;</type>
      <name>statesToSample_</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSampler.html</anchorfile>
      <anchor>a9332b5c26ca414b04296db6b1b1618e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSampler.html</anchorfile>
      <anchor>af69509cf4200290b44a91c119f70cb75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::mutex</type>
      <name>statesLock_</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSampler.html</anchorfile>
      <anchor>a062f55e9992812f7934a35d17669673e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::CForestStateSpaceWrapper</name>
    <filename>classompl_1_1base_1_1CForestStateSpaceWrapper.html</filename>
    <base>ompl::base::StateSpace</base>
    <member kind="function" virtualness="virtual">
      <type>virtual StateSamplerPtr</type>
      <name>allocDefaultStateSampler</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>a288e2b2d15113d93c5eab9db97604865</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StateSamplerPtr</type>
      <name>allocStateSampler</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>ace76428f4ddb5623d62c66eb0667179d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>acf042ac401c4d4f6a2124498d1f5a4e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isCompound</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>a573c28d0843c95159e2f095cf26937bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDiscrete</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>af283f20fea5da6b2d4f696d619c463a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isHybrid</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>a6ed3fb674dd5a7bfa6e596713bbb38d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMetricSpace</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>ae87bd7e77cbabeea91491e63edbb132b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasSymmetricDistance</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>aaff8c4e0166610b2a51569c7d92a3391</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasSymmetricInterpolate</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>a5a06076d7995d19223a320c3c6955f1a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getLongestValidSegmentFraction</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>ad5af4d300db97f2cd7ed2daeef4b0754</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLongestValidSegmentFraction</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>a65a75002cb76ff366b7f12b70cdba2f3</anchor>
      <arglist>(double segmentFraction)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>validSegmentCount</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>a3b39f38afe64852bf31bc1fd878f995e</anchor>
      <arglist>(const State *state1, const State *state2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>aac6516499d6600e05b0ca5a9c925101c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>afdb62e6a19cf8b81bc4492f44bd04b0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMeasure</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>a0553593b64643b26c54549964207a20c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enforceBounds</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>aa79c8cf4e5e64c8600013c6a8b56660a</anchor>
      <arglist>(State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>aaa149c0e3c3187ab0372cf0e11eb5aab</anchor>
      <arglist>(const State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyState</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>aaa6d4c230754e68138e518518c01f752</anchor>
      <arglist>(State *destination, const State *source) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>distance</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>a23ed154dc875ba67c903a8bffb1fad26</anchor>
      <arglist>(const State *state1, const State *state2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSerializationLength</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>aab70169a4fb294a87d367db0b70cccb1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>ab9eb43abad7a7805a0186a00edd26157</anchor>
      <arglist>(void *serialization, const State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deserialize</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>a105c2a075cd45a0e1c854ec886367cfe</anchor>
      <arglist>(State *state, const void *serialization) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equalStates</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>adf9cd071de5e7babbd3a2dc0e2ca82c6</anchor>
      <arglist>(const State *state1, const State *state2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>a2f4d851918b02d91d4738660e9023b65</anchor>
      <arglist>(const State *from, const State *to, const double t, State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual State *</type>
      <name>allocState</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>a4210dc1a77b139d77e7eedeb062c4ec4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>freeState</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>a5eaa15e4d792ffe00c85b10d322af16d</anchor>
      <arglist>(State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double *</type>
      <name>getValueAddressAtIndex</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>a8491c414dbee1689e61be300e6b6d7a7</anchor>
      <arglist>(State *state, const unsigned int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>registerProjections</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>aee36260ec72b401a45c9885db737dcc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printState</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>a54f6ce49a66d9f2f15c94442d5c2c147</anchor>
      <arglist>(const State *state, std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printSettings</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>ae0f6c64832a35299da740306433dc11f</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printProjections</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>a5982650df6a2012e96eb8710032a7618</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sanityChecks</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>a50fc0e1c36f94b5c3503fc09d49cc403</anchor>
      <arglist>(double zero, double eps, unsigned int flags) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sanityChecks</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>aed6987c57ecfa1a766e0e76244106738</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StateSamplerPtr</type>
      <name>allocSubspaceStateSampler</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>a0945975163cac046d1ef1d6fb476dbea</anchor>
      <arglist>(const StateSpace *subspace) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeLocations</name>
      <anchorfile>classompl_1_1base_1_1CForestStateSpaceWrapper.html</anchorfile>
      <anchor>a77e9ac6096b906c4b0c82fbc54044cf3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::CompoundState</name>
    <filename>classompl_1_1base_1_1CompoundState.html</filename>
    <base>ompl::base::State</base>
    <member kind="function">
      <type>const T *</type>
      <name>as</name>
      <anchorfile>classompl_1_1base_1_1CompoundState.html</anchorfile>
      <anchor>a195febd2ecd923df78eec842ddf9de6d</anchor>
      <arglist>(const unsigned int index) const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>as</name>
      <anchorfile>classompl_1_1base_1_1CompoundState.html</anchorfile>
      <anchor>ab5bd560f3017629a2fc4fce7c52dfbeb</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>const State *</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1base_1_1CompoundState.html</anchorfile>
      <anchor>a0fc30addfa2e9bd8445ffcf7e9ea9047</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1base_1_1CompoundState.html</anchorfile>
      <anchor>a392d7c4afb7977b4b3026a705aab7bb0</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="variable">
      <type>State **</type>
      <name>components</name>
      <anchorfile>classompl_1_1base_1_1CompoundState.html</anchorfile>
      <anchor>acbfb1f1ff3d5eb2315f47c13fc79a86e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::CompoundStateSampler</name>
    <filename>classompl_1_1base_1_1CompoundStateSampler.html</filename>
    <base>ompl::base::StateSampler</base>
    <member kind="function">
      <type></type>
      <name>CompoundStateSampler</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSampler.html</anchorfile>
      <anchor>aa643838d5e9c6f488e610286a7b576fe</anchor>
      <arglist>(const StateSpace *space)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CompoundStateSampler</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSampler.html</anchorfile>
      <anchor>a65d4594f84d5a86f520a423c8299cf34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addSampler</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSampler.html</anchorfile>
      <anchor>a1c3640b72b4eecbae07f1699e5690042</anchor>
      <arglist>(const StateSamplerPtr &amp;sampler, double weightImportance)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSampler.html</anchorfile>
      <anchor>a243cab437e397cc4a53cbd0712c8af29</anchor>
      <arglist>(State *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleUniformNear</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSampler.html</anchorfile>
      <anchor>a71d1f0f36394f2617860f65344b63e32</anchor>
      <arglist>(State *state, const State *near, const double distance)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleGaussian</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSampler.html</anchorfile>
      <anchor>a8e55114a5bcaccc7d347d6d60ca4cc8b</anchor>
      <arglist>(State *state, const State *mean, const double stdDev)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; StateSamplerPtr &gt;</type>
      <name>samplers_</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSampler.html</anchorfile>
      <anchor>a710e5cfa1fd4e9e72b82978245b8ac7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>weightImportance_</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSampler.html</anchorfile>
      <anchor>a1548ec65daceafd54f928ca163a93780</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::CompoundStateSpace</name>
    <filename>classompl_1_1base_1_1CompoundStateSpace.html</filename>
    <base>ompl::base::StateSpace</base>
    <member kind="typedef">
      <type>CompoundState</type>
      <name>StateType</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>af12997f7c56f7263fb78be7444b838e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompoundStateSpace</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a2dcbcf1fac267248ea6ed756494414c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompoundStateSpace</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a813ec9cca9b410654350c8125892c5b2</anchor>
      <arglist>(const std::vector&lt; StateSpacePtr &gt; &amp;components, const std::vector&lt; double &gt; &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>as</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>ab4fab4400b17847818beeeefb7d897cc</anchor>
      <arglist>(const unsigned int index) const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>as</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a87c7ce62071b8267607fa4bb3ccc5eb3</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isCompound</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a4263340b54a633505ba176a42c31e643</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isHybrid</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a88de9632ea8bf11318916c79450df1a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printState</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>aba02f1cf2c9b0f885fb7331ef2c4a8f6</anchor>
      <arglist>(const State *state, std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printSettings</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>ac58df4b2dafa03e935e260c2f9ba5fc9</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeLocations</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a12ddd1934b899da438488c5946e9eb66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a6d134d0ae2517e8fad63186223440c56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSubspace</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a9c772d5b74271f79d95531d00ed36bf7</anchor>
      <arglist>(const StateSpacePtr &amp;component, double weight)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getSubspaceCount</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a29ea86757dc3984b00108e70d14c6e8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const StateSpacePtr &amp;</type>
      <name>getSubspace</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a1fb90480c2747977ebf6d2972aaa851a</anchor>
      <arglist>(const unsigned int index) const </arglist>
    </member>
    <member kind="function">
      <type>const StateSpacePtr &amp;</type>
      <name>getSubspace</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>aa34ec74d96fda1c3dda7650f92932290</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getSubspaceIndex</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a64fd0412787c2288b20a4db5d1d19a00</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSubspace</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a6bd1ef61c7d83879ff4b4da7bcde3167</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSubspaceWeight</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a7f0a5e4f087cf1a5a5bef01136bfe280</anchor>
      <arglist>(const unsigned int index) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSubspaceWeight</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>af3a7044d0cf02521d7fa25175c56ff7d</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubspaceWeight</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>abd107b9b1dadcaf1be6adf83d34f38cf</anchor>
      <arglist>(const unsigned int index, double weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubspaceWeight</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>acaadb6fc872c2ad7ec0f6d2ad2339e14</anchor>
      <arglist>(const std::string &amp;name, double weight)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; StateSpacePtr &gt; &amp;</type>
      <name>getSubspaces</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>aeb551d80251d565baf96172754066573</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>getSubspaceWeights</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a12daaeda5c53935c288a371f1379a4a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLocked</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a80bfc917eff0491fbacc844b63b05297</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>ab344f21f0aba84c14fda3ec87a0b21ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StateSamplerPtr</type>
      <name>allocSubspaceStateSampler</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>ae962c0a4e6b229dc0960d2e927dfb757</anchor>
      <arglist>(const StateSpace *subspace) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a38ab8864a691b72ccaaba25df55cdf61</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a49e40317c4c6ed599f2f56fa40f7f28a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMeasure</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a4cbdb868c229def0538fcfdacf5858be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enforceBounds</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a894235af9908df797d88f0df6e81b8d1</anchor>
      <arglist>(State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a9774b49bc4ac4bcb6aed4f6a99454385</anchor>
      <arglist>(const State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyState</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a4dbc38743832260896d42d89e0b3feec</anchor>
      <arglist>(State *destination, const State *source) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSerializationLength</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>aceb0c910eba4d5e0ac961c21dbb1ecf8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a1eafcd6aab8e6751022dd7c86b2a5316</anchor>
      <arglist>(void *serialization, const State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deserialize</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a286eecaef26d805971fee8781ab59ab8</anchor>
      <arglist>(State *state, const void *serialization) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>distance</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a3f3a7c201f2deb0e8f4c5d3be02300eb</anchor>
      <arglist>(const State *state1, const State *state2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLongestValidSegmentFraction</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>ac07e99d9d6749436e4e3549023ae96fe</anchor>
      <arglist>(double segmentFraction)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>validSegmentCount</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>adc9e674f7301a307b1a547d9548b542f</anchor>
      <arglist>(const State *state1, const State *state2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equalStates</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a382c3d7ac348ae7ea9ef6f8a4284d8f9</anchor>
      <arglist>(const State *state1, const State *state2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a734abdd06f902b42adf134f52359a3f9</anchor>
      <arglist>(const State *from, const State *to, const double t, State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StateSamplerPtr</type>
      <name>allocDefaultStateSampler</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>ad62a4aca633e56a6290f3a668d56accb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual State *</type>
      <name>allocState</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a90179d53a72d95ec08573e921fd12636</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>freeState</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a891f9acb430b0486043efd4be95776bd</anchor>
      <arglist>(State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double *</type>
      <name>getValueAddressAtIndex</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a88d40189fcde811ba620ebc96af33901</anchor>
      <arglist>(State *state, const unsigned int index) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>allocStateComponents</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a1486c4680ec6e01c579fba2b3614d137</anchor>
      <arglist>(CompoundState *state) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; StateSpacePtr &gt;</type>
      <name>components_</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>ae5f43ed0a30998604b18f50b007455b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>componentCount_</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a8c53501d4730a16782ad9619e8423d15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>weights_</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>adbbc7fd19539c47056f3395a39d2ef67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>weightSum_</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a49177a2fbfdbd97e8cfd75743fc939dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>locked_</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a4ed84298425b21e1d2b120a85c124427</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSubspace</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a9c772d5b74271f79d95531d00ed36bf7</anchor>
      <arglist>(const StateSpacePtr &amp;component, double weight)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getSubspaceCount</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a29ea86757dc3984b00108e70d14c6e8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const StateSpacePtr &amp;</type>
      <name>getSubspace</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a1fb90480c2747977ebf6d2972aaa851a</anchor>
      <arglist>(const unsigned int index) const </arglist>
    </member>
    <member kind="function">
      <type>const StateSpacePtr &amp;</type>
      <name>getSubspace</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>aa34ec74d96fda1c3dda7650f92932290</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getSubspaceIndex</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a64fd0412787c2288b20a4db5d1d19a00</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSubspace</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a6bd1ef61c7d83879ff4b4da7bcde3167</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSubspaceWeight</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a7f0a5e4f087cf1a5a5bef01136bfe280</anchor>
      <arglist>(const unsigned int index) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSubspaceWeight</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>af3a7044d0cf02521d7fa25175c56ff7d</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubspaceWeight</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>abd107b9b1dadcaf1be6adf83d34f38cf</anchor>
      <arglist>(const unsigned int index, double weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubspaceWeight</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>acaadb6fc872c2ad7ec0f6d2ad2339e14</anchor>
      <arglist>(const std::string &amp;name, double weight)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; StateSpacePtr &gt; &amp;</type>
      <name>getSubspaces</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>aeb551d80251d565baf96172754066573</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>getSubspaceWeights</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a12daaeda5c53935c288a371f1379a4a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLocked</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a80bfc917eff0491fbacc844b63b05297</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>ab344f21f0aba84c14fda3ec87a0b21ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StateSamplerPtr</type>
      <name>allocSubspaceStateSampler</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>ae962c0a4e6b229dc0960d2e927dfb757</anchor>
      <arglist>(const StateSpace *subspace) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a38ab8864a691b72ccaaba25df55cdf61</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a49e40317c4c6ed599f2f56fa40f7f28a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMeasure</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a4cbdb868c229def0538fcfdacf5858be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enforceBounds</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a894235af9908df797d88f0df6e81b8d1</anchor>
      <arglist>(State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a9774b49bc4ac4bcb6aed4f6a99454385</anchor>
      <arglist>(const State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyState</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a4dbc38743832260896d42d89e0b3feec</anchor>
      <arglist>(State *destination, const State *source) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSerializationLength</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>aceb0c910eba4d5e0ac961c21dbb1ecf8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a1eafcd6aab8e6751022dd7c86b2a5316</anchor>
      <arglist>(void *serialization, const State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deserialize</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a286eecaef26d805971fee8781ab59ab8</anchor>
      <arglist>(State *state, const void *serialization) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>distance</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a3f3a7c201f2deb0e8f4c5d3be02300eb</anchor>
      <arglist>(const State *state1, const State *state2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLongestValidSegmentFraction</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>ac07e99d9d6749436e4e3549023ae96fe</anchor>
      <arglist>(double segmentFraction)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>validSegmentCount</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>adc9e674f7301a307b1a547d9548b542f</anchor>
      <arglist>(const State *state1, const State *state2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equalStates</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a382c3d7ac348ae7ea9ef6f8a4284d8f9</anchor>
      <arglist>(const State *state1, const State *state2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a734abdd06f902b42adf134f52359a3f9</anchor>
      <arglist>(const State *from, const State *to, const double t, State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StateSamplerPtr</type>
      <name>allocDefaultStateSampler</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>ad62a4aca633e56a6290f3a668d56accb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual State *</type>
      <name>allocState</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a90179d53a72d95ec08573e921fd12636</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>freeState</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a891f9acb430b0486043efd4be95776bd</anchor>
      <arglist>(State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double *</type>
      <name>getValueAddressAtIndex</name>
      <anchorfile>classompl_1_1base_1_1CompoundStateSpace.html</anchorfile>
      <anchor>a88d40189fcde811ba620ebc96af33901</anchor>
      <arglist>(State *state, const unsigned int index) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::Cost</name>
    <filename>classompl_1_1base_1_1Cost.html</filename>
    <member kind="function">
      <type></type>
      <name>Cost</name>
      <anchorfile>classompl_1_1base_1_1Cost.html</anchorfile>
      <anchor>a19bb3539532f4db2e35ee61151a8ade6</anchor>
      <arglist>(double v=0.0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>value</name>
      <anchorfile>classompl_1_1base_1_1Cost.html</anchorfile>
      <anchor>a9bac7d36478767a2c80977d256372e1a</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::DiscreteMotionValidator</name>
    <filename>classompl_1_1base_1_1DiscreteMotionValidator.html</filename>
    <base>ompl::base::MotionValidator</base>
    <member kind="function">
      <type></type>
      <name>DiscreteMotionValidator</name>
      <anchorfile>classompl_1_1base_1_1DiscreteMotionValidator.html</anchorfile>
      <anchor>a8a24886d956a31326de16e97ef72382b</anchor>
      <arglist>(SpaceInformation *si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteMotionValidator</name>
      <anchorfile>classompl_1_1base_1_1DiscreteMotionValidator.html</anchorfile>
      <anchor>a206557c0c0bf3b3751ee09c1184f4b7b</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkMotion</name>
      <anchorfile>classompl_1_1base_1_1DiscreteMotionValidator.html</anchorfile>
      <anchor>a348eaada9bd63a377b65fc53ddeb0e2d</anchor>
      <arglist>(const State *s1, const State *s2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkMotion</name>
      <anchorfile>classompl_1_1base_1_1DiscreteMotionValidator.html</anchorfile>
      <anchor>a7ad5ee770bd60b4368ed780098877331</anchor>
      <arglist>(const State *s1, const State *s2, std::pair&lt; State *, double &gt; &amp;lastValid) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::DiscreteStateSampler</name>
    <filename>classompl_1_1base_1_1DiscreteStateSampler.html</filename>
    <base>ompl::base::StateSampler</base>
    <member kind="function">
      <type></type>
      <name>DiscreteStateSampler</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSampler.html</anchorfile>
      <anchor>ab087ba3cbdebc2a12fd5fd1f3c18cc53</anchor>
      <arglist>(const StateSpace *space)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSampler.html</anchorfile>
      <anchor>a3ee2bb324e214f71f8b90a63bd3633c1</anchor>
      <arglist>(State *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleUniformNear</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSampler.html</anchorfile>
      <anchor>a5a52c98af688864714a40d4e5e72f3dc</anchor>
      <arglist>(State *state, const State *near, const double distance)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleGaussian</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSampler.html</anchorfile>
      <anchor>ab414f20dbebde3104714381d6c450c47</anchor>
      <arglist>(State *state, const State *mean, const double stdDev)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::DiscreteStateSpace</name>
    <filename>classompl_1_1base_1_1DiscreteStateSpace.html</filename>
    <base>ompl::base::StateSpace</base>
    <class kind="class">ompl::base::DiscreteStateSpace::StateType</class>
    <member kind="function">
      <type></type>
      <name>DiscreteStateSpace</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>a3d3b1f110e2717437d5e20ce33185346</anchor>
      <arglist>(int lowerBound, int upperBound)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDiscrete</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>a917636cbbddf9d738ec96510ff7ad749</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>a31d131b80aa5b44b81bb68043b39840a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>a4a3a24cbf9f5c888b121eb0b4652f99d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMeasure</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>a230b0a34f1d8e1e7888d55aadedb30f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enforceBounds</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>a1246bbbe424c3c82d4661d8c409b87da</anchor>
      <arglist>(State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>a269c5ff29309beaaec16e130ad6d6a84</anchor>
      <arglist>(const State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSerializationLength</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>a1c88277e2ea79f3cbaf4de5a5a96933c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>ac768a780c2bf1833c762f5434599e4fd</anchor>
      <arglist>(void *serialization, const State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deserialize</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>a78cc78d88731cf8f74dfebdc195649be</anchor>
      <arglist>(State *state, const void *serialization) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyState</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>a6ce8e181f39cff7ccab6ac5ae2f9cafd</anchor>
      <arglist>(State *destination, const State *source) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>distance</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>ab2324393c8a76c6ff127213b4dc1c90e</anchor>
      <arglist>(const State *state1, const State *state2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equalStates</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>ade2b260d8e816d5086cb104e6148d54f</anchor>
      <arglist>(const State *state1, const State *state2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>a17bdd2b4bf0e0cea9fc9ffe2bc9d12e3</anchor>
      <arglist>(const State *from, const State *to, const double t, State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StateSamplerPtr</type>
      <name>allocDefaultStateSampler</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>a7652c53d75edad1ab8bff320523332a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual State *</type>
      <name>allocState</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>ae008f8857b9a70c71fa6978685c11fe9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>freeState</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>a4f318a56d5804c88f47605646882c471</anchor>
      <arglist>(State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printState</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>ae659ee971f00c53002fc73384db0aaa6</anchor>
      <arglist>(const State *state, std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printSettings</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>acafc4e5db93a4ff66a8a1c5461f84229</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>registerProjections</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>a72b80e35bffc0aa1fc1e419eb45934ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getStateCount</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>ab9b72312b76e3d6cf433b071ae5d195b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLowerBound</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>a195df005aec992d36658e20bc471ef95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getUpperBound</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>a560b5165276adbdd2a630fd83345dcd4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBounds</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>a998e66139b0ecb28fbc2743ada6e9af5</anchor>
      <arglist>(int lowerBound, int upperBound)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>ae3c1c0d0e5906290d7bc4844ca1cb7c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lowerBound_</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>a7174ff602c03b57979137dcca4b65e82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperBound_</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace.html</anchorfile>
      <anchor>a6ef735722c1289bf0a3fda7a6f6c2dd7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::DiscreteStateSpace::StateType</name>
    <filename>classompl_1_1base_1_1DiscreteStateSpace_1_1StateType.html</filename>
    <base>ompl::base::State</base>
    <member kind="variable">
      <type>int</type>
      <name>value</name>
      <anchorfile>classompl_1_1base_1_1DiscreteStateSpace_1_1StateType.html</anchorfile>
      <anchor>a3a8b1ff9485b81db52b2695269ad15f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::DubinsMotionValidator</name>
    <filename>classompl_1_1base_1_1DubinsMotionValidator.html</filename>
    <base>ompl::base::MotionValidator</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkMotion</name>
      <anchorfile>classompl_1_1base_1_1DubinsMotionValidator.html</anchorfile>
      <anchor>ac0a5207503f3c81f00d93f219faf9a10</anchor>
      <arglist>(const State *s1, const State *s2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkMotion</name>
      <anchorfile>classompl_1_1base_1_1DubinsMotionValidator.html</anchorfile>
      <anchor>a9c6b22e0dbe2ede1e1807490376d6c9c</anchor>
      <arglist>(const State *s1, const State *s2, std::pair&lt; State *, double &gt; &amp;lastValid) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::DubinsStateSpace</name>
    <filename>classompl_1_1base_1_1DubinsStateSpace.html</filename>
    <base>ompl::base::SE2StateSpace</base>
    <class kind="class">ompl::base::DubinsStateSpace::DubinsPath</class>
    <member kind="enumeration">
      <type></type>
      <name>DubinsPathSegmentType</name>
      <anchorfile>classompl_1_1base_1_1DubinsStateSpace.html</anchorfile>
      <anchor>a34eab50fdbefb94065b43fb84fe8bdb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMetricSpace</name>
      <anchorfile>classompl_1_1base_1_1DubinsStateSpace.html</anchorfile>
      <anchor>a5bd39284c0cca0ab89546ce55257ac95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>distance</name>
      <anchorfile>classompl_1_1base_1_1DubinsStateSpace.html</anchorfile>
      <anchor>a4425cef35d63ab90e7b5e63005f05b4b</anchor>
      <arglist>(const State *state1, const State *state2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1base_1_1DubinsStateSpace.html</anchorfile>
      <anchor>af3b5210e2a18217c233f5bc2fd5a2007</anchor>
      <arglist>(const State *from, const State *to, const double t, State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasSymmetricDistance</name>
      <anchorfile>classompl_1_1base_1_1DubinsStateSpace.html</anchorfile>
      <anchor>a0ce7d020e382ba0a3d6be94c037acfcb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasSymmetricInterpolate</name>
      <anchorfile>classompl_1_1base_1_1DubinsStateSpace.html</anchorfile>
      <anchor>a3ee15ff3d53887174ed99852426133b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sanityChecks</name>
      <anchorfile>classompl_1_1base_1_1DubinsStateSpace.html</anchorfile>
      <anchor>af7ff1e4320953dcee1a7ccef5e9e6e86</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DubinsPath</type>
      <name>dubins</name>
      <anchorfile>classompl_1_1base_1_1DubinsStateSpace.html</anchorfile>
      <anchor>a15930a4c377d4ccad30a94fd40a3b8c5</anchor>
      <arglist>(const State *state1, const State *state2) const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DubinsPathSegmentType</type>
      <name>dubinsPathType</name>
      <anchorfile>classompl_1_1base_1_1DubinsStateSpace.html</anchorfile>
      <anchor>aebf8057b5f39407b3b9be39804a1c156</anchor>
      <arglist>[6][3]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>rho_</name>
      <anchorfile>classompl_1_1base_1_1DubinsStateSpace.html</anchorfile>
      <anchor>abaaaafabe7d3861288fae598e4f11a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isSymmetric_</name>
      <anchorfile>classompl_1_1base_1_1DubinsStateSpace.html</anchorfile>
      <anchor>adb79628e083c068506671524714fec49</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::DubinsStateSpace::DubinsPath</name>
    <filename>classompl_1_1base_1_1DubinsStateSpace_1_1DubinsPath.html</filename>
    <member kind="variable">
      <type>const DubinsPathSegmentType *</type>
      <name>type_</name>
      <anchorfile>classompl_1_1base_1_1DubinsStateSpace_1_1DubinsPath.html</anchorfile>
      <anchor>af858afdae77aab1792a7ccfc8e4fcb5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>length_</name>
      <anchorfile>classompl_1_1base_1_1DubinsStateSpace_1_1DubinsPath.html</anchorfile>
      <anchor>a30de504b0ca835d4db99234983743834</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>reverse_</name>
      <anchorfile>classompl_1_1base_1_1DubinsStateSpace_1_1DubinsPath.html</anchorfile>
      <anchor>a2e343bbf7753309853426bf7399c93a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::GaussianValidStateSampler</name>
    <filename>classompl_1_1base_1_1GaussianValidStateSampler.html</filename>
    <base>ompl::base::ValidStateSampler</base>
    <member kind="function">
      <type></type>
      <name>GaussianValidStateSampler</name>
      <anchorfile>classompl_1_1base_1_1GaussianValidStateSampler.html</anchorfile>
      <anchor>ac1e86d2bbad84c0d6ef8f8ba1bd6e80f</anchor>
      <arglist>(const SpaceInformation *si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>sample</name>
      <anchorfile>classompl_1_1base_1_1GaussianValidStateSampler.html</anchorfile>
      <anchor>a6ba42cec0b1ba4b2f272bc70ddddde97</anchor>
      <arglist>(State *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>sampleNear</name>
      <anchorfile>classompl_1_1base_1_1GaussianValidStateSampler.html</anchorfile>
      <anchor>afc6097a6245bc5ef69f4b64cc9c2a9cc</anchor>
      <arglist>(State *state, const State *near, const double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getStdDev</name>
      <anchorfile>classompl_1_1base_1_1GaussianValidStateSampler.html</anchorfile>
      <anchor>aaae363aa8e1de6792c81199ff9bacbb7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStdDev</name>
      <anchorfile>classompl_1_1base_1_1GaussianValidStateSampler.html</anchorfile>
      <anchor>aa82bfdfce3b00d6ea22a02c570356588</anchor>
      <arglist>(double stddev)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1base_1_1GaussianValidStateSampler.html</anchorfile>
      <anchor>a48a0f8607cf0581ad8e991b49cf494f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>stddev_</name>
      <anchorfile>classompl_1_1base_1_1GaussianValidStateSampler.html</anchorfile>
      <anchor>a8ba0b055b4a9c2c1bf1809b5fff577b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::GenericParam</name>
    <filename>classompl_1_1base_1_1GenericParam.html</filename>
    <member kind="function">
      <type></type>
      <name>GenericParam</name>
      <anchorfile>classompl_1_1base_1_1GenericParam.html</anchorfile>
      <anchor>ab90d05f6f48ba107c7a3b2580593b1ec</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classompl_1_1base_1_1GenericParam.html</anchorfile>
      <anchor>a373e5cf9fba686ce117b5248fed80121</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classompl_1_1base_1_1GenericParam.html</anchorfile>
      <anchor>afef9c614152e54f0622ad820ed6e216e</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setValue</name>
      <anchorfile>classompl_1_1base_1_1GenericParam.html</anchorfile>
      <anchor>ac86966b2dbc76ade5f19832315440972</anchor>
      <arglist>(const std::string &amp;value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getValue</name>
      <anchorfile>classompl_1_1base_1_1GenericParam.html</anchorfile>
      <anchor>a66103351e00efbd95817e71ab71c58a7</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function">
      <type>GenericParam &amp;</type>
      <name>operator=</name>
      <anchorfile>classompl_1_1base_1_1GenericParam.html</anchorfile>
      <anchor>a60aff425e9f64795991d6a0da3c437ad</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRangeSuggestion</name>
      <anchorfile>classompl_1_1base_1_1GenericParam.html</anchorfile>
      <anchor>a78b8f0256bb82994ba01107ddb23afab</anchor>
      <arglist>(const std::string &amp;rangeSuggestion)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getRangeSuggestion</name>
      <anchorfile>classompl_1_1base_1_1GenericParam.html</anchorfile>
      <anchor>a6f2ed34cf56bc1b5abe0b684f5969e51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::string &amp;</type>
      <name>maybeWrapBool</name>
      <anchorfile>classompl_1_1base_1_1GenericParam.html</anchorfile>
      <anchor>a1a2573dea95f2cc3b13b14adaf8b70da</anchor>
      <arglist>(const std::string &amp;value) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>classompl_1_1base_1_1GenericParam.html</anchorfile>
      <anchor>a4aa3a92cdf3ce19efdec17284ac460ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>rangeSuggestion_</name>
      <anchorfile>classompl_1_1base_1_1GenericParam.html</anchorfile>
      <anchor>adfcb7422d41e2a863c604bc6b28e892e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::Goal</name>
    <filename>classompl_1_1base_1_1Goal.html</filename>
    <member kind="function">
      <type></type>
      <name>Goal</name>
      <anchorfile>classompl_1_1base_1_1Goal.html</anchorfile>
      <anchor>aa32a9dcc9c62ab906eb89e3b6c4e04c7</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Goal</name>
      <anchorfile>classompl_1_1base_1_1Goal.html</anchorfile>
      <anchor>abc80622d90d8b304a0627abde2e8c142</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>as</name>
      <anchorfile>classompl_1_1base_1_1Goal.html</anchorfile>
      <anchor>a79bd15b3c533dbf5c0290bfd41e1db9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>as</name>
      <anchorfile>classompl_1_1base_1_1Goal.html</anchorfile>
      <anchor>a1d4c7ab3b62d219f13d6f5e0f44a7b9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GoalType</type>
      <name>getType</name>
      <anchorfile>classompl_1_1base_1_1Goal.html</anchorfile>
      <anchor>a9a4d1e5195472294e69d4fa55685894c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasType</name>
      <anchorfile>classompl_1_1base_1_1Goal.html</anchorfile>
      <anchor>a72d63bac8cbeb4110fdfe93172c92209</anchor>
      <arglist>(GoalType type) const </arglist>
    </member>
    <member kind="function">
      <type>const SpaceInformationPtr &amp;</type>
      <name>getSpaceInformation</name>
      <anchorfile>classompl_1_1base_1_1Goal.html</anchorfile>
      <anchor>a9f75126abc8acc47f7bcbf8c1ef8aabb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isSatisfied</name>
      <anchorfile>classompl_1_1base_1_1Goal.html</anchorfile>
      <anchor>aa10fe74716a8faf64d558c9162852c85</anchor>
      <arglist>(const State *st) const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSatisfied</name>
      <anchorfile>classompl_1_1base_1_1Goal.html</anchorfile>
      <anchor>aa3a78aa896a1a7778e40c02f4e1d3d1d</anchor>
      <arglist>(const State *st, double *distance) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isStartGoalPairValid</name>
      <anchorfile>classompl_1_1base_1_1Goal.html</anchorfile>
      <anchor>a5d5285908b7e09d61577279f35e47175</anchor>
      <arglist>(const State *, const State *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classompl_1_1base_1_1Goal.html</anchorfile>
      <anchor>ac6aa88e126b53e871c1cd76300e56f9c</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GoalType</type>
      <name>type_</name>
      <anchorfile>classompl_1_1base_1_1Goal.html</anchorfile>
      <anchor>af5e22736c4d1335c4edf92d8c76eaa02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SpaceInformationPtr</type>
      <name>si_</name>
      <anchorfile>classompl_1_1base_1_1Goal.html</anchorfile>
      <anchor>a2568592d1968413e2759564c4f6511b0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::GoalLazySamples</name>
    <filename>classompl_1_1base_1_1GoalLazySamples.html</filename>
    <base>ompl::base::GoalStates</base>
    <member kind="typedef">
      <type>std::function&lt; void(const base::State *)&gt;</type>
      <name>NewStateCallbackFn</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>adc944dc38938b6efc568932fe6fbe5a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GoalLazySamples</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>ad296cf0838d99bbd70fdf807432f2e67</anchor>
      <arglist>(const SpaceInformationPtr &amp;si, const GoalSamplingFn &amp;samplerFunc, bool autoStart=true, double minDist=std::numeric_limits&lt; double &gt;::epsilon())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleGoal</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>a0fb9e9d12bea1de967b6fbc6b6738719</anchor>
      <arglist>(State *st) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>distanceGoal</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>a692bde395578c4fc7e9db960f724832e</anchor>
      <arglist>(const State *st) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addState</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>a11885628f6b06904462165fd9d1fc08b</anchor>
      <arglist>(const State *st)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startSampling</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>a4c4cef910c1c1cb0dca35467cb2922a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopSampling</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>a660b9c56424ea5ead3071852b334c00a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSampling</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>a58660de959722b73058da5de651fb2e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinNewSampleDistance</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>ae19f97c741f2c0f48c7e3c88b16d432f</anchor>
      <arglist>(double dist)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMinNewSampleDistance</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>ad6849ccdd612c8f04885f24d14b660dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>samplingAttemptsCount</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>af889016a1d4f888ad730191b284432f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNewStateCallback</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>a9994712b27abc015ede61ddeda8b7c40</anchor>
      <arglist>(const NewStateCallbackFn &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addStateIfDifferent</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>aa7015a082cbebc65f76d57cc7fc8521a</anchor>
      <arglist>(const State *st, double minDistance)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>couldSample</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>a6c689d0edfef10ab1a8dd3abef030629</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasStates</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>af80c32d340567a3677a2bb351b5461d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>a087672175f682a5057af74b09ac1073e</anchor>
      <arglist>(unsigned int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::size_t</type>
      <name>getStateCount</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>add21ac8d798bf63a9d1ebd1da6bbb3d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>a964bbd28b3e27d533efdca38e9c85d12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>goalSamplingThread</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>a3d1575a83c63febec869b3cbf598a43f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::mutex</type>
      <name>lock_</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>acec0373afd2076ceb38bde486436aa6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GoalSamplingFn</type>
      <name>samplerFunc_</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>ad3ce46e7898f2f001fcdd07a23b09987</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>terminateSamplingThread_</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>ac8bfb5596555a8f1ee48c8c75ee93205</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::thread *</type>
      <name>samplingThread_</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>afaae834bc6e996bc4ac5a4eb60d702aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>samplingAttempts_</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>af913f060090e17115082b6a44afb5165</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>minDist_</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>a2872e6f726b36c7140d88b81921a5a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NewStateCallbackFn</type>
      <name>callback_</name>
      <anchorfile>classompl_1_1base_1_1GoalLazySamples.html</anchorfile>
      <anchor>a7a0e26aafce1ce507d4453a5b3023cf9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::GoalPtr</name>
    <filename>classompl_1_1base_1_1GoalPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::base::GoalRegion</name>
    <filename>classompl_1_1base_1_1GoalRegion.html</filename>
    <base>ompl::base::Goal</base>
    <member kind="function">
      <type></type>
      <name>GoalRegion</name>
      <anchorfile>classompl_1_1base_1_1GoalRegion.html</anchorfile>
      <anchor>a8582e4a9183af6341efeec3a3d52e91b</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSatisfied</name>
      <anchorfile>classompl_1_1base_1_1GoalRegion.html</anchorfile>
      <anchor>a63180f3c2e53eb6feedae905cb858f39</anchor>
      <arglist>(const State *st) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSatisfied</name>
      <anchorfile>classompl_1_1base_1_1GoalRegion.html</anchorfile>
      <anchor>a7d6ee3fbc03fe16a55da3b4b4c07dbca</anchor>
      <arglist>(const State *st, double *distance) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>distanceGoal</name>
      <anchorfile>classompl_1_1base_1_1GoalRegion.html</anchorfile>
      <anchor>a9ce30f1eb6887d373edf47bff46cdccf</anchor>
      <arglist>(const State *st) const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classompl_1_1base_1_1GoalRegion.html</anchorfile>
      <anchor>a270e456a2c866bb7fd1e3583607a9687</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setThreshold</name>
      <anchorfile>classompl_1_1base_1_1GoalRegion.html</anchorfile>
      <anchor>a66faea81767a0772924082816b88e63f</anchor>
      <arglist>(double threshold)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getThreshold</name>
      <anchorfile>classompl_1_1base_1_1GoalRegion.html</anchorfile>
      <anchor>a325dbeb6b2c4493dd663ef845eef12d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>threshold_</name>
      <anchorfile>classompl_1_1base_1_1GoalRegion.html</anchorfile>
      <anchor>a2f7fad7260906a91d4f59f39b1d96199</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::GoalSampleableRegion</name>
    <filename>classompl_1_1base_1_1GoalSampleableRegion.html</filename>
    <base>ompl::base::GoalRegion</base>
    <member kind="function">
      <type></type>
      <name>GoalSampleableRegion</name>
      <anchorfile>classompl_1_1base_1_1GoalSampleableRegion.html</anchorfile>
      <anchor>a9faa48988af0b30f168c2042a3877936</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sampleGoal</name>
      <anchorfile>classompl_1_1base_1_1GoalSampleableRegion.html</anchorfile>
      <anchor>a9e2cdaade6563fae52c65b7055ea4e71</anchor>
      <arglist>(State *st) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>maxSampleCount</name>
      <anchorfile>classompl_1_1base_1_1GoalSampleableRegion.html</anchorfile>
      <anchor>a69e101fa46420de64ba262ada750aa9e</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canSample</name>
      <anchorfile>classompl_1_1base_1_1GoalSampleableRegion.html</anchorfile>
      <anchor>a16108536f4fcf4595db8c0f16818afd1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>couldSample</name>
      <anchorfile>classompl_1_1base_1_1GoalSampleableRegion.html</anchorfile>
      <anchor>adbfa83eb76309039b839e3fb87c88203</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::GoalState</name>
    <filename>classompl_1_1base_1_1GoalState.html</filename>
    <base>ompl::base::GoalSampleableRegion</base>
    <member kind="function">
      <type></type>
      <name>GoalState</name>
      <anchorfile>classompl_1_1base_1_1GoalState.html</anchorfile>
      <anchor>a4622c973b5b2aadfaccb94a96266a726</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleGoal</name>
      <anchorfile>classompl_1_1base_1_1GoalState.html</anchorfile>
      <anchor>a55bf40a86bb1c74c3735d4c47516418e</anchor>
      <arglist>(State *st) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>maxSampleCount</name>
      <anchorfile>classompl_1_1base_1_1GoalState.html</anchorfile>
      <anchor>ad2a0ee9bc952a1b49d54f6a24ce589ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>distanceGoal</name>
      <anchorfile>classompl_1_1base_1_1GoalState.html</anchorfile>
      <anchor>a262e31a793401d6d5d4494e51a76dde1</anchor>
      <arglist>(const State *st) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classompl_1_1base_1_1GoalState.html</anchorfile>
      <anchor>a3e0d5ac8a1a29789f5b0ba59aae52728</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classompl_1_1base_1_1GoalState.html</anchorfile>
      <anchor>a4ffb6cc48229964b4cc86066dda3e649</anchor>
      <arglist>(const State *st)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classompl_1_1base_1_1GoalState.html</anchorfile>
      <anchor>a8217875a352e3e9c8ed0de422d60ae9d</anchor>
      <arglist>(const ScopedState&lt;&gt; &amp;st)</arglist>
    </member>
    <member kind="function">
      <type>const State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1base_1_1GoalState.html</anchorfile>
      <anchor>abfe70cdec2b6b6cc50bcdc0e1d1037e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1base_1_1GoalState.html</anchorfile>
      <anchor>aa8616cd760d47cb05fd64166dcc08331</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>State *</type>
      <name>state_</name>
      <anchorfile>classompl_1_1base_1_1GoalState.html</anchorfile>
      <anchor>ada5f219321f4ef763ee2c718a5e6ee35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::GoalStates</name>
    <filename>classompl_1_1base_1_1GoalStates.html</filename>
    <base>ompl::base::GoalSampleableRegion</base>
    <member kind="function">
      <type></type>
      <name>GoalStates</name>
      <anchorfile>classompl_1_1base_1_1GoalStates.html</anchorfile>
      <anchor>ac1431173837a911a7b4b32d7e7f86dbc</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleGoal</name>
      <anchorfile>classompl_1_1base_1_1GoalStates.html</anchorfile>
      <anchor>a0acc6095d25d837940f21e76bb9793ea</anchor>
      <arglist>(State *st) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>maxSampleCount</name>
      <anchorfile>classompl_1_1base_1_1GoalStates.html</anchorfile>
      <anchor>af762ea1e00c3f7c84130c832aee0b698</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>distanceGoal</name>
      <anchorfile>classompl_1_1base_1_1GoalStates.html</anchorfile>
      <anchor>a7f630ce514a5b222e9c27232d3de6a10</anchor>
      <arglist>(const State *st) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classompl_1_1base_1_1GoalStates.html</anchorfile>
      <anchor>a0186d82ecb85de07b3f256c7643bfce8</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addState</name>
      <anchorfile>classompl_1_1base_1_1GoalStates.html</anchorfile>
      <anchor>a6cf378a86fd25680dfaa5b2446598d55</anchor>
      <arglist>(const State *st)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addState</name>
      <anchorfile>classompl_1_1base_1_1GoalStates.html</anchorfile>
      <anchor>af43dd0177bdc390dc3d98aab04003238</anchor>
      <arglist>(const ScopedState&lt;&gt; &amp;st)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1base_1_1GoalStates.html</anchorfile>
      <anchor>a868450f0d56ec4ad679680acb947f3da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasStates</name>
      <anchorfile>classompl_1_1base_1_1GoalStates.html</anchorfile>
      <anchor>afda151a724a562d2d893d6bcc35ac1c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1base_1_1GoalStates.html</anchorfile>
      <anchor>a794f4cbd776d0f841e250e9bb9a69181</anchor>
      <arglist>(unsigned int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::size_t</type>
      <name>getStateCount</name>
      <anchorfile>classompl_1_1base_1_1GoalStates.html</anchorfile>
      <anchor>a02f4b135242e65fd8fd3f59a12df578f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; State * &gt;</type>
      <name>states_</name>
      <anchorfile>classompl_1_1base_1_1GoalStates.html</anchorfile>
      <anchor>a53983cf05b4284978a6a61a725bc650b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::InformedSampler</name>
    <filename>classompl_1_1base_1_1InformedSampler.html</filename>
    <member kind="function">
      <type></type>
      <name>InformedSampler</name>
      <anchorfile>classompl_1_1base_1_1InformedSampler.html</anchorfile>
      <anchor>a120c9a7334392ccf1c8afa5fe6c49966</anchor>
      <arglist>(const ProblemDefinitionPtr &amp;probDefn, unsigned int maxNumberCalls)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1InformedSampler.html</anchorfile>
      <anchor>a2d32eb1cc581d4e3b23c2d09d94f4f84</anchor>
      <arglist>(State *statePtr, const Cost &amp;maxCost)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1InformedSampler.html</anchorfile>
      <anchor>a396b50e8d31a47f5d28bc9552aa33246</anchor>
      <arglist>(State *statePtr, const Cost &amp;minCost, const Cost &amp;maxCost)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasInformedMeasure</name>
      <anchorfile>classompl_1_1base_1_1InformedSampler.html</anchorfile>
      <anchor>aebef5486084b83da1247380589c65f25</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getInformedMeasure</name>
      <anchorfile>classompl_1_1base_1_1InformedSampler.html</anchorfile>
      <anchor>a1c24b73e0f6c0203b5d3c291b1f986cb</anchor>
      <arglist>(const Cost &amp;currentCost) const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getInformedMeasure</name>
      <anchorfile>classompl_1_1base_1_1InformedSampler.html</anchorfile>
      <anchor>a0dfabeb135a0ac17f5a958fa371cfa4c</anchor>
      <arglist>(const Cost &amp;minCost, const Cost &amp;maxCost) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cost</type>
      <name>heuristicSolnCost</name>
      <anchorfile>classompl_1_1base_1_1InformedSampler.html</anchorfile>
      <anchor>ac85941a5f3fc3aae095d86d7024a95b0</anchor>
      <arglist>(const State *statePtr) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ProblemDefinitionPtr</type>
      <name>probDefn_</name>
      <anchorfile>classompl_1_1base_1_1InformedSampler.html</anchorfile>
      <anchor>a504d725e8178d40a097202b7b39ab84e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OptimizationObjectivePtr</type>
      <name>opt_</name>
      <anchorfile>classompl_1_1base_1_1InformedSampler.html</anchorfile>
      <anchor>a1ef1b4a722b212618179a424c4720911</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StateSpacePtr</type>
      <name>space_</name>
      <anchorfile>classompl_1_1base_1_1InformedSampler.html</anchorfile>
      <anchor>af51abcd9f7e177cdc39e2c714bded74f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numIters_</name>
      <anchorfile>classompl_1_1base_1_1InformedSampler.html</anchorfile>
      <anchor>a62aee37b97016c751e6eea4ac0a72783</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::InformedStateSampler</name>
    <filename>classompl_1_1base_1_1InformedStateSampler.html</filename>
    <base>ompl::base::StateSampler</base>
    <member kind="typedef">
      <type>std::function&lt; Cost()&gt;</type>
      <name>GetCurrentCostFunc</name>
      <anchorfile>classompl_1_1base_1_1InformedStateSampler.html</anchorfile>
      <anchor>a42af53c3e46ae42c29d1e2cae8f447c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InformedStateSampler</name>
      <anchorfile>classompl_1_1base_1_1InformedStateSampler.html</anchorfile>
      <anchor>ab68fe20aad707ae747ca129a0d7adb0b</anchor>
      <arglist>(const ProblemDefinitionPtr &amp;probDefn, unsigned int maxNumberCalls, const GetCurrentCostFunc &amp;costFunc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InformedStateSampler</name>
      <anchorfile>classompl_1_1base_1_1InformedStateSampler.html</anchorfile>
      <anchor>a30a95df17c2960e732191cbdaa3fab87</anchor>
      <arglist>(const ProblemDefinitionPtr &amp;probDefn, const GetCurrentCostFunc &amp;costFunc, const InformedSamplerPtr &amp;infSampler)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1InformedStateSampler.html</anchorfile>
      <anchor>a41e49caf12b8a74af8e0ef675381bcd8</anchor>
      <arglist>(State *statePtr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleUniformNear</name>
      <anchorfile>classompl_1_1base_1_1InformedStateSampler.html</anchorfile>
      <anchor>ab7bf07dcabb1ea35a6f3fe28b0bde402</anchor>
      <arglist>(State *statePtr, const State *near, const double distance)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleGaussian</name>
      <anchorfile>classompl_1_1base_1_1InformedStateSampler.html</anchorfile>
      <anchor>abcb01978f8d162ac741a0e976eda7be4</anchor>
      <arglist>(State *statePtr, const State *mean, const double stdDev)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::IterationTerminationCondition</name>
    <filename>classompl_1_1base_1_1IterationTerminationCondition.html</filename>
    <member kind="function">
      <type></type>
      <name>IterationTerminationCondition</name>
      <anchorfile>classompl_1_1base_1_1IterationTerminationCondition.html</anchorfile>
      <anchor>ad0a2a20d4f575fa2de579dd5a78b063a</anchor>
      <arglist>(unsigned int numIterations)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eval</name>
      <anchorfile>classompl_1_1base_1_1IterationTerminationCondition.html</anchorfile>
      <anchor>a49951c7149298bdb4f010b72f9e83490</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classompl_1_1base_1_1IterationTerminationCondition.html</anchorfile>
      <anchor>a246b9ca7e6b2f86a39136f828aeea19c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator PlannerTerminationCondition</name>
      <anchorfile>classompl_1_1base_1_1IterationTerminationCondition.html</anchorfile>
      <anchor>aaefe7d1f60c659d66b73c547c59edb1b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::LightningRetrieveRepairPtr</name>
    <filename>classompl_1_1base_1_1LightningRetrieveRepairPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::base::MaximizeClearanceValidStateSampler</name>
    <filename>classompl_1_1base_1_1MaximizeClearanceValidStateSampler.html</filename>
    <base>ompl::base::ValidStateSampler</base>
    <member kind="function">
      <type></type>
      <name>MaximizeClearanceValidStateSampler</name>
      <anchorfile>classompl_1_1base_1_1MaximizeClearanceValidStateSampler.html</anchorfile>
      <anchor>aa2e74681d93fae719ec4bdfa2aa972ef</anchor>
      <arglist>(const SpaceInformation *si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>sample</name>
      <anchorfile>classompl_1_1base_1_1MaximizeClearanceValidStateSampler.html</anchorfile>
      <anchor>aca5ed44a784aed9cebd393b77c20d4e4</anchor>
      <arglist>(State *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>sampleNear</name>
      <anchorfile>classompl_1_1base_1_1MaximizeClearanceValidStateSampler.html</anchorfile>
      <anchor>a077af975ea537fdad022383511ac85e9</anchor>
      <arglist>(State *state, const State *near, const double distance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNrImproveAttempts</name>
      <anchorfile>classompl_1_1base_1_1MaximizeClearanceValidStateSampler.html</anchorfile>
      <anchor>aefacb7239f457714144e3ccfa4e0ccce</anchor>
      <arglist>(unsigned int attempts)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNrImproveAttempts</name>
      <anchorfile>classompl_1_1base_1_1MaximizeClearanceValidStateSampler.html</anchorfile>
      <anchor>a3aeadc7e66782c7f4cff329c81d8d607</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1base_1_1MaximizeClearanceValidStateSampler.html</anchorfile>
      <anchor>a368e17353f06f39a33953f82f2e0c1e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>improveAttempts_</name>
      <anchorfile>classompl_1_1base_1_1MaximizeClearanceValidStateSampler.html</anchorfile>
      <anchor>a2f1941ee63effda2c8977ed6d5aafb9f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::MaximizeMinClearanceObjective</name>
    <filename>classompl_1_1base_1_1MaximizeMinClearanceObjective.html</filename>
    <base>ompl::base::MinimaxObjective</base>
    <member kind="function" virtualness="virtual">
      <type>virtual Cost</type>
      <name>stateCost</name>
      <anchorfile>classompl_1_1base_1_1MaximizeMinClearanceObjective.html</anchorfile>
      <anchor>ac0f69c023e72da8bb344a0e72a6fb5e9</anchor>
      <arglist>(const State *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isCostBetterThan</name>
      <anchorfile>classompl_1_1base_1_1MaximizeMinClearanceObjective.html</anchorfile>
      <anchor>adad5b85ecb273205780538f1aa18a46d</anchor>
      <arglist>(Cost c1, Cost c2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cost</type>
      <name>identityCost</name>
      <anchorfile>classompl_1_1base_1_1MaximizeMinClearanceObjective.html</anchorfile>
      <anchor>a8267247aa72d3fc1359947469f66085f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cost</type>
      <name>infiniteCost</name>
      <anchorfile>classompl_1_1base_1_1MaximizeMinClearanceObjective.html</anchorfile>
      <anchor>a8988897e8669d55e05b7363aff8def08</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::MechanicalWorkOptimizationObjective</name>
    <filename>classompl_1_1base_1_1MechanicalWorkOptimizationObjective.html</filename>
    <base>ompl::base::OptimizationObjective</base>
    <member kind="function">
      <type></type>
      <name>MechanicalWorkOptimizationObjective</name>
      <anchorfile>classompl_1_1base_1_1MechanicalWorkOptimizationObjective.html</anchorfile>
      <anchor>a0eae6572471af6a9bae53ca7aee983f3</anchor>
      <arglist>(const SpaceInformationPtr &amp;si, double pathLengthWeight=0.00001)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPathLengthWeight</name>
      <anchorfile>classompl_1_1base_1_1MechanicalWorkOptimizationObjective.html</anchorfile>
      <anchor>a8023a2d8487c2d964e8ec9c68c2f520f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cost</type>
      <name>stateCost</name>
      <anchorfile>classompl_1_1base_1_1MechanicalWorkOptimizationObjective.html</anchorfile>
      <anchor>a50449ba14e0ab8b24654110d7b9b8cb9</anchor>
      <arglist>(const State *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cost</type>
      <name>motionCost</name>
      <anchorfile>classompl_1_1base_1_1MechanicalWorkOptimizationObjective.html</anchorfile>
      <anchor>a75bde19e35bfca0cc5fe242c90170e1c</anchor>
      <arglist>(const State *s1, const State *s2) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>pathLengthWeight_</name>
      <anchorfile>classompl_1_1base_1_1MechanicalWorkOptimizationObjective.html</anchorfile>
      <anchor>a6011d919c54dd41a62aa08a968cb5caf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::MinimaxObjective</name>
    <filename>classompl_1_1base_1_1MinimaxObjective.html</filename>
    <base>ompl::base::OptimizationObjective</base>
    <member kind="function" virtualness="virtual">
      <type>virtual Cost</type>
      <name>stateCost</name>
      <anchorfile>classompl_1_1base_1_1MinimaxObjective.html</anchorfile>
      <anchor>a3ebd3f4c77293edb192b2cc94b72ca9b</anchor>
      <arglist>(const State *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cost</type>
      <name>motionCost</name>
      <anchorfile>classompl_1_1base_1_1MinimaxObjective.html</anchorfile>
      <anchor>a2918c3aad30a1b88da44b0a57d4080bc</anchor>
      <arglist>(const State *s1, const State *s2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cost</type>
      <name>combineCosts</name>
      <anchorfile>classompl_1_1base_1_1MinimaxObjective.html</anchorfile>
      <anchor>ace2b9ee2818b509c7ad79661e6067d8f</anchor>
      <arglist>(Cost c1, Cost c2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::MinimumClearanceValidStateSampler</name>
    <filename>classompl_1_1base_1_1MinimumClearanceValidStateSampler.html</filename>
    <base>ompl::base::ValidStateSampler</base>
    <member kind="function">
      <type></type>
      <name>MinimumClearanceValidStateSampler</name>
      <anchorfile>classompl_1_1base_1_1MinimumClearanceValidStateSampler.html</anchorfile>
      <anchor>a5f0578d92698bf8e1d11f02d7de765a0</anchor>
      <arglist>(const SpaceInformation *si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>sample</name>
      <anchorfile>classompl_1_1base_1_1MinimumClearanceValidStateSampler.html</anchorfile>
      <anchor>a5a59fa082d1bf3ec16492c59136064fb</anchor>
      <arglist>(State *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>sampleNear</name>
      <anchorfile>classompl_1_1base_1_1MinimumClearanceValidStateSampler.html</anchorfile>
      <anchor>a2509f74e7def593c4d0e2cfc31485a5c</anchor>
      <arglist>(State *state, const State *near, const double distance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinimumObstacleClearance</name>
      <anchorfile>classompl_1_1base_1_1MinimumClearanceValidStateSampler.html</anchorfile>
      <anchor>a7e2fee6ea081b9da8adba8308681d6cd</anchor>
      <arglist>(double clearance)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMinimumObstacleClearance</name>
      <anchorfile>classompl_1_1base_1_1MinimumClearanceValidStateSampler.html</anchorfile>
      <anchor>a6fd6c1d3be5c41e1e01c2a9ad21e42a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1base_1_1MinimumClearanceValidStateSampler.html</anchorfile>
      <anchor>a7a2ab03527b127a5a8210903940db191</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>clearance_</name>
      <anchorfile>classompl_1_1base_1_1MinimumClearanceValidStateSampler.html</anchorfile>
      <anchor>abb3523b75b220e58e4a8ab0759b98857</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::MorseEnvironment</name>
    <filename>classompl_1_1base_1_1MorseEnvironment.html</filename>
    <member kind="function">
      <type>void</type>
      <name>getControlBounds</name>
      <anchorfile>classompl_1_1base_1_1MorseEnvironment.html</anchorfile>
      <anchor>a5c50cac26a97797e273ed57f66469321</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;lower, std::vector&lt; double &gt; &amp;upper) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>readState</name>
      <anchorfile>classompl_1_1base_1_1MorseEnvironment.html</anchorfile>
      <anchor>ae063bf2576ad6a4576b0d1742ef442aa</anchor>
      <arglist>(State *state)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeState</name>
      <anchorfile>classompl_1_1base_1_1MorseEnvironment.html</anchorfile>
      <anchor>ab4842a70d977bc492a5c8fa7d795dc01</anchor>
      <arglist>(const State *state)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>applyControl</name>
      <anchorfile>classompl_1_1base_1_1MorseEnvironment.html</anchorfile>
      <anchor>a4b3c439ab43dd8e5d278f7ea5076a575</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;control)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>worldStep</name>
      <anchorfile>classompl_1_1base_1_1MorseEnvironment.html</anchorfile>
      <anchor>a11931ee0b4b7d7e15d1dd2ede46cd248</anchor>
      <arglist>(const double dur)=0</arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>controlDim_</name>
      <anchorfile>classompl_1_1base_1_1MorseEnvironment.html</anchorfile>
      <anchor>a84bae780e232819bac041a1d4634853c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::vector&lt; double &gt;</type>
      <name>controlBounds_</name>
      <anchorfile>classompl_1_1base_1_1MorseEnvironment.html</anchorfile>
      <anchor>a1d6be66876b90ff9ee11cc7bbefd2f3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>rigidBodies_</name>
      <anchorfile>classompl_1_1base_1_1MorseEnvironment.html</anchorfile>
      <anchor>ae4d62642f96d5fbd4b79481d84147097</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>positionBounds_</name>
      <anchorfile>classompl_1_1base_1_1MorseEnvironment.html</anchorfile>
      <anchor>a89c0286b2bc1684e53919065e70dcc9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>linvelBounds_</name>
      <anchorfile>classompl_1_1base_1_1MorseEnvironment.html</anchorfile>
      <anchor>ab6ae4f41f16f7d34b8eebe367c297a0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>angvelBounds_</name>
      <anchorfile>classompl_1_1base_1_1MorseEnvironment.html</anchorfile>
      <anchor>aa5cc92fe28589fcada28645c05fc572c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>stepSize_</name>
      <anchorfile>classompl_1_1base_1_1MorseEnvironment.html</anchorfile>
      <anchor>a5df72bafbb861ea157ea23d843237489</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>minControlSteps_</name>
      <anchorfile>classompl_1_1base_1_1MorseEnvironment.html</anchorfile>
      <anchor>a0d93140576183040716cccaee3a17e57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>maxControlSteps_</name>
      <anchorfile>classompl_1_1base_1_1MorseEnvironment.html</anchorfile>
      <anchor>a01dd2c7e38c34d88fd9ef606fafe0b6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>simRunning_</name>
      <anchorfile>classompl_1_1base_1_1MorseEnvironment.html</anchorfile>
      <anchor>a73959924420922f5345de72efdbd8f9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::mutex</type>
      <name>mutex_</name>
      <anchorfile>classompl_1_1base_1_1MorseEnvironment.html</anchorfile>
      <anchor>ad32ef7eecbeb4381864e8b8fba916aeb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::MorseEnvironmentPtr</name>
    <filename>classompl_1_1base_1_1MorseEnvironmentPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::base::MorseGoal</name>
    <filename>classompl_1_1base_1_1MorseGoal.html</filename>
    <base>ompl::base::Goal</base>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>classompl_1_1base_1_1MorseGoal.html</anchorfile>
      <anchor>af2171bca230997302b09b577cee66324</anchor>
      <arglist>(const State *state) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>classompl_1_1base_1_1MorseGoal.html</anchorfile>
      <anchor>a4c4b9e0c1337719f39e4e89b608acdaa</anchor>
      <arglist>(const State *state, double *distance) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isSatisfied_Py</name>
      <anchorfile>classompl_1_1base_1_1MorseGoal.html</anchorfile>
      <anchor>a453b1f315a5488d44e6b7926509c2cd9</anchor>
      <arglist>(const State *state) const  =0</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>distance_</name>
      <anchorfile>classompl_1_1base_1_1MorseGoal.html</anchorfile>
      <anchor>a8f4e048cbf75c341c325e956121b1d55</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::MorseProjection</name>
    <filename>classompl_1_1base_1_1MorseProjection.html</filename>
    <base>ompl::base::ProjectionEvaluator</base>
    <member kind="function">
      <type></type>
      <name>MorseProjection</name>
      <anchorfile>classompl_1_1base_1_1MorseProjection.html</anchorfile>
      <anchor>a61798b0775e34d8826526e51d446f1c2</anchor>
      <arglist>(const StateSpacePtr &amp;space)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1base_1_1MorseProjection.html</anchorfile>
      <anchor>aabf2fd3969ac45b2ff87ae1782c4427a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1base_1_1MorseProjection.html</anchorfile>
      <anchor>a2629ff056154f8cdfca7ffe2cb0da699</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>defaultCellSizes</name>
      <anchorfile>classompl_1_1base_1_1MorseProjection.html</anchorfile>
      <anchor>aa2bf1665bd3f31fe62b3d7edca77c681</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>project</name>
      <anchorfile>classompl_1_1base_1_1MorseProjection.html</anchorfile>
      <anchor>a30531a167e003afac47002821f77b830</anchor>
      <arglist>(const State *state, EuclideanProjection &amp;projection) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MorseStateSpace *</type>
      <name>space_</name>
      <anchorfile>classompl_1_1base_1_1MorseProjection.html</anchorfile>
      <anchor>af30b3483a854f7bf9be1dd44372b8678</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::MorseStateSpace</name>
    <filename>classompl_1_1base_1_1MorseStateSpace.html</filename>
    <base>ompl::base::CompoundStateSpace</base>
    <class kind="class">ompl::base::MorseStateSpace::StateType</class>
    <member kind="function">
      <type></type>
      <name>MorseStateSpace</name>
      <anchorfile>classompl_1_1base_1_1MorseStateSpace.html</anchorfile>
      <anchor>a8bf033b307efcd363c22b0f6b082384b</anchor>
      <arglist>(const MorseEnvironmentPtr &amp;env, double positionWeight=1.0, double linVelWeight=0.5, double angVelWeight=0.5, double orientationWeight=1.0)</arglist>
    </member>
    <member kind="function">
      <type>const MorseEnvironmentPtr &amp;</type>
      <name>getEnvironment</name>
      <anchorfile>classompl_1_1base_1_1MorseStateSpace.html</anchorfile>
      <anchor>ada0e4d243217359283830a6c5be6e0fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNrBodies</name>
      <anchorfile>classompl_1_1base_1_1MorseStateSpace.html</anchorfile>
      <anchor>add9ffc29bc9afa14ad3ccaab4fc21fc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBounds</name>
      <anchorfile>classompl_1_1base_1_1MorseStateSpace.html</anchorfile>
      <anchor>a74cc079c1a705a21508da70c7515ab03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPositionBounds</name>
      <anchorfile>classompl_1_1base_1_1MorseStateSpace.html</anchorfile>
      <anchor>ad1c3f943f4c534e62bf94a99897bdbd2</anchor>
      <arglist>(const RealVectorBounds &amp;bounds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinearVelocityBounds</name>
      <anchorfile>classompl_1_1base_1_1MorseStateSpace.html</anchorfile>
      <anchor>a4e9d27694c8cd5615514eadae5c828bc</anchor>
      <arglist>(const RealVectorBounds &amp;bounds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngularVelocityBounds</name>
      <anchorfile>classompl_1_1base_1_1MorseStateSpace.html</anchorfile>
      <anchor>ad72bb7ae19bd0ea13812215a6a28de90</anchor>
      <arglist>(const RealVectorBounds &amp;bounds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readState</name>
      <anchorfile>classompl_1_1base_1_1MorseStateSpace.html</anchorfile>
      <anchor>a31f5694e4b509005a375f628c30908d4</anchor>
      <arglist>(State *state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeState</name>
      <anchorfile>classompl_1_1base_1_1MorseStateSpace.html</anchorfile>
      <anchor>a1aea10eab4a26f6c097c902dc1cd72d8</anchor>
      <arglist>(const State *state) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>classompl_1_1base_1_1MorseStateSpace.html</anchorfile>
      <anchor>ae699e73e2c8b3e1deefcf9e7ecde4155</anchor>
      <arglist>(const State *state) const </arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>allocState</name>
      <anchorfile>classompl_1_1base_1_1MorseStateSpace.html</anchorfile>
      <anchor>ae77e25dd8ab25394540e8202a61c355e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeState</name>
      <anchorfile>classompl_1_1base_1_1MorseStateSpace.html</anchorfile>
      <anchor>ad70ffa7da653edae5759fc233c711d25</anchor>
      <arglist>(State *state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyState</name>
      <anchorfile>classompl_1_1base_1_1MorseStateSpace.html</anchorfile>
      <anchor>aa53cbd66370a518c11ed8cd2d1868de1</anchor>
      <arglist>(State *destination, const State *source) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1base_1_1MorseStateSpace.html</anchorfile>
      <anchor>a43610e53661b8dea9e6a5bf285b4560a</anchor>
      <arglist>(const State *from, const State *to, const double t, State *state) const </arglist>
    </member>
    <member kind="function">
      <type>StateSamplerPtr</type>
      <name>allocDefaultStateSampler</name>
      <anchorfile>classompl_1_1base_1_1MorseStateSpace.html</anchorfile>
      <anchor>a82012786a23a9e86401b7a77c9ebb8d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StateSamplerPtr</type>
      <name>allocStateSampler</name>
      <anchorfile>classompl_1_1base_1_1MorseStateSpace.html</anchorfile>
      <anchor>a7729b6767da52b4d5ad6b2fc688d3a7d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MorseEnvironmentPtr</type>
      <name>env_</name>
      <anchorfile>classompl_1_1base_1_1MorseStateSpace.html</anchorfile>
      <anchor>ab05c8e9693dce70e8077a65fc91b9f74</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::MorseStateSpace::StateType</name>
    <filename>classompl_1_1base_1_1MorseStateSpace_1_1StateType.html</filename>
    <base>ompl::base::CompoundState</base>
  </compound>
  <compound kind="class">
    <name>ompl::base::MorseStateValidityChecker</name>
    <filename>classompl_1_1base_1_1MorseStateValidityChecker.html</filename>
    <base>ompl::base::StateValidityChecker</base>
    <member kind="function">
      <type></type>
      <name>MorseStateValidityChecker</name>
      <anchorfile>classompl_1_1base_1_1MorseStateValidityChecker.html</anchorfile>
      <anchor>a3a66849ce975b0e8338df263148fc5d6</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isValid</name>
      <anchorfile>classompl_1_1base_1_1MorseStateValidityChecker.html</anchorfile>
      <anchor>af2d7a395532bdb15f530219293d58373</anchor>
      <arglist>(const State *state) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MorseStateSpace *</type>
      <name>mss_</name>
      <anchorfile>classompl_1_1base_1_1MorseStateValidityChecker.html</anchorfile>
      <anchor>a6c311dc822fac7f9de9b0c9e26f3bf69</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::MorseTerminationCondition</name>
    <filename>classompl_1_1base_1_1MorseTerminationCondition.html</filename>
    <base>ompl::base::PlannerTerminationCondition</base>
    <member kind="function">
      <type>bool</type>
      <name>eval</name>
      <anchorfile>classompl_1_1base_1_1MorseTerminationCondition.html</anchorfile>
      <anchor>a3cb1e27a1f23dc1e8cfa5e36631cacb4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>const MorseEnvironmentPtr</type>
      <name>env_</name>
      <anchorfile>classompl_1_1base_1_1MorseTerminationCondition.html</anchorfile>
      <anchor>aeb5e682071fd260279f2ccb6d3e40f85</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::MotionValidator</name>
    <filename>classompl_1_1base_1_1MotionValidator.html</filename>
    <member kind="function">
      <type></type>
      <name>MotionValidator</name>
      <anchorfile>classompl_1_1base_1_1MotionValidator.html</anchorfile>
      <anchor>a15055e5f4def52f36c570ec7027ba158</anchor>
      <arglist>(SpaceInformation *si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MotionValidator</name>
      <anchorfile>classompl_1_1base_1_1MotionValidator.html</anchorfile>
      <anchor>a855c98a07315e15d030c4f3a428b35f3</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>checkMotion</name>
      <anchorfile>classompl_1_1base_1_1MotionValidator.html</anchorfile>
      <anchor>a97becaea4841aaac66e460e235e15c3e</anchor>
      <arglist>(const State *s1, const State *s2) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>checkMotion</name>
      <anchorfile>classompl_1_1base_1_1MotionValidator.html</anchorfile>
      <anchor>a4915855b208bb16c332c7bf8d5447f91</anchor>
      <arglist>(const State *s1, const State *s2, std::pair&lt; State *, double &gt; &amp;lastValid) const  =0</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getValidMotionCount</name>
      <anchorfile>classompl_1_1base_1_1MotionValidator.html</anchorfile>
      <anchor>ab95650dc7753e96233a1174dc089477e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getInvalidMotionCount</name>
      <anchorfile>classompl_1_1base_1_1MotionValidator.html</anchorfile>
      <anchor>ad9f38c6d387c3e282d82a30a146f88c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getCheckedMotionCount</name>
      <anchorfile>classompl_1_1base_1_1MotionValidator.html</anchorfile>
      <anchor>a33596fd86d237c2a8a77550f25cb5c0d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getValidMotionFraction</name>
      <anchorfile>classompl_1_1base_1_1MotionValidator.html</anchorfile>
      <anchor>a9456068ce34604a823dc82c21858fe71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetMotionCounter</name>
      <anchorfile>classompl_1_1base_1_1MotionValidator.html</anchorfile>
      <anchor>a9ca6f71508846761ac53c1999e53e703</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SpaceInformation *</type>
      <name>si_</name>
      <anchorfile>classompl_1_1base_1_1MotionValidator.html</anchorfile>
      <anchor>a2629e7715db18fd173b54392db71e4c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>valid_</name>
      <anchorfile>classompl_1_1base_1_1MotionValidator.html</anchorfile>
      <anchor>ae66b1bf994516a3abd2f7f8548731bc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>invalid_</name>
      <anchorfile>classompl_1_1base_1_1MotionValidator.html</anchorfile>
      <anchor>aefa042881c1060d57cc9bd28f5df7cac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::MotionValidatorPtr</name>
    <filename>classompl_1_1base_1_1MotionValidatorPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::base::MultiOptimizationObjective</name>
    <filename>classompl_1_1base_1_1MultiOptimizationObjective.html</filename>
    <base>ompl::base::OptimizationObjective</base>
    <class kind="struct">ompl::base::MultiOptimizationObjective::Component</class>
    <member kind="function">
      <type>void</type>
      <name>addObjective</name>
      <anchorfile>classompl_1_1base_1_1MultiOptimizationObjective.html</anchorfile>
      <anchor>adc1f3daeac02055c1f43066496a9851c</anchor>
      <arglist>(const OptimizationObjectivePtr &amp;objective, double weight)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getObjectiveCount</name>
      <anchorfile>classompl_1_1base_1_1MultiOptimizationObjective.html</anchorfile>
      <anchor>a4b2110d912fd7a5aa1ae87d04b67b20f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const OptimizationObjectivePtr &amp;</type>
      <name>getObjective</name>
      <anchorfile>classompl_1_1base_1_1MultiOptimizationObjective.html</anchorfile>
      <anchor>abaf3f1b3f6afc7d15934792581d21165</anchor>
      <arglist>(unsigned int idx) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getObjectiveWeight</name>
      <anchorfile>classompl_1_1base_1_1MultiOptimizationObjective.html</anchorfile>
      <anchor>aa4750a6569c24f290d3c0d0297dff13a</anchor>
      <arglist>(unsigned int idx) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObjectiveWeight</name>
      <anchorfile>classompl_1_1base_1_1MultiOptimizationObjective.html</anchorfile>
      <anchor>a20f6e0a7169ee2d31dcf2e6cf9f729ac</anchor>
      <arglist>(unsigned int idx, double weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>classompl_1_1base_1_1MultiOptimizationObjective.html</anchorfile>
      <anchor>af8ee10e2a50bd00b2dc25315a0537716</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLocked</name>
      <anchorfile>classompl_1_1base_1_1MultiOptimizationObjective.html</anchorfile>
      <anchor>a5b68e4a8ac79b15fdcc2a8100efc983f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cost</type>
      <name>stateCost</name>
      <anchorfile>classompl_1_1base_1_1MultiOptimizationObjective.html</anchorfile>
      <anchor>ad96ef168e90d6359a8f7e2107216da85</anchor>
      <arglist>(const State *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cost</type>
      <name>motionCost</name>
      <anchorfile>classompl_1_1base_1_1MultiOptimizationObjective.html</anchorfile>
      <anchor>a018a7d4ae8e8883a307e0f44cbdef3d6</anchor>
      <arglist>(const State *s1, const State *s2) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Component &gt;</type>
      <name>components_</name>
      <anchorfile>classompl_1_1base_1_1MultiOptimizationObjective.html</anchorfile>
      <anchor>ad2b37645c317dc327423276e44ea05dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>locked_</name>
      <anchorfile>classompl_1_1base_1_1MultiOptimizationObjective.html</anchorfile>
      <anchor>a70547ad7e799b4e8a806472071546c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend OptimizationObjectivePtr</type>
      <name>operator+</name>
      <anchorfile>classompl_1_1base_1_1MultiOptimizationObjective.html</anchorfile>
      <anchor>af383e931d014bc44d371d7fea3779acb</anchor>
      <arglist>(const OptimizationObjectivePtr &amp;a, const OptimizationObjectivePtr &amp;b)</arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend OptimizationObjectivePtr</type>
      <name>operator*</name>
      <anchorfile>classompl_1_1base_1_1MultiOptimizationObjective.html</anchorfile>
      <anchor>a7f8b4ad4d615eace51966b8df644322b</anchor>
      <arglist>(double w, const OptimizationObjectivePtr &amp;a)</arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend OptimizationObjectivePtr</type>
      <name>operator*</name>
      <anchorfile>classompl_1_1base_1_1MultiOptimizationObjective.html</anchorfile>
      <anchor>adfcc96395100478c4ed35a289e65f6da</anchor>
      <arglist>(const OptimizationObjectivePtr &amp;a, double w)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::base::MultiOptimizationObjective::Component</name>
    <filename>structompl_1_1base_1_1MultiOptimizationObjective_1_1Component.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::base::ObstacleBasedValidStateSampler</name>
    <filename>classompl_1_1base_1_1ObstacleBasedValidStateSampler.html</filename>
    <base>ompl::base::ValidStateSampler</base>
    <member kind="function">
      <type></type>
      <name>ObstacleBasedValidStateSampler</name>
      <anchorfile>classompl_1_1base_1_1ObstacleBasedValidStateSampler.html</anchorfile>
      <anchor>ad1444e3fd0b28b4458d53cc42d298a25</anchor>
      <arglist>(const SpaceInformation *si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>sample</name>
      <anchorfile>classompl_1_1base_1_1ObstacleBasedValidStateSampler.html</anchorfile>
      <anchor>afe16104bb26872720a7513f7474c993d</anchor>
      <arglist>(State *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>sampleNear</name>
      <anchorfile>classompl_1_1base_1_1ObstacleBasedValidStateSampler.html</anchorfile>
      <anchor>afad6b002b2e87c31bae6ac5693709829</anchor>
      <arglist>(State *state, const State *near, const double distance)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1base_1_1ObstacleBasedValidStateSampler.html</anchorfile>
      <anchor>a8f0d1cd96f20d25a0701bc67be8e7e1c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::OptimizationObjective</name>
    <filename>classompl_1_1base_1_1OptimizationObjective.html</filename>
    <member kind="function">
      <type></type>
      <name>OptimizationObjective</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>a198937100228cca52595ac9f33e36e45</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getDescription</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>af7078bbdb57dd6059dd80fdf6fc36e8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSatisfied</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>a780c272c0b856e54ca6ac30dbc529592</anchor>
      <arglist>(Cost c) const </arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>getCostThreshold</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>a7a7f94f2a30787935dc5087261b5fb09</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCostThreshold</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>a1f133b98a94cb5b20c4b1a3a998aa7e9</anchor>
      <arglist>(Cost c)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isCostBetterThan</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>ad6ba0ff250adc0cb8cb0863d0f4d23b5</anchor>
      <arglist>(Cost c1, Cost c2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isCostEquivalentTo</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>a55663cf8d9dd5df55f025159ca287f31</anchor>
      <arglist>(Cost c1, Cost c2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFinite</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>a3725726f2282ad6973a7c6137b7a2db1</anchor>
      <arglist>(Cost cost) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cost</type>
      <name>betterCost</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>abc9d5e0ff5fa6ca87a47a07638f164e4</anchor>
      <arglist>(Cost c1, Cost c2) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Cost</type>
      <name>stateCost</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>a048d83bc466f98eaef99dd9018ebf3dd</anchor>
      <arglist>(const State *s) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Cost</type>
      <name>motionCost</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>a210a0df14c5f947c9c1006c25e7bc2cb</anchor>
      <arglist>(const State *s1, const State *s2) const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cost</type>
      <name>combineCosts</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>abef844b078ccaf3f30edd7d005ff24df</anchor>
      <arglist>(Cost c1, Cost c2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cost</type>
      <name>identityCost</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>af2eb3b8f8e56732005273ce8e15b2986</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cost</type>
      <name>infiniteCost</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>a14f3566ca58d1c72bbf8e2318001002f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cost</type>
      <name>initialCost</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>a89dff641e8e2535d6b2f20b68b861e00</anchor>
      <arglist>(const State *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cost</type>
      <name>terminalCost</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>a5d52aab37d3cd147101fe45095b2071a</anchor>
      <arglist>(const State *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSymmetric</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>a32e746bb31a7eba9c85f2b2137e04483</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cost</type>
      <name>averageStateCost</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>a790d9bf0e18c8217a6eb7c93bcc73b11</anchor>
      <arglist>(unsigned int numStates) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCostToGoHeuristic</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>a3964de818108dd28284e49704f067b9c</anchor>
      <arglist>(const CostToGoHeuristic &amp;costToGo)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasCostToGoHeuristic</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>ab449f7e2aeea0294000d86647488fadf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>costToGo</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>a6917532c5f05944484ac8dab3f8a37b8</anchor>
      <arglist>(const State *state, const Goal *goal) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cost</type>
      <name>motionCostHeuristic</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>afd577784b9dedb7bbd5fad9eac23f773</anchor>
      <arglist>(const State *s1, const State *s2) const </arglist>
    </member>
    <member kind="function">
      <type>const SpaceInformationPtr &amp;</type>
      <name>getSpaceInformation</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>acf33dd88eb602fa298a772938f454860</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InformedSamplerPtr</type>
      <name>allocInformedStateSampler</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>ab6748cf484a1da2c69ce83ed6f7b89f2</anchor>
      <arglist>(const ProblemDefinitionPtr probDefn, unsigned int maxNumberCalls) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>a7e01a897fa4c7556cd12d00e704069a3</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SpaceInformationPtr</type>
      <name>si_</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>aed9801e7e2142d7c61aa586bcacea6c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>description_</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>a0782ddb1c3cd4d656e4c0bae7f2caa37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Cost</type>
      <name>threshold_</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>a4e62f03ff644f753073fc86ae7553ff1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CostToGoHeuristic</type>
      <name>costToGoFn_</name>
      <anchorfile>classompl_1_1base_1_1OptimizationObjective.html</anchorfile>
      <anchor>a89cd7ce97d7b26efd7bcde24095b1fce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::OptimizationObjectivePtr</name>
    <filename>classompl_1_1base_1_1OptimizationObjectivePtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::base::ParamSet</name>
    <filename>classompl_1_1base_1_1ParamSet.html</filename>
    <member kind="function">
      <type>void</type>
      <name>declareParam</name>
      <anchorfile>classompl_1_1base_1_1ParamSet.html</anchorfile>
      <anchor>a3b27e180d07144d220f332750590fc71</anchor>
      <arglist>(const std::string &amp;name, const typename SpecificParam&lt; T &gt;::SetterFn &amp;setter, const typename SpecificParam&lt; T &gt;::GetterFn &amp;getter=typename SpecificParam&lt; T &gt;::GetterFn())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classompl_1_1base_1_1ParamSet.html</anchorfile>
      <anchor>a200630b07f2f43ec2d658f4d1d6d0ede</anchor>
      <arglist>(const GenericParamPtr &amp;param)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classompl_1_1base_1_1ParamSet.html</anchorfile>
      <anchor>afe512b0a1d4127ef6e88f2f32baf3111</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>include</name>
      <anchorfile>classompl_1_1base_1_1ParamSet.html</anchorfile>
      <anchor>a33cd1e7ae354235187393487292a5a46</anchor>
      <arglist>(const ParamSet &amp;other, const std::string &amp;prefix=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setParam</name>
      <anchorfile>classompl_1_1base_1_1ParamSet.html</anchorfile>
      <anchor>aa5db8ef79b6eafab44004b2d034b9a83</anchor>
      <arglist>(const std::string &amp;key, const std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getParam</name>
      <anchorfile>classompl_1_1base_1_1ParamSet.html</anchorfile>
      <anchor>aed196ed9df566fd4d1d56f68134d1708</anchor>
      <arglist>(const std::string &amp;key, std::string &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setParams</name>
      <anchorfile>classompl_1_1base_1_1ParamSet.html</anchorfile>
      <anchor>a663944c14405167c22aa7d8477f39b39</anchor>
      <arglist>(const std::map&lt; std::string, std::string &gt; &amp;kv, bool ignoreUnknown=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParams</name>
      <anchorfile>classompl_1_1base_1_1ParamSet.html</anchorfile>
      <anchor>a128ffa31b82a5af1b840f428463f4fe1</anchor>
      <arglist>(std::map&lt; std::string, std::string &gt; &amp;params) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParamNames</name>
      <anchorfile>classompl_1_1base_1_1ParamSet.html</anchorfile>
      <anchor>a0ff0f1b1ca7cb0a08dc9fc6812b787dc</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;params) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParamValues</name>
      <anchorfile>classompl_1_1base_1_1ParamSet.html</anchorfile>
      <anchor>ab45ff8b34d97017567e7867c2cf1daed</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;vals) const </arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, GenericParamPtr &gt; &amp;</type>
      <name>getParams</name>
      <anchorfile>classompl_1_1base_1_1ParamSet.html</anchorfile>
      <anchor>ad72e99b19ee114fa65a2f2d1fe9f10b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const GenericParamPtr &amp;</type>
      <name>getParam</name>
      <anchorfile>classompl_1_1base_1_1ParamSet.html</anchorfile>
      <anchor>a9e6c56d3d3d5167637e8aef9b9aa2dff</anchor>
      <arglist>(const std::string &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasParam</name>
      <anchorfile>classompl_1_1base_1_1ParamSet.html</anchorfile>
      <anchor>ad918276962dd623e31e20d867ceed51e</anchor>
      <arglist>(const std::string &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>GenericParam &amp;</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1base_1_1ParamSet.html</anchorfile>
      <anchor>ab933c691bdd425ef342b8790b5931e87</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1base_1_1ParamSet.html</anchorfile>
      <anchor>af4eb4f1075827a089f59f3ffcfe6aa7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1base_1_1ParamSet.html</anchorfile>
      <anchor>a604191032ff2beebf813c6bae2e80d6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classompl_1_1base_1_1ParamSet.html</anchorfile>
      <anchor>a56f643fa2e3a9542320d38ec43c63eb1</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::Path</name>
    <filename>classompl_1_1base_1_1Path.html</filename>
    <member kind="function">
      <type></type>
      <name>Path</name>
      <anchorfile>classompl_1_1base_1_1Path.html</anchorfile>
      <anchor>a920c55164f7d666cac78ce15342437d5</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Path</name>
      <anchorfile>classompl_1_1base_1_1Path.html</anchorfile>
      <anchor>a3cff10b5f4f536f41652fb62da02ae60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SpaceInformationPtr &amp;</type>
      <name>getSpaceInformation</name>
      <anchorfile>classompl_1_1base_1_1Path.html</anchorfile>
      <anchor>a36cffc4e35d2ecaa5e350fca4de6c9cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>as</name>
      <anchorfile>classompl_1_1base_1_1Path.html</anchorfile>
      <anchor>a0751620c049aa3b4d06e2196c32ae263</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>as</name>
      <anchorfile>classompl_1_1base_1_1Path.html</anchorfile>
      <anchor>a07b298e9c29ee82e9e2780d2d179e58d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>length</name>
      <anchorfile>classompl_1_1base_1_1Path.html</anchorfile>
      <anchor>a7d83b8661f55c4b263746cb53069fd96</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Cost</type>
      <name>cost</name>
      <anchorfile>classompl_1_1base_1_1Path.html</anchorfile>
      <anchor>aa116f678238d49782a15b1b0dacc127d</anchor>
      <arglist>(const OptimizationObjectivePtr &amp;obj) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>check</name>
      <anchorfile>classompl_1_1base_1_1Path.html</anchorfile>
      <anchor>aaea50122a1e553798a375aa9de7e62ba</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classompl_1_1base_1_1Path.html</anchorfile>
      <anchor>af1f4d70bcbde26b8303a0e75d308893a</anchor>
      <arglist>(std::ostream &amp;out) const  =0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SpaceInformationPtr</type>
      <name>si_</name>
      <anchorfile>classompl_1_1base_1_1Path.html</anchorfile>
      <anchor>a87250f099dbe84a3c0ba515360ac4339</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::PathLengthDirectInfSampler</name>
    <filename>classompl_1_1base_1_1PathLengthDirectInfSampler.html</filename>
    <base>ompl::base::InformedSampler</base>
    <member kind="function">
      <type></type>
      <name>PathLengthDirectInfSampler</name>
      <anchorfile>classompl_1_1base_1_1PathLengthDirectInfSampler.html</anchorfile>
      <anchor>a2791d1c63972989ba99b9c6c4d7448e1</anchor>
      <arglist>(const ProblemDefinitionPtr probDefn, unsigned int maxNumberCalls)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1PathLengthDirectInfSampler.html</anchorfile>
      <anchor>a8133918bcdc3436ef538b76e5bfd15fd</anchor>
      <arglist>(State *statePtr, const Cost &amp;maxCost)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1PathLengthDirectInfSampler.html</anchorfile>
      <anchor>afc91e6fd0776f638523641eb4ed43f17</anchor>
      <arglist>(State *statePtr, const Cost &amp;minCost, const Cost &amp;maxCost)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasInformedMeasure</name>
      <anchorfile>classompl_1_1base_1_1PathLengthDirectInfSampler.html</anchorfile>
      <anchor>a7f8eaa2c47eda91cdb4f05d831b9034a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getInformedMeasure</name>
      <anchorfile>classompl_1_1base_1_1PathLengthDirectInfSampler.html</anchorfile>
      <anchor>a3f5c581e90956e0d92b89dee1452e1b3</anchor>
      <arglist>(const Cost &amp;currentCost) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cost</type>
      <name>heuristicSolnCost</name>
      <anchorfile>classompl_1_1base_1_1PathLengthDirectInfSampler.html</anchorfile>
      <anchor>aea49ebe7cfa1ec3eb605eb874f10e283</anchor>
      <arglist>(const State *statePtr) const </arglist>
    </member>
    <docanchor file="classompl_1_1base_1_1PathLengthDirectInfSampler">gPathLengthDirectInfSampler</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::base::PathLengthOptimizationObjective</name>
    <filename>classompl_1_1base_1_1PathLengthOptimizationObjective.html</filename>
    <base>ompl::base::OptimizationObjective</base>
    <member kind="function" virtualness="virtual">
      <type>virtual Cost</type>
      <name>stateCost</name>
      <anchorfile>classompl_1_1base_1_1PathLengthOptimizationObjective.html</anchorfile>
      <anchor>abd8858287b0f2bcb535e7b9e41214fe2</anchor>
      <arglist>(const State *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cost</type>
      <name>motionCost</name>
      <anchorfile>classompl_1_1base_1_1PathLengthOptimizationObjective.html</anchorfile>
      <anchor>aaba8c207247b212081f86f1eebe6f85a</anchor>
      <arglist>(const State *s1, const State *s2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cost</type>
      <name>motionCostHeuristic</name>
      <anchorfile>classompl_1_1base_1_1PathLengthOptimizationObjective.html</anchorfile>
      <anchor>a7524f0a3ceb26c0f9819e6e9b6a5f065</anchor>
      <arglist>(const State *s1, const State *s2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InformedSamplerPtr</type>
      <name>allocInformedStateSampler</name>
      <anchorfile>classompl_1_1base_1_1PathLengthOptimizationObjective.html</anchorfile>
      <anchor>adccfd68635dd8446adfa95f61d61a0d4</anchor>
      <arglist>(const ProblemDefinitionPtr probDefn, unsigned int maxNumberCalls) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::PathPtr</name>
    <filename>classompl_1_1base_1_1PathPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::base::Planner</name>
    <filename>classompl_1_1base_1_1Planner.html</filename>
    <member kind="typedef">
      <type>std::function&lt; std::string()&gt;</type>
      <name>PlannerProgressProperty</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>aaafcfb0bcc9739a854f1652d60041562</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, PlannerProgressProperty &gt;</type>
      <name>PlannerProgressProperties</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a919f116d094eb88e4c877c44531c2b75</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Planner</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a404c3be95f77983e95a468e3a7032cc9</anchor>
      <arglist>(const SpaceInformationPtr &amp;si, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Planner</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a03f24b87575ab8d31b921fea6525a0c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>as</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a2ca68a50629dd31d550632480d001c17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>as</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a6ebb461363467a0a95ccb1c1e44a7332</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SpaceInformationPtr &amp;</type>
      <name>getSpaceInformation</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>af467d750711d1f426125642e2a387ab9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ProblemDefinitionPtr &amp;</type>
      <name>getProblemDefinition</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a5d4a5b067f5a4e817e73d025e4324e80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PlannerInputStates &amp;</type>
      <name>getPlannerInputStates</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a46e60c79e6e4dbc44788a5faab7e11ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProblemDefinition</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>add968ea14f1aa3d3bffc110da3e1d031</anchor>
      <arglist>(const ProblemDefinitionPtr &amp;pdef)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>aea8c56d18a0326b10fd111872ebd674a</anchor>
      <arglist>(const PlannerTerminationCondition &amp;ptc)=0</arglist>
    </member>
    <member kind="function">
      <type>PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a46d2a6941a33dbac28e6736949375e2b</anchor>
      <arglist>(const PlannerTerminationConditionFn &amp;ptc, double checkInterval)</arglist>
    </member>
    <member kind="function">
      <type>PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a5a61ca64b36881603af880677f6445a7</anchor>
      <arglist>(double solveTime)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a7929c12020a42b679601d22fb204919a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>afaaf08c87f8797803fbeb60771635ea5</anchor>
      <arglist>(PlannerData &amp;data) const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>acd7cf22ad75c421e8c454778dbe798e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a99bb12c016b06563aab6bba5cdbed01e</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const PlannerSpecs &amp;</type>
      <name>getSpecs</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a6eb82ef833b530732e6c258638c53347</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>ab7e49fc3b3b7011d46d647d8f1603bd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkValidity</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>ab416900477cf4499139c01f35663dffb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSetup</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a287976283c3556a6b331ecd30c10087c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ParamSet &amp;</type>
      <name>params</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a9dc98f7169ae45aa0e886376f546887a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ParamSet &amp;</type>
      <name>params</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a560a93ec86a9e421e7515e7828780e2d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PlannerProgressProperties &amp;</type>
      <name>getPlannerProgressProperties</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>ac8be4a36399223d93deedb9c9fa3573b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printProperties</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>ab1e269df8fa9bd55926aed3b7403e685</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printSettings</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a29aec12824480f7b3824a98fc9f5775b</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>declareParam</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a6b4a1345376e3e977772c38d38d5c50c</anchor>
      <arglist>(const std::string &amp;name, const PlannerType &amp;planner, const SetterType &amp;setter, const GetterType &amp;getter, const std::string &amp;rangeSuggestion=&quot;&quot;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>declareParam</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a3f9da0d41951502ea4df1184ef5a99a6</anchor>
      <arglist>(const std::string &amp;name, const PlannerType &amp;planner, const SetterType &amp;setter, const std::string &amp;rangeSuggestion=&quot;&quot;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addPlannerProgressProperty</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a3dc481539fac465497ad158e1bdac91a</anchor>
      <arglist>(const std::string &amp;progressPropertyName, const PlannerProgressProperty &amp;prop)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SpaceInformationPtr</type>
      <name>si_</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>aa3ceb9471163b6c96f6eeadbcfd3694e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ProblemDefinitionPtr</type>
      <name>pdef_</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a6bbb3dcc3d1604977e319d52c16ef7e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PlannerInputStates</type>
      <name>pis_</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a1c6ac45d44026aae6df87f3295d67436</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a806de82eeff9ef9231963a9851524b97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PlannerSpecs</type>
      <name>specs_</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a4311ea7a0470f0e0f76cb1656d63e365</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParamSet</type>
      <name>params_</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>a1cecf022e5ebac936c49b96079ba5359</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PlannerProgressProperties</type>
      <name>plannerProgressProperties_</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>ab630ca0634156172daf1a2620a01caf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>setup_</name>
      <anchorfile>classompl_1_1base_1_1Planner.html</anchorfile>
      <anchor>adba44a4ee27079c5b258a2ebed719eed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::PlannerData</name>
    <filename>classompl_1_1base_1_1PlannerData.html</filename>
    <class kind="class">ompl::base::PlannerData::Graph</class>
    <member kind="function">
      <type></type>
      <name>PlannerData</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a18b0a1ffcb25445a7a3c3a132275554e</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PlannerData</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>aeaae435c61fbc1f4c894da0140830e68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SpaceInformationPtr &amp;</type>
      <name>getSpaceInformation</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a037587d9bdfccb631ff9b494c1b6af92</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasControls</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a7ee1c1a4c085d16b2aedc573e1d6a956</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>addVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>ac61c5ab5cfd6a66a58e03b1731c1e454</anchor>
      <arglist>(const PlannerDataVertex &amp;st)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>addStartVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a2eea84456784452486aa0065af391f47</anchor>
      <arglist>(const PlannerDataVertex &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>addGoalVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a3604cb85b0402b09b319c5f1df02b12e</anchor>
      <arglist>(const PlannerDataVertex &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>markStartState</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a48ebd34b6da9efd9ec7647155f9173c9</anchor>
      <arglist>(const State *st)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>markGoalState</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a7772ac307d153831c0e7ecfc4fb1c18b</anchor>
      <arglist>(const State *st)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tagState</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a2b0b7c124dcac4f07c5f6d0ab51386a6</anchor>
      <arglist>(const State *st, int tag)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a75a2c3ad28a32136c74ad9f841727f01</anchor>
      <arglist>(const PlannerDataVertex &amp;st)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a7313c0b88697387feebff969c307193c</anchor>
      <arglist>(unsigned int vIndex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addEdge</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>ac09c21494a8c7db500ef1a66bbbb1aa7</anchor>
      <arglist>(unsigned int v1, unsigned int v2, const PlannerDataEdge &amp;edge=PlannerDataEdge(), Cost weight=Cost(1.0))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addEdge</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>ad2685cb2025517bdc0ee1ba94b9aff49</anchor>
      <arglist>(const PlannerDataVertex &amp;v1, const PlannerDataVertex &amp;v2, const PlannerDataEdge &amp;edge=PlannerDataEdge(), Cost weight=Cost(1.0))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeEdge</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a991ab62a502c3f80ae2663150e79bcea</anchor>
      <arglist>(unsigned int v1, unsigned int v2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeEdge</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>afda397cf585cc647d1e9b212b6092b0e</anchor>
      <arglist>(const PlannerDataVertex &amp;v1, const PlannerDataVertex &amp;v2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a7378bbca3f1006b70976292266277eb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>decoupleFromPlanner</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>af01506ec2ff32596dcb1bd9dfa2f8e1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numEdges</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>aed73a24b4db83fb523fc6e634e2aa335</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numVertices</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a4ec510507fa061ff368eb3c1826f0009</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numStartVertices</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>adf4ba509f9588515ea527bbbb6f7576c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numGoalVertices</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>aa0e79ddde25349a0fccba68731a3fd5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>vertexExists</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a97659c4427fb4d02204e86b9ad4d0d85</anchor>
      <arglist>(const PlannerDataVertex &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>const PlannerDataVertex &amp;</type>
      <name>getVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a5228dd82b9c8b62b9e68546f1dc4da91</anchor>
      <arglist>(unsigned int index) const </arglist>
    </member>
    <member kind="function">
      <type>PlannerDataVertex &amp;</type>
      <name>getVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a7e1f2a259a8861ee5a88e51cc52f69e5</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>const PlannerDataVertex &amp;</type>
      <name>getStartVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>affaca04be4ca2658cb0d5e6cd9fbed80</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>PlannerDataVertex &amp;</type>
      <name>getStartVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>ae01edd29349d34cd7ca62384cecf7e7d</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>const PlannerDataVertex &amp;</type>
      <name>getGoalVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>af599f3b6eaf5789223facd978d1897b9</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>PlannerDataVertex &amp;</type>
      <name>getGoalVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a0740003f5170235f3133162db36f1f23</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getStartIndex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>ae327af789b89202dc7c68988d0d23175</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getGoalIndex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a86774f579c347fc2ae46d1d501eaec4f</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStartVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>ac5da9f36f20bfc503c95cb7c84e8ba37</anchor>
      <arglist>(unsigned int index) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isGoalVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>ab07adc96f0cfcfc9e418e66b4e0078ad</anchor>
      <arglist>(unsigned int index) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>vertexIndex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a8fd081adb8e8a728eab89d57514724f0</anchor>
      <arglist>(const PlannerDataVertex &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>edgeExists</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a90da79739a42f9b86fa18d8f3af21c8a</anchor>
      <arglist>(unsigned int v1, unsigned int v2) const </arglist>
    </member>
    <member kind="function">
      <type>const PlannerDataEdge &amp;</type>
      <name>getEdge</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a635568961308b738919748b839c8f4fa</anchor>
      <arglist>(unsigned int v1, unsigned int v2) const </arglist>
    </member>
    <member kind="function">
      <type>PlannerDataEdge &amp;</type>
      <name>getEdge</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a42dd016470505a10e245a570e1979de3</anchor>
      <arglist>(unsigned int v1, unsigned int v2)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getEdges</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a0732c2d6732e9da62a98adbe4c82d763</anchor>
      <arglist>(unsigned int v, std::vector&lt; unsigned int &gt; &amp;edgeList) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getEdges</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>acfb08d67d9ace07380a8d72c014a97af</anchor>
      <arglist>(unsigned int v, std::map&lt; unsigned int, const PlannerDataEdge * &gt; &amp;edgeMap) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getIncomingEdges</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a9a484d02c69f7057e73ee1af1be6f05b</anchor>
      <arglist>(unsigned int v, std::vector&lt; unsigned int &gt; &amp;edgeList) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getIncomingEdges</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a612b839eacd191500df798ae9587ef8a</anchor>
      <arglist>(unsigned int v, std::map&lt; unsigned int, const PlannerDataEdge * &gt; &amp;edgeMap) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getEdgeWeight</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a3ad7bb69b33a92a1c5e614680bd8f628</anchor>
      <arglist>(unsigned int v1, unsigned int v2, Cost *weight) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setEdgeWeight</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a0989a6e1614d76a1f94fb54d67341f5d</anchor>
      <arglist>(unsigned int v1, unsigned int v2, Cost weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeEdgeWeights</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>abf46a3a30292549f151136489c0d7041</anchor>
      <arglist>(const OptimizationObjective &amp;opt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeEdgeWeights</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a238a60c0e598a6e60c9be24f12e044f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printGraphviz</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>aa637f3586c632363498054311aee61dd</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printGraphML</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>afaecec6b16a335917a011e5381f42929</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extractMinimumSpanningTree</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>ac45aec73f0452702d4c8a69f3fa664bf</anchor>
      <arglist>(unsigned int v, const OptimizationObjective &amp;opt, PlannerData &amp;mst) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extractReachable</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>ab69dd695b9fbe2662e2a09bd37c9d96b</anchor>
      <arglist>(unsigned int v, PlannerData &amp;data) const </arglist>
    </member>
    <member kind="function">
      <type>StateStoragePtr</type>
      <name>extractStateStorage</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a6201d765fd53de907946dffb687ffd68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Graph &amp;</type>
      <name>toBoostGraph</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a919452f1e347b68e9331d726c85b1dad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Graph &amp;</type>
      <name>toBoostGraph</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a6f158175b4d5fd12e4a660c4be8b02f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; std::string, std::string &gt;</type>
      <name>properties</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>aca9e2da9d9a46e42c516fc8b926ab65c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PlannerDataEdge</type>
      <name>NO_EDGE</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a5e9068cf84bb1c378eb2ec0823e086d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PlannerDataVertex</type>
      <name>NO_VERTEX</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a53b2294e37eb1b5468d70c04055f64c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>INVALID_INDEX</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>ab2b09299d9980783a8147e280562d5a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; const State *, unsigned int &gt;</type>
      <name>stateIndexMap_</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a4217eef33f9fc70fb4ee2ffbe34377ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>startVertexIndices_</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a5b96459e98ddbbe4882a4c2ca64738d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>goalVertexIndices_</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>abf1793ebfefa6fbaeaf6dda5431f58be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SpaceInformationPtr</type>
      <name>si_</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a9b265d3a5780cda11ba7d068953c74af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; State * &gt;</type>
      <name>decoupledStates_</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a00c58c4c2809cbd8f70d21b452317307</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>addVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>ac61c5ab5cfd6a66a58e03b1731c1e454</anchor>
      <arglist>(const PlannerDataVertex &amp;st)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>addStartVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a2eea84456784452486aa0065af391f47</anchor>
      <arglist>(const PlannerDataVertex &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>addGoalVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a3604cb85b0402b09b319c5f1df02b12e</anchor>
      <arglist>(const PlannerDataVertex &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>markStartState</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a48ebd34b6da9efd9ec7647155f9173c9</anchor>
      <arglist>(const State *st)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>markGoalState</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a7772ac307d153831c0e7ecfc4fb1c18b</anchor>
      <arglist>(const State *st)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tagState</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a2b0b7c124dcac4f07c5f6d0ab51386a6</anchor>
      <arglist>(const State *st, int tag)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a75a2c3ad28a32136c74ad9f841727f01</anchor>
      <arglist>(const PlannerDataVertex &amp;st)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a7313c0b88697387feebff969c307193c</anchor>
      <arglist>(unsigned int vIndex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addEdge</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>ac09c21494a8c7db500ef1a66bbbb1aa7</anchor>
      <arglist>(unsigned int v1, unsigned int v2, const PlannerDataEdge &amp;edge=PlannerDataEdge(), Cost weight=Cost(1.0))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addEdge</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>ad2685cb2025517bdc0ee1ba94b9aff49</anchor>
      <arglist>(const PlannerDataVertex &amp;v1, const PlannerDataVertex &amp;v2, const PlannerDataEdge &amp;edge=PlannerDataEdge(), Cost weight=Cost(1.0))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeEdge</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a991ab62a502c3f80ae2663150e79bcea</anchor>
      <arglist>(unsigned int v1, unsigned int v2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeEdge</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>afda397cf585cc647d1e9b212b6092b0e</anchor>
      <arglist>(const PlannerDataVertex &amp;v1, const PlannerDataVertex &amp;v2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a7378bbca3f1006b70976292266277eb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>decoupleFromPlanner</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>af01506ec2ff32596dcb1bd9dfa2f8e1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numEdges</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>aed73a24b4db83fb523fc6e634e2aa335</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numVertices</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a4ec510507fa061ff368eb3c1826f0009</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numStartVertices</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>adf4ba509f9588515ea527bbbb6f7576c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numGoalVertices</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>aa0e79ddde25349a0fccba68731a3fd5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>vertexExists</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a97659c4427fb4d02204e86b9ad4d0d85</anchor>
      <arglist>(const PlannerDataVertex &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>const PlannerDataVertex &amp;</type>
      <name>getVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a5228dd82b9c8b62b9e68546f1dc4da91</anchor>
      <arglist>(unsigned int index) const </arglist>
    </member>
    <member kind="function">
      <type>PlannerDataVertex &amp;</type>
      <name>getVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a7e1f2a259a8861ee5a88e51cc52f69e5</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>const PlannerDataVertex &amp;</type>
      <name>getStartVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>affaca04be4ca2658cb0d5e6cd9fbed80</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>PlannerDataVertex &amp;</type>
      <name>getStartVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>ae01edd29349d34cd7ca62384cecf7e7d</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>const PlannerDataVertex &amp;</type>
      <name>getGoalVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>af599f3b6eaf5789223facd978d1897b9</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>PlannerDataVertex &amp;</type>
      <name>getGoalVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a0740003f5170235f3133162db36f1f23</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getStartIndex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>ae327af789b89202dc7c68988d0d23175</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getGoalIndex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a86774f579c347fc2ae46d1d501eaec4f</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStartVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>ac5da9f36f20bfc503c95cb7c84e8ba37</anchor>
      <arglist>(unsigned int index) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isGoalVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>ab07adc96f0cfcfc9e418e66b4e0078ad</anchor>
      <arglist>(unsigned int index) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>vertexIndex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a8fd081adb8e8a728eab89d57514724f0</anchor>
      <arglist>(const PlannerDataVertex &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>edgeExists</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a90da79739a42f9b86fa18d8f3af21c8a</anchor>
      <arglist>(unsigned int v1, unsigned int v2) const </arglist>
    </member>
    <member kind="function">
      <type>const PlannerDataEdge &amp;</type>
      <name>getEdge</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a635568961308b738919748b839c8f4fa</anchor>
      <arglist>(unsigned int v1, unsigned int v2) const </arglist>
    </member>
    <member kind="function">
      <type>PlannerDataEdge &amp;</type>
      <name>getEdge</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a42dd016470505a10e245a570e1979de3</anchor>
      <arglist>(unsigned int v1, unsigned int v2)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getEdges</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a0732c2d6732e9da62a98adbe4c82d763</anchor>
      <arglist>(unsigned int v, std::vector&lt; unsigned int &gt; &amp;edgeList) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getEdges</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>acfb08d67d9ace07380a8d72c014a97af</anchor>
      <arglist>(unsigned int v, std::map&lt; unsigned int, const PlannerDataEdge * &gt; &amp;edgeMap) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getIncomingEdges</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a9a484d02c69f7057e73ee1af1be6f05b</anchor>
      <arglist>(unsigned int v, std::vector&lt; unsigned int &gt; &amp;edgeList) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getIncomingEdges</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a612b839eacd191500df798ae9587ef8a</anchor>
      <arglist>(unsigned int v, std::map&lt; unsigned int, const PlannerDataEdge * &gt; &amp;edgeMap) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getEdgeWeight</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a3ad7bb69b33a92a1c5e614680bd8f628</anchor>
      <arglist>(unsigned int v1, unsigned int v2, Cost *weight) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setEdgeWeight</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a0989a6e1614d76a1f94fb54d67341f5d</anchor>
      <arglist>(unsigned int v1, unsigned int v2, Cost weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeEdgeWeights</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>abf46a3a30292549f151136489c0d7041</anchor>
      <arglist>(const OptimizationObjective &amp;opt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeEdgeWeights</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a238a60c0e598a6e60c9be24f12e044f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printGraphviz</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>aa637f3586c632363498054311aee61dd</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printGraphML</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>afaecec6b16a335917a011e5381f42929</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extractMinimumSpanningTree</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>ac45aec73f0452702d4c8a69f3fa664bf</anchor>
      <arglist>(unsigned int v, const OptimizationObjective &amp;opt, PlannerData &amp;mst) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extractReachable</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>ab69dd695b9fbe2662e2a09bd37c9d96b</anchor>
      <arglist>(unsigned int v, PlannerData &amp;data) const </arglist>
    </member>
    <member kind="function">
      <type>StateStoragePtr</type>
      <name>extractStateStorage</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a6201d765fd53de907946dffb687ffd68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Graph &amp;</type>
      <name>toBoostGraph</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a919452f1e347b68e9331d726c85b1dad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Graph &amp;</type>
      <name>toBoostGraph</name>
      <anchorfile>classompl_1_1base_1_1PlannerData.html</anchorfile>
      <anchor>a6f158175b4d5fd12e4a660c4be8b02f5</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::PlannerData::Graph</name>
    <filename>classompl_1_1base_1_1PlannerData_1_1Graph.html</filename>
    <member kind="typedef">
      <type>PlannerDataGraph</type>
      <name>Type</name>
      <anchorfile>classompl_1_1base_1_1PlannerData_1_1Graph.html</anchorfile>
      <anchor>a56212a283da0e20d8fb4830087c317a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph_traits&lt; Type &gt;::vertex_descriptor</type>
      <name>Vertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerData_1_1Graph.html</anchorfile>
      <anchor>a24e4bdcee982f118c628ba4f3a429680</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph_traits&lt; Type &gt;::edge_descriptor</type>
      <name>Edge</name>
      <anchorfile>classompl_1_1base_1_1PlannerData_1_1Graph.html</anchorfile>
      <anchor>abaeae744b26515cf99e9a1396299e6fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph_traits&lt; Type &gt;::vertex_iterator</type>
      <name>VIterator</name>
      <anchorfile>classompl_1_1base_1_1PlannerData_1_1Graph.html</anchorfile>
      <anchor>ae6c15441b57140d2552aa2937859a762</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph_traits&lt; Type &gt;::edge_iterator</type>
      <name>EIterator</name>
      <anchorfile>classompl_1_1base_1_1PlannerData_1_1Graph.html</anchorfile>
      <anchor>aa729277897506ce76c33fba09a5a4f00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph_traits&lt; Type &gt;::in_edge_iterator</type>
      <name>IEIterator</name>
      <anchorfile>classompl_1_1base_1_1PlannerData_1_1Graph.html</anchorfile>
      <anchor>a47c294789b359bc747e2ac530b21dbaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph_traits&lt; Type &gt;::out_edge_iterator</type>
      <name>OEIterator</name>
      <anchorfile>classompl_1_1base_1_1PlannerData_1_1Graph.html</anchorfile>
      <anchor>a679c4587c491317c6a0d0a88612057eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph_traits&lt; Type &gt;::adjacency_iterator</type>
      <name>AdjIterator</name>
      <anchorfile>classompl_1_1base_1_1PlannerData_1_1Graph.html</anchorfile>
      <anchor>ac8bc4f27de05c06418d74d2b5282d56c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::PlannerDataEdge</name>
    <filename>classompl_1_1base_1_1PlannerDataEdge.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual PlannerDataEdge *</type>
      <name>clone</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataEdge.html</anchorfile>
      <anchor>ac11bec079580da93a90ffd762f58c596</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataEdge.html</anchorfile>
      <anchor>aa70b8e3aaa4d68a23827fd012322eff2</anchor>
      <arglist>(const PlannerDataEdge &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataEdge.html</anchorfile>
      <anchor>a80b3397b919e2952311f02ff94c994e8</anchor>
      <arglist>(const PlannerDataEdge &amp;rhs) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::PlannerDataPtr</name>
    <filename>classompl_1_1base_1_1PlannerDataPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::base::PlannerDataStorage</name>
    <filename>classompl_1_1base_1_1PlannerDataStorage.html</filename>
    <class kind="struct">ompl::base::PlannerDataStorage::Header</class>
    <class kind="struct">ompl::base::PlannerDataStorage::PlannerDataEdgeData</class>
    <class kind="struct">ompl::base::PlannerDataStorage::PlannerDataVertexData</class>
    <member kind="function">
      <type></type>
      <name>PlannerDataStorage</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataStorage.html</anchorfile>
      <anchor>a1ff5addd39dc209e532239c8171f8ca2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PlannerDataStorage</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataStorage.html</anchorfile>
      <anchor>abc48cb7a260846e6aee4b93c1dbd2fb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>store</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataStorage.html</anchorfile>
      <anchor>ac93d5d8f887c8f5b10ffbccfb23e1e6f</anchor>
      <arglist>(const PlannerData &amp;pd, const char *filename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>store</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataStorage.html</anchorfile>
      <anchor>acf27251c1d167a1a773256c913ed5091</anchor>
      <arglist>(const PlannerData &amp;pd, std::ostream &amp;out)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>load</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataStorage.html</anchorfile>
      <anchor>aec8d4a84b7db06354f40ded3741ad026</anchor>
      <arglist>(const char *filename, PlannerData &amp;pd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>load</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataStorage.html</anchorfile>
      <anchor>a7e37b079b0f378a1be1d2f8dff2b801f</anchor>
      <arglist>(std::istream &amp;in, PlannerData &amp;pd)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>loadVertices</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataStorage.html</anchorfile>
      <anchor>a7c7ca9b7e118313b6ac991a45426a696</anchor>
      <arglist>(PlannerData &amp;pd, unsigned int numVertices, boost::archive::binary_iarchive &amp;ia)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>storeVertices</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataStorage.html</anchorfile>
      <anchor>a9482e9f4a318ded2be8e61d8565877a0</anchor>
      <arglist>(const PlannerData &amp;pd, boost::archive::binary_oarchive &amp;oa)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>loadEdges</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataStorage.html</anchorfile>
      <anchor>ac88161cd55dbad2f87d8d4663c3ff905</anchor>
      <arglist>(PlannerData &amp;pd, unsigned int numEdges, boost::archive::binary_iarchive &amp;ia)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>storeEdges</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataStorage.html</anchorfile>
      <anchor>a4d67b235c4cd420d6dc7eb8c34ec3be3</anchor>
      <arglist>(const PlannerData &amp;pd, boost::archive::binary_oarchive &amp;oa)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::base::PlannerDataStorage::Header</name>
    <filename>structompl_1_1base_1_1PlannerDataStorage_1_1Header.html</filename>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>structompl_1_1base_1_1PlannerDataStorage_1_1Header.html</anchorfile>
      <anchor>ad915aa16bc8e63f6e065c4bfbc548839</anchor>
      <arglist>(Archive &amp;ar, const unsigned int)</arglist>
    </member>
    <member kind="variable">
      <type>boost::uint32_t</type>
      <name>marker</name>
      <anchorfile>structompl_1_1base_1_1PlannerDataStorage_1_1Header.html</anchorfile>
      <anchor>a35e630886b177274a7313ddaccdad2dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>vertex_count</name>
      <anchorfile>structompl_1_1base_1_1PlannerDataStorage_1_1Header.html</anchorfile>
      <anchor>ac2f09759b3634319c004828f7b950175</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>edge_count</name>
      <anchorfile>structompl_1_1base_1_1PlannerDataStorage_1_1Header.html</anchorfile>
      <anchor>aadfe946a61b0495600d85036bd593fc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>signature</name>
      <anchorfile>structompl_1_1base_1_1PlannerDataStorage_1_1Header.html</anchorfile>
      <anchor>abae629adea566a2eda74fba200f551be</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::base::PlannerDataStorage::PlannerDataEdgeData</name>
    <filename>structompl_1_1base_1_1PlannerDataStorage_1_1PlannerDataEdgeData.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::base::PlannerDataStorage::PlannerDataVertexData</name>
    <filename>structompl_1_1base_1_1PlannerDataStorage_1_1PlannerDataVertexData.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::base::PlannerDataVertex</name>
    <filename>classompl_1_1base_1_1PlannerDataVertex.html</filename>
    <member kind="function">
      <type></type>
      <name>PlannerDataVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataVertex.html</anchorfile>
      <anchor>a612f975106d9cb289702f758dabf3214</anchor>
      <arglist>(const State *st, int tag=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PlannerDataVertex</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataVertex.html</anchorfile>
      <anchor>ab6613de36ebee04cd0b409c17dfc0c6c</anchor>
      <arglist>(const PlannerDataVertex &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTag</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataVertex.html</anchorfile>
      <anchor>aab9f11697ed5e5c3e755db5e2493ba41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTag</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataVertex.html</anchorfile>
      <anchor>a4e6d6a6ecf6fdff4c4c74410be5c3596</anchor>
      <arglist>(int tag)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataVertex.html</anchorfile>
      <anchor>a20343e045f508d3545ccf13da33bea14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PlannerDataVertex *</type>
      <name>clone</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataVertex.html</anchorfile>
      <anchor>a148375c977629788441776042021f88b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator==</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataVertex.html</anchorfile>
      <anchor>aada76332cd52d3de0af9a96d1b0c11cb</anchor>
      <arglist>(const PlannerDataVertex &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataVertex.html</anchorfile>
      <anchor>a7927a46055a93edd3a135838b3db9df2</anchor>
      <arglist>(const PlannerDataVertex &amp;rhs) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const State *</type>
      <name>state_</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataVertex.html</anchorfile>
      <anchor>a4f805017e2eadb495ca95f9c1d6b7177</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>tag_</name>
      <anchorfile>classompl_1_1base_1_1PlannerDataVertex.html</anchorfile>
      <anchor>abf0257882aedf96fc9b67f7d6f882f04</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::PlannerInputStates</name>
    <filename>classompl_1_1base_1_1PlannerInputStates.html</filename>
    <member kind="function">
      <type></type>
      <name>PlannerInputStates</name>
      <anchorfile>classompl_1_1base_1_1PlannerInputStates.html</anchorfile>
      <anchor>a20722a602321fb2c4cc102f2d2500842</anchor>
      <arglist>(const PlannerPtr &amp;planner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PlannerInputStates</name>
      <anchorfile>classompl_1_1base_1_1PlannerInputStates.html</anchorfile>
      <anchor>a50f4b865cb2d6c9d7e834be2482f6cbf</anchor>
      <arglist>(const Planner *planner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PlannerInputStates</name>
      <anchorfile>classompl_1_1base_1_1PlannerInputStates.html</anchorfile>
      <anchor>a32329401cc447a38f3c494cc3a774884</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PlannerInputStates</name>
      <anchorfile>classompl_1_1base_1_1PlannerInputStates.html</anchorfile>
      <anchor>a1103c26d0ead2fc41764394b94b1bfbf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1base_1_1PlannerInputStates.html</anchorfile>
      <anchor>a17f6475970c635039e5118687251f644</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restart</name>
      <anchorfile>classompl_1_1base_1_1PlannerInputStates.html</anchorfile>
      <anchor>ae66b7f462e2a76da5342cdc0dbf75482</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update</name>
      <anchorfile>classompl_1_1base_1_1PlannerInputStates.html</anchorfile>
      <anchor>a986c1876d09a254a67673a0272ed355e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>use</name>
      <anchorfile>classompl_1_1base_1_1PlannerInputStates.html</anchorfile>
      <anchor>acdbad81c386b7533a4990ea9020b632d</anchor>
      <arglist>(const ProblemDefinitionPtr &amp;pdef)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>use</name>
      <anchorfile>classompl_1_1base_1_1PlannerInputStates.html</anchorfile>
      <anchor>aa96f1be538c75a8fcd2c487a5deb65dd</anchor>
      <arglist>(const ProblemDefinition *pdef)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkValidity</name>
      <anchorfile>classompl_1_1base_1_1PlannerInputStates.html</anchorfile>
      <anchor>a1c6b4e4fbd250b170285b23a4901c5b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const State *</type>
      <name>nextStart</name>
      <anchorfile>classompl_1_1base_1_1PlannerInputStates.html</anchorfile>
      <anchor>a42a3a7bdbbe09caf937e57785ee97d51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const State *</type>
      <name>nextGoal</name>
      <anchorfile>classompl_1_1base_1_1PlannerInputStates.html</anchorfile>
      <anchor>ae8ea1c2fd3e0e92dbc289a79dd597c98</anchor>
      <arglist>(const PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function">
      <type>const State *</type>
      <name>nextGoal</name>
      <anchorfile>classompl_1_1base_1_1PlannerInputStates.html</anchorfile>
      <anchor>a6dace9a01592d0c820231f3bac444aa3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveMoreStartStates</name>
      <anchorfile>classompl_1_1base_1_1PlannerInputStates.html</anchorfile>
      <anchor>a92763148d0eeb0e11f6946f647143742</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveMoreGoalStates</name>
      <anchorfile>classompl_1_1base_1_1PlannerInputStates.html</anchorfile>
      <anchor>a8b6e3dbdac3c705179cb745c1e668cfd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getSeenStartStatesCount</name>
      <anchorfile>classompl_1_1base_1_1PlannerInputStates.html</anchorfile>
      <anchor>aa5557caa17e9f66ebf3525881d1785a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getSampledGoalsCount</name>
      <anchorfile>classompl_1_1base_1_1PlannerInputStates.html</anchorfile>
      <anchor>ad57a52bc5bc149e1cda5c271f6398084</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::PlannerPtr</name>
    <filename>classompl_1_1base_1_1PlannerPtr.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::base::PlannerSolution</name>
    <filename>structompl_1_1base_1_1PlannerSolution.html</filename>
    <member kind="function">
      <type></type>
      <name>PlannerSolution</name>
      <anchorfile>structompl_1_1base_1_1PlannerSolution.html</anchorfile>
      <anchor>a034be254c19b77056fe089e83900ab2c</anchor>
      <arglist>(const PathPtr &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structompl_1_1base_1_1PlannerSolution.html</anchorfile>
      <anchor>aadc83acdfef639cc1cc136f1e396416d</anchor>
      <arglist>(const PlannerSolution &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structompl_1_1base_1_1PlannerSolution.html</anchorfile>
      <anchor>a18c169ee346a1cc90743f919d3cfe4e6</anchor>
      <arglist>(const PlannerSolution &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setApproximate</name>
      <anchorfile>structompl_1_1base_1_1PlannerSolution.html</anchorfile>
      <anchor>a34d3518872fc08fd9eee34e172617e84</anchor>
      <arglist>(double difference)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOptimized</name>
      <anchorfile>structompl_1_1base_1_1PlannerSolution.html</anchorfile>
      <anchor>ad80f84801bc610ac004c47cb35c58e91</anchor>
      <arglist>(const OptimizationObjectivePtr &amp;opt, Cost cost, bool meetsObjective)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlannerName</name>
      <anchorfile>structompl_1_1base_1_1PlannerSolution.html</anchorfile>
      <anchor>aa06d5e3c877a5a7a6f5160f01a2f6d89</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>index_</name>
      <anchorfile>structompl_1_1base_1_1PlannerSolution.html</anchorfile>
      <anchor>a09e5e770a22649214eb8746582845fc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PathPtr</type>
      <name>path_</name>
      <anchorfile>structompl_1_1base_1_1PlannerSolution.html</anchorfile>
      <anchor>a6c983b63da9ee94d5ea0d32a3ab7b825</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>length_</name>
      <anchorfile>structompl_1_1base_1_1PlannerSolution.html</anchorfile>
      <anchor>a953a2d1a57fd31ed9c975482babec42d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>approximate_</name>
      <anchorfile>structompl_1_1base_1_1PlannerSolution.html</anchorfile>
      <anchor>a827421553f0db86c3dcd53c1fe475c6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>difference_</name>
      <anchorfile>structompl_1_1base_1_1PlannerSolution.html</anchorfile>
      <anchor>a9707ec5a38b0a89d32f9d10c2a94f8f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>optimized_</name>
      <anchorfile>structompl_1_1base_1_1PlannerSolution.html</anchorfile>
      <anchor>a19962696ffed99b53e6422d5fcda1fd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OptimizationObjectivePtr</type>
      <name>opt_</name>
      <anchorfile>structompl_1_1base_1_1PlannerSolution.html</anchorfile>
      <anchor>a7d78d2c2cc8d8c5e05cd2232eaa6a634</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Cost</type>
      <name>cost_</name>
      <anchorfile>structompl_1_1base_1_1PlannerSolution.html</anchorfile>
      <anchor>a784f16650e8c1712680afdf01c0fc8ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>plannerName_</name>
      <anchorfile>structompl_1_1base_1_1PlannerSolution.html</anchorfile>
      <anchor>a26f5a4cd93099f755212d46f44717ee3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::base::PlannerSpecs</name>
    <filename>structompl_1_1base_1_1PlannerSpecs.html</filename>
    <member kind="variable">
      <type>GoalType</type>
      <name>recognizedGoal</name>
      <anchorfile>structompl_1_1base_1_1PlannerSpecs.html</anchorfile>
      <anchor>ac8a946673fef335d7a802d9ee8436804</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>multithreaded</name>
      <anchorfile>structompl_1_1base_1_1PlannerSpecs.html</anchorfile>
      <anchor>a7ef07a003ebc248097f479168d75a1e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>approximateSolutions</name>
      <anchorfile>structompl_1_1base_1_1PlannerSpecs.html</anchorfile>
      <anchor>ae2facc9260851b161577e36f5a4baefc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>optimizingPaths</name>
      <anchorfile>structompl_1_1base_1_1PlannerSpecs.html</anchorfile>
      <anchor>a83869b1cd49a91e29b0b926188402a0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>directed</name>
      <anchorfile>structompl_1_1base_1_1PlannerSpecs.html</anchorfile>
      <anchor>abe3ce1c340ba64c14644b0cace72907d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>provingSolutionNonExistence</name>
      <anchorfile>structompl_1_1base_1_1PlannerSpecs.html</anchorfile>
      <anchor>aedf24a2396155415195632b3586fa18c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>canReportIntermediateSolutions</name>
      <anchorfile>structompl_1_1base_1_1PlannerSpecs.html</anchorfile>
      <anchor>a83b066bf6613e8ff877e80bc382400d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::base::PlannerStatus</name>
    <filename>structompl_1_1base_1_1PlannerStatus.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>StatusType</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a5fe3825813b066b664b3dd34dd1bc8c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a5fe3825813b066b664b3dd34dd1bc8c4a69ef0526165cef29fd59ed5b08b03fc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_START</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a5fe3825813b066b664b3dd34dd1bc8c4a1f20d012b563fc223902e24a8bcd7547</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_GOAL</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a5fe3825813b066b664b3dd34dd1bc8c4a2e2b2b7e02900c4417af0ecea272c637</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNRECOGNIZED_GOAL_TYPE</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a5fe3825813b066b664b3dd34dd1bc8c4a47d769205044efa345184a640bd863ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIMEOUT</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a5fe3825813b066b664b3dd34dd1bc8c4a620a03eebe49aa307140d6a4763278fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APPROXIMATE_SOLUTION</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a5fe3825813b066b664b3dd34dd1bc8c4a5fade5f3ded9dd85ce1693c1912edaa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXACT_SOLUTION</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a5fe3825813b066b664b3dd34dd1bc8c4a20f8c901516c72e258d43d7156fe8e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CRASH</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a5fe3825813b066b664b3dd34dd1bc8c4aef20494db78a6a63e22d3ae5edc96f94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ABORT</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a5fe3825813b066b664b3dd34dd1bc8c4a0013f743bb46afbc5bf4e019de43625f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_COUNT</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a5fe3825813b066b664b3dd34dd1bc8c4ac60ae0f04326edcd4fa202cda3dddb33</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a5fe3825813b066b664b3dd34dd1bc8c4a69ef0526165cef29fd59ed5b08b03fc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_START</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a5fe3825813b066b664b3dd34dd1bc8c4a1f20d012b563fc223902e24a8bcd7547</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_GOAL</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a5fe3825813b066b664b3dd34dd1bc8c4a2e2b2b7e02900c4417af0ecea272c637</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNRECOGNIZED_GOAL_TYPE</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a5fe3825813b066b664b3dd34dd1bc8c4a47d769205044efa345184a640bd863ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIMEOUT</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a5fe3825813b066b664b3dd34dd1bc8c4a620a03eebe49aa307140d6a4763278fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APPROXIMATE_SOLUTION</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a5fe3825813b066b664b3dd34dd1bc8c4a5fade5f3ded9dd85ce1693c1912edaa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXACT_SOLUTION</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a5fe3825813b066b664b3dd34dd1bc8c4a20f8c901516c72e258d43d7156fe8e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CRASH</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a5fe3825813b066b664b3dd34dd1bc8c4aef20494db78a6a63e22d3ae5edc96f94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ABORT</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a5fe3825813b066b664b3dd34dd1bc8c4a0013f743bb46afbc5bf4e019de43625f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TYPE_COUNT</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a5fe3825813b066b664b3dd34dd1bc8c4ac60ae0f04326edcd4fa202cda3dddb33</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PlannerStatus</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>ae247055bbf41ab29cd49e96daab59b58</anchor>
      <arglist>(StatusType status=UNKNOWN)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PlannerStatus</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a731f2386ad7b74660fc6a622c17aa029</anchor>
      <arglist>(bool hasSolution, bool isApproximate)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>asString</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a6ad35043cec6114b14bc374d97c1b8e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a2e443ff1b9a7673e7a9d352a5736c593</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator StatusType</name>
      <anchorfile>structompl_1_1base_1_1PlannerStatus.html</anchorfile>
      <anchor>a4dee342437fc711b07cfeb386cf295fa</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::PlannerTerminationCondition</name>
    <filename>classompl_1_1base_1_1PlannerTerminationCondition.html</filename>
    <member kind="function">
      <type></type>
      <name>PlannerTerminationCondition</name>
      <anchorfile>classompl_1_1base_1_1PlannerTerminationCondition.html</anchorfile>
      <anchor>a0652551a119012a21f2ee6371b1cb900</anchor>
      <arglist>(const PlannerTerminationConditionFn &amp;fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PlannerTerminationCondition</name>
      <anchorfile>classompl_1_1base_1_1PlannerTerminationCondition.html</anchorfile>
      <anchor>a6a928395a096b457a2d19d0043e52a61</anchor>
      <arglist>(const PlannerTerminationConditionFn &amp;fn, double period)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classompl_1_1base_1_1PlannerTerminationCondition.html</anchorfile>
      <anchor>a95ffc879825203d4955445e7ce115fc6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classompl_1_1base_1_1PlannerTerminationCondition.html</anchorfile>
      <anchor>aedc85dd51fa9419bb4e41da13c5835b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>terminate</name>
      <anchorfile>classompl_1_1base_1_1PlannerTerminationCondition.html</anchorfile>
      <anchor>a2305d3d8006d8248f1cf8fdbe8a97832</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eval</name>
      <anchorfile>classompl_1_1base_1_1PlannerTerminationCondition.html</anchorfile>
      <anchor>ade0fe329cab3f522fc2922f5ccf94496</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::PrecomputedStateSampler</name>
    <filename>classompl_1_1base_1_1PrecomputedStateSampler.html</filename>
    <base>ompl::base::StateSampler</base>
    <member kind="function">
      <type></type>
      <name>PrecomputedStateSampler</name>
      <anchorfile>classompl_1_1base_1_1PrecomputedStateSampler.html</anchorfile>
      <anchor>a9750853c1506d91b5a854c63b82768a0</anchor>
      <arglist>(const StateSpace *space, const std::vector&lt; const State * &gt; &amp;states)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrecomputedStateSampler</name>
      <anchorfile>classompl_1_1base_1_1PrecomputedStateSampler.html</anchorfile>
      <anchor>a4bfd38815b579313898feca7d9415999</anchor>
      <arglist>(const StateSpace *space, const std::vector&lt; const State * &gt; &amp;states, std::size_t minIndex, std::size_t maxIndex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1PrecomputedStateSampler.html</anchorfile>
      <anchor>a5a57f66e8652d36141e11fa2aecc51a7</anchor>
      <arglist>(State *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleUniformNear</name>
      <anchorfile>classompl_1_1base_1_1PrecomputedStateSampler.html</anchorfile>
      <anchor>ada4c808602bb498d3acc8c514bd47ce1</anchor>
      <arglist>(State *state, const State *near, const double distance)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleGaussian</name>
      <anchorfile>classompl_1_1base_1_1PrecomputedStateSampler.html</anchorfile>
      <anchor>a189e21f87fe90c611de5397700538333</anchor>
      <arglist>(State *state, const State *mean, const double stdDev)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const std::vector&lt; const State * &gt; &amp;</type>
      <name>states_</name>
      <anchorfile>classompl_1_1base_1_1PrecomputedStateSampler.html</anchorfile>
      <anchor>a1e0826e287e6eee8fff1a16d955c1f53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>minStateIndex_</name>
      <anchorfile>classompl_1_1base_1_1PrecomputedStateSampler.html</anchorfile>
      <anchor>a1e38b42ca6d5cfef2ff0b98099c44a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>maxStateIndex_</name>
      <anchorfile>classompl_1_1base_1_1PrecomputedStateSampler.html</anchorfile>
      <anchor>a7a80613f53425775461b42f5b623390b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::ProblemDefinition</name>
    <filename>classompl_1_1base_1_1ProblemDefinition.html</filename>
    <member kind="function">
      <type></type>
      <name>ProblemDefinition</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a1626717b23766adb3e901bc2ff746744</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>const SpaceInformationPtr &amp;</type>
      <name>getSpaceInformation</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a2073c0761c97b87274004ec41b40beed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addStartState</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a3120682d036099f68fd26805fee0736d</anchor>
      <arglist>(const State *state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addStartState</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a874c33b1adab325a2ebf489fa04b8099</anchor>
      <arglist>(const ScopedState&lt;&gt; &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasStartState</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a5b7fa60683d6f3cd6de07878a62572c5</anchor>
      <arglist>(const State *state, unsigned int *startIndex=nullptr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearStartStates</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a6959a875ace6ebdce9024cd24324fb49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getStartStateCount</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a7ece75a393981197ef64aee59e9c9f23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const State *</type>
      <name>getStartState</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>aaf141b46b6b36418bc115fcb5e8afff3</anchor>
      <arglist>(unsigned int index) const </arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>getStartState</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>ad9fb68d7aab6f613645cf02fa6995c52</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoal</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a039bef3abd7e8319e4ea2e4cda752ff6</anchor>
      <arglist>(const GoalPtr &amp;goal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearGoal</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>ae03b63af701fa3935d50877c53c78e80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GoalPtr &amp;</type>
      <name>getGoal</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a42f28fa7a94f496859d7b8d1fcde47ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getInputStates</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a817035d12f2b66e0cb9bbf339b56921e</anchor>
      <arglist>(std::vector&lt; const State * &gt; &amp;states) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartAndGoalStates</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a9ab5830fd9366be606349ea1885a3695</anchor>
      <arglist>(const State *start, const State *goal, const double threshold=std::numeric_limits&lt; double &gt;::epsilon())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalState</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a5cd271339a73f61bc1b13588a92a36d7</anchor>
      <arglist>(const State *goal, const double threshold=std::numeric_limits&lt; double &gt;::epsilon())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartAndGoalStates</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a5ada7160decb7894ac566615eb22633a</anchor>
      <arglist>(const ScopedState&lt;&gt; &amp;start, const ScopedState&lt;&gt; &amp;goal, const double threshold=std::numeric_limits&lt; double &gt;::epsilon())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalState</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a935f86078c4e65dd397db736c02b3c81</anchor>
      <arglist>(const ScopedState&lt;&gt; &amp;goal, const double threshold=std::numeric_limits&lt; double &gt;::epsilon())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasOptimizationObjective</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a3a1bc59a508ca02a412dd3171ce0c440</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const OptimizationObjectivePtr &amp;</type>
      <name>getOptimizationObjective</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a00cf2be0c6330fb0a3d414294e29a353</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOptimizationObjective</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>ab2c1ea487eb353290651767435f0e74b</anchor>
      <arglist>(const OptimizationObjectivePtr &amp;optimizationObjective)</arglist>
    </member>
    <member kind="function">
      <type>const ReportIntermediateSolutionFn &amp;</type>
      <name>getIntermediateSolutionCallback</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>ab73af856f08424c36c66d42cb49b344b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIntermediateSolutionCallback</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>ad5d02593c2c26824ecaf0e29ef40e596</anchor>
      <arglist>(const ReportIntermediateSolutionFn &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTrivial</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a1da837a759f495f4c834e5c1fab72f0a</anchor>
      <arglist>(unsigned int *startIndex=nullptr, double *distance=nullptr) const </arglist>
    </member>
    <member kind="function">
      <type>PathPtr</type>
      <name>isStraightLinePathValid</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a3fcafadf45ea071ec4896a9a700e526c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fixInvalidInputStates</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a74aa8792df6065a84f1b602db53d108c</anchor>
      <arglist>(double distStart, double distGoal, unsigned int attempts)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSolution</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a021a6600a5e54ffa20e9626cf97e3bda</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasExactSolution</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a93db07284ca8efc8466b3b1227068f46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasApproximateSolution</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a5a510a806faa9a59c120380f268708ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSolutionDifference</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a894e668c245b35eba378c5096da97411</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasOptimizedSolution</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a137b1b26766ae699c79e2dbf75bb8b22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PathPtr</type>
      <name>getSolutionPath</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a897ff51629dda105778b5950d9e0e141</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getSolution</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>afae998ad1781b683ab89493059e63aa3</anchor>
      <arglist>(PlannerSolution &amp;solution) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSolutionPath</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a80d99e28ec3579fbdb0fba5afa7bc4bb</anchor>
      <arglist>(const PathPtr &amp;path, bool approximate=false, double difference=-1.0, const std::string &amp;plannerName=&quot;Unknown&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSolutionPath</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a25cc4db3bd874d912d6836836fbbff3e</anchor>
      <arglist>(const PlannerSolution &amp;sol) const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getSolutionCount</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>abe4191f019264fbeec6e1cab7580c898</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; PlannerSolution &gt;</type>
      <name>getSolutions</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a2bdb879b091c0d74fabe8050fff087a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearSolutionPaths</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>aa88547718b7905c99c02762cec7a3b1a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSolutionNonExistenceProof</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a5aebd53a31048a9141fc95aaac61350e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearSolutionNonExistenceProof</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a1916346ceb217c0db3db1b0059b54b11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SolutionNonExistenceProofPtr &amp;</type>
      <name>getSolutionNonExistenceProof</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a6301e9ec89b989daa8eca7a97964aa94</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSolutionNonExistenceProof</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a8b2d1cdeb0b4df2a1e77e6096daf1d10</anchor>
      <arglist>(const SolutionNonExistenceProofPtr &amp;nonExistenceProof)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a76cd24bc1d239ffa674967c004c7df20</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>fixInvalidInputState</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a4afcbeee27af97ac5eefdc40ea8ecfbe</anchor>
      <arglist>(State *state, double dist, bool start, unsigned int attempts)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SpaceInformationPtr</type>
      <name>si_</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>ac24e830b5fedc3642f3b3c4194d0decb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; State * &gt;</type>
      <name>startStates_</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>ab545e2929804683e9841c27d492dae82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GoalPtr</type>
      <name>goal_</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a3bdc61f288bbf3f1dece9a275cd2c113</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SolutionNonExistenceProofPtr</type>
      <name>nonExistenceProof_</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>a9eb7796abd9f95bbad330669973d2664</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OptimizationObjectivePtr</type>
      <name>optimizationObjective_</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>ab9ad7eb5bcfff9223ddcc8a5dab14301</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ReportIntermediateSolutionFn</type>
      <name>intermediateSolutionCallback_</name>
      <anchorfile>classompl_1_1base_1_1ProblemDefinition.html</anchorfile>
      <anchor>ac217dd5eacd9ca281b96a6cfc1c5dc5a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::ProblemDefinitionPtr</name>
    <filename>classompl_1_1base_1_1ProblemDefinitionPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::base::ProjectionEvaluator</name>
    <filename>classompl_1_1base_1_1ProjectionEvaluator.html</filename>
    <member kind="function">
      <type></type>
      <name>ProjectionEvaluator</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>ac34c2c0327a221e0b382bb39e0d84ad4</anchor>
      <arglist>(const StateSpace *space)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProjectionEvaluator</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>a9d34d1618b4a23bc0a3785fbe15f6fda</anchor>
      <arglist>(const StateSpacePtr &amp;space)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>a6a155190f31272acdfce6495e25e1f32</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>project</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>a75a68dee7ef3fb1f69eae2643262aae8</anchor>
      <arglist>(const State *state, EuclideanProjection &amp;projection) const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCellSizes</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>a159e26be9f83a75a001ad2d3ba477f71</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;cellSizes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCellSizes</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>a4de0e4ca8520aa105d5d345f3e76a2ac</anchor>
      <arglist>(unsigned int dim, double cellSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mulCellSizes</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>a203fee1c17bc3e1d60d85407fc2fe791</anchor>
      <arglist>(double factor)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>userConfigured</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>a48e6a0565234a9eac658af3e481c4337</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>getCellSizes</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>a0067c1bff1d03a8bf4588dadd8660373</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCellSizes</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>ad858cfcf132061e3d1dc5fecda8719ca</anchor>
      <arglist>(unsigned int dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkCellSizes</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>a13291cb75f24ee8255da1c826f6f4bb7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inferCellSizes</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>a6990f14246d47c9321f883b34fdf531f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>defaultCellSizes</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>a1a0598137c82fdbedb7a191184d30de1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkBounds</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>ac2549d1612f9273c163bc0856c8fa269</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasBounds</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>aaa52d797320ae061c2a5b5bfb30bcd77</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBounds</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>a0b8ac8c10fadde8c8792db04a2dfc41f</anchor>
      <arglist>(const RealVectorBounds &amp;bounds)</arglist>
    </member>
    <member kind="function">
      <type>const RealVectorBounds &amp;</type>
      <name>getBounds</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>aa427067c04753277d8c5f19e0481b528</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inferBounds</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>ac11df5e004d74905fbaa240c4d99ca68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>af40dd2632f9c9e19be07d56532476496</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeCoordinates</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>ad8ce42480db15d62a8996f569921aae9</anchor>
      <arglist>(const EuclideanProjection &amp;projection, ProjectionCoordinates &amp;coord) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeCoordinates</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>a595d68385695e7d2eed24963bd44fbc2</anchor>
      <arglist>(const State *state, ProjectionCoordinates &amp;coord) const </arglist>
    </member>
    <member kind="function">
      <type>ParamSet &amp;</type>
      <name>params</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>aa15a7ce6c94ca8fb9ea99965d7a3be9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ParamSet &amp;</type>
      <name>params</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>a078162761dc0cac923566c64eeecdca7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printSettings</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>a811a6a659d6e5e694905f57e26d33d61</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printProjection</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>a1713d626c4389e38dfba86ec0cf67443</anchor>
      <arglist>(const EuclideanProjection &amp;projection, std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>estimateBounds</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>a8473159a6d845feeb0efd89787137d46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const StateSpace *</type>
      <name>space_</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>a5ecdb9c29409173a34c2efb7eed221a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>cellSizes_</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>afdc4796fe612cf83f74d4b313c664443</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealVectorBounds</type>
      <name>bounds_</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>a3bb101a20dcb4f3f0033092b6def1b13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealVectorBounds</type>
      <name>estimatedBounds_</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>af371bf797f305b43f1bb35cf26b1f2d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>defaultCellSizes_</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>a43fb61982ce66f9e431ebf3b9d0448b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cellSizesWereInferred_</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>aeb34ed364e5eb616fc7b099477a86e89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParamSet</type>
      <name>params_</name>
      <anchorfile>classompl_1_1base_1_1ProjectionEvaluator.html</anchorfile>
      <anchor>a718e2f2e548a3b5cea3197b5b0c852e3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::ProjectionEvaluatorPtr</name>
    <filename>classompl_1_1base_1_1ProjectionEvaluatorPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::base::ProjectionMatrix</name>
    <filename>classompl_1_1base_1_1ProjectionMatrix.html</filename>
    <member kind="typedef">
      <type>boost::numeric::ublas::matrix&lt; double &gt;</type>
      <name>Matrix</name>
      <anchorfile>classompl_1_1base_1_1ProjectionMatrix.html</anchorfile>
      <anchor>ae68f9cc67896cca8050460d3fad9c803</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeRandom</name>
      <anchorfile>classompl_1_1base_1_1ProjectionMatrix.html</anchorfile>
      <anchor>a5d6ba2d6abcc7ee055adaacf3699adf3</anchor>
      <arglist>(const unsigned int from, const unsigned int to, const std::vector&lt; double &gt; &amp;scale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeRandom</name>
      <anchorfile>classompl_1_1base_1_1ProjectionMatrix.html</anchorfile>
      <anchor>ac6a06b411074970846c0d6aff9028022</anchor>
      <arglist>(const unsigned int from, const unsigned int to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>project</name>
      <anchorfile>classompl_1_1base_1_1ProjectionMatrix.html</anchorfile>
      <anchor>aae8c7810595867e22da08f567581721d</anchor>
      <arglist>(const double *from, EuclideanProjection &amp;to) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classompl_1_1base_1_1ProjectionMatrix.html</anchorfile>
      <anchor>af85b426d3148933a7b54e65517ba9faa</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>ComputeRandom</name>
      <anchorfile>classompl_1_1base_1_1ProjectionMatrix.html</anchorfile>
      <anchor>a306ddad92cbc26a8fa479f1ce4ab238a</anchor>
      <arglist>(const unsigned int from, const unsigned int to, const std::vector&lt; double &gt; &amp;scale)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>ComputeRandom</name>
      <anchorfile>classompl_1_1base_1_1ProjectionMatrix.html</anchorfile>
      <anchor>adad1010b61fe753350445de650ada766</anchor>
      <arglist>(const unsigned int from, const unsigned int to)</arglist>
    </member>
    <member kind="variable">
      <type>Matrix</type>
      <name>mat</name>
      <anchorfile>classompl_1_1base_1_1ProjectionMatrix.html</anchorfile>
      <anchor>a0852751bba6e533c0e08792be5c55444</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::RealVectorBounds</name>
    <filename>classompl_1_1base_1_1RealVectorBounds.html</filename>
    <member kind="function">
      <type></type>
      <name>RealVectorBounds</name>
      <anchorfile>classompl_1_1base_1_1RealVectorBounds.html</anchorfile>
      <anchor>a8da7c7270bda6393663ffcad5a712dff</anchor>
      <arglist>(unsigned int dim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLow</name>
      <anchorfile>classompl_1_1base_1_1RealVectorBounds.html</anchorfile>
      <anchor>a6f63c8d793a056e2160e5d9d85c27a58</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHigh</name>
      <anchorfile>classompl_1_1base_1_1RealVectorBounds.html</anchorfile>
      <anchor>a756253c602ddc6bd299dc9c870fadfee</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLow</name>
      <anchorfile>classompl_1_1base_1_1RealVectorBounds.html</anchorfile>
      <anchor>a24a3b3bb10acfeda7fabbf25c618fb09</anchor>
      <arglist>(unsigned int index, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHigh</name>
      <anchorfile>classompl_1_1base_1_1RealVectorBounds.html</anchorfile>
      <anchor>a2786ec8d6d7683c67e578021ee9fadba</anchor>
      <arglist>(unsigned int index, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classompl_1_1base_1_1RealVectorBounds.html</anchorfile>
      <anchor>a94d66b44a5fc0f12aea312a89b86c83d</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVolume</name>
      <anchorfile>classompl_1_1base_1_1RealVectorBounds.html</anchorfile>
      <anchor>a962ab967cf72fdca4d446b41052430e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>getDifference</name>
      <anchorfile>classompl_1_1base_1_1RealVectorBounds.html</anchorfile>
      <anchor>a1bf28716cde4622689e05ac6df7706a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>check</name>
      <anchorfile>classompl_1_1base_1_1RealVectorBounds.html</anchorfile>
      <anchor>a3489a2e013b8b752632ba3ebd217c871</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>low</name>
      <anchorfile>classompl_1_1base_1_1RealVectorBounds.html</anchorfile>
      <anchor>a36ebebb6a9e116093581afbd07425baa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>high</name>
      <anchorfile>classompl_1_1base_1_1RealVectorBounds.html</anchorfile>
      <anchor>a06827561804a768d6ee86a20a664153c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::RealVectorIdentityProjectionEvaluator</name>
    <filename>classompl_1_1base_1_1RealVectorIdentityProjectionEvaluator.html</filename>
    <base>ompl::base::ProjectionEvaluator</base>
    <member kind="function">
      <type></type>
      <name>RealVectorIdentityProjectionEvaluator</name>
      <anchorfile>classompl_1_1base_1_1RealVectorIdentityProjectionEvaluator.html</anchorfile>
      <anchor>ae3e16c0a046fc65e07ef6ea5b0b14cdf</anchor>
      <arglist>(const StateSpace *space, const std::vector&lt; double &gt; &amp;cellSizes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealVectorIdentityProjectionEvaluator</name>
      <anchorfile>classompl_1_1base_1_1RealVectorIdentityProjectionEvaluator.html</anchorfile>
      <anchor>a5863e1c1ad256af0ab994e004ee6803c</anchor>
      <arglist>(const StateSpacePtr &amp;space, const std::vector&lt; double &gt; &amp;cellSizes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealVectorIdentityProjectionEvaluator</name>
      <anchorfile>classompl_1_1base_1_1RealVectorIdentityProjectionEvaluator.html</anchorfile>
      <anchor>acb78c07ffa0e9c4168e3c3dcc1e7fa9f</anchor>
      <arglist>(const StateSpace *space)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealVectorIdentityProjectionEvaluator</name>
      <anchorfile>classompl_1_1base_1_1RealVectorIdentityProjectionEvaluator.html</anchorfile>
      <anchor>afa2da8616bef27bfdc2a68b86fe66700</anchor>
      <arglist>(const StateSpacePtr &amp;space)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1base_1_1RealVectorIdentityProjectionEvaluator.html</anchorfile>
      <anchor>ae7aa86f7b0ab5e33304b2b9ddc00c511</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>defaultCellSizes</name>
      <anchorfile>classompl_1_1base_1_1RealVectorIdentityProjectionEvaluator.html</anchorfile>
      <anchor>ad3d5c9a4cae9295a8a0bd807031ea5d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1base_1_1RealVectorIdentityProjectionEvaluator.html</anchorfile>
      <anchor>a6d48a343a988ce2700b585ba9bf0d02f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>project</name>
      <anchorfile>classompl_1_1base_1_1RealVectorIdentityProjectionEvaluator.html</anchorfile>
      <anchor>ac73a972f7103dd3d18af10e46bd665e1</anchor>
      <arglist>(const State *state, EuclideanProjection &amp;projection) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::RealVectorLinearProjectionEvaluator</name>
    <filename>classompl_1_1base_1_1RealVectorLinearProjectionEvaluator.html</filename>
    <base>ompl::base::ProjectionEvaluator</base>
    <member kind="function">
      <type></type>
      <name>RealVectorLinearProjectionEvaluator</name>
      <anchorfile>classompl_1_1base_1_1RealVectorLinearProjectionEvaluator.html</anchorfile>
      <anchor>a946eba69ff8d55f401bd0b4cb1effec2</anchor>
      <arglist>(const StateSpace *space, const std::vector&lt; double &gt; &amp;cellSizes, const ProjectionMatrix::Matrix &amp;projection)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealVectorLinearProjectionEvaluator</name>
      <anchorfile>classompl_1_1base_1_1RealVectorLinearProjectionEvaluator.html</anchorfile>
      <anchor>ac5e7af0faca4f18988429ed652004ef2</anchor>
      <arglist>(const StateSpacePtr &amp;space, const std::vector&lt; double &gt; &amp;cellSizes, const ProjectionMatrix::Matrix &amp;projection)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealVectorLinearProjectionEvaluator</name>
      <anchorfile>classompl_1_1base_1_1RealVectorLinearProjectionEvaluator.html</anchorfile>
      <anchor>a20910c41a78a5cdb0e4d509bd4ceee02</anchor>
      <arglist>(const StateSpace *space, const ProjectionMatrix::Matrix &amp;projection)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealVectorLinearProjectionEvaluator</name>
      <anchorfile>classompl_1_1base_1_1RealVectorLinearProjectionEvaluator.html</anchorfile>
      <anchor>a15447ba55c7448f739f4c3a0be796081</anchor>
      <arglist>(const StateSpacePtr &amp;space, const ProjectionMatrix::Matrix &amp;projection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1base_1_1RealVectorLinearProjectionEvaluator.html</anchorfile>
      <anchor>ae822da7cb2186c65d1022f1c5645135a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>project</name>
      <anchorfile>classompl_1_1base_1_1RealVectorLinearProjectionEvaluator.html</anchorfile>
      <anchor>a4f7edcc0966059982cac25c3351976fb</anchor>
      <arglist>(const State *state, EuclideanProjection &amp;projection) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ProjectionMatrix</type>
      <name>projection_</name>
      <anchorfile>classompl_1_1base_1_1RealVectorLinearProjectionEvaluator.html</anchorfile>
      <anchor>a787c82b4b59d7fa379040b1a65a82f8a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::RealVectorOrthogonalProjectionEvaluator</name>
    <filename>classompl_1_1base_1_1RealVectorOrthogonalProjectionEvaluator.html</filename>
    <base>ompl::base::ProjectionEvaluator</base>
    <member kind="function">
      <type></type>
      <name>RealVectorOrthogonalProjectionEvaluator</name>
      <anchorfile>classompl_1_1base_1_1RealVectorOrthogonalProjectionEvaluator.html</anchorfile>
      <anchor>a9b0012c55558270a7c8e061833fef665</anchor>
      <arglist>(const StateSpace *space, const std::vector&lt; double &gt; &amp;cellSizes, const std::vector&lt; unsigned int &gt; &amp;components)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealVectorOrthogonalProjectionEvaluator</name>
      <anchorfile>classompl_1_1base_1_1RealVectorOrthogonalProjectionEvaluator.html</anchorfile>
      <anchor>adc36f7b3478cfb38893a3c223ba4f9bd</anchor>
      <arglist>(const StateSpacePtr &amp;space, const std::vector&lt; double &gt; &amp;cellSizes, const std::vector&lt; unsigned int &gt; &amp;components)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealVectorOrthogonalProjectionEvaluator</name>
      <anchorfile>classompl_1_1base_1_1RealVectorOrthogonalProjectionEvaluator.html</anchorfile>
      <anchor>a7ab7cb8dab53cc2ff8149f8e199781b8</anchor>
      <arglist>(const StateSpace *space, const std::vector&lt; unsigned int &gt; &amp;components)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealVectorOrthogonalProjectionEvaluator</name>
      <anchorfile>classompl_1_1base_1_1RealVectorOrthogonalProjectionEvaluator.html</anchorfile>
      <anchor>aeeb1515076a142d670ffdb54443cf399</anchor>
      <arglist>(const StateSpacePtr &amp;space, const std::vector&lt; unsigned int &gt; &amp;components)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1base_1_1RealVectorOrthogonalProjectionEvaluator.html</anchorfile>
      <anchor>acb7f2d733592a6708b58575f4fcaa4df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>defaultCellSizes</name>
      <anchorfile>classompl_1_1base_1_1RealVectorOrthogonalProjectionEvaluator.html</anchorfile>
      <anchor>a674abf92673a22a5a85f408ad5f7105c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>project</name>
      <anchorfile>classompl_1_1base_1_1RealVectorOrthogonalProjectionEvaluator.html</anchorfile>
      <anchor>a4123acbf3ac5a966d7cee039697bcd4e</anchor>
      <arglist>(const State *state, EuclideanProjection &amp;projection) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>copyBounds</name>
      <anchorfile>classompl_1_1base_1_1RealVectorOrthogonalProjectionEvaluator.html</anchorfile>
      <anchor>ab170786ef29b2f224b5ac52dbffbf329</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>components_</name>
      <anchorfile>classompl_1_1base_1_1RealVectorOrthogonalProjectionEvaluator.html</anchorfile>
      <anchor>a0d7d60d956eca6610bb8102164ec502a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::RealVectorRandomLinearProjectionEvaluator</name>
    <filename>classompl_1_1base_1_1RealVectorRandomLinearProjectionEvaluator.html</filename>
    <base>ompl::base::RealVectorLinearProjectionEvaluator</base>
    <member kind="function">
      <type></type>
      <name>RealVectorRandomLinearProjectionEvaluator</name>
      <anchorfile>classompl_1_1base_1_1RealVectorRandomLinearProjectionEvaluator.html</anchorfile>
      <anchor>a566a72305f24ad756006096745e553ad</anchor>
      <arglist>(const StateSpace *space, const std::vector&lt; double &gt; &amp;cellSizes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealVectorRandomLinearProjectionEvaluator</name>
      <anchorfile>classompl_1_1base_1_1RealVectorRandomLinearProjectionEvaluator.html</anchorfile>
      <anchor>a5539f597a77221057145270ce5c7774a</anchor>
      <arglist>(const StateSpacePtr &amp;space, const std::vector&lt; double &gt; &amp;cellSizes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealVectorRandomLinearProjectionEvaluator</name>
      <anchorfile>classompl_1_1base_1_1RealVectorRandomLinearProjectionEvaluator.html</anchorfile>
      <anchor>a1f7c683afb977a5f1b3a5c0ff91cfde4</anchor>
      <arglist>(const StateSpace *space, unsigned int dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealVectorRandomLinearProjectionEvaluator</name>
      <anchorfile>classompl_1_1base_1_1RealVectorRandomLinearProjectionEvaluator.html</anchorfile>
      <anchor>a81f612abf40ec2b04aeaf3325639edbe</anchor>
      <arglist>(const StateSpacePtr &amp;space, unsigned int dim)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::RealVectorStateSampler</name>
    <filename>classompl_1_1base_1_1RealVectorStateSampler.html</filename>
    <base>ompl::base::StateSampler</base>
    <member kind="function">
      <type></type>
      <name>RealVectorStateSampler</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSampler.html</anchorfile>
      <anchor>a2e895e10de2cb054c0a50ffe7e99e7bf</anchor>
      <arglist>(const StateSpace *space)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSampler.html</anchorfile>
      <anchor>a7c7a1af5acf4d03c33dd5ec6a4ab50b4</anchor>
      <arglist>(State *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleUniformNear</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSampler.html</anchorfile>
      <anchor>a04d589c5cb197f5cfa0626557491fac8</anchor>
      <arglist>(State *state, const State *near, const double distance)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleGaussian</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSampler.html</anchorfile>
      <anchor>a403799674d976ff4a1ae0a817b6c1b73</anchor>
      <arglist>(State *state, const State *mean, const double stdDev)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::RealVectorStateSpace</name>
    <filename>classompl_1_1base_1_1RealVectorStateSpace.html</filename>
    <base>ompl::base::StateSpace</base>
    <class kind="class">ompl::base::RealVectorStateSpace::StateType</class>
    <member kind="function">
      <type></type>
      <name>RealVectorStateSpace</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a345793d578ff70b4de5fb5c3a8e0a93c</anchor>
      <arglist>(unsigned int dim=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDimension</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a2893436790633b216ed31123b3cf1634</anchor>
      <arglist>(double minBound=0.0, double maxBound=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDimension</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a03b7187e42e78e2874db062dc88a1bd0</anchor>
      <arglist>(const std::string &amp;name, double minBound=0.0, double maxBound=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBounds</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>ab53c0ef2a517e34f4c387785dd3f8956</anchor>
      <arglist>(const RealVectorBounds &amp;bounds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBounds</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a592f658c4d3c546d96342146d18b5d13</anchor>
      <arglist>(double low, double high)</arglist>
    </member>
    <member kind="function">
      <type>const RealVectorBounds &amp;</type>
      <name>getBounds</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>ab34052a55fdaa7640018f3862a3f49e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>ae745e04e8bd7429a2aaa6e05522ac383</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getDimensionName</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>ae5112c5d1bfbe7d69094b71ead4f84ca</anchor>
      <arglist>(unsigned int index) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDimensionIndex</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a3b43a37b02d3164f55581c4cda94fa00</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimensionName</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a2d387a4a02fafea56315ddd449703847</anchor>
      <arglist>(unsigned int index, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a6bba8c34051ad558739f8beecaa9c647</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMeasure</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a455ab2bd7fb9e17d8d58695c9016abb5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enforceBounds</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>ae473cc4d0feaefb5e568578cd927d9b9</anchor>
      <arglist>(State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a8ea04b460df8e8cb638ced218fef71e0</anchor>
      <arglist>(const State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyState</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a2304bbddd850d5b10eaa70142547b67d</anchor>
      <arglist>(State *destination, const State *source) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSerializationLength</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a5b5dac1f059b7883f0ae5e97a7d3165d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>ac7218998762d2f8f8c2ced983d4e3460</anchor>
      <arglist>(void *serialization, const State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deserialize</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a3a4968be30e69839b62c0c61896ab315</anchor>
      <arglist>(State *state, const void *serialization) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>distance</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>ae9dba965480f0b4771455c79aae8a195</anchor>
      <arglist>(const State *state1, const State *state2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equalStates</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a7de4ee53afed57ec78012c764758274e</anchor>
      <arglist>(const State *state1, const State *state2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a5135607e2fedf624b07d5546f8fec2c5</anchor>
      <arglist>(const State *from, const State *to, const double t, State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StateSamplerPtr</type>
      <name>allocDefaultStateSampler</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>ab6a1442eaabc49053327606dbba87522</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual State *</type>
      <name>allocState</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a06c6f2ecf6cba497f8178aa4fd924046</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>freeState</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>af2ed57519f3da6e87cd96d3c300336cb</anchor>
      <arglist>(State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double *</type>
      <name>getValueAddressAtIndex</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>aa263419b2d378049b3315286413d5a2f</anchor>
      <arglist>(State *state, const unsigned int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printState</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a2a3d613e6aef0a811f89bfae0ac3f181</anchor>
      <arglist>(const State *state, std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printSettings</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a7297b3664373e5dbe9dea943f9a49bc4</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>registerProjections</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a35ad3c9f423fabe6b93c5c1cb27f8d02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>adfcadeafb7f1ad44074c0dcf753a862a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>dimension_</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a1d187d416ce5c4d0bc101912e6e7ae7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealVectorBounds</type>
      <name>bounds_</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a09ec78ff21dcbec292a4694da8f8ab92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>dimensionNames_</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>a58d503f751e68f0ae946b48b526444f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, unsigned int &gt;</type>
      <name>dimensionIndex_</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace.html</anchorfile>
      <anchor>abc8aaf3fdd92ce6d9006c1095deeb705</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::RealVectorStateSpace::StateType</name>
    <filename>classompl_1_1base_1_1RealVectorStateSpace_1_1StateType.html</filename>
    <base>ompl::base::State</base>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace_1_1StateType.html</anchorfile>
      <anchor>aecc0e20a09cd7f7ea99e5981e43ef813</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace_1_1StateType.html</anchorfile>
      <anchor>a8efe5303cf53d309c12fe3b406ccd97c</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>values</name>
      <anchorfile>classompl_1_1base_1_1RealVectorStateSpace_1_1StateType.html</anchorfile>
      <anchor>a916575eb76687da3b47a2d9699128498</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::ReedsSheppMotionValidator</name>
    <filename>classompl_1_1base_1_1ReedsSheppMotionValidator.html</filename>
    <base>ompl::base::MotionValidator</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkMotion</name>
      <anchorfile>classompl_1_1base_1_1ReedsSheppMotionValidator.html</anchorfile>
      <anchor>a115fd88f09b693a6ac8ecc2269603a43</anchor>
      <arglist>(const State *s1, const State *s2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkMotion</name>
      <anchorfile>classompl_1_1base_1_1ReedsSheppMotionValidator.html</anchorfile>
      <anchor>a1dffdb3c974f69d22570c82afb65a522</anchor>
      <arglist>(const State *s1, const State *s2, std::pair&lt; State *, double &gt; &amp;lastValid) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::ReedsSheppStateSpace</name>
    <filename>classompl_1_1base_1_1ReedsSheppStateSpace.html</filename>
    <base>ompl::base::SE2StateSpace</base>
    <class kind="class">ompl::base::ReedsSheppStateSpace::ReedsSheppPath</class>
    <member kind="enumeration">
      <type></type>
      <name>ReedsSheppPathSegmentType</name>
      <anchorfile>classompl_1_1base_1_1ReedsSheppStateSpace.html</anchorfile>
      <anchor>a2b3e89dd4d89098fc1cfc2e38c27827d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>distance</name>
      <anchorfile>classompl_1_1base_1_1ReedsSheppStateSpace.html</anchorfile>
      <anchor>a1d96ef7a00c0ecdbdc459979d255758b</anchor>
      <arglist>(const State *state1, const State *state2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1base_1_1ReedsSheppStateSpace.html</anchorfile>
      <anchor>a65044f5f9447651db15a25fb6f45663a</anchor>
      <arglist>(const State *from, const State *to, const double t, State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sanityChecks</name>
      <anchorfile>classompl_1_1base_1_1ReedsSheppStateSpace.html</anchorfile>
      <anchor>ad713fd7425d5e8ee9fc76e2f366fdf42</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ReedsSheppPath</type>
      <name>reedsShepp</name>
      <anchorfile>classompl_1_1base_1_1ReedsSheppStateSpace.html</anchorfile>
      <anchor>a8d39d58624aaec8248f3a8baca677042</anchor>
      <arglist>(const State *state1, const State *state2) const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ReedsSheppPathSegmentType</type>
      <name>reedsSheppPathType</name>
      <anchorfile>classompl_1_1base_1_1ReedsSheppStateSpace.html</anchorfile>
      <anchor>aec046690209af17a5072c7072739fdbb</anchor>
      <arglist>[18][5]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>rho_</name>
      <anchorfile>classompl_1_1base_1_1ReedsSheppStateSpace.html</anchorfile>
      <anchor>ab7fc1510910e2d5bc28bff7d3287576e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::ReedsSheppStateSpace::ReedsSheppPath</name>
    <filename>classompl_1_1base_1_1ReedsSheppStateSpace_1_1ReedsSheppPath.html</filename>
    <member kind="variable">
      <type>const ReedsSheppPathSegmentType *</type>
      <name>type_</name>
      <anchorfile>classompl_1_1base_1_1ReedsSheppStateSpace_1_1ReedsSheppPath.html</anchorfile>
      <anchor>af887ee3c44dc99376f4ca49f879af1f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>length_</name>
      <anchorfile>classompl_1_1base_1_1ReedsSheppStateSpace_1_1ReedsSheppPath.html</anchorfile>
      <anchor>a1e3048dd0037002f0f24c6f75797a631</anchor>
      <arglist>[5]</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>totalLength_</name>
      <anchorfile>classompl_1_1base_1_1ReedsSheppStateSpace_1_1ReedsSheppPath.html</anchorfile>
      <anchor>a120653c4e931d9f5bd8920dad5a33332</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::RejectionInfSampler</name>
    <filename>classompl_1_1base_1_1RejectionInfSampler.html</filename>
    <base>ompl::base::InformedSampler</base>
    <member kind="function">
      <type></type>
      <name>RejectionInfSampler</name>
      <anchorfile>classompl_1_1base_1_1RejectionInfSampler.html</anchorfile>
      <anchor>a07d4962706d23e39fa6bb49e340f6e2b</anchor>
      <arglist>(const ProblemDefinitionPtr probDefn, unsigned int maxNumberCalls)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1RejectionInfSampler.html</anchorfile>
      <anchor>a9511bd4649f7b35da2221660357bd3e8</anchor>
      <arglist>(State *statePtr, const Cost &amp;maxCost)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1RejectionInfSampler.html</anchorfile>
      <anchor>aabb3324dc89c62af330057f141fabe5a</anchor>
      <arglist>(State *statePtr, const Cost &amp;minCost, const Cost &amp;maxCost)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasInformedMeasure</name>
      <anchorfile>classompl_1_1base_1_1RejectionInfSampler.html</anchorfile>
      <anchor>afdd2c835cdfafed264a5b66af56b74cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getInformedMeasure</name>
      <anchorfile>classompl_1_1base_1_1RejectionInfSampler.html</anchorfile>
      <anchor>a6d21e5fe0b9b0721edffa9eff57833e3</anchor>
      <arglist>(const Cost &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getInformedMeasure</name>
      <anchorfile>classompl_1_1base_1_1RejectionInfSampler.html</anchorfile>
      <anchor>ad035d39df388279327b2a44f741992e9</anchor>
      <arglist>(const Cost &amp;, const Cost &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::base::SamplerSelector</name>
    <filename>structompl_1_1base_1_1SamplerSelector.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>ompl::base::ScopedState</name>
    <filename>classompl_1_1base_1_1ScopedState.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T::StateType</type>
      <name>StateType</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a5a33e968e72f92b5e25bdf3e2feaa0c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScopedState</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a7d5d0be9ab08141bdc4b896f6a0fcbfd</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScopedState</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a983420b093e57a2c3250e1b31c382047</anchor>
      <arglist>(const StateSpacePtr &amp;space)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScopedState</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>aa6f35a339ef5e31b0a163a829f80f5b1</anchor>
      <arglist>(const ScopedState&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScopedState</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a7eee444e73183e9d2d4872a80ec4169d</anchor>
      <arglist>(const ScopedState&lt; O &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScopedState</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a0d44eaea9444aba5c696c58187a755bd</anchor>
      <arglist>(const StateSpacePtr &amp;space, const State *state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScopedState</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a12a01012a255416cefd52ceda1ae452a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StateSpacePtr &amp;</type>
      <name>getSpace</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>ad9415b8d2c03a517de700cac610c26b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ScopedState&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>ac4fb27b32ef5e413b1a2ad8cfc84f7a4</anchor>
      <arglist>(const ScopedState&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ScopedState&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>af81845da48cd2995b0786c1a2135e6a6</anchor>
      <arglist>(const State *other)</arglist>
    </member>
    <member kind="function">
      <type>ScopedState&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a2a942938fd27f567e50c882448a36249</anchor>
      <arglist>(const State &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ScopedState&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a8c98dd91417107ba3d116859ea430437</anchor>
      <arglist>(const ScopedState&lt; O &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ScopedState&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a483e5d636b2955b73f4642e6b90cda9f</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;reals)</arglist>
    </member>
    <member kind="function">
      <type>ScopedState&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a50cbd5b4ee7fca852b2e6279f0980f8a</anchor>
      <arglist>(const double value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>ab33d5631280d7214fa9ff546cceedc71</anchor>
      <arglist>(const ScopedState&lt; O &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a165a7ae1f9655b2bf8e629bceeb10033</anchor>
      <arglist>(const ScopedState&lt; O &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const ScopedState</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a7e6f24485db4e3ba6cb021144059a2ca</anchor>
      <arglist>(const StateSpacePtr &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a58359e139ad823db181bc12fbcf3aafd</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a780b9677561db41bcf935d2257bd3b44</anchor>
      <arglist>(const unsigned int index) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>acf1b49e5236b3a6630322f590eb7dee0</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>ad8333ec6cd6276da8b756a43736f35c2</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>ad00db68bb526e0141638c26796bbc30f</anchor>
      <arglist>(const ScopedState&lt; O &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a533a7aba977907512e265270957626b7</anchor>
      <arglist>(const State *state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>random</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a34c0bab0e18eb1c000d0e0f0ab3dd917</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enforceBounds</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a5472cf72580aa57fb4f39311094226b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>adee09a9260c9c091c49129e7afc64892</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>reals</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>af965c40dee1fb0e41ac249e119b97fed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>ad3e8b7908ff5d912a6698654f2959a57</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function">
      <type>StateType &amp;</type>
      <name>operator*</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a19512f301d4e91fbd132fcf3d69b2b22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StateType &amp;</type>
      <name>operator*</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a03c6b0251f357e141aa048edab7e407b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StateType *</type>
      <name>operator-&gt;</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a833278352214f2d71d40f6ef8b11895e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StateType *</type>
      <name>operator-&gt;</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a36dc4601530f75afdd083798e2c2fab1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StateType *</type>
      <name>get</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a055e6b97092ffbc0f5e485f661db0e49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StateType *</type>
      <name>get</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a51406da688ef8e57c00f9f56e095bce5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StateType *</type>
      <name>operator()</name>
      <anchorfile>classompl_1_1base_1_1ScopedState.html</anchorfile>
      <anchor>a26b917b58dff51862cbcd16f25ac2f28</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::SE2StateSpace</name>
    <filename>classompl_1_1base_1_1SE2StateSpace.html</filename>
    <base>ompl::base::CompoundStateSpace</base>
    <class kind="class">ompl::base::SE2StateSpace::StateType</class>
    <member kind="function">
      <type>void</type>
      <name>setBounds</name>
      <anchorfile>classompl_1_1base_1_1SE2StateSpace.html</anchorfile>
      <anchor>aa39665e7053e3fcc9f26d1cc557914f8</anchor>
      <arglist>(const RealVectorBounds &amp;bounds)</arglist>
    </member>
    <member kind="function">
      <type>const RealVectorBounds &amp;</type>
      <name>getBounds</name>
      <anchorfile>classompl_1_1base_1_1SE2StateSpace.html</anchorfile>
      <anchor>ae8a0198bb88c3fffc9e3d5d0740b0faf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual State *</type>
      <name>allocState</name>
      <anchorfile>classompl_1_1base_1_1SE2StateSpace.html</anchorfile>
      <anchor>aed7ff0f47fd0760c939c6d43d77620d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>freeState</name>
      <anchorfile>classompl_1_1base_1_1SE2StateSpace.html</anchorfile>
      <anchor>a30c9a7a7c43ceb1a57c27e784d1501ea</anchor>
      <arglist>(State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>registerProjections</name>
      <anchorfile>classompl_1_1base_1_1SE2StateSpace.html</anchorfile>
      <anchor>a1d92ad341c033f049e6b5793bc668371</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::SE2StateSpace::StateType</name>
    <filename>classompl_1_1base_1_1SE2StateSpace_1_1StateType.html</filename>
    <base>ompl::base::CompoundState</base>
    <member kind="function">
      <type>double</type>
      <name>getX</name>
      <anchorfile>classompl_1_1base_1_1SE2StateSpace_1_1StateType.html</anchorfile>
      <anchor>a828923cf3446ba31f4b208ffd6b950cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getY</name>
      <anchorfile>classompl_1_1base_1_1SE2StateSpace_1_1StateType.html</anchorfile>
      <anchor>a9728d7a9e7634ba34f7c865c133edd60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getYaw</name>
      <anchorfile>classompl_1_1base_1_1SE2StateSpace_1_1StateType.html</anchorfile>
      <anchor>a0597e4c80bc35367c5104a35e1d774e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setX</name>
      <anchorfile>classompl_1_1base_1_1SE2StateSpace_1_1StateType.html</anchorfile>
      <anchor>a9df0f4ee9efab3c90148bec5080e1dc8</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setY</name>
      <anchorfile>classompl_1_1base_1_1SE2StateSpace_1_1StateType.html</anchorfile>
      <anchor>a4dd59df1ffc4f868556d0e507984a07b</anchor>
      <arglist>(double y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setXY</name>
      <anchorfile>classompl_1_1base_1_1SE2StateSpace_1_1StateType.html</anchorfile>
      <anchor>a404c1c0e98be35ce2b35885e8180a616</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setYaw</name>
      <anchorfile>classompl_1_1base_1_1SE2StateSpace_1_1StateType.html</anchorfile>
      <anchor>abc32a6219bee45cf35d0323d2deb7de3</anchor>
      <arglist>(double yaw)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::SE3StateSpace</name>
    <filename>classompl_1_1base_1_1SE3StateSpace.html</filename>
    <base>ompl::base::CompoundStateSpace</base>
    <class kind="class">ompl::base::SE3StateSpace::StateType</class>
    <member kind="function">
      <type>void</type>
      <name>setBounds</name>
      <anchorfile>classompl_1_1base_1_1SE3StateSpace.html</anchorfile>
      <anchor>acf17c0f33c6f3bb57d27625b406d5167</anchor>
      <arglist>(const RealVectorBounds &amp;bounds)</arglist>
    </member>
    <member kind="function">
      <type>const RealVectorBounds &amp;</type>
      <name>getBounds</name>
      <anchorfile>classompl_1_1base_1_1SE3StateSpace.html</anchorfile>
      <anchor>ad893ea80d6f72d46fd7dcd7d45a8c494</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual State *</type>
      <name>allocState</name>
      <anchorfile>classompl_1_1base_1_1SE3StateSpace.html</anchorfile>
      <anchor>aabdbdb1742d86fdaa30c2882a205b76c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>freeState</name>
      <anchorfile>classompl_1_1base_1_1SE3StateSpace.html</anchorfile>
      <anchor>a1fe8b0d921a52a5858f82507b66d70bc</anchor>
      <arglist>(State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>registerProjections</name>
      <anchorfile>classompl_1_1base_1_1SE3StateSpace.html</anchorfile>
      <anchor>ac27a1cbdc3eb3523a717134fc06a563b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::SE3StateSpace::StateType</name>
    <filename>classompl_1_1base_1_1SE3StateSpace_1_1StateType.html</filename>
    <base>ompl::base::CompoundState</base>
    <member kind="function">
      <type>double</type>
      <name>getX</name>
      <anchorfile>classompl_1_1base_1_1SE3StateSpace_1_1StateType.html</anchorfile>
      <anchor>a5f77aaca33006bd7873a6df290c0b098</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getY</name>
      <anchorfile>classompl_1_1base_1_1SE3StateSpace_1_1StateType.html</anchorfile>
      <anchor>a60f5afe8fcc581357317343aa923b59b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getZ</name>
      <anchorfile>classompl_1_1base_1_1SE3StateSpace_1_1StateType.html</anchorfile>
      <anchor>a287e641cb03198f9a0fba485881cdf8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SO3StateSpace::StateType &amp;</type>
      <name>rotation</name>
      <anchorfile>classompl_1_1base_1_1SE3StateSpace_1_1StateType.html</anchorfile>
      <anchor>a90cf9ff0c8e86e2d48d00c60e20b4316</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SO3StateSpace::StateType &amp;</type>
      <name>rotation</name>
      <anchorfile>classompl_1_1base_1_1SE3StateSpace_1_1StateType.html</anchorfile>
      <anchor>a0240250e44f901f70214dce34ce4dbb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setX</name>
      <anchorfile>classompl_1_1base_1_1SE3StateSpace_1_1StateType.html</anchorfile>
      <anchor>a0751796d34a2d0de27c2103093345aea</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setY</name>
      <anchorfile>classompl_1_1base_1_1SE3StateSpace_1_1StateType.html</anchorfile>
      <anchor>a4858f00d5ba6b03f85e59e6de7a2cd08</anchor>
      <arglist>(double y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZ</name>
      <anchorfile>classompl_1_1base_1_1SE3StateSpace_1_1StateType.html</anchorfile>
      <anchor>ab478a95c3f0c06c4e095b7ac859f1410</anchor>
      <arglist>(double z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setXYZ</name>
      <anchorfile>classompl_1_1base_1_1SE3StateSpace_1_1StateType.html</anchorfile>
      <anchor>a31582a7c0aa334e70d07f9b57939269e</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::SO2StateSampler</name>
    <filename>classompl_1_1base_1_1SO2StateSampler.html</filename>
    <base>ompl::base::StateSampler</base>
    <member kind="function">
      <type></type>
      <name>SO2StateSampler</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSampler.html</anchorfile>
      <anchor>a38da55bf187b5a2d747206ebdeb36176</anchor>
      <arglist>(const StateSpace *space)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSampler.html</anchorfile>
      <anchor>aeb783209f2ff23161e9d4e212c9bb42f</anchor>
      <arglist>(State *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleUniformNear</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSampler.html</anchorfile>
      <anchor>a270084c2f9c4ebbf7c7b3a641673d47c</anchor>
      <arglist>(State *state, const State *near, const double distance)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleGaussian</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSampler.html</anchorfile>
      <anchor>a2e37a6792d0e341cf3e944ee9c5b7829</anchor>
      <arglist>(State *state, const State *mean, const double stdDev)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::SO2StateSpace</name>
    <filename>classompl_1_1base_1_1SO2StateSpace.html</filename>
    <base>ompl::base::StateSpace</base>
    <class kind="class">ompl::base::SO2StateSpace::StateType</class>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSpace.html</anchorfile>
      <anchor>adc6b232dc49a07086119ef8d41ff7058</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSpace.html</anchorfile>
      <anchor>a5e8c7bcf005fba03d9f6afca287669a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMeasure</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSpace.html</anchorfile>
      <anchor>a0aa4adab5de7ae6291f0716d1aa88c56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enforceBounds</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSpace.html</anchorfile>
      <anchor>a238e79ef287dc8bb3d728110f0f29ea1</anchor>
      <arglist>(State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSpace.html</anchorfile>
      <anchor>a627f6f6555b06e835a3a189ac1c5c83f</anchor>
      <arglist>(const State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyState</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSpace.html</anchorfile>
      <anchor>afa370ede45deafe06b4217cf2641b610</anchor>
      <arglist>(State *destination, const State *source) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSerializationLength</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSpace.html</anchorfile>
      <anchor>a0117f3cc4343fd67821a635bf26f60b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSpace.html</anchorfile>
      <anchor>af00a8f3a812818e606f3bd381c2b7936</anchor>
      <arglist>(void *serialization, const State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deserialize</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSpace.html</anchorfile>
      <anchor>a182b203798595666b9a5af7c2299f7c7</anchor>
      <arglist>(State *state, const void *serialization) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>distance</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSpace.html</anchorfile>
      <anchor>acd2f2fe4af5e7358d737e992791f38f8</anchor>
      <arglist>(const State *state1, const State *state2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equalStates</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSpace.html</anchorfile>
      <anchor>aeaf8cfe977232479219b98ae2071550a</anchor>
      <arglist>(const State *state1, const State *state2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSpace.html</anchorfile>
      <anchor>a5439e63ec8bc12a8c6e7ffbab557dcf5</anchor>
      <arglist>(const State *from, const State *to, const double t, State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StateSamplerPtr</type>
      <name>allocDefaultStateSampler</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSpace.html</anchorfile>
      <anchor>a01a5eb945cec5c5cf601e87e5ace962c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual State *</type>
      <name>allocState</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSpace.html</anchorfile>
      <anchor>a4671519948f96914510d6d385f0bb019</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>freeState</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSpace.html</anchorfile>
      <anchor>a35c9cce2cc850d669fb890b85bac79d0</anchor>
      <arglist>(State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double *</type>
      <name>getValueAddressAtIndex</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSpace.html</anchorfile>
      <anchor>ae7e2c0c9d3fbe8cb0cbfbc61952d815e</anchor>
      <arglist>(State *state, const unsigned int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printState</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSpace.html</anchorfile>
      <anchor>a25c4dd29e78d3b1b4a7eb57dc384dca4</anchor>
      <arglist>(const State *state, std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printSettings</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSpace.html</anchorfile>
      <anchor>a053148b4abd31221424589a90fa9a72d</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>registerProjections</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSpace.html</anchorfile>
      <anchor>a638dfbcb42b9b57be013da1d9adff60f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::SO2StateSpace::StateType</name>
    <filename>classompl_1_1base_1_1SO2StateSpace_1_1StateType.html</filename>
    <base>ompl::base::State</base>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSpace_1_1StateType.html</anchorfile>
      <anchor>ae81640c240cc0e8f37c6f48a96cee0b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>value</name>
      <anchorfile>classompl_1_1base_1_1SO2StateSpace_1_1StateType.html</anchorfile>
      <anchor>af918005e3a0679ed8ff2c9d1252f6bd5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::SO3StateSampler</name>
    <filename>classompl_1_1base_1_1SO3StateSampler.html</filename>
    <base>ompl::base::StateSampler</base>
    <member kind="function">
      <type></type>
      <name>SO3StateSampler</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSampler.html</anchorfile>
      <anchor>a64e5298f5b710e1fb03428339c2a0ee2</anchor>
      <arglist>(const StateSpace *space)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSampler.html</anchorfile>
      <anchor>a11673448fc45166c7535b87a5d2c4d40</anchor>
      <arglist>(State *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleUniformNear</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSampler.html</anchorfile>
      <anchor>ade4097ad565c31a70c83331f2243fb13</anchor>
      <arglist>(State *state, const State *near, const double distance)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleGaussian</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSampler.html</anchorfile>
      <anchor>ad73f1f60597f294443fdd2f4af7dc9fe</anchor>
      <arglist>(State *state, const State *mean, const double stdDev)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::SO3StateSpace</name>
    <filename>classompl_1_1base_1_1SO3StateSpace.html</filename>
    <base>ompl::base::StateSpace</base>
    <class kind="class">ompl::base::SO3StateSpace::StateType</class>
    <member kind="function">
      <type>double</type>
      <name>norm</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace.html</anchorfile>
      <anchor>a43d994e1775140840b42a493d8b4d0e8</anchor>
      <arglist>(const StateType *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace.html</anchorfile>
      <anchor>a175dc3c2828dfa884033e29ac8f2a31e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace.html</anchorfile>
      <anchor>a539a00cf767a8db9b72498211bb12d39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMeasure</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace.html</anchorfile>
      <anchor>a893ad205eb4fba79150d419497263106</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enforceBounds</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace.html</anchorfile>
      <anchor>a5b0be6b2327b3c8d3ef83b9368c0695a</anchor>
      <arglist>(State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace.html</anchorfile>
      <anchor>a601ae978dbde5d0ded039af4b87edda9</anchor>
      <arglist>(const State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyState</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace.html</anchorfile>
      <anchor>a013547ae0375ec0a158cdefe71b670c3</anchor>
      <arglist>(State *destination, const State *source) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSerializationLength</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace.html</anchorfile>
      <anchor>a0879cce703d63859d107c6a4b3a871c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace.html</anchorfile>
      <anchor>a79ef0fcf5045b2545fdb1b5b03ab63d8</anchor>
      <arglist>(void *serialization, const State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deserialize</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace.html</anchorfile>
      <anchor>a48ce4beee7daa6b0e6cd97930b2356a4</anchor>
      <arglist>(State *state, const void *serialization) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>distance</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace.html</anchorfile>
      <anchor>a0c3bdda1e03c41965aea586cec605b7c</anchor>
      <arglist>(const State *state1, const State *state2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equalStates</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace.html</anchorfile>
      <anchor>a25bdfa4f3262f348d228a119d81b9f30</anchor>
      <arglist>(const State *state1, const State *state2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace.html</anchorfile>
      <anchor>ab3926aa72315531e407aed2dc9d41541</anchor>
      <arglist>(const State *from, const State *to, const double t, State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StateSamplerPtr</type>
      <name>allocDefaultStateSampler</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace.html</anchorfile>
      <anchor>acd531e358bf628f84c178fe279f798bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual State *</type>
      <name>allocState</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace.html</anchorfile>
      <anchor>ae0054e8952d90ccd7b8196bb093e5f19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>freeState</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace.html</anchorfile>
      <anchor>a5cd2870506265d0f7475fe336680a220</anchor>
      <arglist>(State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double *</type>
      <name>getValueAddressAtIndex</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace.html</anchorfile>
      <anchor>a01bdc2556f215089743cd8d0114dc0fa</anchor>
      <arglist>(State *state, const unsigned int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printState</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace.html</anchorfile>
      <anchor>a3d415c89084ad4270fcbae9d59c296fe</anchor>
      <arglist>(const State *state, std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printSettings</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace.html</anchorfile>
      <anchor>aaadc7e4634cfb489d3bc813a23094a08</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>registerProjections</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace.html</anchorfile>
      <anchor>ab7a7aea0dd552a1bb777cbd144e3f810</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::SO3StateSpace::StateType</name>
    <filename>classompl_1_1base_1_1SO3StateSpace_1_1StateType.html</filename>
    <base>ompl::base::State</base>
    <member kind="function">
      <type>void</type>
      <name>setAxisAngle</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace_1_1StateType.html</anchorfile>
      <anchor>af5a4d02906007a810e3bbe2b442d7a2f</anchor>
      <arglist>(double ax, double ay, double az, double angle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace_1_1StateType.html</anchorfile>
      <anchor>ae726df77940bbbe93bd351308e997a68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>x</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace_1_1StateType.html</anchorfile>
      <anchor>a525d64ca3f68c8e6492c6e26199d4717</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>y</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace_1_1StateType.html</anchorfile>
      <anchor>ae9e99008a6b4448e6a5e53ba42430bcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>z</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace_1_1StateType.html</anchorfile>
      <anchor>ae4b1013f96d9ad164e54c758711377d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>w</name>
      <anchorfile>classompl_1_1base_1_1SO3StateSpace_1_1StateType.html</anchorfile>
      <anchor>a819bd3faba4f19b9f2f58c310c5d6e3c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::SolutionNonExistenceProof</name>
    <filename>classompl_1_1base_1_1SolutionNonExistenceProof.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::base::SolutionNonExistenceProofPtr</name>
    <filename>classompl_1_1base_1_1SolutionNonExistenceProofPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::base::SpaceInformation</name>
    <filename>classompl_1_1base_1_1SpaceInformation.html</filename>
    <member kind="function">
      <type></type>
      <name>SpaceInformation</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a60718797ea47fe7ccd4a5c14acaee510</anchor>
      <arglist>(const StateSpacePtr &amp;space)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>af79b66aea243ec09f9f0db949efbe86b</anchor>
      <arglist>(const State *state) const </arglist>
    </member>
    <member kind="function">
      <type>const StateSpacePtr &amp;</type>
      <name>getStateSpace</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a98f62ab975aad535efe4cd33df580449</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getStateDimension</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a6e29db2962731f48c98e6bb05ffc5915</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSpaceMeasure</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a934287b5333ee03d4941c237082f5eef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalStates</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a6a58af29d996a5fa0b05f58e3493af7f</anchor>
      <arglist>(const State *state1, const State *state2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ad76b863efa604add17cae43b4ebcb0b9</anchor>
      <arglist>(const State *state) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ac8cadda9547f74d4193c3168a3b2d34f</anchor>
      <arglist>(const State *state1, const State *state2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enforceBounds</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ae59039c648f01e6bb3bf16de03b91574</anchor>
      <arglist>(State *state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printState</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a0113dd07660e15d54a8f8c05562633d6</anchor>
      <arglist>(const State *state, std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateValidityChecker</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a0449ec0893e02aca2bdfc63323b624e5</anchor>
      <arglist>(const StateValidityCheckerPtr &amp;svc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateValidityChecker</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ac60c96cd6f8450bf8cd1a3a08ed1dee6</anchor>
      <arglist>(const StateValidityCheckerFn &amp;svc)</arglist>
    </member>
    <member kind="function">
      <type>const StateValidityCheckerPtr &amp;</type>
      <name>getStateValidityChecker</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ac22c95373f72e7082954c82a8575651a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMotionValidator</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a69e58548f91db3e30ac7f41c87459279</anchor>
      <arglist>(const MotionValidatorPtr &amp;mv)</arglist>
    </member>
    <member kind="function">
      <type>const MotionValidatorPtr &amp;</type>
      <name>getMotionValidator</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a7288d3118ad4a47df20164b5c27525f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateValidityCheckingResolution</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a2bcd47fd9b7cf54b086d2122646736bf</anchor>
      <arglist>(double resolution)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getStateValidityCheckingResolution</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>aa52b116d51d5cec1ba8b8a9528bce661</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>allocState</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a4f60741f726ebf33cdc512b622f60472</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocStates</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ae94a80be6d748f0d241beeab28c86957</anchor>
      <arglist>(std::vector&lt; State * &gt; &amp;states) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeState</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a78dff42e6a76b87a9a4d19680fb82e31</anchor>
      <arglist>(State *state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeStates</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a720c113d34500de5929e3fb908641079</anchor>
      <arglist>(std::vector&lt; State * &gt; &amp;states) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyState</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a05e4c93df272965efa3459295f70bc0f</anchor>
      <arglist>(State *destination, const State *source) const </arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>cloneState</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a6558a06162464c7f06a78601c5ad8230</anchor>
      <arglist>(const State *source) const </arglist>
    </member>
    <member kind="function">
      <type>StateSamplerPtr</type>
      <name>allocStateSampler</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a59497470af9e436021a1335745a9eb43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ValidStateSamplerPtr</type>
      <name>allocValidStateSampler</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a5eee88ea27c24102f1a0dd6df01fa92f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValidStateSamplerAllocator</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ae6391771fc74984a3266f986cfe07780</anchor>
      <arglist>(const ValidStateSamplerAllocator &amp;vssa)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearValidStateSamplerAllocator</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ae805bde7621a7fd6c9022f6890645bd4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a27ad1fbf04a8afd345f45064cd4359b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>searchValidNearby</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>af936d24f2adf320e2158c855a0dad0af</anchor>
      <arglist>(State *state, const State *near, double distance, unsigned int attempts) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>searchValidNearby</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ac4d572f3f831e3cfb96bd387b05798cf</anchor>
      <arglist>(const ValidStateSamplerPtr &amp;sampler, State *state, const State *near, double distance) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>randomBounceMotion</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a67f3734521dd86233648b0c9c3c80e74</anchor>
      <arglist>(const StateSamplerPtr &amp;sss, const State *start, unsigned int steps, std::vector&lt; State * &gt; &amp;states, bool alloc) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkMotion</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a6047b893546bab139139104a0a7b756e</anchor>
      <arglist>(const State *s1, const State *s2, std::pair&lt; State *, double &gt; &amp;lastValid) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkMotion</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a434b795993022c3742eb22f6c1db605d</anchor>
      <arglist>(const State *s1, const State *s2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkMotion</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a6db453dae47c734046689c11fe7173f1</anchor>
      <arglist>(const std::vector&lt; State * &gt; &amp;states, unsigned int count, unsigned int &amp;firstInvalidStateIndex) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkMotion</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a7bdcc0c19a133e5d324af2c536c3779d</anchor>
      <arglist>(const std::vector&lt; State * &gt; &amp;states, unsigned int count) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMotionStates</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a3e5a6cdbe7c636d8e60ed7833c573668</anchor>
      <arglist>(const State *s1, const State *s2, std::vector&lt; State * &gt; &amp;states, unsigned int count, bool endpoints, bool alloc) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getCheckedMotionCount</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a6a517efa564d5ccc613487f184bb8b29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalStates</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a6a58af29d996a5fa0b05f58e3493af7f</anchor>
      <arglist>(const State *state1, const State *state2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ad76b863efa604add17cae43b4ebcb0b9</anchor>
      <arglist>(const State *state) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ac8cadda9547f74d4193c3168a3b2d34f</anchor>
      <arglist>(const State *state1, const State *state2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enforceBounds</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ae59039c648f01e6bb3bf16de03b91574</anchor>
      <arglist>(State *state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printState</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a0113dd07660e15d54a8f8c05562633d6</anchor>
      <arglist>(const State *state, std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateValidityChecker</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a0449ec0893e02aca2bdfc63323b624e5</anchor>
      <arglist>(const StateValidityCheckerPtr &amp;svc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateValidityChecker</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ac60c96cd6f8450bf8cd1a3a08ed1dee6</anchor>
      <arglist>(const StateValidityCheckerFn &amp;svc)</arglist>
    </member>
    <member kind="function">
      <type>const StateValidityCheckerPtr &amp;</type>
      <name>getStateValidityChecker</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ac22c95373f72e7082954c82a8575651a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMotionValidator</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a69e58548f91db3e30ac7f41c87459279</anchor>
      <arglist>(const MotionValidatorPtr &amp;mv)</arglist>
    </member>
    <member kind="function">
      <type>const MotionValidatorPtr &amp;</type>
      <name>getMotionValidator</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a7288d3118ad4a47df20164b5c27525f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateValidityCheckingResolution</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a2bcd47fd9b7cf54b086d2122646736bf</anchor>
      <arglist>(double resolution)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getStateValidityCheckingResolution</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>aa52b116d51d5cec1ba8b8a9528bce661</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>allocState</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a4f60741f726ebf33cdc512b622f60472</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocStates</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ae94a80be6d748f0d241beeab28c86957</anchor>
      <arglist>(std::vector&lt; State * &gt; &amp;states) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeState</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a78dff42e6a76b87a9a4d19680fb82e31</anchor>
      <arglist>(State *state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeStates</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a720c113d34500de5929e3fb908641079</anchor>
      <arglist>(std::vector&lt; State * &gt; &amp;states) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyState</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a05e4c93df272965efa3459295f70bc0f</anchor>
      <arglist>(State *destination, const State *source) const </arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>cloneState</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a6558a06162464c7f06a78601c5ad8230</anchor>
      <arglist>(const State *source) const </arglist>
    </member>
    <member kind="function">
      <type>StateSamplerPtr</type>
      <name>allocStateSampler</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a59497470af9e436021a1335745a9eb43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ValidStateSamplerPtr</type>
      <name>allocValidStateSampler</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a5eee88ea27c24102f1a0dd6df01fa92f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValidStateSamplerAllocator</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ae6391771fc74984a3266f986cfe07780</anchor>
      <arglist>(const ValidStateSamplerAllocator &amp;vssa)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearValidStateSamplerAllocator</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ae805bde7621a7fd6c9022f6890645bd4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a27ad1fbf04a8afd345f45064cd4359b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>searchValidNearby</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>af936d24f2adf320e2158c855a0dad0af</anchor>
      <arglist>(State *state, const State *near, double distance, unsigned int attempts) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>searchValidNearby</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ac4d572f3f831e3cfb96bd387b05798cf</anchor>
      <arglist>(const ValidStateSamplerPtr &amp;sampler, State *state, const State *near, double distance) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>randomBounceMotion</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a67f3734521dd86233648b0c9c3c80e74</anchor>
      <arglist>(const StateSamplerPtr &amp;sss, const State *start, unsigned int steps, std::vector&lt; State * &gt; &amp;states, bool alloc) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkMotion</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a6047b893546bab139139104a0a7b756e</anchor>
      <arglist>(const State *s1, const State *s2, std::pair&lt; State *, double &gt; &amp;lastValid) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkMotion</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a434b795993022c3742eb22f6c1db605d</anchor>
      <arglist>(const State *s1, const State *s2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkMotion</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a6db453dae47c734046689c11fe7173f1</anchor>
      <arglist>(const std::vector&lt; State * &gt; &amp;states, unsigned int count, unsigned int &amp;firstInvalidStateIndex) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkMotion</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a7bdcc0c19a133e5d324af2c536c3779d</anchor>
      <arglist>(const std::vector&lt; State * &gt; &amp;states, unsigned int count) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMotionStates</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a3e5a6cdbe7c636d8e60ed7833c573668</anchor>
      <arglist>(const State *s1, const State *s2, std::vector&lt; State * &gt; &amp;states, unsigned int count, bool endpoints, bool alloc) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getCheckedMotionCount</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a6a517efa564d5ccc613487f184bb8b29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StateSpacePtr</type>
      <name>stateSpace_</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ab7d8d572b76a5899b6c3816a544abe7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StateValidityCheckerPtr</type>
      <name>stateValidityChecker_</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a03cab04f748eb6637fb5a088f21cead9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MotionValidatorPtr</type>
      <name>motionValidator_</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ace9276cca898e91739b7e8b0b2daafb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>setup_</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>af5dd22573e611e150d15af2081dd26c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValidStateSamplerAllocator</type>
      <name>vssa_</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ad20bb9ec674edd4d4dbb2d13b2d89abd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParamSet</type>
      <name>params_</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>aa9dd30fdbe4e702930f465d73f692427</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>probabilityOfValidState</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a84daee3700b856630c676b37536c9787</anchor>
      <arglist>(unsigned int attempts) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>averageValidMotionLength</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ae83e285ab400971f1e5e6d171a83eb6c</anchor>
      <arglist>(unsigned int attempts) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>samplesPerSecond</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a040fb4bf1798f14919c169603b3d4a68</anchor>
      <arglist>(double &amp;uniform, double &amp;near, double &amp;gaussian, unsigned int attempts) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printSettings</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a9887f6b2810e5d3befa9a7b886b5b4dd</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printProperties</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>abaeaf7d8730ba3c1ae6b428be87a098c</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function">
      <type>ParamSet &amp;</type>
      <name>params</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a879fb1ffcac0bf54aab292f2b933f881</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ParamSet &amp;</type>
      <name>params</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>ad15ec9be87db75d3c3db3869a9510e52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a6e8c41f946c3c04d126983e145404ad4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSetup</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a8e492b244e339a9bb0e8a20df855bb57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setDefaultMotionValidator</name>
      <anchorfile>classompl_1_1base_1_1SpaceInformation.html</anchorfile>
      <anchor>a1d0c51561f5372ade7720a7e76d8546f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::SpaceInformationPtr</name>
    <filename>classompl_1_1base_1_1SpaceInformationPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::base::SpecificParam</name>
    <filename>classompl_1_1base_1_1SpecificParam.html</filename>
    <templarg>T</templarg>
    <base>ompl::base::GenericParam</base>
    <member kind="typedef">
      <type>std::function&lt; void(T)&gt;</type>
      <name>SetterFn</name>
      <anchorfile>classompl_1_1base_1_1SpecificParam.html</anchorfile>
      <anchor>a2d44f9d40d6f4705c346809927aa05bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; T()&gt;</type>
      <name>GetterFn</name>
      <anchorfile>classompl_1_1base_1_1SpecificParam.html</anchorfile>
      <anchor>aebe89eaeb8dcecdb9e8357f7aa97ac87</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpecificParam</name>
      <anchorfile>classompl_1_1base_1_1SpecificParam.html</anchorfile>
      <anchor>ab4b35b62764ee08282a25355c9e8a4d5</anchor>
      <arglist>(const std::string &amp;name, const SetterFn &amp;setter, const GetterFn &amp;getter=GetterFn())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setValue</name>
      <anchorfile>classompl_1_1base_1_1SpecificParam.html</anchorfile>
      <anchor>aa92af935bdaf5ab46172422bf54fc231</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getValue</name>
      <anchorfile>classompl_1_1base_1_1SpecificParam.html</anchorfile>
      <anchor>afbe61b8b66c9d14a50bffc45435a59c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SetterFn</type>
      <name>setter_</name>
      <anchorfile>classompl_1_1base_1_1SpecificParam.html</anchorfile>
      <anchor>a10b96ca4213c941f72705c24b3c5bb17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GetterFn</type>
      <name>getter_</name>
      <anchorfile>classompl_1_1base_1_1SpecificParam.html</anchorfile>
      <anchor>a49851acea9ec2a9f22c0765a11a41bfa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::State</name>
    <filename>classompl_1_1base_1_1State.html</filename>
    <member kind="function">
      <type>const T *</type>
      <name>as</name>
      <anchorfile>classompl_1_1base_1_1State.html</anchorfile>
      <anchor>a04177157c4ea22d1bb2d7f344162bf31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>as</name>
      <anchorfile>classompl_1_1base_1_1State.html</anchorfile>
      <anchor>ace9774faf8793299dc105292f8557987</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::StateCostIntegralObjective</name>
    <filename>classompl_1_1base_1_1StateCostIntegralObjective.html</filename>
    <base>ompl::base::OptimizationObjective</base>
    <member kind="function">
      <type></type>
      <name>StateCostIntegralObjective</name>
      <anchorfile>classompl_1_1base_1_1StateCostIntegralObjective.html</anchorfile>
      <anchor>a233ce347bdf449ab64e3b16ccd4630dc</anchor>
      <arglist>(const SpaceInformationPtr &amp;si, bool enableMotionCostInterpolation=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cost</type>
      <name>stateCost</name>
      <anchorfile>classompl_1_1base_1_1StateCostIntegralObjective.html</anchorfile>
      <anchor>a7440009ddde1e1e5d3d7d57cdb4ae371</anchor>
      <arglist>(const State *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cost</type>
      <name>motionCost</name>
      <anchorfile>classompl_1_1base_1_1StateCostIntegralObjective.html</anchorfile>
      <anchor>a40b062e080bbb2b1c3ad5014bc59be49</anchor>
      <arglist>(const State *s1, const State *s2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMotionCostInterpolationEnabled</name>
      <anchorfile>classompl_1_1base_1_1StateCostIntegralObjective.html</anchorfile>
      <anchor>a2d33e17c9ae46fd7425836d44a050434</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Cost</type>
      <name>trapezoid</name>
      <anchorfile>classompl_1_1base_1_1StateCostIntegralObjective.html</anchorfile>
      <anchor>a6195516b943c9bf2fccb7e39fd2c0615</anchor>
      <arglist>(Cost c1, Cost c2, double dist) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>interpolateMotionCost_</name>
      <anchorfile>classompl_1_1base_1_1StateCostIntegralObjective.html</anchorfile>
      <anchor>a286d6cf805714f6ba3d7e8d6d8864d42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::StatePropagatorPtr</name>
    <filename>classompl_1_1base_1_1StatePropagatorPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::base::StateSampler</name>
    <filename>classompl_1_1base_1_1StateSampler.html</filename>
    <member kind="function">
      <type></type>
      <name>StateSampler</name>
      <anchorfile>classompl_1_1base_1_1StateSampler.html</anchorfile>
      <anchor>a1b7e6623b9ee8f4dc16b88b5a2c62248</anchor>
      <arglist>(const StateSpace *space)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1StateSampler.html</anchorfile>
      <anchor>ae34c29e2eaefc49bab4dee255a782b71</anchor>
      <arglist>(State *state)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sampleUniformNear</name>
      <anchorfile>classompl_1_1base_1_1StateSampler.html</anchorfile>
      <anchor>af9cae7cc050e0a5e71fcadc9c99bb8ea</anchor>
      <arglist>(State *state, const State *near, const double distance)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sampleGaussian</name>
      <anchorfile>classompl_1_1base_1_1StateSampler.html</anchorfile>
      <anchor>ad15c42c23a7d515421a293f098c4f0bf</anchor>
      <arglist>(State *state, const State *mean, const double stdDev)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const StateSpace *</type>
      <name>space_</name>
      <anchorfile>classompl_1_1base_1_1StateSampler.html</anchorfile>
      <anchor>ade7594512889b577995b3479c71f3b6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1base_1_1StateSampler.html</anchorfile>
      <anchor>ad8b2f106c42eaa4788bb6914cd5371fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::StateSamplerArray</name>
    <filename>classompl_1_1base_1_1StateSamplerArray.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>SamplerSelector&lt; T &gt;::SamplerPtr</type>
      <name>SamplerPtr</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>a0869da074058c67fb600d355c0d8a9c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SamplerSelector&lt; T &gt;::Sampler</type>
      <name>Sampler</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>a975d4bc341acf6116a94fdc6f050cc01</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateSamplerArray</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>a5d9c7fc2ef129b81f4f4b350b4c1faf8</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateSamplerArray</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>a4b2695cf7992fe63c9364b7df8ef18d3</anchor>
      <arglist>(const SpaceInformation *si)</arglist>
    </member>
    <member kind="function">
      <type>Sampler *</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>a9712328ee4ac70eb5477a97e67213bb1</anchor>
      <arglist>(std::size_t index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>aee87211c80826b2fddf610bf213f0a9e</anchor>
      <arglist>(std::size_t count)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>afaa33f3c0b4e71866aef2fad56e139c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>a8d28df7c315cfec6047dc60dcb78b8f7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::StateSamplerPtr</name>
    <filename>classompl_1_1base_1_1StateSamplerPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::base::StateSpace</name>
    <filename>classompl_1_1base_1_1StateSpace.html</filename>
    <class kind="struct">ompl::base::StateSpace::SubstateLocation</class>
    <class kind="struct">ompl::base::StateSpace::ValueLocation</class>
    <member kind="enumeration">
      <type></type>
      <name>SanityChecks</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a64feddc33bb3b7459c4f589e6cd9d17e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATESPACE_DISTANCE_DIFFERENT_STATES</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a64feddc33bb3b7459c4f589e6cd9d17ea044307209c21e4830272ca52945a3062</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATESPACE_DISTANCE_SYMMETRIC</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a64feddc33bb3b7459c4f589e6cd9d17ea5acf49ce656838100e44ed7ee7321ab6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATESPACE_INTERPOLATION</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a64feddc33bb3b7459c4f589e6cd9d17ea26a108232d6265a1cc8bcc642216a6cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATESPACE_TRIANGLE_INEQUALITY</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a64feddc33bb3b7459c4f589e6cd9d17ea54e30ec7ef77f42f255951ac6be08f97</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATESPACE_DISTANCE_BOUND</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a64feddc33bb3b7459c4f589e6cd9d17ea0134f2a38473e775c3037fde1c336d3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATESPACE_RESPECT_BOUNDS</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a64feddc33bb3b7459c4f589e6cd9d17ea3c050038b3403113c40e3485398a9b18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATESPACE_ENFORCE_BOUNDS_NO_OP</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a64feddc33bb3b7459c4f589e6cd9d17eafb4e9823a65ace5477bcc1cfc267b3fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATESPACE_SERIALIZATION</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a64feddc33bb3b7459c4f589e6cd9d17ea88b4708168876d0b1b010e40285c1cc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>State</type>
      <name>StateType</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>aa995357fedb73879bc7f0bb946db76d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATESPACE_DISTANCE_DIFFERENT_STATES</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a64feddc33bb3b7459c4f589e6cd9d17ea044307209c21e4830272ca52945a3062</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATESPACE_DISTANCE_SYMMETRIC</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a64feddc33bb3b7459c4f589e6cd9d17ea5acf49ce656838100e44ed7ee7321ab6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATESPACE_INTERPOLATION</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a64feddc33bb3b7459c4f589e6cd9d17ea26a108232d6265a1cc8bcc642216a6cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATESPACE_TRIANGLE_INEQUALITY</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a64feddc33bb3b7459c4f589e6cd9d17ea54e30ec7ef77f42f255951ac6be08f97</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATESPACE_DISTANCE_BOUND</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a64feddc33bb3b7459c4f589e6cd9d17ea0134f2a38473e775c3037fde1c336d3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATESPACE_RESPECT_BOUNDS</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a64feddc33bb3b7459c4f589e6cd9d17ea3c050038b3403113c40e3485398a9b18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATESPACE_ENFORCE_BOUNDS_NO_OP</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a64feddc33bb3b7459c4f589e6cd9d17eafb4e9823a65ace5477bcc1cfc267b3fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATESPACE_SERIALIZATION</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a64feddc33bb3b7459c4f589e6cd9d17ea88b4708168876d0b1b010e40285c1cc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateSpace</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>acfcc534e7c16c163ef33a05f195a0305</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>as</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>afd88dea5b056dae47158f22edb21e562</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>as</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a97f4c7086d9f337752ba1522d2dc5b3e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a92ca030ac21b5aa209241febcfbae2e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isCompound</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>adfac6c406d6fdbea7d9260e8b58d4d11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDiscrete</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ae51ca6eb429ff4f3bb0cf2f485b5f340</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isHybrid</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a8cd8ae994ee6578517a6ffdab1b03dcf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMetricSpace</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a448989a6c1d0b9e40a4f5a194ec3a92a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasSymmetricDistance</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a4245c946e2a60bf2a6cfa611cbf64ced</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasSymmetricInterpolate</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a4a9b314f8a64031e8269cd76489b629d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a01c188c7dc690b152b7a61aae19b9015</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ad12cc022ef531dcb563f6d3d13b847ad</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getType</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>aa626ff04e6b9c4c9fa2c1392713861bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>includes</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>af294ec92dcc0e35793570d039d61d019</anchor>
      <arglist>(const StateSpacePtr &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>includes</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a7768e633f4c4c09f02d01f7ad765dcd1</anchor>
      <arglist>(const StateSpace *other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>covers</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a41a2cdf29ab85faa2b76cca36c23229d</anchor>
      <arglist>(const StateSpacePtr &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>covers</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a3e585bf55e4cbb03ad2da5f192df01ee</anchor>
      <arglist>(const StateSpace *other) const </arglist>
    </member>
    <member kind="function">
      <type>ParamSet &amp;</type>
      <name>params</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a9d9fee742c4811d13f236aecd6b9d901</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ParamSet &amp;</type>
      <name>params</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a9f942d26b8d63262ff5fb5e8774bf4e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getLongestValidSegmentFraction</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a6098a238a7cc1925c58e9983ab5f2967</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLongestValidSegmentFraction</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ad8e6450ad306d272df39751aa7e690b8</anchor>
      <arglist>(double segmentFraction)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>validSegmentCount</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a17443b992677f5043d3fc38e9288b9a7</anchor>
      <arglist>(const State *state1, const State *state2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValidSegmentCountFactor</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a9babd71497fc6a6f82fe97f699531ceb</anchor>
      <arglist>(unsigned int factor)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getValidSegmentCountFactor</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>aed57ae383c07bbc4fddbd9ab66de466b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLongestValidSegmentLength</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a0c8381e2478361e9326480b622e4c03b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeSignature</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>aea93afe2f6c3af1702178992554519c0</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;signature) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a6c5eb7ef615db17f70e3c119ac258294</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a015d317fde976071e1c7ca41cc51b37e</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getMeasure</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a533a44d8457e575602a7d75793cde22e</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>enforceBounds</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a612c9191f86b0a1134f9164b31b404ec</anchor>
      <arglist>(State *state) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a813082f1c90fc962a58226c60115e7bd</anchor>
      <arglist>(const State *state) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>copyState</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>adc8143314c70d5abd456e79b19643aaa</anchor>
      <arglist>(State *destination, const State *source) const  =0</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>cloneState</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a5bde36a251f1ca058fabb2a84775ff30</anchor>
      <arglist>(const State *source) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>distance</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a1cba73a220190dde19c19a39651fe410</anchor>
      <arglist>(const State *state1, const State *state2) const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSerializationLength</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ae3b4d56d5b379b3da818baf73e599079</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a842fb601d28735dd56a2480dbb460662</anchor>
      <arglist>(void *serialization, const State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deserialize</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>aea2d2ac9a93fea0a269382daf585e68a</anchor>
      <arglist>(State *state, const void *serialization) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>equalStates</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a50e640ee55294bc9fe379c987bd58bff</anchor>
      <arglist>(const State *state1, const State *state2) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ac1889496a370e544c2f07b7f89b4ceb5</anchor>
      <arglist>(const State *from, const State *to, const double t, State *state) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual StateSamplerPtr</type>
      <name>allocDefaultStateSampler</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a938a21fac22e2772758a50ce0f64bb57</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StateSamplerPtr</type>
      <name>allocStateSampler</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a1f01713e330350e2fa2c6f5c1c1f1d31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateSamplerAllocator</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>aa88e8a85586b93866ef3b2a6fb31c114</anchor>
      <arglist>(const StateSamplerAllocator &amp;ssa)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearStateSamplerAllocator</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>abd0c1c40dcb3687c024629119e2d905d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual State *</type>
      <name>allocState</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ae90bcb43819785060decf970bcf4585f</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>freeState</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a7bd81f2b56c99bd1fbef33973b97d3ae</anchor>
      <arglist>(State *state) const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double *</type>
      <name>getValueAddressAtIndex</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a8584afb9165d2aa7408fec81c18659f4</anchor>
      <arglist>(State *state, const unsigned int index) const </arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getValueAddressAtIndex</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ae8a758dfef4b4e0ca3aa126862e0e834</anchor>
      <arglist>(const State *state, const unsigned int index) const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; ValueLocation &gt; &amp;</type>
      <name>getValueLocations</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>aa5a3c20690488593be339b034c65a1ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, ValueLocation &gt; &amp;</type>
      <name>getValueLocationsByName</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a7757bb42622aef8a20ae44b2174124ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getValueAddressAtLocation</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a1440136336d3b92067e77b8586db5448</anchor>
      <arglist>(State *state, const ValueLocation &amp;loc) const </arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getValueAddressAtLocation</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a2b21b2faa7e5f93512a2a4b40f8599ab</anchor>
      <arglist>(const State *state, const ValueLocation &amp;loc) const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getValueAddressAtName</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ae92aa2f2318020587918fb4dbca2eb07</anchor>
      <arglist>(State *state, const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getValueAddressAtName</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a8399a3f967203a5035da33c5eb5b04cc</anchor>
      <arglist>(const State *state, const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyToReals</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a02c6fc5ba387526bb853b6a2d3d3f2bd</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;reals, const State *source) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromReals</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a86d9f193839b8c57a3d1dc11dfb364db</anchor>
      <arglist>(State *destination, const std::vector&lt; double &gt; &amp;reals) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerProjection</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a309f2cdc5412ff16d31b87fec92b3595</anchor>
      <arglist>(const std::string &amp;name, const ProjectionEvaluatorPtr &amp;projection)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerDefaultProjection</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ac79f6342fb2d85f1c2c87bfff812fbbf</anchor>
      <arglist>(const ProjectionEvaluatorPtr &amp;projection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>registerProjections</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a9d83398ca1647e06036d9e69ebad7cf8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ProjectionEvaluatorPtr</type>
      <name>getProjection</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a05e75a507f6e8e538d1542bc9e31b256</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>ProjectionEvaluatorPtr</type>
      <name>getDefaultProjection</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a72230e2d66fc50b2670d21906397eeb2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasProjection</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>aade8b8097e7c5defa159797a80c2ebf2</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasDefaultProjection</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ae19df18cdd2ae774d223faac12c116d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, ProjectionEvaluatorPtr &gt; &amp;</type>
      <name>getRegisteredProjections</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>abe8712f482e90c8a0c666bb89ef0711b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StateSamplerPtr</type>
      <name>allocSubspaceStateSampler</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>adc3d8370d634b7e6fcb38d072c9ef317</anchor>
      <arglist>(const StateSpacePtr &amp;subspace) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StateSamplerPtr</type>
      <name>allocSubspaceStateSampler</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a0113a03fd742642bbcd17b435e09fbab</anchor>
      <arglist>(const StateSpace *subspace) const </arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>getSubstateAtLocation</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ac7d545b50a54e230bbdac1e0eb7e945b</anchor>
      <arglist>(State *state, const SubstateLocation &amp;loc) const </arglist>
    </member>
    <member kind="function">
      <type>const State *</type>
      <name>getSubstateAtLocation</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ad714cae5c068fb733df05b53b6816d63</anchor>
      <arglist>(const State *state, const SubstateLocation &amp;loc) const </arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, SubstateLocation &gt; &amp;</type>
      <name>getSubstateLocationsByName</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a535a54d0cedf038703db2fbfd00fb5d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCommonSubspaces</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>afbffba40d1dff6e3c0b80cc2439f2378</anchor>
      <arglist>(const StateSpacePtr &amp;other, std::vector&lt; std::string &gt; &amp;subspaces) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCommonSubspaces</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a40fa8c0af22fe3f28f2fc9d551082455</anchor>
      <arglist>(const StateSpace *other, std::vector&lt; std::string &gt; &amp;subspaces) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeLocations</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a1866860e11fb0eb759453df70ba68ae2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>type_</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a68556edd816136a66a0d81544baef08c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StateSamplerAllocator</type>
      <name>ssa_</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a2db3152c4edbac084af3ec6962107ddb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxExtent_</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>af139d63d7b1067a70cb6e744e85fef96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>longestValidSegmentFraction_</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>aeaba86765fbfc6686312e50934edfd70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>longestValidSegment_</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a8967afde4dc99333aef63eb85554bf81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>longestValidSegmentCountFactor_</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>aa3fbdc24d4e07283890eb68f49bc1467</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, ProjectionEvaluatorPtr &gt;</type>
      <name>projections_</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ab32be9ff082fcb2926cbc8166613e09a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParamSet</type>
      <name>params_</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a11b0b30f238bff63ecb43542aee6ebf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ValueLocation &gt;</type>
      <name>valueLocationsInOrder_</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ac0f6c83355692e7f40d4ead85b9f225b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, ValueLocation &gt;</type>
      <name>valueLocationsByName_</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ac24c368e6e9130b505d89c824a9ec1e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, SubstateLocation &gt;</type>
      <name>substateLocationsByName_</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a23aa4613b3ef62e88fbfc23fb6757e34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const std::string</type>
      <name>DEFAULT_PROJECTION_NAME</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a45e65cf86a2c5cb1e4394dd8aafb4d3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isCompound</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>adfac6c406d6fdbea7d9260e8b58d4d11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDiscrete</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ae51ca6eb429ff4f3bb0cf2f485b5f340</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isHybrid</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a8cd8ae994ee6578517a6ffdab1b03dcf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMetricSpace</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a448989a6c1d0b9e40a4f5a194ec3a92a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasSymmetricDistance</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a4245c946e2a60bf2a6cfa611cbf64ced</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasSymmetricInterpolate</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a4a9b314f8a64031e8269cd76489b629d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a01c188c7dc690b152b7a61aae19b9015</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ad12cc022ef531dcb563f6d3d13b847ad</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getType</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>aa626ff04e6b9c4c9fa2c1392713861bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>includes</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>af294ec92dcc0e35793570d039d61d019</anchor>
      <arglist>(const StateSpacePtr &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>includes</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a7768e633f4c4c09f02d01f7ad765dcd1</anchor>
      <arglist>(const StateSpace *other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>covers</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a41a2cdf29ab85faa2b76cca36c23229d</anchor>
      <arglist>(const StateSpacePtr &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>covers</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a3e585bf55e4cbb03ad2da5f192df01ee</anchor>
      <arglist>(const StateSpace *other) const </arglist>
    </member>
    <member kind="function">
      <type>ParamSet &amp;</type>
      <name>params</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a9d9fee742c4811d13f236aecd6b9d901</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ParamSet &amp;</type>
      <name>params</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a9f942d26b8d63262ff5fb5e8774bf4e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getLongestValidSegmentFraction</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a6098a238a7cc1925c58e9983ab5f2967</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLongestValidSegmentFraction</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ad8e6450ad306d272df39751aa7e690b8</anchor>
      <arglist>(double segmentFraction)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>validSegmentCount</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a17443b992677f5043d3fc38e9288b9a7</anchor>
      <arglist>(const State *state1, const State *state2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValidSegmentCountFactor</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a9babd71497fc6a6f82fe97f699531ceb</anchor>
      <arglist>(unsigned int factor)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getValidSegmentCountFactor</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>aed57ae383c07bbc4fddbd9ab66de466b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLongestValidSegmentLength</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a0c8381e2478361e9326480b622e4c03b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeSignature</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>aea93afe2f6c3af1702178992554519c0</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;signature) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a6c5eb7ef615db17f70e3c119ac258294</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a015d317fde976071e1c7ca41cc51b37e</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getMeasure</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a533a44d8457e575602a7d75793cde22e</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>enforceBounds</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a612c9191f86b0a1134f9164b31b404ec</anchor>
      <arglist>(State *state) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a813082f1c90fc962a58226c60115e7bd</anchor>
      <arglist>(const State *state) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>copyState</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>adc8143314c70d5abd456e79b19643aaa</anchor>
      <arglist>(State *destination, const State *source) const  =0</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>cloneState</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a5bde36a251f1ca058fabb2a84775ff30</anchor>
      <arglist>(const State *source) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>distance</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a1cba73a220190dde19c19a39651fe410</anchor>
      <arglist>(const State *state1, const State *state2) const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSerializationLength</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ae3b4d56d5b379b3da818baf73e599079</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a842fb601d28735dd56a2480dbb460662</anchor>
      <arglist>(void *serialization, const State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deserialize</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>aea2d2ac9a93fea0a269382daf585e68a</anchor>
      <arglist>(State *state, const void *serialization) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>equalStates</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a50e640ee55294bc9fe379c987bd58bff</anchor>
      <arglist>(const State *state1, const State *state2) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ac1889496a370e544c2f07b7f89b4ceb5</anchor>
      <arglist>(const State *from, const State *to, const double t, State *state) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual StateSamplerPtr</type>
      <name>allocDefaultStateSampler</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a938a21fac22e2772758a50ce0f64bb57</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StateSamplerPtr</type>
      <name>allocStateSampler</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a1f01713e330350e2fa2c6f5c1c1f1d31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateSamplerAllocator</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>aa88e8a85586b93866ef3b2a6fb31c114</anchor>
      <arglist>(const StateSamplerAllocator &amp;ssa)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearStateSamplerAllocator</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>abd0c1c40dcb3687c024629119e2d905d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual State *</type>
      <name>allocState</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ae90bcb43819785060decf970bcf4585f</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>freeState</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a7bd81f2b56c99bd1fbef33973b97d3ae</anchor>
      <arglist>(State *state) const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double *</type>
      <name>getValueAddressAtIndex</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a8584afb9165d2aa7408fec81c18659f4</anchor>
      <arglist>(State *state, const unsigned int index) const </arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getValueAddressAtIndex</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ae8a758dfef4b4e0ca3aa126862e0e834</anchor>
      <arglist>(const State *state, const unsigned int index) const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; ValueLocation &gt; &amp;</type>
      <name>getValueLocations</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>aa5a3c20690488593be339b034c65a1ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, ValueLocation &gt; &amp;</type>
      <name>getValueLocationsByName</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a7757bb42622aef8a20ae44b2174124ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getValueAddressAtLocation</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a1440136336d3b92067e77b8586db5448</anchor>
      <arglist>(State *state, const ValueLocation &amp;loc) const </arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getValueAddressAtLocation</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a2b21b2faa7e5f93512a2a4b40f8599ab</anchor>
      <arglist>(const State *state, const ValueLocation &amp;loc) const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getValueAddressAtName</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ae92aa2f2318020587918fb4dbca2eb07</anchor>
      <arglist>(State *state, const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getValueAddressAtName</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a8399a3f967203a5035da33c5eb5b04cc</anchor>
      <arglist>(const State *state, const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyToReals</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a02c6fc5ba387526bb853b6a2d3d3f2bd</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;reals, const State *source) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromReals</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a86d9f193839b8c57a3d1dc11dfb364db</anchor>
      <arglist>(State *destination, const std::vector&lt; double &gt; &amp;reals) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerProjection</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a309f2cdc5412ff16d31b87fec92b3595</anchor>
      <arglist>(const std::string &amp;name, const ProjectionEvaluatorPtr &amp;projection)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerDefaultProjection</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ac79f6342fb2d85f1c2c87bfff812fbbf</anchor>
      <arglist>(const ProjectionEvaluatorPtr &amp;projection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>registerProjections</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a9d83398ca1647e06036d9e69ebad7cf8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ProjectionEvaluatorPtr</type>
      <name>getProjection</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a05e75a507f6e8e538d1542bc9e31b256</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>ProjectionEvaluatorPtr</type>
      <name>getDefaultProjection</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a72230e2d66fc50b2670d21906397eeb2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasProjection</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>aade8b8097e7c5defa159797a80c2ebf2</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasDefaultProjection</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ae19df18cdd2ae774d223faac12c116d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, ProjectionEvaluatorPtr &gt; &amp;</type>
      <name>getRegisteredProjections</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>abe8712f482e90c8a0c666bb89ef0711b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printState</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a5f92fa826285aaa7adff4c1fd07a4023</anchor>
      <arglist>(const State *state, std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printSettings</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a0d78e50cceae2e0a432fea171a431324</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printProjections</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a988d0d31d8cf99ca55e83d83be778918</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sanityChecks</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a24f53aa590e5054a150861d2d1689522</anchor>
      <arglist>(double zero, double eps, unsigned int flags) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sanityChecks</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a332bf3d53b9a2292d1df64f9908980fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>diagram</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ac9d094a956a3819951ea60233ec5d5d9</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>list</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>aaf040ebe3877e36856fa4370434f61b5</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Diagram</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a925ed4f0e97f137b4c2128afe9f36b2f</anchor>
      <arglist>(std::ostream &amp;out)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>List</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ad3ab5334644d6c9f8538f59a21bec854</anchor>
      <arglist>(std::ostream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>StateSamplerPtr</type>
      <name>allocSubspaceStateSampler</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>adc3d8370d634b7e6fcb38d072c9ef317</anchor>
      <arglist>(const StateSpacePtr &amp;subspace) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StateSamplerPtr</type>
      <name>allocSubspaceStateSampler</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a0113a03fd742642bbcd17b435e09fbab</anchor>
      <arglist>(const StateSpace *subspace) const </arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>getSubstateAtLocation</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ac7d545b50a54e230bbdac1e0eb7e945b</anchor>
      <arglist>(State *state, const SubstateLocation &amp;loc) const </arglist>
    </member>
    <member kind="function">
      <type>const State *</type>
      <name>getSubstateAtLocation</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>ad714cae5c068fb733df05b53b6816d63</anchor>
      <arglist>(const State *state, const SubstateLocation &amp;loc) const </arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, SubstateLocation &gt; &amp;</type>
      <name>getSubstateLocationsByName</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a535a54d0cedf038703db2fbfd00fb5d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCommonSubspaces</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>afbffba40d1dff6e3c0b80cc2439f2378</anchor>
      <arglist>(const StateSpacePtr &amp;other, std::vector&lt; std::string &gt; &amp;subspaces) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCommonSubspaces</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a40fa8c0af22fe3f28f2fc9d551082455</anchor>
      <arglist>(const StateSpace *other, std::vector&lt; std::string &gt; &amp;subspaces) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeLocations</name>
      <anchorfile>classompl_1_1base_1_1StateSpace.html</anchorfile>
      <anchor>a1866860e11fb0eb759453df70ba68ae2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::base::StateSpace::SubstateLocation</name>
    <filename>structompl_1_1base_1_1StateSpace_1_1SubstateLocation.html</filename>
    <member kind="variable">
      <type>std::vector&lt; std::size_t &gt;</type>
      <name>chain</name>
      <anchorfile>structompl_1_1base_1_1StateSpace_1_1SubstateLocation.html</anchorfile>
      <anchor>a793dcd59e0151d3bdea581d4bf3f48fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const StateSpace *</type>
      <name>space</name>
      <anchorfile>structompl_1_1base_1_1StateSpace_1_1SubstateLocation.html</anchorfile>
      <anchor>a64a291ab4cabdae9e8df3e942449fa62</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::base::StateSpace::ValueLocation</name>
    <filename>structompl_1_1base_1_1StateSpace_1_1ValueLocation.html</filename>
    <member kind="variable">
      <type>SubstateLocation</type>
      <name>stateLocation</name>
      <anchorfile>structompl_1_1base_1_1StateSpace_1_1ValueLocation.html</anchorfile>
      <anchor>a457de2e8f9c14218785b7a30312ef6c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>index</name>
      <anchorfile>structompl_1_1base_1_1StateSpace_1_1ValueLocation.html</anchorfile>
      <anchor>ad1df8970e82c7b3c93204868505e7746</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::StateSpacePtr</name>
    <filename>classompl_1_1base_1_1StateSpacePtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::base::StateStorage</name>
    <filename>classompl_1_1base_1_1StateStorage.html</filename>
    <class kind="struct">ompl::base::StateStorage::Header</class>
    <member kind="function">
      <type></type>
      <name>StateStorage</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>a4e289fe7e4c726661d3a794afed36079</anchor>
      <arglist>(const StateSpacePtr &amp;space)</arglist>
    </member>
    <member kind="function">
      <type>const StateSpacePtr &amp;</type>
      <name>getStateSpace</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>a01047676a24f6ccdbd2208246946424c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>a4db3b5045f9107a1f5185941aa163eda</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>load</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>aff774060c40e7c9b5296c1feaa9b10a6</anchor>
      <arglist>(std::istream &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>store</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>ae1419e59cd3566da325cf10855a11457</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>store</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>a9821196ec356c0126836b66d3b24ef5b</anchor>
      <arglist>(std::ostream &amp;out)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addState</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>a938f84b6ebe2183b129f3aae208c94ec</anchor>
      <arglist>(const State *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>generateSamples</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>a12921311a320c9e25648228ab334b12e</anchor>
      <arglist>(unsigned int count)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>a966f5f9f4fef9ead94d7ec203a203c15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>a6f8d99d5defdf8beb30a276c14a70c07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const State * &gt; &amp;</type>
      <name>getStates</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>a1b81cc15691f5259cbbffba14690f880</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>ac9bcadde6f6d98433fc67e5310439709</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>const State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>a6c533b00a6dbe75d5210d6cccc98701d</anchor>
      <arglist>(unsigned int index) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMetadata</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>a0d1bd43ceed0624bebbff18a58cce0d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>afbb00541c40cf715e2625c3150f428dc</anchor>
      <arglist>(const std::function&lt; bool(const State *, const State *)&gt; &amp;op)</arglist>
    </member>
    <member kind="function">
      <type>StateSamplerAllocator</type>
      <name>getStateSamplerAllocator</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>aaf0d10558ab1593b89c625f08fd16a71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StateSamplerAllocator</type>
      <name>getStateSamplerAllocatorRangeUntil</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>a7f05a8bc04279a48eef8ad082541c59f</anchor>
      <arglist>(std::size_t until) const </arglist>
    </member>
    <member kind="function">
      <type>StateSamplerAllocator</type>
      <name>getStateSamplerAllocatorRangeAfter</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>ae9fa4a99208639b2b9d36e0a65cfdd19</anchor>
      <arglist>(std::size_t after) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StateSamplerAllocator</type>
      <name>getStateSamplerAllocatorRange</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>ad544c18a3270f4dd69b72f1725a08eca</anchor>
      <arglist>(std::size_t from, std::size_t to) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>ae74a77dea8ea63fc941d0aa7e3d2c159</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>loadStates</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>a2a7645e1be9b7fbafea18efe6e9ec668</anchor>
      <arglist>(const Header &amp;h, boost::archive::binary_iarchive &amp;ia)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>loadMetadata</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>ad9b55829a0c149c699861d962f865b7e</anchor>
      <arglist>(const Header &amp;h, boost::archive::binary_iarchive &amp;ia)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>storeStates</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>a65d548219ee3be541508ef59092010c2</anchor>
      <arglist>(const Header &amp;h, boost::archive::binary_oarchive &amp;oa)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>storeMetadata</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>ad8601e37c27135a51b8af9e69c1b3bdc</anchor>
      <arglist>(const Header &amp;h, boost::archive::binary_oarchive &amp;oa)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>ae5bd812f772394584e527178750d15a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StateSpacePtr</type>
      <name>space_</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>ac8cea7a2266a29d7cb4d354c93bf25e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; const State * &gt;</type>
      <name>states_</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>abd197da261fe11291a864ac086d3fc52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>hasMetadata_</name>
      <anchorfile>classompl_1_1base_1_1StateStorage.html</anchorfile>
      <anchor>a195e161dffd85bfe1c6a5027982c47b3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::base::StateStorage::Header</name>
    <filename>structompl_1_1base_1_1StateStorage_1_1Header.html</filename>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>structompl_1_1base_1_1StateStorage_1_1Header.html</anchorfile>
      <anchor>ad83c5b066ccb885f5bf678f52c4aa282</anchor>
      <arglist>(Archive &amp;ar, const unsigned int)</arglist>
    </member>
    <member kind="variable">
      <type>boost::uint32_t</type>
      <name>marker</name>
      <anchorfile>structompl_1_1base_1_1StateStorage_1_1Header.html</anchorfile>
      <anchor>adea13a95336ff3e3fba60147635ce304</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>state_count</name>
      <anchorfile>structompl_1_1base_1_1StateStorage_1_1Header.html</anchorfile>
      <anchor>a0ae07fd5c650eab2264c3613b2e1bc91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>signature</name>
      <anchorfile>structompl_1_1base_1_1StateStorage_1_1Header.html</anchorfile>
      <anchor>ab8a6d9e7b4bc48730b1a8c29ce89a6aa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::StateStorageWithMetadata</name>
    <filename>classompl_1_1base_1_1StateStorageWithMetadata.html</filename>
    <templarg></templarg>
    <base>ompl::base::StateStorage</base>
    <member kind="typedef">
      <type>M</type>
      <name>MetadataType</name>
      <anchorfile>classompl_1_1base_1_1StateStorageWithMetadata.html</anchorfile>
      <anchor>a20dafb7005cf4dbd6c6d24b0257b478d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateStorageWithMetadata</name>
      <anchorfile>classompl_1_1base_1_1StateStorageWithMetadata.html</anchorfile>
      <anchor>a91ecfc1d568cfa3844107f904b75c6de</anchor>
      <arglist>(const StateSpacePtr &amp;space)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addState</name>
      <anchorfile>classompl_1_1base_1_1StateStorageWithMetadata.html</anchorfile>
      <anchor>a1547528ad5f5fc3d33f8b57e39435bb3</anchor>
      <arglist>(const State *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addState</name>
      <anchorfile>classompl_1_1base_1_1StateStorageWithMetadata.html</anchorfile>
      <anchor>ab55dc6dc746107d0b2f7b639ac7d272a</anchor>
      <arglist>(const State *state, const M &amp;metadata)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1base_1_1StateStorageWithMetadata.html</anchorfile>
      <anchor>a7f318f0efa7fd89c35a2b161a5c841d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const M &amp;</type>
      <name>getMetadata</name>
      <anchorfile>classompl_1_1base_1_1StateStorageWithMetadata.html</anchorfile>
      <anchor>a578e91822cf7190a46576d67c438c63d</anchor>
      <arglist>(unsigned int index) const </arglist>
    </member>
    <member kind="function">
      <type>M &amp;</type>
      <name>getMetadata</name>
      <anchorfile>classompl_1_1base_1_1StateStorageWithMetadata.html</anchorfile>
      <anchor>a2823f12dc99173a08109600958b04efc</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>loadMetadata</name>
      <anchorfile>classompl_1_1base_1_1StateStorageWithMetadata.html</anchorfile>
      <anchor>a75d53443f63663816d9b8bf8f7cbfde5</anchor>
      <arglist>(const Header &amp;, boost::archive::binary_iarchive &amp;ia)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>storeMetadata</name>
      <anchorfile>classompl_1_1base_1_1StateStorageWithMetadata.html</anchorfile>
      <anchor>aa03b8ca979dd08be0b84fa1d958892e6</anchor>
      <arglist>(const Header &amp;, boost::archive::binary_oarchive &amp;oa)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; M &gt;</type>
      <name>metadata_</name>
      <anchorfile>classompl_1_1base_1_1StateStorageWithMetadata.html</anchorfile>
      <anchor>a86da79c284b5a9048b10603f6f3dc988</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::StateValidityChecker</name>
    <filename>classompl_1_1base_1_1StateValidityChecker.html</filename>
    <member kind="function">
      <type></type>
      <name>StateValidityChecker</name>
      <anchorfile>classompl_1_1base_1_1StateValidityChecker.html</anchorfile>
      <anchor>aa195ab177c3a7fe27641377e46354f1f</anchor>
      <arglist>(SpaceInformation *si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateValidityChecker</name>
      <anchorfile>classompl_1_1base_1_1StateValidityChecker.html</anchorfile>
      <anchor>a0fc97f8f1402e69a317cef0abd8385de</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isValid</name>
      <anchorfile>classompl_1_1base_1_1StateValidityChecker.html</anchorfile>
      <anchor>ad686639805b704aceb72a4c6aab1ec87</anchor>
      <arglist>(const State *state) const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isValid</name>
      <anchorfile>classompl_1_1base_1_1StateValidityChecker.html</anchorfile>
      <anchor>ae2766855b39c29de0bf7e60768582e37</anchor>
      <arglist>(const State *state, double &amp;dist) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isValid</name>
      <anchorfile>classompl_1_1base_1_1StateValidityChecker.html</anchorfile>
      <anchor>a68cc1bb62c2baa47e3a671ee65d41323</anchor>
      <arglist>(const State *state, double &amp;dist, State *validState, bool &amp;validStateAvailable) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>clearance</name>
      <anchorfile>classompl_1_1base_1_1StateValidityChecker.html</anchorfile>
      <anchor>ace757aae9b83a50621b2513a3dd33fdb</anchor>
      <arglist>(const State *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>clearance</name>
      <anchorfile>classompl_1_1base_1_1StateValidityChecker.html</anchorfile>
      <anchor>a8c308c2704d5429480b2b0ea4f4a403c</anchor>
      <arglist>(const State *state, State *, bool &amp;validStateAvailable) const </arglist>
    </member>
    <member kind="function">
      <type>const StateValidityCheckerSpecs &amp;</type>
      <name>getSpecs</name>
      <anchorfile>classompl_1_1base_1_1StateValidityChecker.html</anchorfile>
      <anchor>aed65e6eab21cf353ed7c982a5c67a3bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SpaceInformation *</type>
      <name>si_</name>
      <anchorfile>classompl_1_1base_1_1StateValidityChecker.html</anchorfile>
      <anchor>af2c66e45895871b67a253db783df6982</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StateValidityCheckerSpecs</type>
      <name>specs_</name>
      <anchorfile>classompl_1_1base_1_1StateValidityChecker.html</anchorfile>
      <anchor>aa2433d86dcb77c0dc67e99f6fa8d1e01</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::StateValidityCheckerPtr</name>
    <filename>classompl_1_1base_1_1StateValidityCheckerPtr.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::base::StateValidityCheckerSpecs</name>
    <filename>structompl_1_1base_1_1StateValidityCheckerSpecs.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>ClearanceComputationType</name>
      <anchorfile>structompl_1_1base_1_1StateValidityCheckerSpecs.html</anchorfile>
      <anchor>a986ca638de363299cf59527821c41715</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONE</name>
      <anchorfile>structompl_1_1base_1_1StateValidityCheckerSpecs.html</anchorfile>
      <anchor>a986ca638de363299cf59527821c41715a2d877fb4236539ab02156d6032445410</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXACT</name>
      <anchorfile>structompl_1_1base_1_1StateValidityCheckerSpecs.html</anchorfile>
      <anchor>a986ca638de363299cf59527821c41715afd5a3122c18b46a5f9fbec3f3d47975d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APPROXIMATE</name>
      <anchorfile>structompl_1_1base_1_1StateValidityCheckerSpecs.html</anchorfile>
      <anchor>a986ca638de363299cf59527821c41715a3bf1cd52612a2ad15ca513e293668e01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOUNDED_APPROXIMATE</name>
      <anchorfile>structompl_1_1base_1_1StateValidityCheckerSpecs.html</anchorfile>
      <anchor>a986ca638de363299cf59527821c41715ac0b22ba9ef80d27870ab2de7d231116c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONE</name>
      <anchorfile>structompl_1_1base_1_1StateValidityCheckerSpecs.html</anchorfile>
      <anchor>a986ca638de363299cf59527821c41715a2d877fb4236539ab02156d6032445410</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXACT</name>
      <anchorfile>structompl_1_1base_1_1StateValidityCheckerSpecs.html</anchorfile>
      <anchor>a986ca638de363299cf59527821c41715afd5a3122c18b46a5f9fbec3f3d47975d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APPROXIMATE</name>
      <anchorfile>structompl_1_1base_1_1StateValidityCheckerSpecs.html</anchorfile>
      <anchor>a986ca638de363299cf59527821c41715a3bf1cd52612a2ad15ca513e293668e01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOUNDED_APPROXIMATE</name>
      <anchorfile>structompl_1_1base_1_1StateValidityCheckerSpecs.html</anchorfile>
      <anchor>a986ca638de363299cf59527821c41715ac0b22ba9ef80d27870ab2de7d231116c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ClearanceComputationType</type>
      <name>clearanceComputationType</name>
      <anchorfile>structompl_1_1base_1_1StateValidityCheckerSpecs.html</anchorfile>
      <anchor>a48bfb73e86b5950dec03bddb31e1d5d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasValidDirectionComputation</name>
      <anchorfile>structompl_1_1base_1_1StateValidityCheckerSpecs.html</anchorfile>
      <anchor>a290fe2709dc7eb085c04f86af56429e7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::SubspaceProjectionEvaluator</name>
    <filename>classompl_1_1base_1_1SubspaceProjectionEvaluator.html</filename>
    <base>ompl::base::ProjectionEvaluator</base>
    <member kind="function">
      <type></type>
      <name>SubspaceProjectionEvaluator</name>
      <anchorfile>classompl_1_1base_1_1SubspaceProjectionEvaluator.html</anchorfile>
      <anchor>a59d0cb1d228b0a7d7c783e88662c13dd</anchor>
      <arglist>(const StateSpace *space, unsigned int index, const ProjectionEvaluatorPtr &amp;projToUse=ProjectionEvaluatorPtr())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1base_1_1SubspaceProjectionEvaluator.html</anchorfile>
      <anchor>abf1f2be167d17fd57014e054823a64b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1base_1_1SubspaceProjectionEvaluator.html</anchorfile>
      <anchor>aefe6313e42a034ba260d82b8a01ee860</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>project</name>
      <anchorfile>classompl_1_1base_1_1SubspaceProjectionEvaluator.html</anchorfile>
      <anchor>a6896aec4308fef04cb810f60cc11bd4d</anchor>
      <arglist>(const State *state, EuclideanProjection &amp;projection) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>index_</name>
      <anchorfile>classompl_1_1base_1_1SubspaceProjectionEvaluator.html</anchorfile>
      <anchor>a0096bf8cee26212911813b6fc09d5f0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ProjectionEvaluatorPtr</type>
      <name>proj_</name>
      <anchorfile>classompl_1_1base_1_1SubspaceProjectionEvaluator.html</anchorfile>
      <anchor>a5ee12ab4e4a5b8f87fed740ef272238b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ProjectionEvaluatorPtr</type>
      <name>specifiedProj_</name>
      <anchorfile>classompl_1_1base_1_1SubspaceProjectionEvaluator.html</anchorfile>
      <anchor>a7dbda72b9736c275bbc1f657b1d8f285</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::SubspaceStateSampler</name>
    <filename>classompl_1_1base_1_1SubspaceStateSampler.html</filename>
    <base>ompl::base::StateSampler</base>
    <member kind="function">
      <type></type>
      <name>SubspaceStateSampler</name>
      <anchorfile>classompl_1_1base_1_1SubspaceStateSampler.html</anchorfile>
      <anchor>ac5d7d1f6dd4fcb1c6339c28036f97fcb</anchor>
      <arglist>(const StateSpace *space, const StateSpace *subspace, double weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1SubspaceStateSampler.html</anchorfile>
      <anchor>a4af2a107cfb2fb2e698aca9cfe3f5bbc</anchor>
      <arglist>(State *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleUniformNear</name>
      <anchorfile>classompl_1_1base_1_1SubspaceStateSampler.html</anchorfile>
      <anchor>a980d4e497b7b3a55ee75a4d16e6d0476</anchor>
      <arglist>(State *state, const State *near, const double distance)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleGaussian</name>
      <anchorfile>classompl_1_1base_1_1SubspaceStateSampler.html</anchorfile>
      <anchor>a3f87a874c9f162f7a3d7e2fb5d749a73</anchor>
      <arglist>(State *state, const State *mean, const double stdDev)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const StateSpace *</type>
      <name>subspace_</name>
      <anchorfile>classompl_1_1base_1_1SubspaceStateSampler.html</anchorfile>
      <anchor>a211601f6099807e25cca97863919175d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StateSamplerPtr</type>
      <name>subspaceSampler_</name>
      <anchorfile>classompl_1_1base_1_1SubspaceStateSampler.html</anchorfile>
      <anchor>ab7e22e7c495a1ac6afe2048aa721f8db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>weight_</name>
      <anchorfile>classompl_1_1base_1_1SubspaceStateSampler.html</anchorfile>
      <anchor>adc627ced8c5dbb5b3053b14162d77981</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>subspaces_</name>
      <anchorfile>classompl_1_1base_1_1SubspaceStateSampler.html</anchorfile>
      <anchor>abd9c33f3e41a03863aad8567dc6fac49</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::ThunderRetrieveRepairPtr</name>
    <filename>classompl_1_1base_1_1ThunderRetrieveRepairPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::base::TimeStateSampler</name>
    <filename>classompl_1_1base_1_1TimeStateSampler.html</filename>
    <base>ompl::base::StateSampler</base>
    <member kind="function">
      <type></type>
      <name>TimeStateSampler</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSampler.html</anchorfile>
      <anchor>aa9f1631dc3d71d96493070ecd90a8fc8</anchor>
      <arglist>(const StateSpace *space)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSampler.html</anchorfile>
      <anchor>ad408d7220cb81899acc17e51fb85c6f7</anchor>
      <arglist>(State *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleUniformNear</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSampler.html</anchorfile>
      <anchor>ae5ced5a19e9743283fe3f89cd82c047c</anchor>
      <arglist>(State *state, const State *near, const double distance)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleGaussian</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSampler.html</anchorfile>
      <anchor>a7ea58f50c7bdc1f1c847885ac0d850cf</anchor>
      <arglist>(State *state, const State *mean, const double stdDev)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::TimeStateSpace</name>
    <filename>classompl_1_1base_1_1TimeStateSpace.html</filename>
    <base>ompl::base::StateSpace</base>
    <class kind="class">ompl::base::TimeStateSpace::StateType</class>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>a6c84277d671bbd5a282bff0753b902bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaximumExtent</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>ae7b29110da89f97709a4d259e02a368f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMeasure</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>ac56a6c6fca6fcebadacd92a77f16acd4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBounds</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>a3c51355b0e7e620ba7da19c85cac93ee</anchor>
      <arglist>(double minTime, double maxTime)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMinTimeBound</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>a3fce52300b5802b2ca6037d142aa1e87</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaxTimeBound</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>aede8ac7db4fb1deed707e368e41d766c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBounded</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>a803bbf7c307d3dd2520d5556638462f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enforceBounds</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>ae7b9f46ae062b26b9addb4504be6d7f9</anchor>
      <arglist>(State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>satisfiesBounds</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>a91ff776b4e89de630adaf1225864010c</anchor>
      <arglist>(const State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyState</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>a9b9515b09b9468cbbb066966a8536b95</anchor>
      <arglist>(State *destination, const State *source) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSerializationLength</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>a488ac5d0cf72c8a83bd0880525cb5191</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>a768ecabb3609c61be5eb59e3c62f23db</anchor>
      <arglist>(void *serialization, const State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deserialize</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>afb907681d1ceaabf6187da9635e8f155</anchor>
      <arglist>(State *state, const void *serialization) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>distance</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>a0beadc19acae61a5d3ffd7a0bdef4a97</anchor>
      <arglist>(const State *state1, const State *state2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equalStates</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>a61068ae7583855daa875967cd1dd754a</anchor>
      <arglist>(const State *state1, const State *state2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>a0ac7e7a5df135b960417b41943d10c4a</anchor>
      <arglist>(const State *from, const State *to, const double t, State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StateSamplerPtr</type>
      <name>allocDefaultStateSampler</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>a8c49f7e99b98cb1341beff039d1e2c1a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual State *</type>
      <name>allocState</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>a0aa6063cb06384e9b3d5552d289492c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>freeState</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>ac7c2385bce5f29772fbdbf1ff8d1d962</anchor>
      <arglist>(State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double *</type>
      <name>getValueAddressAtIndex</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>af90393504dc7f6a8f7eb335aadc6d590</anchor>
      <arglist>(State *state, const unsigned int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printState</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>ac9c9e77094d2c0622912064e5afd11de</anchor>
      <arglist>(const State *state, std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printSettings</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>aaffe60cdcb2253b38666ce35538a5250</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>registerProjections</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>a74799d5a7793fb5525cbe463a3f003c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>bounded_</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>a3db8870edad098617d42451c82d08246</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>minTime_</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>a73663499e3657506e3f76d8979ed4cbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxTime_</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace.html</anchorfile>
      <anchor>a40cc110f6c4295f575a33cbc27c96eba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::TimeStateSpace::StateType</name>
    <filename>classompl_1_1base_1_1TimeStateSpace_1_1StateType.html</filename>
    <base>ompl::base::State</base>
    <member kind="variable">
      <type>double</type>
      <name>position</name>
      <anchorfile>classompl_1_1base_1_1TimeStateSpace_1_1StateType.html</anchorfile>
      <anchor>ae9e66e0d2dd7ee6aec6442cbd6c147ca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::TypedSpaceInformation</name>
    <filename>classompl_1_1base_1_1TypedSpaceInformation.html</filename>
    <templarg></templarg>
    <base>ompl::base::SpaceInformation</base>
    <member kind="typedef">
      <type>SpaceType_</type>
      <name>SpaceType</name>
      <anchorfile>classompl_1_1base_1_1TypedSpaceInformation.html</anchorfile>
      <anchor>a3832c80ad43113876966ed6ad773de76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SpaceType::StateType</type>
      <name>StateType</name>
      <anchorfile>classompl_1_1base_1_1TypedSpaceInformation.html</anchorfile>
      <anchor>af4be37946dd8e36a112f35c6060d41a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScopedState&lt; SpaceType &gt;</type>
      <name>ScopedStateType</name>
      <anchorfile>classompl_1_1base_1_1TypedSpaceInformation.html</anchorfile>
      <anchor>af5d990d866c3dd968081da3b84c386fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; SpaceType &gt;</type>
      <name>SpacePtr</name>
      <anchorfile>classompl_1_1base_1_1TypedSpaceInformation.html</anchorfile>
      <anchor>a33bde181497c93667074c8ba4af19d10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TypedSpaceInformation&lt; SpaceType &gt; &gt;</type>
      <name>Ptr</name>
      <anchorfile>classompl_1_1base_1_1TypedSpaceInformation.html</anchorfile>
      <anchor>aaa8a55bd494332ded830a9c40816659e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypedSpaceInformation</name>
      <anchorfile>classompl_1_1base_1_1TypedSpaceInformation.html</anchorfile>
      <anchor>a82d7deca20e8241a8e7aca9bfd9e45af</anchor>
      <arglist>(const SpacePtr &amp;space)</arglist>
    </member>
    <member kind="function">
      <type>const SpaceType *</type>
      <name>getTypedStateSpace</name>
      <anchorfile>classompl_1_1base_1_1TypedSpaceInformation.html</anchorfile>
      <anchor>a9b6a258e0ea552c1a1d3025a66c702cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SpaceType *</type>
      <name>getTypedStateSpace</name>
      <anchorfile>classompl_1_1base_1_1TypedSpaceInformation.html</anchorfile>
      <anchor>ad003c54f7699e8831bd576704ebf92f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StateType *</type>
      <name>allocTypedState</name>
      <anchorfile>classompl_1_1base_1_1TypedSpaceInformation.html</anchorfile>
      <anchor>afa77d390960670024225d29bae9cae48</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocTypedStates</name>
      <anchorfile>classompl_1_1base_1_1TypedSpaceInformation.html</anchorfile>
      <anchor>addad8388509faad03ffaad1313e9e31e</anchor>
      <arglist>(std::vector&lt; StateType * &gt; &amp;states) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeTypedState</name>
      <anchorfile>classompl_1_1base_1_1TypedSpaceInformation.html</anchorfile>
      <anchor>a3dac1ad176c183f0653517af10afa608</anchor>
      <arglist>(StateType *state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeTypedStates</name>
      <anchorfile>classompl_1_1base_1_1TypedSpaceInformation.html</anchorfile>
      <anchor>ab17abac906cdc4e6cf051a6b6d1dafb8</anchor>
      <arglist>(std::vector&lt; StateType * &gt; &amp;states) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyTypedState</name>
      <anchorfile>classompl_1_1base_1_1TypedSpaceInformation.html</anchorfile>
      <anchor>a218f3ed024a455a58355b99f0ffc2e0f</anchor>
      <arglist>(StateType *destination, const StateType *source) const </arglist>
    </member>
    <member kind="function">
      <type>StateType *</type>
      <name>cloneTypedState</name>
      <anchorfile>classompl_1_1base_1_1TypedSpaceInformation.html</anchorfile>
      <anchor>a1fe61acb8b67d3b9bf8142920edc7d13</anchor>
      <arglist>(const StateType *source) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::TypedStateValidityChecker</name>
    <filename>classompl_1_1base_1_1TypedStateValidityChecker.html</filename>
    <templarg></templarg>
    <base>ompl::base::StateValidityChecker</base>
  </compound>
  <compound kind="class">
    <name>ompl::base::UniformValidStateSampler</name>
    <filename>classompl_1_1base_1_1UniformValidStateSampler.html</filename>
    <base>ompl::base::ValidStateSampler</base>
    <member kind="function">
      <type></type>
      <name>UniformValidStateSampler</name>
      <anchorfile>classompl_1_1base_1_1UniformValidStateSampler.html</anchorfile>
      <anchor>a1c0f3f6b13aa29e6e593f73e391e5201</anchor>
      <arglist>(const SpaceInformation *si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>sample</name>
      <anchorfile>classompl_1_1base_1_1UniformValidStateSampler.html</anchorfile>
      <anchor>a8e0136c7ed25a4bfd552c6cabaebcdb3</anchor>
      <arglist>(State *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>sampleNear</name>
      <anchorfile>classompl_1_1base_1_1UniformValidStateSampler.html</anchorfile>
      <anchor>a57f0088c965889490906f71ce4c64397</anchor>
      <arglist>(State *state, const State *near, const double distance)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1base_1_1UniformValidStateSampler.html</anchorfile>
      <anchor>a0d4b3a5afd2d7e2149d40cad3ae34a9b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::ValidStateSampler</name>
    <filename>classompl_1_1base_1_1ValidStateSampler.html</filename>
    <member kind="function">
      <type></type>
      <name>ValidStateSampler</name>
      <anchorfile>classompl_1_1base_1_1ValidStateSampler.html</anchorfile>
      <anchor>a5893d51bbce7621ab0d00306d066496c</anchor>
      <arglist>(const SpaceInformation *si)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classompl_1_1base_1_1ValidStateSampler.html</anchorfile>
      <anchor>af7eb82332b664016bf1b638ccc6ca5b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classompl_1_1base_1_1ValidStateSampler.html</anchorfile>
      <anchor>a03d9547f1d25a7f2f6f60edb5adfe56d</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>sample</name>
      <anchorfile>classompl_1_1base_1_1ValidStateSampler.html</anchorfile>
      <anchor>a011ee3910d747d806b00ff71bb66e1ea</anchor>
      <arglist>(State *state)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>sampleNear</name>
      <anchorfile>classompl_1_1base_1_1ValidStateSampler.html</anchorfile>
      <anchor>a86a022797e62aa7953d5381f0109c6a2</anchor>
      <arglist>(State *state, const State *near, const double distance)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNrAttempts</name>
      <anchorfile>classompl_1_1base_1_1ValidStateSampler.html</anchorfile>
      <anchor>aa134892ca5a8ae0c5ec2e37693787090</anchor>
      <arglist>(unsigned int attempts)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNrAttempts</name>
      <anchorfile>classompl_1_1base_1_1ValidStateSampler.html</anchorfile>
      <anchor>a1e28e2699657ea53aa586a574097c5b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ParamSet &amp;</type>
      <name>params</name>
      <anchorfile>classompl_1_1base_1_1ValidStateSampler.html</anchorfile>
      <anchor>ac634bcfcf5c61c1bae21315d298caf29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ParamSet &amp;</type>
      <name>params</name>
      <anchorfile>classompl_1_1base_1_1ValidStateSampler.html</anchorfile>
      <anchor>acd8edc9ced0c57f2cca9b68c53cab732</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const SpaceInformation *</type>
      <name>si_</name>
      <anchorfile>classompl_1_1base_1_1ValidStateSampler.html</anchorfile>
      <anchor>a66930cdb64d8d71e3b6ba5a5a1aee223</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>attempts_</name>
      <anchorfile>classompl_1_1base_1_1ValidStateSampler.html</anchorfile>
      <anchor>acb624beff24c591763f5d9fc8e38037f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>classompl_1_1base_1_1ValidStateSampler.html</anchorfile>
      <anchor>aa81e8e1aac6d0c7a114aaa69b33a6631</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParamSet</type>
      <name>params_</name>
      <anchorfile>classompl_1_1base_1_1ValidStateSampler.html</anchorfile>
      <anchor>a33ed9e5acc2c48fb8509ffe5f549139e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::ValidStateSamplerPtr</name>
    <filename>classompl_1_1base_1_1ValidStateSamplerPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::base::VFMechanicalWorkOptimizationObjective</name>
    <filename>classompl_1_1base_1_1VFMechanicalWorkOptimizationObjective.html</filename>
    <base>ompl::base::MechanicalWorkOptimizationObjective</base>
    <member kind="function">
      <type></type>
      <name>VFMechanicalWorkOptimizationObjective</name>
      <anchorfile>classompl_1_1base_1_1VFMechanicalWorkOptimizationObjective.html</anchorfile>
      <anchor>a041d5321ecdcfae5652f241978e5cf69</anchor>
      <arglist>(const ompl::base::SpaceInformationPtr &amp;si, const geometric::VFRRT::VectorField &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>classompl_1_1base_1_1VFMechanicalWorkOptimizationObjective.html</anchorfile>
      <anchor>a5f97ba21c0b17c1395b167a986c18f3f</anchor>
      <arglist>(ompl::base::Cost c) const </arglist>
    </member>
    <member kind="function">
      <type>ompl::base::Cost</type>
      <name>motionCost</name>
      <anchorfile>classompl_1_1base_1_1VFMechanicalWorkOptimizationObjective.html</anchorfile>
      <anchor>a9d21e70191998a09d27cdd76460a7fdd</anchor>
      <arglist>(const ompl::base::State *s1, const ompl::base::State *s2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSymmetric</name>
      <anchorfile>classompl_1_1base_1_1VFMechanicalWorkOptimizationObjective.html</anchorfile>
      <anchor>a37f91a3ba5fa82616c9593dcf317480c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>geometric::VFRRT::VectorField</type>
      <name>vf_</name>
      <anchorfile>classompl_1_1base_1_1VFMechanicalWorkOptimizationObjective.html</anchorfile>
      <anchor>a7e1d58a1ddffd21e0d74de11ae3e1164</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::base::VFUpstreamCriterionOptimizationObjective</name>
    <filename>classompl_1_1base_1_1VFUpstreamCriterionOptimizationObjective.html</filename>
    <base>ompl::base::OptimizationObjective</base>
    <member kind="function">
      <type></type>
      <name>VFUpstreamCriterionOptimizationObjective</name>
      <anchorfile>classompl_1_1base_1_1VFUpstreamCriterionOptimizationObjective.html</anchorfile>
      <anchor>af5b793b0d228344b97e52d8c93936bd8</anchor>
      <arglist>(const ompl::base::SpaceInformationPtr &amp;si, const geometric::VFRRT::VectorField &amp;vf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>classompl_1_1base_1_1VFUpstreamCriterionOptimizationObjective.html</anchorfile>
      <anchor>a1f7ec50a4e27dc8a7791397d67cabfbf</anchor>
      <arglist>(ompl::base::Cost c) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cost</type>
      <name>stateCost</name>
      <anchorfile>classompl_1_1base_1_1VFUpstreamCriterionOptimizationObjective.html</anchorfile>
      <anchor>aed2ccd3c6847e27cd5be257d24bf2b88</anchor>
      <arglist>(const State *s) const </arglist>
    </member>
    <member kind="function">
      <type>ompl::base::Cost</type>
      <name>motionCost</name>
      <anchorfile>classompl_1_1base_1_1VFUpstreamCriterionOptimizationObjective.html</anchorfile>
      <anchor>a0375b0765db26fb608ed5b6e89464d18</anchor>
      <arglist>(const State *s1, const State *s2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSymmetric</name>
      <anchorfile>classompl_1_1base_1_1VFUpstreamCriterionOptimizationObjective.html</anchorfile>
      <anchor>acbd792c07854269daf1c77454cb56c65</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>geometric::VFRRT::VectorField</type>
      <name>vf_</name>
      <anchorfile>classompl_1_1base_1_1VFUpstreamCriterionOptimizationObjective.html</anchorfile>
      <anchor>ad90fdf828c7080c1104308933600e941</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::BinaryHeap</name>
    <filename>classompl_1_1BinaryHeap.html</filename>
    <templarg>_T</templarg>
    <templarg>LessThan</templarg>
    <class kind="class">ompl::BinaryHeap::Element</class>
    <member kind="typedef">
      <type>void(*</type>
      <name>EventAfterInsert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ac67b18bc546f538cbb35c3ce8faca33c</anchor>
      <arglist>)(Element *, void *)</arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>EventBeforeRemove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a9fb57c917b899166b0a08e8c6aef0581</anchor>
      <arglist>)(Element *, void *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onAfterInsert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>adb5a517c064a3844a47cc873fddea796</anchor>
      <arglist>(EventAfterInsert event, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onBeforeRemove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a5a6368ea8193cdbf545f8a57dbaf02f5</anchor>
      <arglist>(EventBeforeRemove event, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>addf7a2e9d0cc43dd05659686f58d695f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>top</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>acfd81ffc1a1a446a903d1407beb2da5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a178e694e35e7864834d765a2819256f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a56848811174698cd9a907e1128e6ce02</anchor>
      <arglist>(Element *element)</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>insert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a7712c8909b596a4d12e0080960bd0274</anchor>
      <arglist>(const _T &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a275aa4aab2088b38df1fa2fd2827fffe</anchor>
      <arglist>(const std::vector&lt; _T &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildFrom</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ac8d1b64b5b7d50cd09380bfa14bbc45d</anchor>
      <arglist>(const std::vector&lt; _T &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rebuild</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>acb0b1a3d8a1f5e7852aec45bae1960dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a8114dc53c4239fe0e199106386898ce3</anchor>
      <arglist>(Element *element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a5ba52c2d67cee1c7fde3af666d4cd9ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a262fb851ec3bf4b057f11b76040390af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getContent</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a47cbd6ea3b6aa270825ed29a850ffc30</anchor>
      <arglist>(std::vector&lt; _T &gt; &amp;content) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>ad782d92c652443841ebc310d778a22f0</anchor>
      <arglist>(std::vector&lt; _T &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>LessThan &amp;</type>
      <name>getComparisonOperator</name>
      <anchorfile>classompl_1_1BinaryHeap.html</anchorfile>
      <anchor>a99e2aec266c1746cf0f16aa763d00d7f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::BinaryHeap::Element</name>
    <filename>classompl_1_1BinaryHeap_1_1Element.html</filename>
    <member kind="variable">
      <type>_T</type>
      <name>data</name>
      <anchorfile>classompl_1_1BinaryHeap_1_1Element.html</anchorfile>
      <anchor>a824930edad6908382484b0aacf62abb4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::Automaton</name>
    <filename>classompl_1_1control_1_1Automaton.html</filename>
    <class kind="struct">ompl::control::Automaton::TransitionMap</class>
    <member kind="function">
      <type></type>
      <name>Automaton</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>a07c814c84b38b4ed46fab2d91b4a8b48</anchor>
      <arglist>(unsigned int numProps, unsigned int numStates=0)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>addState</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>a462aa48d3acdae939d7eef3877077a70</anchor>
      <arglist>(bool accepting=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAccepting</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>ae290fef5beab81c4aac1036458f84e81</anchor>
      <arglist>(unsigned int s, bool a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAccepting</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>a39f12a0771862248c4a2fdaaabc95726</anchor>
      <arglist>(unsigned int s) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartState</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>a8cac10052e609bd2a54dc4087e509175</anchor>
      <arglist>(unsigned int s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getStartState</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>a33b77e8fa45e517232b37afc5c689095</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTransition</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>abf76004d623e528a123d7dc62ff11d6c</anchor>
      <arglist>(unsigned int src, const World &amp;w, unsigned int dest)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>a3f2c116b7c80cf6d790652b6f26c0505</anchor>
      <arglist>(const std::vector&lt; World &gt; &amp;trace) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>step</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>ae02e1264dd89a1c3b5ad4ef2887a2be8</anchor>
      <arglist>(int state, const World &amp;w) const </arglist>
    </member>
    <member kind="function">
      <type>TransitionMap &amp;</type>
      <name>getTransitions</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>ab6c20046b4c9191cc7429c99b9b7a6e6</anchor>
      <arglist>(unsigned int src)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numStates</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>a8c7cbc1f41c8377aaee117cbf9114463</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numTransitions</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>a2348e2672e3a885e812936e74a14b292</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numProps</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>a1b1b6f9ef0e697da120fec7a54b855c5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>a6a2a8d6fd2ac4a4b395ddd9f71bb602b</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>distFromAccepting</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>a9c9b9abf99d4762f0519a01ff87228da</anchor>
      <arglist>(unsigned int s, unsigned int maxDist=std::numeric_limits&lt; unsigned int &gt;::max()) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AutomatonPtr</type>
      <name>AcceptingAutomaton</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>aaf844ea902ba46a974d84b941428f246</anchor>
      <arglist>(unsigned int numProps)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AutomatonPtr</type>
      <name>CoverageAutomaton</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>aa439e97d635fcacda3079034ae9a0ca2</anchor>
      <arglist>(unsigned int numProps, const std::vector&lt; unsigned int &gt; &amp;covProps)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AutomatonPtr</type>
      <name>SequenceAutomaton</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>ae6c5b5d8aa7c829a46a96e73459bc3b1</anchor>
      <arglist>(unsigned int numProps, const std::vector&lt; unsigned int &gt; &amp;seqProps)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AutomatonPtr</type>
      <name>DisjunctionAutomaton</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>aedbb2474399445319acd41776e466976</anchor>
      <arglist>(unsigned int numProps, const std::vector&lt; unsigned int &gt; &amp;disjProps)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AutomatonPtr</type>
      <name>AvoidanceAutomaton</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>a0e52ba1e2636bf3281cb4cab9f671ec1</anchor>
      <arglist>(unsigned int numProps, const std::vector&lt; unsigned int &gt; &amp;avoidProps)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AutomatonPtr</type>
      <name>CoverageAutomaton</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>af64d36ba25147ae103f2baa1f1e25b53</anchor>
      <arglist>(unsigned int numProps)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AutomatonPtr</type>
      <name>SequenceAutomaton</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>a08b189166cc3f07060e32f1410ed7042</anchor>
      <arglist>(unsigned int numProps)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AutomatonPtr</type>
      <name>DisjunctionAutomaton</name>
      <anchorfile>classompl_1_1control_1_1Automaton.html</anchorfile>
      <anchor>ac379679e779699ba04063146960c2f4a</anchor>
      <arglist>(unsigned int numProps)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::control::Automaton::TransitionMap</name>
    <filename>structompl_1_1control_1_1Automaton_1_1TransitionMap.html</filename>
    <member kind="function">
      <type>int</type>
      <name>eval</name>
      <anchorfile>structompl_1_1control_1_1Automaton_1_1TransitionMap.html</anchorfile>
      <anchor>a8f4c57b79238237ba3e7533c859a8421</anchor>
      <arglist>(const World &amp;w) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::AutomatonPtr</name>
    <filename>classompl_1_1control_1_1AutomatonPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::control::CompoundControl</name>
    <filename>classompl_1_1control_1_1CompoundControl.html</filename>
    <base>ompl::control::Control</base>
    <member kind="function">
      <type>const T *</type>
      <name>as</name>
      <anchorfile>classompl_1_1control_1_1CompoundControl.html</anchorfile>
      <anchor>a2216bf62f90c565cbe4bed775996e1ef</anchor>
      <arglist>(const unsigned int index) const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>as</name>
      <anchorfile>classompl_1_1control_1_1CompoundControl.html</anchorfile>
      <anchor>ad6e8e8437f3a44dc8685181b34260be7</anchor>
      <arglist>(const unsigned int index)</arglist>
    </member>
    <member kind="variable">
      <type>Control **</type>
      <name>components</name>
      <anchorfile>classompl_1_1control_1_1CompoundControl.html</anchorfile>
      <anchor>a1cbfebc0fa1f536935c86376a6c0f703</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::CompoundControlSampler</name>
    <filename>classompl_1_1control_1_1CompoundControlSampler.html</filename>
    <base>ompl::control::ControlSampler</base>
    <member kind="function">
      <type></type>
      <name>CompoundControlSampler</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSampler.html</anchorfile>
      <anchor>ac54b1bec066cc5c008fa775862259b26</anchor>
      <arglist>(const ControlSpace *space)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CompoundControlSampler</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSampler.html</anchorfile>
      <anchor>a74052738dc2f61bfb3c59956d1323efc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addSampler</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSampler.html</anchorfile>
      <anchor>a52d2e68db2f9b1531de74a35ff9a7e8b</anchor>
      <arglist>(const ControlSamplerPtr &amp;sampler)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sample</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSampler.html</anchorfile>
      <anchor>a6314112308482364122c771c7456fcaf</anchor>
      <arglist>(Control *control)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sample</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSampler.html</anchorfile>
      <anchor>af0c643e31087483d3f1bdd5ca25bdd86</anchor>
      <arglist>(Control *control, const base::State *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleNext</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSampler.html</anchorfile>
      <anchor>a0d33f40da510aad59525e4717e69c509</anchor>
      <arglist>(Control *control, const Control *previous)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleNext</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSampler.html</anchorfile>
      <anchor>ad94fe6ad00a8e302bf9952c25de54ba3</anchor>
      <arglist>(Control *control, const Control *previous, const base::State *state)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ControlSamplerPtr &gt;</type>
      <name>samplers_</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSampler.html</anchorfile>
      <anchor>ab2ac5717ef0a8cfd0b2641496d9218e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::CompoundControlSpace</name>
    <filename>classompl_1_1control_1_1CompoundControlSpace.html</filename>
    <base>ompl::control::ControlSpace</base>
    <member kind="typedef">
      <type>CompoundControl</type>
      <name>ControlType</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>a0fd269c24c5e61cea5bbe264a6da4d81</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompoundControlSpace</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>aecf151ee04bb4cefac7d3891a7ae1214</anchor>
      <arglist>(const base::StateSpacePtr &amp;stateSpace)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>as</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>a3c6113194424af23a42afa6f34954a8b</anchor>
      <arglist>(const unsigned int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addSubspace</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>a97f6c0cb2ae71155e710fedf64f07c70</anchor>
      <arglist>(const ControlSpacePtr &amp;component)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getSubspaceCount</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>aa10c48698a0175acdb3e074628ab2f4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ControlSpacePtr &amp;</type>
      <name>getSubspace</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>a44c4b6921348a7d7f3fbca5f3a17e1d1</anchor>
      <arglist>(const unsigned int index) const </arglist>
    </member>
    <member kind="function">
      <type>const ControlSpacePtr &amp;</type>
      <name>getSubspace</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>ae73c6bf05dbb2305d56bc3670cbe4b3f</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>a8cc713e9a347601569a904e5c5a06953</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Control *</type>
      <name>allocControl</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>a5274f56a9751499eaeacb85f3c6130ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>freeControl</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>a28f345b66f692f0320131ebdc67cf3fd</anchor>
      <arglist>(Control *control) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyControl</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>a788677c2b9ce983580d91e45300147a3</anchor>
      <arglist>(Control *destination, const Control *source) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equalControls</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>a973585257979befcf82c31a8fe33c48e</anchor>
      <arglist>(const Control *control1, const Control *control2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>nullControl</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>a808ce868a2d0e29d75167377da1c9e87</anchor>
      <arglist>(Control *control) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ControlSamplerPtr</type>
      <name>allocDefaultControlSampler</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>ac4b7a3feb005ba629d3972e8824815f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double *</type>
      <name>getValueAddressAtIndex</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>a21916aee5cb82733348c8d3d86957ec7</anchor>
      <arglist>(Control *control, const unsigned int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printControl</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>a4d98173138ebc8bd5e2d09afd50af24d</anchor>
      <arglist>(const Control *control, std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printSettings</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>a7c2d4ecff19582b6c1b6e253571a1305</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>a2ae91f0886e060fe83819618fdf17d2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSerializationLength</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>a1040702ce055bb4472e0781cef6474a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>adf7d97eb070b55ff9ea16aa5c7032c7a</anchor>
      <arglist>(void *serialization, const Control *ctrl) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deserialize</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>a50cdc7d5c35c970292708776ebe5ae10</anchor>
      <arglist>(Control *ctrl, const void *serialization) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isCompound</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>aa11b49f311a5f1f79045edb857d6700e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>a0289ef7951c86aa50de720253c4b72a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ControlSpacePtr &gt;</type>
      <name>components_</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>a27e33f86e7f378220485bf137f5f8f50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>componentCount_</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>ab26054f5b3b19bdbff38de768f7637e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>locked_</name>
      <anchorfile>classompl_1_1control_1_1CompoundControlSpace.html</anchorfile>
      <anchor>a10fa7793c1fa25f548a3e72872dfb1df</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::Control</name>
    <filename>classompl_1_1control_1_1Control.html</filename>
    <member kind="function">
      <type>const T *</type>
      <name>as</name>
      <anchorfile>classompl_1_1control_1_1Control.html</anchorfile>
      <anchor>a975ae2ebd8798f662e909aa6f347f3c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>as</name>
      <anchorfile>classompl_1_1control_1_1Control.html</anchorfile>
      <anchor>a3e1865673e7705959c98315866df8ced</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::ControlSampler</name>
    <filename>classompl_1_1control_1_1ControlSampler.html</filename>
    <member kind="function">
      <type></type>
      <name>ControlSampler</name>
      <anchorfile>classompl_1_1control_1_1ControlSampler.html</anchorfile>
      <anchor>abec1f454396ca8e673384c85401b2681</anchor>
      <arglist>(const ControlSpace *space)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sample</name>
      <anchorfile>classompl_1_1control_1_1ControlSampler.html</anchorfile>
      <anchor>a7a03d0a64571c397ef6fa3646c002614</anchor>
      <arglist>(Control *control)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sample</name>
      <anchorfile>classompl_1_1control_1_1ControlSampler.html</anchorfile>
      <anchor>a77d53f1753437f4e0e5b99b0e5480389</anchor>
      <arglist>(Control *control, const base::State *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleNext</name>
      <anchorfile>classompl_1_1control_1_1ControlSampler.html</anchorfile>
      <anchor>a0a57ad73f9db82b17d933cb504efdbf6</anchor>
      <arglist>(Control *control, const Control *previous)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleNext</name>
      <anchorfile>classompl_1_1control_1_1ControlSampler.html</anchorfile>
      <anchor>a5e268c8c0619786358269cb9a9e16831</anchor>
      <arglist>(Control *control, const Control *previous, const base::State *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>sampleStepCount</name>
      <anchorfile>classompl_1_1control_1_1ControlSampler.html</anchorfile>
      <anchor>a17b7122806113cad38db04340eab10ef</anchor>
      <arglist>(unsigned int minSteps, unsigned int maxSteps)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ControlSpace *</type>
      <name>space_</name>
      <anchorfile>classompl_1_1control_1_1ControlSampler.html</anchorfile>
      <anchor>a42eb7a87665ead1c77e3c986244bbcf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1control_1_1ControlSampler.html</anchorfile>
      <anchor>af00c73c0f92f0b8169945b557b1ca84a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::ControlSamplerPtr</name>
    <filename>classompl_1_1control_1_1ControlSamplerPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::control::ControlSpace</name>
    <filename>classompl_1_1control_1_1ControlSpace.html</filename>
    <member kind="function">
      <type></type>
      <name>ControlSpace</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>ac967d6891fd4e0d5328ff304842288f4</anchor>
      <arglist>(const base::StateSpacePtr &amp;stateSpace)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>as</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>ad493371248cdfb29afd658994ed9416f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>as</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>aaefe1e90033adc60ee85bb025efbc620</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>a7c6eb7d9584d8baed33075110ea7a7a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>ae7138a1a3dd3b2dba3e222538707e15d</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getType</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>a4d9f0a85e62e1b64d0794b63055ad9f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const base::StateSpacePtr &amp;</type>
      <name>getStateSpace</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>a7115057d0cbb11095a88515fce9ee9c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>a86c6d314d83193709f0e94ccdcb4222b</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Control *</type>
      <name>allocControl</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>aee9245431c8cae2c73ebb80d587c96db</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>freeControl</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>ac655d35480c00b1eee7492d9dbb9111c</anchor>
      <arglist>(Control *control) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>copyControl</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>aa06fcfdbcbfa1e769549221b12e73bdf</anchor>
      <arglist>(Control *destination, const Control *source) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>equalControls</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>af66327a7b70f66a3d0fc6aa3c22a744a</anchor>
      <arglist>(const Control *control1, const Control *control2) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nullControl</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>a288d242c99e60aedd421a34e075bfeb3</anchor>
      <arglist>(Control *control) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ControlSamplerPtr</type>
      <name>allocDefaultControlSampler</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>a134234094048537f384119ba8a788e43</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ControlSamplerPtr</type>
      <name>allocControlSampler</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>afb5db1155717cacfbbbd154e29fdd7ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setControlSamplerAllocator</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>aff9f2582768673ba3c2091c960294115</anchor>
      <arglist>(const ControlSamplerAllocator &amp;csa)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearControlSamplerAllocator</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>ad47a72cbf62af06147a324c906cf394e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double *</type>
      <name>getValueAddressAtIndex</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>af07a7dcaa5f24537f440e8297c077282</anchor>
      <arglist>(Control *control, const unsigned int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printControl</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>a3186af8403c734774619fa7383c3b10c</anchor>
      <arglist>(const Control *control, std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printSettings</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>ad8842e0ecff583a3ae5b0548ff3f0d4d</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>a1d21669ebe1a4d0d68936ab459af9a1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSerializationLength</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>afc383c590ef1fe1f69f50102ac7c36ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>a6396bb676f387eed3b4dac96ca0de6ee</anchor>
      <arglist>(void *serialization, const Control *ctrl) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deserialize</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>a6ef1b68e508e1fad0685bc55c53672c7</anchor>
      <arglist>(Control *ctrl, const void *serialization) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeSignature</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>abc4facfba1fb4f8dcada561f0ff5446d</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;signature) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isCompound</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>a2161194b465644e305b6b0ed6eb6a49d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>type_</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>a81070174fae65611ce0779673c5a60df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSpacePtr</type>
      <name>stateSpace_</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>a8998ac5d1f469f7e3113b4e69d8de1cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ControlSamplerAllocator</type>
      <name>csa_</name>
      <anchorfile>classompl_1_1control_1_1ControlSpace.html</anchorfile>
      <anchor>aafc829af78b3a32e549bd6ed8f0bc8b0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::ControlSpacePtr</name>
    <filename>classompl_1_1control_1_1ControlSpacePtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::control::Decomposition</name>
    <filename>classompl_1_1control_1_1Decomposition.html</filename>
    <member kind="function">
      <type></type>
      <name>Decomposition</name>
      <anchorfile>classompl_1_1control_1_1Decomposition.html</anchorfile>
      <anchor>a2bedc19c6aeb219165cc79cd679f4cab</anchor>
      <arglist>(int dim, const base::RealVectorBounds &amp;b)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumRegions</name>
      <anchorfile>classompl_1_1control_1_1Decomposition.html</anchorfile>
      <anchor>a463c438892c2f7c02874262eaa82f167</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1control_1_1Decomposition.html</anchorfile>
      <anchor>a8a7ed952e6c78d4faace13aa9a629c1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const base::RealVectorBounds &amp;</type>
      <name>getBounds</name>
      <anchorfile>classompl_1_1control_1_1Decomposition.html</anchorfile>
      <anchor>ab9cf76bb33bdfe676ce732e1d143de66</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getRegionVolume</name>
      <anchorfile>classompl_1_1control_1_1Decomposition.html</anchorfile>
      <anchor>ad99d77fc02e64b203df6555c3e631066</anchor>
      <arglist>(int rid)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>locateRegion</name>
      <anchorfile>classompl_1_1control_1_1Decomposition.html</anchorfile>
      <anchor>a900ed6dac384b9f99b831ede22e8b5c4</anchor>
      <arglist>(const base::State *s) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>project</name>
      <anchorfile>classompl_1_1control_1_1Decomposition.html</anchorfile>
      <anchor>a3380447a3df41b34f9bf00293d94c725</anchor>
      <arglist>(const base::State *s, std::vector&lt; double &gt; &amp;coord) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getNeighbors</name>
      <anchorfile>classompl_1_1control_1_1Decomposition.html</anchorfile>
      <anchor>a8f285b50048e69c22e6bbf309ff3fa39</anchor>
      <arglist>(int rid, std::vector&lt; int &gt; &amp;neighbors) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sampleFromRegion</name>
      <anchorfile>classompl_1_1control_1_1Decomposition.html</anchorfile>
      <anchor>ac24ba5d48387e97f9b56b6cf6fadf8c2</anchor>
      <arglist>(int rid, RNG &amp;rng, std::vector&lt; double &gt; &amp;coord) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sampleFullState</name>
      <anchorfile>classompl_1_1control_1_1Decomposition.html</anchorfile>
      <anchor>a6debd4a7b901908416042efafe76b3a6</anchor>
      <arglist>(const base::StateSamplerPtr &amp;sampler, const std::vector&lt; double &gt; &amp;coord, base::State *s) const  =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::DecompositionPtr</name>
    <filename>classompl_1_1control_1_1DecompositionPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::control::DirectedControlSampler</name>
    <filename>classompl_1_1control_1_1DirectedControlSampler.html</filename>
    <member kind="function">
      <type></type>
      <name>DirectedControlSampler</name>
      <anchorfile>classompl_1_1control_1_1DirectedControlSampler.html</anchorfile>
      <anchor>ac402e5eafe25b66071ed315e4c425a48</anchor>
      <arglist>(const SpaceInformation *si)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>sampleTo</name>
      <anchorfile>classompl_1_1control_1_1DirectedControlSampler.html</anchorfile>
      <anchor>ab5886063e486fe8fe933c788ddd241d2</anchor>
      <arglist>(Control *control, const base::State *source, base::State *dest)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>sampleTo</name>
      <anchorfile>classompl_1_1control_1_1DirectedControlSampler.html</anchorfile>
      <anchor>ad79aad83bc09ca34195301f3d0c155be</anchor>
      <arglist>(Control *control, const Control *previous, const base::State *source, base::State *dest)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const SpaceInformation *</type>
      <name>si_</name>
      <anchorfile>classompl_1_1control_1_1DirectedControlSampler.html</anchorfile>
      <anchor>ad22b7af4756d1c6334a025856aabaf98</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::DirectedControlSamplerPtr</name>
    <filename>classompl_1_1control_1_1DirectedControlSamplerPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::control::DiscreteControlSampler</name>
    <filename>classompl_1_1control_1_1DiscreteControlSampler.html</filename>
    <base>ompl::control::ControlSampler</base>
    <member kind="function">
      <type></type>
      <name>DiscreteControlSampler</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSampler.html</anchorfile>
      <anchor>a8319be31ab8a82fdcae0b21f24f3cf7e</anchor>
      <arglist>(const ControlSpace *space)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sample</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSampler.html</anchorfile>
      <anchor>a54acd21a42be57d40482c7900888b8f7</anchor>
      <arglist>(Control *control)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::DiscreteControlSpace</name>
    <filename>classompl_1_1control_1_1DiscreteControlSpace.html</filename>
    <base>ompl::control::ControlSpace</base>
    <class kind="class">ompl::control::DiscreteControlSpace::ControlType</class>
    <member kind="function">
      <type></type>
      <name>DiscreteControlSpace</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSpace.html</anchorfile>
      <anchor>a80da123dffe4632a3210a56be9100431</anchor>
      <arglist>(const base::StateSpacePtr &amp;stateSpace, int lowerBound, int upperBound)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSpace.html</anchorfile>
      <anchor>aca87373cb0357c3a2d1062372c62ea43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyControl</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSpace.html</anchorfile>
      <anchor>ae0879299450bad2f6fc5b5144f2f0aa4</anchor>
      <arglist>(Control *destination, const Control *source) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equalControls</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSpace.html</anchorfile>
      <anchor>af030a3b8c9914300431b641c9147d871</anchor>
      <arglist>(const Control *control1, const Control *control2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ControlSamplerPtr</type>
      <name>allocDefaultControlSampler</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSpace.html</anchorfile>
      <anchor>a25eb0399e994432f2226a440ec8c2c13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Control *</type>
      <name>allocControl</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSpace.html</anchorfile>
      <anchor>a5d7f58a17a02e81de1c12e3a5a9d8cc5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>freeControl</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSpace.html</anchorfile>
      <anchor>a4c355009ba8aaf9ca01ec45a8af50f0c</anchor>
      <arglist>(Control *control) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>nullControl</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSpace.html</anchorfile>
      <anchor>afccba3752911a070642ab1fa4ee1a0f8</anchor>
      <arglist>(Control *control) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printControl</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSpace.html</anchorfile>
      <anchor>a2022bb061f90e05487c759481e34145b</anchor>
      <arglist>(const Control *control, std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printSettings</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSpace.html</anchorfile>
      <anchor>a52fd46756e6d6d52d4ea2e927d403910</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getControlCount</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSpace.html</anchorfile>
      <anchor>a3199ba6af2be1bea9eb19daaa700bb74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLowerBound</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSpace.html</anchorfile>
      <anchor>ae1c65a4c9a6017d374ded5e8e2cad734</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getUpperBound</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSpace.html</anchorfile>
      <anchor>a03f16e0442f11e13a393e06d7adc7ca1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBounds</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSpace.html</anchorfile>
      <anchor>afdc013d63070fedf861e9cfcbeb2c5a3</anchor>
      <arglist>(int lowerBound, int upperBound)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSpace.html</anchorfile>
      <anchor>a1b43ac540156738661283c37ec1288ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSerializationLength</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSpace.html</anchorfile>
      <anchor>a363db796e0c5774626b49f81e5eec36a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSpace.html</anchorfile>
      <anchor>a554dd2075ead0c74e5e9383d16d034a1</anchor>
      <arglist>(void *serialization, const Control *ctrl) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deserialize</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSpace.html</anchorfile>
      <anchor>a356a3d63be5983925a58ac459cdce440</anchor>
      <arglist>(Control *ctrl, const void *serialization) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lowerBound_</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSpace.html</anchorfile>
      <anchor>a1671b8ee01b03ea68ea0d055634f3c95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>upperBound_</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSpace.html</anchorfile>
      <anchor>a4c3f06041561d56746804424c40c2ef1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::DiscreteControlSpace::ControlType</name>
    <filename>classompl_1_1control_1_1DiscreteControlSpace_1_1ControlType.html</filename>
    <base>ompl::control::Control</base>
    <member kind="variable">
      <type>int</type>
      <name>value</name>
      <anchorfile>classompl_1_1control_1_1DiscreteControlSpace_1_1ControlType.html</anchorfile>
      <anchor>a95e9a37e5ff77c44c088d368a201cc5d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::EST</name>
    <filename>classompl_1_1control_1_1EST.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::control::EST::Motion</class>
    <class kind="struct">ompl::control::EST::MotionInfo</class>
    <class kind="struct">ompl::control::EST::TreeData</class>
    <member kind="function">
      <type></type>
      <name>EST</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>a66fb5bce7530899cdbaa56e48eec73ae</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>af0b97840ff047d60efe25411589c3f07</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>a09e624b66a49ca62ee9f8dfce84d6ee1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalBias</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>ae5197190ea18f94884d8d2797bda3cca</anchor>
      <arglist>(double goalBias)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoalBias</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>aeefc574568ed45d1241a24a3d3897cf8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>aa193bf970814f18376875dfea5a26333</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>a5414f70045ec53504a5653b3b87e2298</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>afaf51ca4c9a1a3a5c470612f87ae94e0</anchor>
      <arglist>(const base::ProjectionEvaluatorPtr &amp;projectionEvaluator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>ad1fcb4dd85835ac60aa2a5cc8e2816a5</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const base::ProjectionEvaluatorPtr &amp;</type>
      <name>getProjectionEvaluator</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>a55122e064321410d86f007c8d2a7a610</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>a4b4e562ee34cfff956af0e9b715d779e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>abc8e17ea685403d6fb449ab3132ea8cb</anchor>
      <arglist>(base::PlannerData &amp;data) const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Grid&lt; MotionInfo &gt;::Cell</type>
      <name>GridCell</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>a95bf3dc92cb8538ec295f0a4e629de85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>PDF&lt; GridCell * &gt;</type>
      <name>CellPDF</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>a66530ae0dae779fcb7c3f1353f4c183b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>a24e9fb79690be51f3ede63519d8b22ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addMotion</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>a52646e3c508d2f207e9ad039907e8564</anchor>
      <arglist>(Motion *motion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Motion *</type>
      <name>selectMotion</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>ae5bc86c3341e45b77f6b98401cf5ef89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ValidStateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>a997a64961c89458de561095f1fde98ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DirectedControlSamplerPtr</type>
      <name>controlSampler_</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>a6d45791538053d7d86264c0c8c9d5f03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const SpaceInformation *</type>
      <name>siC_</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>a09063efa62204e8d738de33561a03667</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TreeData</type>
      <name>tree_</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>aed881c54954130413437f9e2de2db18e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ProjectionEvaluatorPtr</type>
      <name>projectionEvaluator_</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>a8127a3b1bf811cabd8d5056684c64d17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>goalBias_</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>a1c447a3ee2a3a1b88c59fdd19ab768e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistance_</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>a51d3b55da539079f8c7fd9f538f57a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>a94897a7862ca85612f462f3be662f437</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CellPDF</type>
      <name>pdf_</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>a33a936a06183e5f7242afc9840d81cf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>lastGoalMotion_</name>
      <anchorfile>classompl_1_1control_1_1EST.html</anchorfile>
      <anchor>a5992d1d27b66ad7349c03ff68124b7dd</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1control_1_1EST">cEST</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::control::EST::Motion</name>
    <filename>classompl_1_1control_1_1EST_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1control_1_1EST_1_1Motion.html</anchorfile>
      <anchor>a58cf5ef08d28a90c8ed44c33c874c2b7</anchor>
      <arglist>(const SpaceInformation *si)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state</name>
      <anchorfile>classompl_1_1control_1_1EST_1_1Motion.html</anchorfile>
      <anchor>a1f294270c62f215855ff89215b97ddb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Control *</type>
      <name>control</name>
      <anchorfile>classompl_1_1control_1_1EST_1_1Motion.html</anchorfile>
      <anchor>a40a42597063b6c235dc05e2d39ef7d7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>steps</name>
      <anchorfile>classompl_1_1control_1_1EST_1_1Motion.html</anchorfile>
      <anchor>a0678953c6c2d54ff0408ff22735f8610</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent</name>
      <anchorfile>classompl_1_1control_1_1EST_1_1Motion.html</anchorfile>
      <anchor>a6fcd46db5b0c963629f07cb86e06e80f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::control::EST::MotionInfo</name>
    <filename>structompl_1_1control_1_1EST_1_1MotionInfo.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::control::EST::TreeData</name>
    <filename>structompl_1_1control_1_1EST_1_1TreeData.html</filename>
    <member kind="variable">
      <type>Grid&lt; MotionInfo &gt;</type>
      <name>grid</name>
      <anchorfile>structompl_1_1control_1_1EST_1_1TreeData.html</anchorfile>
      <anchor>a32ee86b13edc9f432c68c32241b8b23d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>structompl_1_1control_1_1EST_1_1TreeData.html</anchorfile>
      <anchor>a7ceec53e68cfae735061fe5566f57133</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::GridDecomposition</name>
    <filename>classompl_1_1control_1_1GridDecomposition.html</filename>
    <base>ompl::control::Decomposition</base>
    <member kind="function">
      <type></type>
      <name>GridDecomposition</name>
      <anchorfile>classompl_1_1control_1_1GridDecomposition.html</anchorfile>
      <anchor>ade2b9370ba014e3bebe8c70deb1636e2</anchor>
      <arglist>(int len, int dim, const base::RealVectorBounds &amp;b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumRegions</name>
      <anchorfile>classompl_1_1control_1_1GridDecomposition.html</anchorfile>
      <anchor>a36d93b986e0b3b00cc07bffcbf427627</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getRegionVolume</name>
      <anchorfile>classompl_1_1control_1_1GridDecomposition.html</anchorfile>
      <anchor>ab738051ec62c6c17c96bb7fd73357dbe</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getNeighbors</name>
      <anchorfile>classompl_1_1control_1_1GridDecomposition.html</anchorfile>
      <anchor>a9b14fe0ab60398003b4a9c6afe02cad0</anchor>
      <arglist>(int rid, std::vector&lt; int &gt; &amp;neighbors) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>locateRegion</name>
      <anchorfile>classompl_1_1control_1_1GridDecomposition.html</anchorfile>
      <anchor>af016f162e2342b515c822893f486acc6</anchor>
      <arglist>(const base::State *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleFromRegion</name>
      <anchorfile>classompl_1_1control_1_1GridDecomposition.html</anchorfile>
      <anchor>a96a44d24d2b68c01772a2dffb0d0b88a</anchor>
      <arglist>(int rid, RNG &amp;rng, std::vector&lt; double &gt; &amp;coord) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const base::RealVectorBounds &amp;</type>
      <name>getRegionBounds</name>
      <anchorfile>classompl_1_1control_1_1GridDecomposition.html</anchorfile>
      <anchor>a1809ebc9495bb61ac834e40a3f448808</anchor>
      <arglist>(int rid) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>regionToGridCoord</name>
      <anchorfile>classompl_1_1control_1_1GridDecomposition.html</anchorfile>
      <anchor>a900eea33caf4df39b3b21cddd437fa3a</anchor>
      <arglist>(int rid, std::vector&lt; int &gt; &amp;coord) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>gridCoordToRegion</name>
      <anchorfile>classompl_1_1control_1_1GridDecomposition.html</anchorfile>
      <anchor>a9ded2b410379a7febc8cbef25cd87860</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;coord) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>coordToRegion</name>
      <anchorfile>classompl_1_1control_1_1GridDecomposition.html</anchorfile>
      <anchor>a7c4d4b66e9b8256722eb5bdecf79ae07</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;coord) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>coordToGridCoord</name>
      <anchorfile>classompl_1_1control_1_1GridDecomposition.html</anchorfile>
      <anchor>a26ce8c2be9334b6b9967d0ca9423f7c8</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;coord, std::vector&lt; int &gt; &amp;gridCoord) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeGridNeighbors</name>
      <anchorfile>classompl_1_1control_1_1GridDecomposition.html</anchorfile>
      <anchor>a48698a909ebaecdc4b859807b5b1206e</anchor>
      <arglist>(int rid, std::vector&lt; int &gt; &amp;neighbors) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeGridNeighborsSub</name>
      <anchorfile>classompl_1_1control_1_1GridDecomposition.html</anchorfile>
      <anchor>a7976b5434a807f81d41ffa923f4fcc36</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;coord, std::vector&lt; int &gt; &amp;neighbors, int dim, std::vector&lt; int &gt; &amp;candidate) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::KPIECE1</name>
    <filename>classompl_1_1control_1_1KPIECE1.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="struct">ompl::control::KPIECE1::CellData</class>
    <class kind="struct">ompl::control::KPIECE1::CloseSample</class>
    <class kind="struct">ompl::control::KPIECE1::CloseSamples</class>
    <class kind="struct">ompl::control::KPIECE1::Motion</class>
    <class kind="struct">ompl::control::KPIECE1::OrderCellsByImportance</class>
    <class kind="struct">ompl::control::KPIECE1::TreeData</class>
    <member kind="function">
      <type></type>
      <name>KPIECE1</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a87c0b2ee46e47c9a1801145b0daebc02</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>aeb1b3f1f4ceb72c30e69d789b217be60</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a367643bdc6b4a2d8dd77813a9dcaa952</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalBias</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a7ae0dcc65f65227a9b1f5311df603048</anchor>
      <arglist>(double goalBias)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoalBias</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a3f639629d58dbe2f5a2e30e089b4ae96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderFraction</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a4988400ad57005ea77f248966102a0bf</anchor>
      <arglist>(double bp)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBorderFraction</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a4534be8a96ed14a9fbc539558e6b92a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCellScoreFactor</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>ac53ac0fbc5c66acc6bfde7e9cbe79b1a</anchor>
      <arglist>(double good, double bad)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBadCellScoreFactor</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>ac2c7f4e2d8c879832fdd2a621409007f</anchor>
      <arglist>(double bad)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoodCellScoreFactor</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a06baf6993612056dc7b21e893084088d</anchor>
      <arglist>(double good)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoodCellScoreFactor</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a27ae5e1bf1784f640dd52424e4f4c73b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBadCellScoreFactor</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>ade80f39933f5d264f203d0875546b685</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxCloseSamplesCount</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a272e5bf7d23fd6f64d75296b8d62c459</anchor>
      <arglist>(unsigned int nCloseSamples)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMaxCloseSamplesCount</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>aa20e3f7e98a6aa6182abf7fbb7a7c24d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>ad4335a199d26c963954d2327b3a41e55</anchor>
      <arglist>(const base::ProjectionEvaluatorPtr &amp;projectionEvaluator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a473c623e87dcc01f62a05d67e7d9d079</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const base::ProjectionEvaluatorPtr &amp;</type>
      <name>getProjectionEvaluator</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a646035d0d2cd0be3dca2d6b0b3ce4771</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>ac6740a95a3d801942f78b6e0b102b1c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a96505c47a5ad0d5aa0723f52d2af561d</anchor>
      <arglist>(base::PlannerData &amp;data) const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GridB&lt; CellData *, OrderCellsByImportance &gt;</type>
      <name>Grid</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>ac6017f07f862183beaecc6e908c1ca13</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a5e431cee483956f50a3d0cf6250c9db1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeGridMotions</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>aec771aaaa50e1496e6fd9c23b83329c1</anchor>
      <arglist>(Grid &amp;grid)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeCellData</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>aeb06ee1915eb20b77051fe2c748543cb</anchor>
      <arglist>(CellData *cdata)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMotion</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>aae241d048cceab3783d403ecf5a07ff6</anchor>
      <arglist>(Motion *motion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Grid::Cell *</type>
      <name>addMotion</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a06a2eec0db4a8ba9d44e57bb9395043b</anchor>
      <arglist>(Motion *motion, double dist)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>selectMotion</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>aafdef92d11259e650f28615b921f22e3</anchor>
      <arglist>(Motion *&amp;smotion, Grid::Cell *&amp;scell)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned int</type>
      <name>findNextMotion</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>ad0174932ec4a02461cb900b8937cb5e2</anchor>
      <arglist>(const std::vector&lt; Grid::Coord &gt; &amp;coords, unsigned int index, unsigned int count)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>computeImportance</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a2ebe6aabe8320df6dd05715830b9a8f6</anchor>
      <arglist>(Grid::Cell *cell, void *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ControlSamplerPtr</type>
      <name>controlSampler_</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a604b39fdd3616f208bbee56608db9028</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TreeData</type>
      <name>tree_</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a1b01940872b5850fa2b7ba1bf0e361b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const SpaceInformation *</type>
      <name>siC_</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a36a9d68f59822ab36d22555f03c21bb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ProjectionEvaluatorPtr</type>
      <name>projectionEvaluator_</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a70c6382ee0b1a777a9e51f0a5b37873e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>goodScoreFactor_</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a658be23e1f8f18d6ca40bf8ea8379a73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>badScoreFactor_</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>aad6c54edab2467b1cf8f9d264f2a12ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>nCloseSamples_</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a12b68e7a82159ca213853292d3cff537</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>selectBorderFraction_</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a82d7b8f19142433b9f9998035ab05d99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>goalBias_</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>ab2c9045ae1dea39ec8902c8db6dc5fba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>a4ebcf5ecd31311092b2e69a43698879f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>lastGoalMotion_</name>
      <anchorfile>classompl_1_1control_1_1KPIECE1.html</anchorfile>
      <anchor>af73d426edace041a5cd0fdb7cd56d496</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1control_1_1KPIECE1">cKPIECE1</docanchor>
  </compound>
  <compound kind="struct">
    <name>ompl::control::KPIECE1::CellData</name>
    <filename>structompl_1_1control_1_1KPIECE1_1_1CellData.html</filename>
    <member kind="variable">
      <type>std::vector&lt; Motion * &gt;</type>
      <name>motions</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1CellData.html</anchorfile>
      <anchor>ab69f0d7fed0ca988a13449c78c7e7177</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>coverage</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1CellData.html</anchorfile>
      <anchor>a531cdcbac68c1a3fbb7f2ac56801039e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>selections</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1CellData.html</anchorfile>
      <anchor>a01b88d8a637b048ca9d109b461269e2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>score</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1CellData.html</anchorfile>
      <anchor>aca42e758ded07ce32667187d7dd7b4d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>iteration</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1CellData.html</anchorfile>
      <anchor>ae63f5e3119484afb8596664674d51f55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>importance</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1CellData.html</anchorfile>
      <anchor>a283ef0009818505dac610b6bbc25968c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::control::KPIECE1::CloseSample</name>
    <filename>structompl_1_1control_1_1KPIECE1_1_1CloseSample.html</filename>
    <member kind="function">
      <type></type>
      <name>CloseSample</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1CloseSample.html</anchorfile>
      <anchor>afb293ee16b551768ecd97082abab5273</anchor>
      <arglist>(Grid::Cell *c, Motion *m, double d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1CloseSample.html</anchorfile>
      <anchor>ac9e76908dac01e5e699629b9e4f1af2d</anchor>
      <arglist>(const CloseSample &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>Grid::Cell *</type>
      <name>cell</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1CloseSample.html</anchorfile>
      <anchor>a45ab9285bc2bb91069a3e32e0b8ba25a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>motion</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1CloseSample.html</anchorfile>
      <anchor>a294eb16d2c240b1c128ad742dfa4aef1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>distance</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1CloseSample.html</anchorfile>
      <anchor>a3a0e10fa636211192ab9bc409d603956</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::control::KPIECE1::CloseSamples</name>
    <filename>structompl_1_1control_1_1KPIECE1_1_1CloseSamples.html</filename>
    <member kind="function">
      <type></type>
      <name>CloseSamples</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1CloseSamples.html</anchorfile>
      <anchor>a00b4a458d197bcfe828f77e8fecda9f5</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>consider</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1CloseSamples.html</anchorfile>
      <anchor>a66405fda7ce9ca4c06eb1f9e12b5589b</anchor>
      <arglist>(Grid::Cell *cell, Motion *motion, double distance)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>selectMotion</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1CloseSamples.html</anchorfile>
      <anchor>a9b909ea64b900cf5ee3dea7aece7ecde</anchor>
      <arglist>(Motion *&amp;smotion, Grid::Cell *&amp;scell)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canSample</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1CloseSamples.html</anchorfile>
      <anchor>a538f0fd53967deadbdd48b05aa3b1692</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>maxSize</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1CloseSamples.html</anchorfile>
      <anchor>a3114c01101069dcddc15aff3d62d344e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::set&lt; CloseSample &gt;</type>
      <name>samples</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1CloseSamples.html</anchorfile>
      <anchor>ab7c97105a696566d4ed22bf429eadffa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::control::KPIECE1::Motion</name>
    <filename>structompl_1_1control_1_1KPIECE1_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1Motion.html</anchorfile>
      <anchor>a5c1f4b334723fd0481bf1699ddae6063</anchor>
      <arglist>(const SpaceInformation *si)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1Motion.html</anchorfile>
      <anchor>a3db210dbb25ceaadb701c5438e58aba8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Control *</type>
      <name>control</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1Motion.html</anchorfile>
      <anchor>a836b3d7b3e4124c4d68217010b0532d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>steps</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1Motion.html</anchorfile>
      <anchor>ab14529232da27f7615c62729cd2cf616</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1Motion.html</anchorfile>
      <anchor>a73d2e565dc1a88298f14bf3f0ba379fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::control::KPIECE1::OrderCellsByImportance</name>
    <filename>structompl_1_1control_1_1KPIECE1_1_1OrderCellsByImportance.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::control::KPIECE1::TreeData</name>
    <filename>structompl_1_1control_1_1KPIECE1_1_1TreeData.html</filename>
    <member kind="variable">
      <type>Grid</type>
      <name>grid</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1TreeData.html</anchorfile>
      <anchor>adc7ec645bceae45e2a46b4204f41ea06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1TreeData.html</anchorfile>
      <anchor>aaa3be4422f1dd0ce9e05f29e0b1989dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>iteration</name>
      <anchorfile>structompl_1_1control_1_1KPIECE1_1_1TreeData.html</anchorfile>
      <anchor>aa7f9ba5f20aea73fc97e568f67415292</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::LTLPlanner</name>
    <filename>classompl_1_1control_1_1LTLPlanner.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="struct">ompl::control::LTLPlanner::Motion</class>
    <class kind="struct">ompl::control::LTLPlanner::ProductGraphStateInfo</class>
    <member kind="function">
      <type></type>
      <name>LTLPlanner</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>ac5723a09662532b93eaceb1099e32356</anchor>
      <arglist>(const LTLSpaceInformationPtr &amp;si, const ProductGraphPtr &amp;a, double exploreTime=0.5)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LTLPlanner</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>a9e98eb8ba7590177994bb659c0a886b5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTree</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>a4ac27cb96fe50e3e52703b187bcdacff</anchor>
      <arglist>(std::vector&lt; base::State * &gt; &amp;tree) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ProductGraph::State * &gt;</type>
      <name>getHighLevelPath</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>a88c468a39610fdd3d789abbca8cdfc3f</anchor>
      <arglist>(const std::vector&lt; base::State * &gt; &amp;path, ProductGraph::State *start=nullptr) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>a81df627143f110fffdf66cad8ebb4f71</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>a94fdeeba6e07e8ab736d7f8da70ae741</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>a35d2879950add3db59b96823858c3033</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>updateWeight</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>a89deb77d1b529104ab7b4ea5e44c616d</anchor>
      <arglist>(ProductGraph::State *as)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initAbstractInfo</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>a437e1411ec1e6a2943da05f9c97e19df</anchor>
      <arglist>(ProductGraph::State *as)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>buildAvail</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>aa960ed258c58c90915021a8cf50e1fbd</anchor>
      <arglist>(const std::vector&lt; ProductGraph::State * &gt; &amp;lead)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>explore</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>a74c30d1c13b68108811b457ec6fbfd87</anchor>
      <arglist>(const std::vector&lt; ProductGraph::State * &gt; &amp;lead, Motion *&amp;soln, double duration)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>abstractEdgeWeight</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>af818e37c48733702ee74f866ef2aa061</anchor>
      <arglist>(ProductGraph::State *a, ProductGraph::State *b) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>a528bcee36159dc9452d1bca7f26da26a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ControlSamplerPtr</type>
      <name>controlSampler_</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>afa238ad3eac7e6ad327432646d001996</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const LTLSpaceInformation *</type>
      <name>ltlsi_</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>ac3c97a4ca739deb93d61b624c89f5d9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ProductGraphPtr</type>
      <name>abstraction_</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>adfc0b29ea71e0017bc6ba7a9546372cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PDF&lt; ProductGraph::State * &gt;</type>
      <name>availDist_</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>afc0af27966ec70e335745f564becf896</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>a3ab35591e7638e8ecbbed927a9734f16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Motion * &gt;</type>
      <name>motions_</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>ab4d5b6b2ca391ba70d0a42ae0dd97e4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ProductGraph::State *</type>
      <name>prodStart_</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>a41dc17a229cb9b2bfa9258b179694990</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>exploreTime_</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>a265376d13acd1ce6e07a8a32b5e993b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; ProductGraph::State *, ProductGraphStateInfo &gt;</type>
      <name>abstractInfo_</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>a225635053acaa2654e15a62d970a2793</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>a81df627143f110fffdf66cad8ebb4f71</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>a94fdeeba6e07e8ab736d7f8da70ae741</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1control_1_1LTLPlanner.html</anchorfile>
      <anchor>a35d2879950add3db59b96823858c3033</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <docanchor file="classompl_1_1control_1_1LTLPlanner">cLTLPlanner</docanchor>
  </compound>
  <compound kind="struct">
    <name>ompl::control::LTLPlanner::Motion</name>
    <filename>structompl_1_1control_1_1LTLPlanner_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>structompl_1_1control_1_1LTLPlanner_1_1Motion.html</anchorfile>
      <anchor>a74dfac58aeb69cbba90a1429a05d860f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>structompl_1_1control_1_1LTLPlanner_1_1Motion.html</anchorfile>
      <anchor>a1ad7cddd0a97b46f8526e6a7d36202e8</anchor>
      <arglist>(const SpaceInformation *si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Motion</name>
      <anchorfile>structompl_1_1control_1_1LTLPlanner_1_1Motion.html</anchorfile>
      <anchor>ac79a2b8e46b6eadbd5dc40fb230c1274</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state</name>
      <anchorfile>structompl_1_1control_1_1LTLPlanner_1_1Motion.html</anchorfile>
      <anchor>a331874d57f6d1d0e1c0c584de639e96f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Control *</type>
      <name>control</name>
      <anchorfile>structompl_1_1control_1_1LTLPlanner_1_1Motion.html</anchorfile>
      <anchor>a432477f4e1f02f21955e67504de7b43a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent</name>
      <anchorfile>structompl_1_1control_1_1LTLPlanner_1_1Motion.html</anchorfile>
      <anchor>a96aca4e90ed379782688874b2e7e5c67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>steps</name>
      <anchorfile>structompl_1_1control_1_1LTLPlanner_1_1Motion.html</anchorfile>
      <anchor>a98bcc1eaf3ba112a2d6202f51174f109</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ProductGraph::State *</type>
      <name>abstractState</name>
      <anchorfile>structompl_1_1control_1_1LTLPlanner_1_1Motion.html</anchorfile>
      <anchor>a97d2a306f90f137e417c2d74131bd5ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::control::LTLPlanner::ProductGraphStateInfo</name>
    <filename>structompl_1_1control_1_1LTLPlanner_1_1ProductGraphStateInfo.html</filename>
    <member kind="function">
      <type></type>
      <name>ProductGraphStateInfo</name>
      <anchorfile>structompl_1_1control_1_1LTLPlanner_1_1ProductGraphStateInfo.html</anchorfile>
      <anchor>afe2023caf543ba04ecbd00dfb30900a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMotion</name>
      <anchorfile>structompl_1_1control_1_1LTLPlanner_1_1ProductGraphStateInfo.html</anchorfile>
      <anchor>a6516a1ccb5154de3678987c7dddaf294</anchor>
      <arglist>(Motion *m)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::LTLProblemDefinition</name>
    <filename>classompl_1_1control_1_1LTLProblemDefinition.html</filename>
    <base>ompl::base::ProblemDefinition</base>
  </compound>
  <compound kind="class">
    <name>ompl::control::LTLProblemDefinitionPtr</name>
    <filename>classompl_1_1control_1_1LTLProblemDefinitionPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::control::LTLSpaceInformation</name>
    <filename>classompl_1_1control_1_1LTLSpaceInformation.html</filename>
    <base>ompl::control::SpaceInformation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1control_1_1LTLSpaceInformation.html</anchorfile>
      <anchor>a98516e88ddc34e2e8389b244edfa0888</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::LTLSpaceInformationPtr</name>
    <filename>classompl_1_1control_1_1LTLSpaceInformationPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::control::MorseControlSpace</name>
    <filename>classompl_1_1control_1_1MorseControlSpace.html</filename>
    <base>ompl::control::RealVectorControlSpace</base>
    <member kind="function">
      <type></type>
      <name>MorseControlSpace</name>
      <anchorfile>classompl_1_1control_1_1MorseControlSpace.html</anchorfile>
      <anchor>a0e0df8f6a72790c1bd072d65566814a6</anchor>
      <arglist>(const base::StateSpacePtr &amp;stateSpace)</arglist>
    </member>
    <member kind="function">
      <type>const base::MorseEnvironmentPtr &amp;</type>
      <name>getEnvironment</name>
      <anchorfile>classompl_1_1control_1_1MorseControlSpace.html</anchorfile>
      <anchor>a0bc0e1fe42a1d173d1bd3aa0e994947b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::MorseSimpleSetup</name>
    <filename>classompl_1_1control_1_1MorseSimpleSetup.html</filename>
    <base>ompl::control::SimpleSetup</base>
    <member kind="function">
      <type></type>
      <name>MorseSimpleSetup</name>
      <anchorfile>classompl_1_1control_1_1MorseSimpleSetup.html</anchorfile>
      <anchor>a9c48dbb8117025295939232657484647</anchor>
      <arglist>(const base::MorseEnvironmentPtr &amp;env)</arglist>
    </member>
    <member kind="function">
      <type>const base::MorseEnvironmentPtr &amp;</type>
      <name>getEnvironment</name>
      <anchorfile>classompl_1_1control_1_1MorseSimpleSetup.html</anchorfile>
      <anchor>a9363d5a090052fab782f26288150a8c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>base::ScopedState&lt; base::MorseStateSpace &gt;</type>
      <name>getCurrentState</name>
      <anchorfile>classompl_1_1control_1_1MorseSimpleSetup.html</anchorfile>
      <anchor>a42d21beef7c5962e65c362d9d4e6a0c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentState</name>
      <anchorfile>classompl_1_1control_1_1MorseSimpleSetup.html</anchorfile>
      <anchor>a4715fbd9a5ad223fdfffba4cc012ac85</anchor>
      <arglist>(const base::ScopedState&lt;&gt; &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentState</name>
      <anchorfile>classompl_1_1control_1_1MorseSimpleSetup.html</anchorfile>
      <anchor>a4f093385d53a447d7c9c209d38df2302</anchor>
      <arglist>(const base::State *state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1control_1_1MorseSimpleSetup.html</anchorfile>
      <anchor>a15483451b4c9815bd93c44e724865349</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1control_1_1MorseSimpleSetup.html</anchorfile>
      <anchor>a14c2c625e0d9e1bfe4184cfcc7283036</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>playPath</name>
      <anchorfile>classompl_1_1control_1_1MorseSimpleSetup.html</anchorfile>
      <anchor>aa4030159d8e20d358aaffc856db1d6ed</anchor>
      <arglist>(const base::PathPtr &amp;path) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>playSolutionPath</name>
      <anchorfile>classompl_1_1control_1_1MorseSimpleSetup.html</anchorfile>
      <anchor>af40ae1bbd8e56b8d58be5a2b292d5197</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>base::PathPtr</type>
      <name>simulateControl</name>
      <anchorfile>classompl_1_1control_1_1MorseSimpleSetup.html</anchorfile>
      <anchor>aa9c989ba3a646cc9caf830d048d56d6f</anchor>
      <arglist>(const double *control, unsigned int steps) const </arglist>
    </member>
    <member kind="function">
      <type>base::PathPtr</type>
      <name>simulateControl</name>
      <anchorfile>classompl_1_1control_1_1MorseSimpleSetup.html</anchorfile>
      <anchor>ac0a5b44bc9b315a7957af981c094ae59</anchor>
      <arglist>(const Control *control, unsigned int steps) const </arglist>
    </member>
    <member kind="function">
      <type>base::PathPtr</type>
      <name>simulate</name>
      <anchorfile>classompl_1_1control_1_1MorseSimpleSetup.html</anchorfile>
      <anchor>ae7ff9fd1ddb8ec644776b0597eb1317b</anchor>
      <arglist>(unsigned int steps) const </arglist>
    </member>
    <member kind="variable">
      <type>const base::MorseEnvironmentPtr</type>
      <name>env_</name>
      <anchorfile>classompl_1_1control_1_1MorseSimpleSetup.html</anchorfile>
      <anchor>a9646737c5501b3ed32e449c7d2597e67</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::MorseStatePropagator</name>
    <filename>classompl_1_1control_1_1MorseStatePropagator.html</filename>
    <base>ompl::control::StatePropagator</base>
    <member kind="function">
      <type></type>
      <name>MorseStatePropagator</name>
      <anchorfile>classompl_1_1control_1_1MorseStatePropagator.html</anchorfile>
      <anchor>a118862537ad6d427d19cef3a7d155086</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>const base::MorseEnvironmentPtr &amp;</type>
      <name>getEnvironment</name>
      <anchorfile>classompl_1_1control_1_1MorseStatePropagator.html</anchorfile>
      <anchor>a6c406ea40c6d5b987ebb371cc09f6736</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canPropagateBackward</name>
      <anchorfile>classompl_1_1control_1_1MorseStatePropagator.html</anchorfile>
      <anchor>aa91d2a17d35f14ed2688989cb0bd070f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>propagate</name>
      <anchorfile>classompl_1_1control_1_1MorseStatePropagator.html</anchorfile>
      <anchor>a36c5a3fcefad6eb351fa14270b8662f2</anchor>
      <arglist>(const base::State *state, const Control *control, const double duration, base::State *result) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::MorseEnvironmentPtr</type>
      <name>env_</name>
      <anchorfile>classompl_1_1control_1_1MorseStatePropagator.html</anchorfile>
      <anchor>a6c4e3ffb10683681b6f7a162f9355ecb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::ODEAdaptiveSolver</name>
    <filename>classompl_1_1control_1_1ODEAdaptiveSolver.html</filename>
    <templarg></templarg>
    <base>ompl::control::ODESolver</base>
    <member kind="function">
      <type></type>
      <name>ODEAdaptiveSolver</name>
      <anchorfile>classompl_1_1control_1_1ODEAdaptiveSolver.html</anchorfile>
      <anchor>af21f859bf4668dfaf236512f28dc7a14</anchor>
      <arglist>(const SpaceInformationPtr &amp;si, const ODESolver::ODE &amp;ode, double intStep=1e-2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaximumError</name>
      <anchorfile>classompl_1_1control_1_1ODEAdaptiveSolver.html</anchorfile>
      <anchor>ad7901d1de348b500fe1fe64f775057f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaximumError</name>
      <anchorfile>classompl_1_1control_1_1ODEAdaptiveSolver.html</anchorfile>
      <anchor>ad9337a13cadd0ec81c8eac2355646d19</anchor>
      <arglist>(double error)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaximumEpsilonError</name>
      <anchorfile>classompl_1_1control_1_1ODEAdaptiveSolver.html</anchorfile>
      <anchor>a6e1a1b8ce6b0debcddab56c145f4c4da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaximumEpsilonError</name>
      <anchorfile>classompl_1_1control_1_1ODEAdaptiveSolver.html</anchorfile>
      <anchor>a94aadad9b8e05d13bbbf291181d93747</anchor>
      <arglist>(double error)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>solve</name>
      <anchorfile>classompl_1_1control_1_1ODEAdaptiveSolver.html</anchorfile>
      <anchor>aa7790bad00325ef7330ff104a01594b4</anchor>
      <arglist>(StateType &amp;state, const Control *control, const double duration) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxError_</name>
      <anchorfile>classompl_1_1control_1_1ODEAdaptiveSolver.html</anchorfile>
      <anchor>a20ebb4b51aa812b15c4bf4fbf7ea94aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxEpsilonError_</name>
      <anchorfile>classompl_1_1control_1_1ODEAdaptiveSolver.html</anchorfile>
      <anchor>a6ee8ed7e3f2575d4625f1dec33694cf2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::ODEBasicSolver</name>
    <filename>classompl_1_1control_1_1ODEBasicSolver.html</filename>
    <templarg></templarg>
    <base>ompl::control::ODESolver</base>
    <member kind="function">
      <type></type>
      <name>ODEBasicSolver</name>
      <anchorfile>classompl_1_1control_1_1ODEBasicSolver.html</anchorfile>
      <anchor>a214aea0912538a3fb617e7fbd0b19e85</anchor>
      <arglist>(const SpaceInformationPtr &amp;si, const ODESolver::ODE &amp;ode, double intStep=1e-2)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>solve</name>
      <anchorfile>classompl_1_1control_1_1ODEBasicSolver.html</anchorfile>
      <anchor>a1277a06d6c0f410897fc4b702b3a9987</anchor>
      <arglist>(StateType &amp;state, const Control *control, const double duration) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::ODEErrorSolver</name>
    <filename>classompl_1_1control_1_1ODEErrorSolver.html</filename>
    <templarg></templarg>
    <base>ompl::control::ODESolver</base>
    <member kind="function">
      <type></type>
      <name>ODEErrorSolver</name>
      <anchorfile>classompl_1_1control_1_1ODEErrorSolver.html</anchorfile>
      <anchor>a04a2db0a9684971cb3ce15d48cb97a27</anchor>
      <arglist>(const SpaceInformationPtr &amp;si, const ODESolver::ODE &amp;ode, double intStep=1e-2)</arglist>
    </member>
    <member kind="function">
      <type>ODESolver::StateType</type>
      <name>getError</name>
      <anchorfile>classompl_1_1control_1_1ODEErrorSolver.html</anchorfile>
      <anchor>a3d0fbb2f47ce9c61f92a373d483cd5d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>solve</name>
      <anchorfile>classompl_1_1control_1_1ODEErrorSolver.html</anchorfile>
      <anchor>aed4b7507d00cee5a7b322d614e4419ac</anchor>
      <arglist>(StateType &amp;state, const Control *control, const double duration) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ODESolver::StateType</type>
      <name>error_</name>
      <anchorfile>classompl_1_1control_1_1ODEErrorSolver.html</anchorfile>
      <anchor>a96513ba9e6e149937fb778cb38876c9f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::ODESolver</name>
    <filename>classompl_1_1control_1_1ODESolver.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>StateType</name>
      <anchorfile>classompl_1_1control_1_1ODESolver.html</anchorfile>
      <anchor>a89dbf06c71fe9fa377dfa12184f1b597</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(const StateType &amp;, const Control *, StateType &amp;)&gt;</type>
      <name>ODE</name>
      <anchorfile>classompl_1_1control_1_1ODESolver.html</anchorfile>
      <anchor>add77df5579e47edd58c8f705400f671e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(const base::State *state, const Control *control, const double duration, base::State *result)&gt;</type>
      <name>PostPropagationEvent</name>
      <anchorfile>classompl_1_1control_1_1ODESolver.html</anchorfile>
      <anchor>acf94b8f9ce0cb5bc96785191d29abf5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ODESolver</name>
      <anchorfile>classompl_1_1control_1_1ODESolver.html</anchorfile>
      <anchor>ae67c76208d28a41134b19b06c231df40</anchor>
      <arglist>(const SpaceInformationPtr &amp;si, const ODE &amp;ode, double intStep)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ODESolver</name>
      <anchorfile>classompl_1_1control_1_1ODESolver.html</anchorfile>
      <anchor>a2007e1376254b2691a0a0bab8fc1ddb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setODE</name>
      <anchorfile>classompl_1_1control_1_1ODESolver.html</anchorfile>
      <anchor>a52b3602810f416987ac93c0cc058f613</anchor>
      <arglist>(const ODE &amp;ode)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getIntegrationStepSize</name>
      <anchorfile>classompl_1_1control_1_1ODESolver.html</anchorfile>
      <anchor>ab6c429e89aa10d3b22d0ff064e8b1296</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIntegrationStepSize</name>
      <anchorfile>classompl_1_1control_1_1ODESolver.html</anchorfile>
      <anchor>a6cb4e5fb8b5dc009726e16dcaf4e43a1</anchor>
      <arglist>(double intStep)</arglist>
    </member>
    <member kind="function">
      <type>const SpaceInformationPtr &amp;</type>
      <name>getSpaceInformation</name>
      <anchorfile>classompl_1_1control_1_1ODESolver.html</anchorfile>
      <anchor>a5dfe89f008df1d150159666e6b354764</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StatePropagatorPtr</type>
      <name>getStatePropagator</name>
      <anchorfile>classompl_1_1control_1_1ODESolver.html</anchorfile>
      <anchor>a78bf19ebd7fe10d724db7d22d51e5ec5</anchor>
      <arglist>(ODESolverPtr solver, const PostPropagationEvent &amp;postEvent=nullptr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>solve</name>
      <anchorfile>classompl_1_1control_1_1ODESolver.html</anchorfile>
      <anchor>a4ef4bd953277b803db571802bb74ef1a</anchor>
      <arglist>(StateType &amp;state, const Control *control, const double duration) const  =0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const SpaceInformationPtr</type>
      <name>si_</name>
      <anchorfile>classompl_1_1control_1_1ODESolver.html</anchorfile>
      <anchor>a3f386d0befe4848b47c15f229acbeeb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ODE</type>
      <name>ode_</name>
      <anchorfile>classompl_1_1control_1_1ODESolver.html</anchorfile>
      <anchor>a20164181bfd568ee1cd4ab83be32a734</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>intStep_</name>
      <anchorfile>classompl_1_1control_1_1ODESolver.html</anchorfile>
      <anchor>a089438a31ab20c9aef54103f3b16642d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::ODESolverPtr</name>
    <filename>classompl_1_1control_1_1ODESolverPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::control::OpenDEControlSpace</name>
    <filename>classompl_1_1control_1_1OpenDEControlSpace.html</filename>
    <base>ompl::control::RealVectorControlSpace</base>
    <member kind="function">
      <type></type>
      <name>OpenDEControlSpace</name>
      <anchorfile>classompl_1_1control_1_1OpenDEControlSpace.html</anchorfile>
      <anchor>af2426f2714e63cf72f55629c0eda8c93</anchor>
      <arglist>(const base::StateSpacePtr &amp;stateSpace)</arglist>
    </member>
    <member kind="function">
      <type>const OpenDEEnvironmentPtr &amp;</type>
      <name>getEnvironment</name>
      <anchorfile>classompl_1_1control_1_1OpenDEControlSpace.html</anchorfile>
      <anchor>a1c2f8069990487dcfd28c59b29265caf</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::OpenDEEnvironment</name>
    <filename>classompl_1_1control_1_1OpenDEEnvironment.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>getControlDimension</name>
      <anchorfile>classompl_1_1control_1_1OpenDEEnvironment.html</anchorfile>
      <anchor>a72c2f707732b2641a6fa80710e5e9b51</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getControlBounds</name>
      <anchorfile>classompl_1_1control_1_1OpenDEEnvironment.html</anchorfile>
      <anchor>a4be1e1052dfd8e507df3c8ca94e9d0b2</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;lower, std::vector&lt; double &gt; &amp;upper) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>applyControl</name>
      <anchorfile>classompl_1_1control_1_1OpenDEEnvironment.html</anchorfile>
      <anchor>a52c0403bf826774412ef94c13524b4ba</anchor>
      <arglist>(const double *control) const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isValidCollision</name>
      <anchorfile>classompl_1_1control_1_1OpenDEEnvironment.html</anchorfile>
      <anchor>a48e3ebea213175c3ec3fb497f4bdc360</anchor>
      <arglist>(dGeomID geom1, dGeomID geom2, const dContact &amp;contact) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getMaxContacts</name>
      <anchorfile>classompl_1_1control_1_1OpenDEEnvironment.html</anchorfile>
      <anchor>a96d6ee6c900c977401456e28c8d890c2</anchor>
      <arglist>(dGeomID geom1, dGeomID geom2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setupContact</name>
      <anchorfile>classompl_1_1control_1_1OpenDEEnvironment.html</anchorfile>
      <anchor>a92b1146f6acd13ada2e4d99e12844e20</anchor>
      <arglist>(dGeomID geom1, dGeomID geom2, dContact &amp;contact) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getGeomName</name>
      <anchorfile>classompl_1_1control_1_1OpenDEEnvironment.html</anchorfile>
      <anchor>a024b4c3c590238c4f0532ca7025f2f97</anchor>
      <arglist>(dGeomID geom) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGeomName</name>
      <anchorfile>classompl_1_1control_1_1OpenDEEnvironment.html</anchorfile>
      <anchor>a44fd1edd7616a86112126e3069b06092</anchor>
      <arglist>(dGeomID geom, const std::string &amp;name)</arglist>
    </member>
    <member kind="variable">
      <type>dWorldID</type>
      <name>world_</name>
      <anchorfile>classompl_1_1control_1_1OpenDEEnvironment.html</anchorfile>
      <anchor>a7f8480f62626520d959418c16d2c4e05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; dSpaceID &gt;</type>
      <name>collisionSpaces_</name>
      <anchorfile>classompl_1_1control_1_1OpenDEEnvironment.html</anchorfile>
      <anchor>ab62cd0d0653e681f7c3a6a0a4edebaf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; dBodyID &gt;</type>
      <name>stateBodies_</name>
      <anchorfile>classompl_1_1control_1_1OpenDEEnvironment.html</anchorfile>
      <anchor>aab0205d1102ef92272c1234ad36bdff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; dGeomID, std::string &gt;</type>
      <name>geomNames_</name>
      <anchorfile>classompl_1_1control_1_1OpenDEEnvironment.html</anchorfile>
      <anchor>aa1e8a98094a94d5da6928625b9d07e6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>verboseContacts_</name>
      <anchorfile>classompl_1_1control_1_1OpenDEEnvironment.html</anchorfile>
      <anchor>a8e3f1e00a184ea7d62e6a0545874e491</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>dJointGroupID</type>
      <name>contactGroup_</name>
      <anchorfile>classompl_1_1control_1_1OpenDEEnvironment.html</anchorfile>
      <anchor>a7c52b4d76f2055906a2af520329304c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>maxContacts_</name>
      <anchorfile>classompl_1_1control_1_1OpenDEEnvironment.html</anchorfile>
      <anchor>a607c3e7736e0f92beed55dbdf42720ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>stepSize_</name>
      <anchorfile>classompl_1_1control_1_1OpenDEEnvironment.html</anchorfile>
      <anchor>afec4696c126e412a8111a3186cb70e55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>maxControlSteps_</name>
      <anchorfile>classompl_1_1control_1_1OpenDEEnvironment.html</anchorfile>
      <anchor>a54e0dac50dfd2a548fe19e39092a158b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>minControlSteps_</name>
      <anchorfile>classompl_1_1control_1_1OpenDEEnvironment.html</anchorfile>
      <anchor>a7cae8111f08b5f233d09a692d333d98c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::mutex</type>
      <name>mutex_</name>
      <anchorfile>classompl_1_1control_1_1OpenDEEnvironment.html</anchorfile>
      <anchor>a761edac8350458593e80d5e439144ba2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::OpenDEEnvironmentPtr</name>
    <filename>classompl_1_1control_1_1OpenDEEnvironmentPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::control::OpenDESimpleSetup</name>
    <filename>classompl_1_1control_1_1OpenDESimpleSetup.html</filename>
    <base>ompl::control::SimpleSetup</base>
    <member kind="function">
      <type></type>
      <name>OpenDESimpleSetup</name>
      <anchorfile>classompl_1_1control_1_1OpenDESimpleSetup.html</anchorfile>
      <anchor>ae22f1e95ecc6a4d47cf4ed880d33485a</anchor>
      <arglist>(const ControlSpacePtr &amp;space)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OpenDESimpleSetup</name>
      <anchorfile>classompl_1_1control_1_1OpenDESimpleSetup.html</anchorfile>
      <anchor>a241a69b4bd138fa99971961267b0f30c</anchor>
      <arglist>(const base::StateSpacePtr &amp;space)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OpenDESimpleSetup</name>
      <anchorfile>classompl_1_1control_1_1OpenDESimpleSetup.html</anchorfile>
      <anchor>a6420c4b8ad830da61cef5aace71d83ee</anchor>
      <arglist>(const OpenDEEnvironmentPtr &amp;env)</arglist>
    </member>
    <member kind="function">
      <type>const OpenDEEnvironmentPtr &amp;</type>
      <name>getEnvironment</name>
      <anchorfile>classompl_1_1control_1_1OpenDESimpleSetup.html</anchorfile>
      <anchor>a9d3301bb0da6179661edad072d8e453d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>base::ScopedState&lt; OpenDEStateSpace &gt;</type>
      <name>getCurrentState</name>
      <anchorfile>classompl_1_1control_1_1OpenDESimpleSetup.html</anchorfile>
      <anchor>a1351a9da9d2055f41c179a177c9b5dc9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentState</name>
      <anchorfile>classompl_1_1control_1_1OpenDESimpleSetup.html</anchorfile>
      <anchor>af14bf25c31f88efd2e0195ddfe42517d</anchor>
      <arglist>(const base::ScopedState&lt;&gt; &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentState</name>
      <anchorfile>classompl_1_1control_1_1OpenDESimpleSetup.html</anchorfile>
      <anchor>abe54242c95e96c0068e4d769ecf82d62</anchor>
      <arglist>(const base::State *state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVolumeBounds</name>
      <anchorfile>classompl_1_1control_1_1OpenDESimpleSetup.html</anchorfile>
      <anchor>a57920dec7d78f9b00f7503a7c3ad0f16</anchor>
      <arglist>(const base::RealVectorBounds &amp;bounds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinearVelocityBounds</name>
      <anchorfile>classompl_1_1control_1_1OpenDESimpleSetup.html</anchorfile>
      <anchor>ade10a182ad22d2f83aa6a6f3cb18e58d</anchor>
      <arglist>(const base::RealVectorBounds &amp;bounds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngularVelocityBounds</name>
      <anchorfile>classompl_1_1control_1_1OpenDESimpleSetup.html</anchorfile>
      <anchor>a37fd0026909480866b82f5a233653139</anchor>
      <arglist>(const base::RealVectorBounds &amp;bounds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>playPath</name>
      <anchorfile>classompl_1_1control_1_1OpenDESimpleSetup.html</anchorfile>
      <anchor>a59c47b9cbb977adc8f590420a90067f3</anchor>
      <arglist>(const base::PathPtr &amp;path, double timeFactor=1.0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>playSolutionPath</name>
      <anchorfile>classompl_1_1control_1_1OpenDESimpleSetup.html</anchorfile>
      <anchor>af99d4b2832b539fa46681191013147f5</anchor>
      <arglist>(double timeFactor=1.0) const </arglist>
    </member>
    <member kind="function">
      <type>base::PathPtr</type>
      <name>simulateControl</name>
      <anchorfile>classompl_1_1control_1_1OpenDESimpleSetup.html</anchorfile>
      <anchor>aedf993e9db8161b621c830ddea32bf3f</anchor>
      <arglist>(const double *control, unsigned int steps) const </arglist>
    </member>
    <member kind="function">
      <type>base::PathPtr</type>
      <name>simulateControl</name>
      <anchorfile>classompl_1_1control_1_1OpenDESimpleSetup.html</anchorfile>
      <anchor>ad906a1a25bac11613458830009736859</anchor>
      <arglist>(const Control *control, unsigned int steps) const </arglist>
    </member>
    <member kind="function">
      <type>base::PathPtr</type>
      <name>simulate</name>
      <anchorfile>classompl_1_1control_1_1OpenDESimpleSetup.html</anchorfile>
      <anchor>acd94d5fbebc585188da3cf735db120f4</anchor>
      <arglist>(unsigned int steps) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1control_1_1OpenDESimpleSetup.html</anchorfile>
      <anchor>ad11b22110a7b258af7fbf5d8959364af</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::OpenDEStatePropagator</name>
    <filename>classompl_1_1control_1_1OpenDEStatePropagator.html</filename>
    <base>ompl::control::StatePropagator</base>
    <member kind="function">
      <type></type>
      <name>OpenDEStatePropagator</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStatePropagator.html</anchorfile>
      <anchor>a469efadcffd88e923efac6864335e0d3</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>const OpenDEEnvironmentPtr &amp;</type>
      <name>getEnvironment</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStatePropagator.html</anchorfile>
      <anchor>ad9dcae01845d9fd2ded5c10c8d25143e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canPropagateBackward</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStatePropagator.html</anchorfile>
      <anchor>a3f71136965336ad247426f8faee9a785</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>propagate</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStatePropagator.html</anchorfile>
      <anchor>a8f66414f59992feef5db88a1487fa2b3</anchor>
      <arglist>(const base::State *state, const Control *control, const double duration, base::State *result) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OpenDEEnvironmentPtr</type>
      <name>env_</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStatePropagator.html</anchorfile>
      <anchor>a3e137900dec56319ce7bc48076724830</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::OpenDEStateSpace</name>
    <filename>classompl_1_1control_1_1OpenDEStateSpace.html</filename>
    <base>ompl::base::CompoundStateSpace</base>
    <class kind="class">ompl::control::OpenDEStateSpace::StateType</class>
    <member kind="enumvalue">
      <name>STATE_COLLISION_KNOWN_BIT</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>a2952bf8638854bd1e33e597713f13b29aaaaf494d5dcb4ad2a2dfa118bb928cc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_COLLISION_VALUE_BIT</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>a2952bf8638854bd1e33e597713f13b29a4aad4bf4c984a0a54251c6326ebc342b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_VALIDITY_KNOWN_BIT</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>a2952bf8638854bd1e33e597713f13b29a5218d6e48f2d205c2adeb1c62a836f0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_VALIDITY_VALUE_BIT</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>a2952bf8638854bd1e33e597713f13b29a217e97a10f0ed7704d9a9123c39d9047</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_COLLISION_KNOWN_BIT</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>a2952bf8638854bd1e33e597713f13b29aaaaf494d5dcb4ad2a2dfa118bb928cc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_COLLISION_VALUE_BIT</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>a2952bf8638854bd1e33e597713f13b29a4aad4bf4c984a0a54251c6326ebc342b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_VALIDITY_KNOWN_BIT</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>a2952bf8638854bd1e33e597713f13b29a5218d6e48f2d205c2adeb1c62a836f0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_VALIDITY_VALUE_BIT</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>a2952bf8638854bd1e33e597713f13b29a217e97a10f0ed7704d9a9123c39d9047</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OpenDEStateSpace</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>ac84bc49ad1ee3dd74720defe1d68c3d6</anchor>
      <arglist>(const OpenDEEnvironmentPtr &amp;env, double positionWeight=1.0, double linVelWeight=0.5, double angVelWeight=0.5, double orientationWeight=1.0)</arglist>
    </member>
    <member kind="function">
      <type>const OpenDEEnvironmentPtr &amp;</type>
      <name>getEnvironment</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>a70c91522a2a5fa6ce41a51ba5a465692</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNrBodies</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>a3c027b8569663b6a76090b24764ed441</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultBounds</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>a508a49bf7883600347f7cdcae4665897</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVolumeBounds</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>a7f7d274f8765e67c330abd2006d5f659</anchor>
      <arglist>(const base::RealVectorBounds &amp;bounds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinearVelocityBounds</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>af921c16e942950ea704d4bfecf7442c3</anchor>
      <arglist>(const base::RealVectorBounds &amp;bounds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngularVelocityBounds</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>ab82d2f60bcad6893be7669efe16e4fc7</anchor>
      <arglist>(const base::RealVectorBounds &amp;bounds)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>readState</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>a46f6ab5f6a465fa3a0f6c5b6f2061663</anchor>
      <arglist>(base::State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeState</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>a44b6de682ded3e9095f15da757f2e79b</anchor>
      <arglist>(const base::State *state) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfiesBoundsExceptRotation</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>aa9eb2b3635829f5a07825a7e242ec5b9</anchor>
      <arglist>(const StateType *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::State *</type>
      <name>allocState</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>af8fde2b042b3a6106c07ddc65b3d1005</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>freeState</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>a0f6202811076c2e92b72f2298b74a96a</anchor>
      <arglist>(base::State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyState</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>a7c83c791c78bf85d1422e37e1a3487c1</anchor>
      <arglist>(base::State *destination, const base::State *source) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>a995391c63557561e135535f525e53260</anchor>
      <arglist>(const base::State *from, const base::State *to, const double t, base::State *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::StateSamplerPtr</type>
      <name>allocDefaultStateSampler</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>a73b44ff1dd17119bf586a9baa6ddf389</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::StateSamplerPtr</type>
      <name>allocStateSampler</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>a4b3aa8c1a950a9ca22f2f30d0895a4b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>evaluateCollision</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>a7c5829ff58ba3e8949874809f773160c</anchor>
      <arglist>(const base::State *source) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OpenDEEnvironmentPtr</type>
      <name>env_</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace.html</anchorfile>
      <anchor>ae83d9fb6b1e5cda6f0f3650014838085</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::OpenDEStateSpace::StateType</name>
    <filename>classompl_1_1control_1_1OpenDEStateSpace_1_1StateType.html</filename>
    <base>ompl::base::CompoundState</base>
    <member kind="function">
      <type>const double *</type>
      <name>getBodyPosition</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace_1_1StateType.html</anchorfile>
      <anchor>a8394aad1adb1890628f66a2dd974d859</anchor>
      <arglist>(unsigned int body) const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getBodyPosition</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace_1_1StateType.html</anchorfile>
      <anchor>acd8ea0866b9964615b7f359cea72dc42</anchor>
      <arglist>(unsigned int body)</arglist>
    </member>
    <member kind="function">
      <type>const base::SO3StateSpace::StateType &amp;</type>
      <name>getBodyRotation</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace_1_1StateType.html</anchorfile>
      <anchor>a297628f7104d13bd5418a3e78c00c951</anchor>
      <arglist>(unsigned int body) const </arglist>
    </member>
    <member kind="function">
      <type>base::SO3StateSpace::StateType &amp;</type>
      <name>getBodyRotation</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace_1_1StateType.html</anchorfile>
      <anchor>a9dddc43042fadbeee54d82579669c546</anchor>
      <arglist>(unsigned int body)</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getBodyLinearVelocity</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace_1_1StateType.html</anchorfile>
      <anchor>afa3dabbd27cf752d234ab9494b724ff8</anchor>
      <arglist>(unsigned int body) const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getBodyLinearVelocity</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace_1_1StateType.html</anchorfile>
      <anchor>a556fa8bd77fc850e6a0f9a98e086bb51</anchor>
      <arglist>(unsigned int body)</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getBodyAngularVelocity</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace_1_1StateType.html</anchorfile>
      <anchor>a7f2ebf057dc1aced145431771ec28de4</anchor>
      <arglist>(unsigned int body) const </arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getBodyAngularVelocity</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace_1_1StateType.html</anchorfile>
      <anchor>ae951cfb3121caf1aea66f6938306836a</anchor>
      <arglist>(unsigned int body)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>collision</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateSpace_1_1StateType.html</anchorfile>
      <anchor>a4f1a462807534944ca791f1314a42fa8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::OpenDEStateValidityChecker</name>
    <filename>classompl_1_1control_1_1OpenDEStateValidityChecker.html</filename>
    <base>ompl::base::StateValidityChecker</base>
    <member kind="function">
      <type></type>
      <name>OpenDEStateValidityChecker</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateValidityChecker.html</anchorfile>
      <anchor>a77f937139679b66a547db61a1727589d</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isValid</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateValidityChecker.html</anchorfile>
      <anchor>a2127521f36abfd81f4be598acf19ccd7</anchor>
      <arglist>(const base::State *state) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OpenDEStateSpace *</type>
      <name>osm_</name>
      <anchorfile>classompl_1_1control_1_1OpenDEStateValidityChecker.html</anchorfile>
      <anchor>aaa529345ccfb55b31dde65a8cb65d6f4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::PathControl</name>
    <filename>classompl_1_1control_1_1PathControl.html</filename>
    <base>ompl::base::Path</base>
    <member kind="function">
      <type></type>
      <name>PathControl</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>acad02bde7b3869b242e5bf7f2b9d9546</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PathControl</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>a52e694c4f5e5d0acddda7e3053c2d6eb</anchor>
      <arglist>(const PathControl &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>PathControl &amp;</type>
      <name>operator=</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>aae38b0401aa76d832ad9098d51065130</anchor>
      <arglist>(const PathControl &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::Cost</type>
      <name>cost</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>a86f186b08ae6214f32ece29039aae9e2</anchor>
      <arglist>(const base::OptimizationObjectivePtr &amp;obj) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>length</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>af1fcad660f6f297d0d0f09331aafafc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>check</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>ae747eddb03f7721d358bfe6d7bafed53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>a29fa8adb0eea5674ae095623f7a59f1d</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printAsMatrix</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>a66bed9ed9ccbe1b72cb34bb1a331b3cc</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>geometric::PathGeometric</type>
      <name>asGeometric</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>a7efb204a5ea4de7ac17bc33e4fe3e573</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>aa81092a35fc88ea1a490a4e1e8444edc</anchor>
      <arglist>(const base::State *state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>a429ad467cda1b1e6c3f3ecaad32fc3af</anchor>
      <arglist>(const base::State *state, const Control *control, double duration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>aff4f8651ac48daa0d8f58fb378767305</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>random</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>aaa8ab5be65cb921092b5c94b99226c56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>randomValid</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>aa7f230dba3a6f6e2e7a59130fd4dd795</anchor>
      <arglist>(unsigned int attempts)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; base::State * &gt; &amp;</type>
      <name>getStates</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>afca7d61892f0fed80c637cdfa8d81d1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Control * &gt; &amp;</type>
      <name>getControls</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>ae757d5b9f8cdba7598a5db9fd5536bf2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt; &amp;</type>
      <name>getControlDurations</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>a85a46abb71ed4dbc98053b8679de13b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>base::State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>acc1a559c0c2f7f913391e6cbde7c4b30</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>const base::State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>a19132d4388e5294a1d1734cec420ef1b</anchor>
      <arglist>(unsigned int index) const </arglist>
    </member>
    <member kind="function">
      <type>Control *</type>
      <name>getControl</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>a6b34f21745348621a3d2780325e69ea9</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>const Control *</type>
      <name>getControl</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>a953be9640b8af9bbf087477d9c585b86</anchor>
      <arglist>(unsigned int index) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getControlDuration</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>a3baf286e81bc9ec821342d76c979c7c3</anchor>
      <arglist>(unsigned int index) const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getStateCount</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>ad5f5b4213575739eaea914b201cdc985</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getControlCount</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>ae3187aa50db6363ee79449b95af6c9fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>ad8078ff0543cfed88b7ab83e51b96118</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>copyFrom</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>aba52a0ae46c87f57a8a4e9f75855cbc2</anchor>
      <arglist>(const PathControl &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; base::State * &gt;</type>
      <name>states_</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>a3d4d556d411d60fd7034d3cc434e815f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Control * &gt;</type>
      <name>controls_</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>a934fd2a466a48a8aa49fe146e142980c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>controlDurations_</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>ad2d2983c2b89dd7aa7ae74393172e7b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>aa81092a35fc88ea1a490a4e1e8444edc</anchor>
      <arglist>(const base::State *state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>a429ad467cda1b1e6c3f3ecaad32fc3af</anchor>
      <arglist>(const base::State *state, const Control *control, double duration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>aff4f8651ac48daa0d8f58fb378767305</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>random</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>aaa8ab5be65cb921092b5c94b99226c56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>randomValid</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>aa7f230dba3a6f6e2e7a59130fd4dd795</anchor>
      <arglist>(unsigned int attempts)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; base::State * &gt; &amp;</type>
      <name>getStates</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>afca7d61892f0fed80c637cdfa8d81d1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Control * &gt; &amp;</type>
      <name>getControls</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>ae757d5b9f8cdba7598a5db9fd5536bf2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt; &amp;</type>
      <name>getControlDurations</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>a85a46abb71ed4dbc98053b8679de13b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>base::State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>acc1a559c0c2f7f913391e6cbde7c4b30</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>const base::State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>a19132d4388e5294a1d1734cec420ef1b</anchor>
      <arglist>(unsigned int index) const </arglist>
    </member>
    <member kind="function">
      <type>Control *</type>
      <name>getControl</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>a6b34f21745348621a3d2780325e69ea9</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>const Control *</type>
      <name>getControl</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>a953be9640b8af9bbf087477d9c585b86</anchor>
      <arglist>(unsigned int index) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getControlDuration</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>a3baf286e81bc9ec821342d76c979c7c3</anchor>
      <arglist>(unsigned int index) const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getStateCount</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>ad5f5b4213575739eaea914b201cdc985</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getControlCount</name>
      <anchorfile>classompl_1_1control_1_1PathControl.html</anchorfile>
      <anchor>ae3187aa50db6363ee79449b95af6c9fc</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::PDST</name>
    <filename>classompl_1_1control_1_1PDST.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="struct">ompl::control::PDST::Cell</class>
    <class kind="struct">ompl::control::PDST::Motion</class>
    <class kind="struct">ompl::control::PDST::MotionCompare</class>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>a87abcb1dee0095fe0ee9fcca07e43025</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>a6b63185dd048eb4313c1b57a77b9edcd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>ae75d5a4fca1fd028ab23bfcdd5a1a644</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>a6d43e2667213ff0b46b1bd52e75d949a</anchor>
      <arglist>(base::PlannerData &amp;data) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>af03602a48c919370dca949170ddb18d8</anchor>
      <arglist>(const base::ProjectionEvaluatorPtr &amp;projectionEvaluator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>a2de627448d1d36cc21fd8f4d14bc5ae2</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const base::ProjectionEvaluatorPtr &amp;</type>
      <name>getProjectionEvaluator</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>a1f4cb77c88a6e0b07102b79c0e4e4939</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>*void</type>
      <name>setGoalBias</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>a1cfa5fe22497b05f1a8d1c833728fcbc</anchor>
      <arglist>(double goalBias)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoalBias</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>a0534a2ad8086f9781ae1ce08e6993f39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addMotion</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>a2158a0fc794229ffdda2cb24d5c0e202</anchor>
      <arglist>(Motion *motion, Cell *cell, base::State *, base::State *, base::EuclideanProjection &amp;, base::EuclideanProjection &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateHeapElement</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>aa079dc290b283995153ae607953cb9f1</anchor>
      <arglist>(Motion *motion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Motion *</type>
      <name>propagateFrom</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>a1d200c83edc3e1500a2acbd9897995d4</anchor>
      <arglist>(Motion *motion, base::State *, base::State *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned int</type>
      <name>findDurationAndAncestor</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>aa244c3901fbd7cf6070d6e1881844c1e</anchor>
      <arglist>(Motion *motion, base::State *state, base::State *scratch, Motion *&amp;ancestor) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>a44c0bef425e4358b8c471da5ac0a163b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DirectedControlSamplerPtr</type>
      <name>controlSampler_</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>a007b33339c277e78199b2b7cb0e975d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const SpaceInformation *</type>
      <name>siC_</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>a873d819c188d3cb70d9200d2d0603e99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Motion * &gt;</type>
      <name>startMotions_</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>abf00b1f8bb6c9076a3a13cb20da1a893</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BinaryHeap&lt; Motion *, MotionCompare &gt;</type>
      <name>priorityQueue_</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>a8272f891650f91ea3a7c3edf23caccf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Cell *</type>
      <name>bsp_</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>ab7a7a54861e89c3535d292cd7008705b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ProjectionEvaluatorPtr</type>
      <name>projectionEvaluator_</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>ab6295db4b1a4833deee858a75fac876b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>goalBias_</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>aaa1e05ca677ce438b960ccc696421323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::GoalSampleableRegion *</type>
      <name>goalSampler_</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>a5dcf50bd87b21f89ec45300817bacf09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>iteration_</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>a587c2dbdf4a5487719acf5220462d159</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>lastGoalMotion_</name>
      <anchorfile>classompl_1_1control_1_1PDST.html</anchorfile>
      <anchor>a64510e8439cf756516a1b49df98c5ed1</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1control_1_1PDST">cPDST</docanchor>
  </compound>
  <compound kind="struct">
    <name>ompl::control::PDST::Cell</name>
    <filename>structompl_1_1control_1_1PDST_1_1Cell.html</filename>
    <member kind="function">
      <type>void</type>
      <name>subdivide</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>a54f7d2983d7b36341a1f7299737c119d</anchor>
      <arglist>(unsigned int spaceDimension)</arglist>
    </member>
    <member kind="function">
      <type>Cell *</type>
      <name>stab</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>a1ed9f3b212052a95a9ef94d12227d83b</anchor>
      <arglist>(const base::EuclideanProjection &amp;projection) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMotion</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>a85edeaabe2fcc01a13e7b1433e804178</anchor>
      <arglist>(Motion *motion)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>a90fdd8d74bc180b04bec23d905e53563</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>volume_</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>a02a7ffd3a1fcd9650faff5651d7d9112</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>splitDimension_</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>a317e57ad23a279cdd6bf935f336065d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>splitValue_</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>ad6af8d7e40f9dfaf82ccab206377778f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Cell *</type>
      <name>left_</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>a3df9edb315698036fbf2c5f9600dc416</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Cell *</type>
      <name>right_</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>a6337b19c0dbd3e298689d1e9e4945ae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>base::RealVectorBounds</type>
      <name>bounds_</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>a97d78c34c5cc242093a2f0dfb6dcc27f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Motion * &gt;</type>
      <name>motions_</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>a2dae375c8acee6abbcc231fcaf239058</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::control::PDST::Motion</name>
    <filename>structompl_1_1control_1_1PDST_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Motion.html</anchorfile>
      <anchor>ac160ee1d6399114cd80772bd49dc0f1f</anchor>
      <arglist>(base::State *state)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>score</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Motion.html</anchorfile>
      <anchor>a07bd26fefd9ab85a436f4cdfadcbff16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>startState_</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Motion.html</anchorfile>
      <anchor>a33824f2aa2476bcffc2dad6dafd19827</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>endState_</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Motion.html</anchorfile>
      <anchor>a86924a606bc657930610b4f97ca37925</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>control::Control *</type>
      <name>control_</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Motion.html</anchorfile>
      <anchor>aa98d81ae1038695da52fce6e987eb401</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>controlDuration_</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Motion.html</anchorfile>
      <anchor>afefe572cd9f43f1598c361b84104a654</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>priority_</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Motion.html</anchorfile>
      <anchor>aa00ec3d3728b2d12b5fcda1ea1267280</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent_</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Motion.html</anchorfile>
      <anchor>a0322a2e03780ee2b1d1aac32b1deaa81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Cell *</type>
      <name>cell_</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Motion.html</anchorfile>
      <anchor>a9bc738ede1dada52205853232a240aa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BinaryHeap&lt; Motion *, MotionCompare &gt;::Element *</type>
      <name>heapElement_</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Motion.html</anchorfile>
      <anchor>a5c59b6b22de96263fbf6cc89a9fa6d85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isSplit_</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1Motion.html</anchorfile>
      <anchor>a662f84767c6a621443e16b9ef2c2b44d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::control::PDST::MotionCompare</name>
    <filename>structompl_1_1control_1_1PDST_1_1MotionCompare.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structompl_1_1control_1_1PDST_1_1MotionCompare.html</anchorfile>
      <anchor>aa4105a16add2b468c890c5f0555aedff</anchor>
      <arglist>(Motion *p1, Motion *p2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::PlannerData</name>
    <filename>classompl_1_1control_1_1PlannerData.html</filename>
    <base>ompl::base::PlannerData</base>
    <member kind="function">
      <type></type>
      <name>PlannerData</name>
      <anchorfile>classompl_1_1control_1_1PlannerData.html</anchorfile>
      <anchor>a5dd9ed6679f6be99a8dac9bb8b518f0a</anchor>
      <arglist>(const SpaceInformationPtr &amp;siC)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PlannerData</name>
      <anchorfile>classompl_1_1control_1_1PlannerData.html</anchorfile>
      <anchor>aa70e81a977868ed6b45fd395001cd348</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeVertex</name>
      <anchorfile>classompl_1_1control_1_1PlannerData.html</anchorfile>
      <anchor>afd481092533a5e35bc6bf2d2f342a093</anchor>
      <arglist>(const base::PlannerDataVertex &amp;st)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeVertex</name>
      <anchorfile>classompl_1_1control_1_1PlannerData.html</anchorfile>
      <anchor>a9b987728a1cfbde72585561f0b587bb5</anchor>
      <arglist>(unsigned int vIndex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeEdge</name>
      <anchorfile>classompl_1_1control_1_1PlannerData.html</anchorfile>
      <anchor>a930e6622356bc6d57f528d3543706d59</anchor>
      <arglist>(unsigned int v1, unsigned int v2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeEdge</name>
      <anchorfile>classompl_1_1control_1_1PlannerData.html</anchorfile>
      <anchor>ae5ff7c42d1f52a38fa08eb6cdc450b0a</anchor>
      <arglist>(const base::PlannerDataVertex &amp;v1, const base::PlannerDataVertex &amp;v2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1control_1_1PlannerData.html</anchorfile>
      <anchor>ad938b301284290f18b47c2a46fb8667e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>decoupleFromPlanner</name>
      <anchorfile>classompl_1_1control_1_1PlannerData.html</anchorfile>
      <anchor>a5b2979d822c9fa21ed3d294cadfde2a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SpaceInformationPtr &amp;</type>
      <name>getSpaceInformation</name>
      <anchorfile>classompl_1_1control_1_1PlannerData.html</anchorfile>
      <anchor>ae5d14d5023c7087fbcb59505a13b4ea0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasControls</name>
      <anchorfile>classompl_1_1control_1_1PlannerData.html</anchorfile>
      <anchor>a24b9599c3098f897641f40eb5aefaa49</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SpaceInformationPtr</type>
      <name>siC_</name>
      <anchorfile>classompl_1_1control_1_1PlannerData.html</anchorfile>
      <anchor>af2c137590e2a049d47723ae5388d5a6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; Control * &gt;</type>
      <name>decoupledControls_</name>
      <anchorfile>classompl_1_1control_1_1PlannerData.html</anchorfile>
      <anchor>aeea902a2032ac410c3a5150fa4911e28</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::PlannerDataEdgeControl</name>
    <filename>classompl_1_1control_1_1PlannerDataEdgeControl.html</filename>
    <base>ompl::base::PlannerDataEdge</base>
    <member kind="function">
      <type></type>
      <name>PlannerDataEdgeControl</name>
      <anchorfile>classompl_1_1control_1_1PlannerDataEdgeControl.html</anchorfile>
      <anchor>aeed9d3f69fcc19bf7007f6752895108b</anchor>
      <arglist>(const Control *c, double duration)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PlannerDataEdgeControl</name>
      <anchorfile>classompl_1_1control_1_1PlannerDataEdgeControl.html</anchorfile>
      <anchor>ae6be83c08cb60bbdff9ac5f62f43d2d9</anchor>
      <arglist>(const PlannerDataEdgeControl &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerDataEdge *</type>
      <name>clone</name>
      <anchorfile>classompl_1_1control_1_1PlannerDataEdgeControl.html</anchorfile>
      <anchor>afe5ac38707c39450609f7511116cdc26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Control *</type>
      <name>getControl</name>
      <anchorfile>classompl_1_1control_1_1PlannerDataEdgeControl.html</anchorfile>
      <anchor>ab6b99b1bd225433708cb226c8546f6ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDuration</name>
      <anchorfile>classompl_1_1control_1_1PlannerDataEdgeControl.html</anchorfile>
      <anchor>ad3fa3797730d9760ca74049d3a678bd4</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::PlannerDataStorage</name>
    <filename>classompl_1_1control_1_1PlannerDataStorage.html</filename>
    <base>ompl::base::PlannerDataStorage</base>
    <member kind="function">
      <type></type>
      <name>PlannerDataStorage</name>
      <anchorfile>classompl_1_1control_1_1PlannerDataStorage.html</anchorfile>
      <anchor>a4af6758476497b41d86abd25107a59f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PlannerDataStorage</name>
      <anchorfile>classompl_1_1control_1_1PlannerDataStorage.html</anchorfile>
      <anchor>ac9977783f4b8bf37a0f632de68398667</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>load</name>
      <anchorfile>classompl_1_1control_1_1PlannerDataStorage.html</anchorfile>
      <anchor>a51a10cac176302fe17f9b32f7714f1a3</anchor>
      <arglist>(const char *filename, base::PlannerData &amp;pd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>load</name>
      <anchorfile>classompl_1_1control_1_1PlannerDataStorage.html</anchorfile>
      <anchor>af98e07ee75a81c914d8ad552a0ad8e27</anchor>
      <arglist>(std::istream &amp;in, base::PlannerData &amp;pd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>store</name>
      <anchorfile>classompl_1_1control_1_1PlannerDataStorage.html</anchorfile>
      <anchor>aadc92e3052e3450f790db0f94038772e</anchor>
      <arglist>(const base::PlannerData &amp;pd, const char *filename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>store</name>
      <anchorfile>classompl_1_1control_1_1PlannerDataStorage.html</anchorfile>
      <anchor>a5a5f39ebadb7c1b80f5339879b7693d6</anchor>
      <arglist>(const base::PlannerData &amp;pd, std::ostream &amp;out)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>loadEdges</name>
      <anchorfile>classompl_1_1control_1_1PlannerDataStorage.html</anchorfile>
      <anchor>a50f0c57d301f529abb13ed9eb76c1e16</anchor>
      <arglist>(base::PlannerData &amp;pd, unsigned int numEdges, boost::archive::binary_iarchive &amp;ia)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>storeEdges</name>
      <anchorfile>classompl_1_1control_1_1PlannerDataStorage.html</anchorfile>
      <anchor>a8567856a4f7d9918bc03e4a5d8681fb2</anchor>
      <arglist>(const base::PlannerData &amp;pd, boost::archive::binary_oarchive &amp;oa)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::ProductGraph</name>
    <filename>classompl_1_1control_1_1ProductGraph.html</filename>
    <class kind="struct">ompl::control::ProductGraph::Edge</class>
    <class kind="class">ompl::control::ProductGraph::State</class>
    <member kind="function">
      <type></type>
      <name>ProductGraph</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph.html</anchorfile>
      <anchor>ac5831b0fa221896814ce6975da0e1484</anchor>
      <arglist>(const PropositionalDecompositionPtr &amp;decomp, const AutomatonPtr &amp;cosafetyAut, const AutomatonPtr &amp;safetyAut)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProductGraph</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph.html</anchorfile>
      <anchor>aa5aa6d6f7c361fcb42b01d309f810c2c</anchor>
      <arglist>(const PropositionalDecompositionPtr &amp;decomp, const AutomatonPtr &amp;cosafetyAut)</arglist>
    </member>
    <member kind="function">
      <type>const PropositionalDecompositionPtr &amp;</type>
      <name>getDecomp</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph.html</anchorfile>
      <anchor>ab2620a0675938c501741fbc14c695219</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const AutomatonPtr &amp;</type>
      <name>getCosafetyAutom</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph.html</anchorfile>
      <anchor>ae965387df4f868edb1ba231d87831b0c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const AutomatonPtr &amp;</type>
      <name>getSafetyAutom</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph.html</anchorfile>
      <anchor>a266a0e0216c3ef44ae7544a4c32aed87</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; State * &gt;</type>
      <name>computeLead</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph.html</anchorfile>
      <anchor>a8c6576d2e291931b783e690d97f73ba2</anchor>
      <arglist>(State *start, const std::function&lt; double(State *, State *)&gt; &amp;edgeWeight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph.html</anchorfile>
      <anchor>a9e91325fc18add6f8e4032a4811613e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildGraph</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph.html</anchorfile>
      <anchor>ad4576a35e3089da64262abdc550a064c</anchor>
      <arglist>(State *start, const std::function&lt; void(State *)&gt; &amp;initialize=ProductGraph::noInit)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSolution</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph.html</anchorfile>
      <anchor>ac1ad4de71d53c40d48ba5e99272e414c</anchor>
      <arglist>(const State *s) const </arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>getStartState</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph.html</anchorfile>
      <anchor>a02969262c220ff3133862c95e5c84220</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRegionVolume</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph.html</anchorfile>
      <anchor>ad400ea5e4bb4fb47ad0c5fc63c49650b</anchor>
      <arglist>(const State *s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCosafeAutDistance</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph.html</anchorfile>
      <anchor>ae87651947d453ab41660de3b3bb53339</anchor>
      <arglist>(const State *s) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSafeAutDistance</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph.html</anchorfile>
      <anchor>ae3aa6b84697f2d1a31725bb47c28d76a</anchor>
      <arglist>(const State *s) const </arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph.html</anchorfile>
      <anchor>a22530618a80481fa69376693d5aa6312</anchor>
      <arglist>(const base::State *cs) const </arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph.html</anchorfile>
      <anchor>a5b80ab5028a52678401f424820772d14</anchor>
      <arglist>(const base::State *cs, int cosafe, int safe) const </arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph.html</anchorfile>
      <anchor>a1dd3f352627f80b2e290bbdd8ca7fc37</anchor>
      <arglist>(const State *parent, int nextRegion) const </arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph.html</anchorfile>
      <anchor>a2ddf1ef65815bd29158b9304f40f0f9f</anchor>
      <arglist>(const State *parent, const base::State *cs) const </arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph.html</anchorfile>
      <anchor>a1a9f4d7fab33076885751eb31f5f8185</anchor>
      <arglist>(int region, int cosafe, int safe) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::control::ProductGraph::Edge</name>
    <filename>structompl_1_1control_1_1ProductGraph_1_1Edge.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::control::ProductGraph::State</name>
    <filename>classompl_1_1control_1_1ProductGraph_1_1State.html</filename>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph_1_1State.html</anchorfile>
      <anchor>a329806469c64c9a5270745fafa033990</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph_1_1State.html</anchorfile>
      <anchor>a3304796ae2b27b76305a6a9bc4230cfe</anchor>
      <arglist>(const State &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph_1_1State.html</anchorfile>
      <anchor>a9e81474218ab2589bf380506572b4845</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph_1_1State.html</anchorfile>
      <anchor>aecc7fc9a859268a5acf538e671ff63e3</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDecompRegion</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph_1_1State.html</anchorfile>
      <anchor>a5cb1aad9efbeef66c328d8e15f5f378f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCosafeState</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph_1_1State.html</anchorfile>
      <anchor>a53d7ef8a12975e6e365f3a679dff21d6</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSafeState</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph_1_1State.html</anchorfile>
      <anchor>ae1e45ebb689ef91205bd75752d557fa9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classompl_1_1control_1_1ProductGraph_1_1State.html</anchorfile>
      <anchor>a5878285c4952d0c8073c5b27c4e2ce1d</anchor>
      <arglist>(std::ostream &amp;out, const State &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::ProductGraphPtr</name>
    <filename>classompl_1_1control_1_1ProductGraphPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::control::PropositionalDecomposition</name>
    <filename>classompl_1_1control_1_1PropositionalDecomposition.html</filename>
    <base>ompl::control::Decomposition</base>
    <member kind="function">
      <type></type>
      <name>PropositionalDecomposition</name>
      <anchorfile>classompl_1_1control_1_1PropositionalDecomposition.html</anchorfile>
      <anchor>afa093aaa37411f45a03da31c751ea841</anchor>
      <arglist>(const DecompositionPtr &amp;decomp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PropositionalDecomposition</name>
      <anchorfile>classompl_1_1control_1_1PropositionalDecomposition.html</anchorfile>
      <anchor>a3c29d4fd46849b2238f12d52d3d484ef</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual World</type>
      <name>worldAtRegion</name>
      <anchorfile>classompl_1_1control_1_1PropositionalDecomposition.html</anchorfile>
      <anchor>aab6a90b0083de432493948f8ce6d01fe</anchor>
      <arglist>(int rid)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumRegions</name>
      <anchorfile>classompl_1_1control_1_1PropositionalDecomposition.html</anchorfile>
      <anchor>a17083459e95d9bf1c964cd1555bdf018</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumProps</name>
      <anchorfile>classompl_1_1control_1_1PropositionalDecomposition.html</anchorfile>
      <anchor>ae126584bf87a612ea427ce3286d8ce5b</anchor>
      <arglist>(void) const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getRegionVolume</name>
      <anchorfile>classompl_1_1control_1_1PropositionalDecomposition.html</anchorfile>
      <anchor>a99369ab45e8c324826086fe88c4b992e</anchor>
      <arglist>(int rid)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>locateRegion</name>
      <anchorfile>classompl_1_1control_1_1PropositionalDecomposition.html</anchorfile>
      <anchor>a31ba9b15cd7c272c6fa1ad764aebf6ba</anchor>
      <arglist>(const base::State *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>project</name>
      <anchorfile>classompl_1_1control_1_1PropositionalDecomposition.html</anchorfile>
      <anchor>a7df7816dadebd955cc6b925274697125</anchor>
      <arglist>(const base::State *s, std::vector&lt; double &gt; &amp;coord) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getNeighbors</name>
      <anchorfile>classompl_1_1control_1_1PropositionalDecomposition.html</anchorfile>
      <anchor>a961ae5b738cb2ac8a2375ab5cd273d26</anchor>
      <arglist>(int rid, std::vector&lt; int &gt; &amp;neighbors) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleFromRegion</name>
      <anchorfile>classompl_1_1control_1_1PropositionalDecomposition.html</anchorfile>
      <anchor>a87cd72af3d2322a4be55d49aaea2df21</anchor>
      <arglist>(int rid, RNG &amp;rng, std::vector&lt; double &gt; &amp;coord) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleFullState</name>
      <anchorfile>classompl_1_1control_1_1PropositionalDecomposition.html</anchorfile>
      <anchor>aacac6cfddb99f500bd92706ae4c89794</anchor>
      <arglist>(const base::StateSamplerPtr &amp;sampler, const std::vector&lt; double &gt; &amp;coord, base::State *s) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::PropositionalDecompositionPtr</name>
    <filename>classompl_1_1control_1_1PropositionalDecompositionPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::control::PropositionalTriangularDecomposition</name>
    <filename>classompl_1_1control_1_1PropositionalTriangularDecomposition.html</filename>
    <base>ompl::control::PropositionalDecomposition</base>
    <member kind="function">
      <type></type>
      <name>PropositionalTriangularDecomposition</name>
      <anchorfile>classompl_1_1control_1_1PropositionalTriangularDecomposition.html</anchorfile>
      <anchor>a9feaa5b7c2db2428b79e4ff3a80a0691</anchor>
      <arglist>(const base::RealVectorBounds &amp;bounds, const std::vector&lt; Polygon &gt; &amp;holes=std::vector&lt; Polygon &gt;(), const std::vector&lt; Polygon &gt; &amp;props=std::vector&lt; Polygon &gt;())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumProps</name>
      <anchorfile>classompl_1_1control_1_1PropositionalTriangularDecomposition.html</anchorfile>
      <anchor>a4c818e88422ecf0b88c38e403f5f9208</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual World</type>
      <name>worldAtRegion</name>
      <anchorfile>classompl_1_1control_1_1PropositionalTriangularDecomposition.html</anchorfile>
      <anchor>afd7c0b582940a746c28776926408cad4</anchor>
      <arglist>(int triID)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::RealVectorControlSpace</name>
    <filename>classompl_1_1control_1_1RealVectorControlSpace.html</filename>
    <base>ompl::control::ControlSpace</base>
    <class kind="class">ompl::control::RealVectorControlSpace::ControlType</class>
    <member kind="function">
      <type></type>
      <name>RealVectorControlSpace</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace.html</anchorfile>
      <anchor>a0bacd31455e2745eb5efd291210482a8</anchor>
      <arglist>(const base::StateSpacePtr &amp;stateSpace, unsigned int dim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBounds</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace.html</anchorfile>
      <anchor>ab21eee94cc69d207ab578b69a423660c</anchor>
      <arglist>(const base::RealVectorBounds &amp;bounds)</arglist>
    </member>
    <member kind="function">
      <type>const base::RealVectorBounds &amp;</type>
      <name>getBounds</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace.html</anchorfile>
      <anchor>a095178f210d21af4353b83bb6dba998a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace.html</anchorfile>
      <anchor>a026dcda27a1221df0b36d58bbd264de2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyControl</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace.html</anchorfile>
      <anchor>a4ab9e55d9332c2e6609f706ab90e3676</anchor>
      <arglist>(Control *destination, const Control *source) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equalControls</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace.html</anchorfile>
      <anchor>a44f0c2bff20cc1704f4c66a975339340</anchor>
      <arglist>(const Control *control1, const Control *control2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ControlSamplerPtr</type>
      <name>allocDefaultControlSampler</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace.html</anchorfile>
      <anchor>ac787d13b8594bc076a07e35b98b80d4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Control *</type>
      <name>allocControl</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace.html</anchorfile>
      <anchor>a7f3bc5e9bfea1ebc34c5a90ae890ed72</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>freeControl</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace.html</anchorfile>
      <anchor>a700733ab5a157781fee992511ffd6d91</anchor>
      <arglist>(Control *control) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>nullControl</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace.html</anchorfile>
      <anchor>aa4d4f0c7d37c7a7118cd2bee1ed4f435</anchor>
      <arglist>(Control *control) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printControl</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace.html</anchorfile>
      <anchor>ab5ed085564053a3ac9acb4f31eacef65</anchor>
      <arglist>(const Control *control, std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double *</type>
      <name>getValueAddressAtIndex</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace.html</anchorfile>
      <anchor>ad0404c9dabcb7b26ebfc241855d0b40c</anchor>
      <arglist>(Control *control, const unsigned int index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printSettings</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace.html</anchorfile>
      <anchor>a328ae638e5b1fc2103eaf47231f0bf4d</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace.html</anchorfile>
      <anchor>ada2b7e629f28df3c6758166f1e3e4213</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getSerializationLength</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace.html</anchorfile>
      <anchor>a4536f460b7451c3edc89d8a729f66571</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace.html</anchorfile>
      <anchor>aa1737030281d2629608ec63eef6a6119</anchor>
      <arglist>(void *serialization, const Control *ctrl) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deserialize</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace.html</anchorfile>
      <anchor>ad932a41cbf8a7ec68318dde1598da34b</anchor>
      <arglist>(Control *ctrl, const void *serialization) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>dimension_</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace.html</anchorfile>
      <anchor>a176e9568fbe1c7fd557e8890360d7be9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::RealVectorBounds</type>
      <name>bounds_</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace.html</anchorfile>
      <anchor>aa2f518294c75aab253d63237605bf9ff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::RealVectorControlSpace::ControlType</name>
    <filename>classompl_1_1control_1_1RealVectorControlSpace_1_1ControlType.html</filename>
    <base>ompl::control::Control</base>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace_1_1ControlType.html</anchorfile>
      <anchor>addeef667a043cfd3063d36b505e1f32f</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace_1_1ControlType.html</anchorfile>
      <anchor>a8a63cc6084f77a7a531bf52981f541ba</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="variable">
      <type>double *</type>
      <name>values</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlSpace_1_1ControlType.html</anchorfile>
      <anchor>a86ad53793fd0661faf0732f1cc5de9bd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::RealVectorControlUniformSampler</name>
    <filename>classompl_1_1control_1_1RealVectorControlUniformSampler.html</filename>
    <base>ompl::control::ControlSampler</base>
    <member kind="function">
      <type></type>
      <name>RealVectorControlUniformSampler</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlUniformSampler.html</anchorfile>
      <anchor>a048a5763d24a5bddbf7ad4692ff1b17a</anchor>
      <arglist>(const ControlSpace *space)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sample</name>
      <anchorfile>classompl_1_1control_1_1RealVectorControlUniformSampler.html</anchorfile>
      <anchor>af059b0c034fc7b8fa7cf63c980bfce2b</anchor>
      <arglist>(Control *control)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::RRT</name>
    <filename>classompl_1_1control_1_1RRT.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::control::RRT::Motion</class>
    <member kind="function">
      <type></type>
      <name>RRT</name>
      <anchorfile>classompl_1_1control_1_1RRT.html</anchorfile>
      <anchor>ad74aa3374c2a2ecbf29eb9462a229e19</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1control_1_1RRT.html</anchorfile>
      <anchor>a139a96f610d2b0e43d915999a653312c</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1control_1_1RRT.html</anchorfile>
      <anchor>ae8351f5eb6a4d2212f2b041e677a932c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalBias</name>
      <anchorfile>classompl_1_1control_1_1RRT.html</anchorfile>
      <anchor>a068bcfdd1b0ec3ea9d1a4923610496e5</anchor>
      <arglist>(double goalBias)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoalBias</name>
      <anchorfile>classompl_1_1control_1_1RRT.html</anchorfile>
      <anchor>a75ae4809e8cce136337388c4cc0ef2f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIntermediateStates</name>
      <anchorfile>classompl_1_1control_1_1RRT.html</anchorfile>
      <anchor>a392fd68e244f841692e4c1216da60464</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIntermediateStates</name>
      <anchorfile>classompl_1_1control_1_1RRT.html</anchorfile>
      <anchor>a71a3f8ae7ca8cf9e60000f59d71b7296</anchor>
      <arglist>(bool addIntermediateStates)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1control_1_1RRT.html</anchorfile>
      <anchor>ae4ab6aef66f85778dc068e49b28b8d87</anchor>
      <arglist>(base::PlannerData &amp;data) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>classompl_1_1control_1_1RRT.html</anchorfile>
      <anchor>a69b6ff9eca9409574fc064561a2f900f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1control_1_1RRT.html</anchorfile>
      <anchor>a05351745d46711c0fd5f1ef2581711bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1control_1_1RRT.html</anchorfile>
      <anchor>a55a6e3390306cbf5b0c08efdf592351d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1control_1_1RRT.html</anchorfile>
      <anchor>a9d4653fbaca57fae63d91510efdc3411</anchor>
      <arglist>(const Motion *a, const Motion *b) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1control_1_1RRT.html</anchorfile>
      <anchor>ace2d0aba3b22399f36e0af8f7ec80f5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DirectedControlSamplerPtr</type>
      <name>controlSampler_</name>
      <anchorfile>classompl_1_1control_1_1RRT.html</anchorfile>
      <anchor>ad81d866c035b1fb7ef8e2255545c13ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const SpaceInformation *</type>
      <name>siC_</name>
      <anchorfile>classompl_1_1control_1_1RRT.html</anchorfile>
      <anchor>a61945ccf4115deee7b71a3c680d5dfc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Motion * &gt; &gt;</type>
      <name>nn_</name>
      <anchorfile>classompl_1_1control_1_1RRT.html</anchorfile>
      <anchor>ad446f2c6d322ee9a0b200eaedc5a34e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>goalBias_</name>
      <anchorfile>classompl_1_1control_1_1RRT.html</anchorfile>
      <anchor>a40bc23cf94258f44dfe9abc572504443</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>addIntermediateStates_</name>
      <anchorfile>classompl_1_1control_1_1RRT.html</anchorfile>
      <anchor>a8cc1cc939a5aaf64e0b92a5844f5109b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1control_1_1RRT.html</anchorfile>
      <anchor>a0373aa7c0340db91bfdfdcc2551a97a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>lastGoalMotion_</name>
      <anchorfile>classompl_1_1control_1_1RRT.html</anchorfile>
      <anchor>ad4393ce358725ccef7bc36dcff860deb</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1control_1_1RRT">cRRT</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::control::RRT::Motion</name>
    <filename>classompl_1_1control_1_1RRT_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1control_1_1RRT_1_1Motion.html</anchorfile>
      <anchor>a6ddfa22cb20652db133e3429987ce5a4</anchor>
      <arglist>(const SpaceInformation *si)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state</name>
      <anchorfile>classompl_1_1control_1_1RRT_1_1Motion.html</anchorfile>
      <anchor>a98d79745792b9b98a9a4b61cc75ca57a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Control *</type>
      <name>control</name>
      <anchorfile>classompl_1_1control_1_1RRT_1_1Motion.html</anchorfile>
      <anchor>ac6d68ad5b0174b36493d0c3e32b7614c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>steps</name>
      <anchorfile>classompl_1_1control_1_1RRT_1_1Motion.html</anchorfile>
      <anchor>a8ca8aef83495822505a83ef5d047404b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent</name>
      <anchorfile>classompl_1_1control_1_1RRT_1_1Motion.html</anchorfile>
      <anchor>af00f73a35b1000529fbd1aea6a52385d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::SimpleDirectedControlSampler</name>
    <filename>classompl_1_1control_1_1SimpleDirectedControlSampler.html</filename>
    <base>ompl::control::DirectedControlSampler</base>
    <member kind="function">
      <type></type>
      <name>SimpleDirectedControlSampler</name>
      <anchorfile>classompl_1_1control_1_1SimpleDirectedControlSampler.html</anchorfile>
      <anchor>a5b67a4e8d9b43241bc1418681fcd9879</anchor>
      <arglist>(const SpaceInformation *si, unsigned int k=1)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumControlSamples</name>
      <anchorfile>classompl_1_1control_1_1SimpleDirectedControlSampler.html</anchorfile>
      <anchor>a5ceebb690a3ad1d378dee5b366274b11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumControlSamples</name>
      <anchorfile>classompl_1_1control_1_1SimpleDirectedControlSampler.html</anchorfile>
      <anchor>a0d3759b6a290d2aa7fc88ccde3f0c301</anchor>
      <arglist>(unsigned int numSamples)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>sampleTo</name>
      <anchorfile>classompl_1_1control_1_1SimpleDirectedControlSampler.html</anchorfile>
      <anchor>aab3b5c7a5a7fb8fc870aa8e8d76f2c37</anchor>
      <arglist>(Control *control, const base::State *source, base::State *dest)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>sampleTo</name>
      <anchorfile>classompl_1_1control_1_1SimpleDirectedControlSampler.html</anchorfile>
      <anchor>ae8ed1570d01d1f47b5e989d7cffc5595</anchor>
      <arglist>(Control *control, const Control *previous, const base::State *source, base::State *dest)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>getBestControl</name>
      <anchorfile>classompl_1_1control_1_1SimpleDirectedControlSampler.html</anchorfile>
      <anchor>a5bf8358689565fb91453b0eab2bb1379</anchor>
      <arglist>(Control *control, const base::State *source, base::State *dest, const Control *previous)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ControlSamplerPtr</type>
      <name>cs_</name>
      <anchorfile>classompl_1_1control_1_1SimpleDirectedControlSampler.html</anchorfile>
      <anchor>a7af1eaa764c37a6a49c960d5699d68ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numControlSamples_</name>
      <anchorfile>classompl_1_1control_1_1SimpleDirectedControlSampler.html</anchorfile>
      <anchor>a01d78153fbc4db8a17dcca0fd493bd3f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::SimpleSetup</name>
    <filename>classompl_1_1control_1_1SimpleSetup.html</filename>
    <member kind="function">
      <type></type>
      <name>SimpleSetup</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a94ed2d6cb6cf803c99465db24e4700cf</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleSetup</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>ad6cb6079ac1d67a90ff88fcdd4e1a56d</anchor>
      <arglist>(const ControlSpacePtr &amp;space)</arglist>
    </member>
    <member kind="function">
      <type>const SpaceInformationPtr &amp;</type>
      <name>getSpaceInformation</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>afc11a6be8ad5381bba2760fae842e203</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const base::ProblemDefinitionPtr &amp;</type>
      <name>getProblemDefinition</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a2ee4719a6eefff114545baa854a5c22b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const base::StateSpacePtr &amp;</type>
      <name>getStateSpace</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>ae7575569547d0c9b9a72fe87de9fe6da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ControlSpacePtr &amp;</type>
      <name>getControlSpace</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>aa82bb72b7f81fe639ccdb7c70e93a8a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const base::StateValidityCheckerPtr &amp;</type>
      <name>getStateValidityChecker</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a5ac82af771c036dcb00ce955852b2014</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const StatePropagatorPtr &amp;</type>
      <name>getStatePropagator</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a7e84a72428d216323fe184cc6405e88f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const base::GoalPtr &amp;</type>
      <name>getGoal</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a5a1ab40024ccf4b7597f7eabada52f70</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const base::PlannerPtr &amp;</type>
      <name>getPlanner</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a30240d92ba999a65575774765cfee64d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const base::PlannerAllocator &amp;</type>
      <name>getPlannerAllocator</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>acb67c0c3ac73922c7aaaafaa6930aeec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveExactSolutionPath</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a1a04eedbbb30d559588327d72e27cd5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveSolutionPath</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>af1d6407ee0c906417c66fc05808df889</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PathControl &amp;</type>
      <name>getSolutionPath</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>ad5bbd8e17d1bf5c4cb2aac8cdd0f1e13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>ad6e058eee4716949f7e6b81e683a3c73</anchor>
      <arglist>(base::PlannerData &amp;pd) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateValidityChecker</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a83836265f90c0d650edcb72610e4f690</anchor>
      <arglist>(const base::StateValidityCheckerPtr &amp;svc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateValidityChecker</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a415e21e0b3a793a880b4c297c92599eb</anchor>
      <arglist>(const base::StateValidityCheckerFn &amp;svc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStatePropagator</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>ac43f41929f8bed01e61ef9b8d3ad7aed</anchor>
      <arglist>(const StatePropagatorFn &amp;sp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStatePropagator</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a55dec29f164862b0493b8981439506e9</anchor>
      <arglist>(const StatePropagatorPtr &amp;sp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOptimizationObjective</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>ae2d01ad209900cfc51e47028fcfbecfa</anchor>
      <arglist>(const base::OptimizationObjectivePtr &amp;optimizationObjective)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartAndGoalStates</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a9ad38c8d4fa369fb8adb82e07840d81c</anchor>
      <arglist>(const base::ScopedState&lt;&gt; &amp;start, const base::ScopedState&lt;&gt; &amp;goal, const double threshold=std::numeric_limits&lt; double &gt;::epsilon())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalState</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a4fbdf2637f503a03e39bbc7ab637b687</anchor>
      <arglist>(const base::ScopedState&lt;&gt; &amp;goal, const double threshold=std::numeric_limits&lt; double &gt;::epsilon())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addStartState</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a10cbfb4aff914e9c7ec71f4e1e2cf546</anchor>
      <arglist>(const base::ScopedState&lt;&gt; &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearStartStates</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>ad20714e7d402f4a502fb138551b71329</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartState</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a310f28cce26733d75f9388a5026a6382</anchor>
      <arglist>(const base::ScopedState&lt;&gt; &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoal</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>ac72f0ae91f54d455afb385f770870091</anchor>
      <arglist>(const base::GoalPtr &amp;goal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlanner</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a09bcf889f9bf5d96fbc0c995535e4706</anchor>
      <arglist>(const base::PlannerPtr &amp;planner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlannerAllocator</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>aad0b69f028201b65bac027ba080146aa</anchor>
      <arglist>(const base::PlannerAllocator &amp;pa)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a96856d1bd7c75108d1c27cdf34f6c49a</anchor>
      <arglist>(double time=1.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a974cb6f913b00429704a57b139274e8b</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>getLastPlannerStatus</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>adb8bca1ce27f0396e3b9a96bc6f914f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLastPlanComputationTime</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a4cb4e9d8332d430010882ffb3ee5996b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>ac8026f3016cf0d9ee7fb503452d09e25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>ac215c0aaffc786d112c88f050cbf4164</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a4b9bf3d60bcebfc794efb3e9463c8fa8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SpaceInformationPtr</type>
      <name>si_</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>ae40aeef5f330422fe81117bf3039df80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ProblemDefinitionPtr</type>
      <name>pdef_</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a0da5fd5aa172bafe9b3c6ec77ec417bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::PlannerPtr</type>
      <name>planner_</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a1c65fbeb69b22217bbfdd3ec4d7afb9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::PlannerAllocator</type>
      <name>pa_</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a1cf42df203befd44e0d27ea0fa697191</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>configured_</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>a07e2cf7b8077d90ae8ce4f6c30a49cd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>planTime_</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>af5402de1220a497b5b1fc901f6452689</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::PlannerStatus</type>
      <name>last_status_</name>
      <anchorfile>classompl_1_1control_1_1SimpleSetup.html</anchorfile>
      <anchor>ab2b7a088e803ffe120be0bb0e2f9d3b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::SimpleSetupPtr</name>
    <filename>classompl_1_1control_1_1SimpleSetupPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::control::SpaceInformation</name>
    <filename>classompl_1_1control_1_1SpaceInformation.html</filename>
    <base>ompl::base::SpaceInformation</base>
    <member kind="function">
      <type></type>
      <name>SpaceInformation</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a5576b718c091e38f3146b0fd5bd626e9</anchor>
      <arglist>(const base::StateSpacePtr &amp;stateSpace, const ControlSpacePtr &amp;controlSpace)</arglist>
    </member>
    <member kind="function">
      <type>const ControlSpacePtr &amp;</type>
      <name>getControlSpace</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a99023c346c1831100dd8f4c8fce12782</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printSettings</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a3d755d5768314b1b0e3a14fc518ddc74</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a410482d4db387ba52a2a748a26518946</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Control *</type>
      <name>allocControl</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a8d00abfe260796867e4541983434d636</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeControl</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a4fd67c06599f1b1968c16dd59215ec2f</anchor>
      <arglist>(Control *control) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyControl</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>ae1b6da74f15ec7514424461faec4fea8</anchor>
      <arglist>(Control *destination, const Control *source) const </arglist>
    </member>
    <member kind="function">
      <type>Control *</type>
      <name>cloneControl</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a6d3fe11e070f517b8f4e6ff35df826b1</anchor>
      <arglist>(const Control *source) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printControl</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a5a3ab67457a94b8076c3d4c30a0c556a</anchor>
      <arglist>(const Control *control, std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalControls</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a1c4d6d9af45d62c1e4c59dcb7a9268d9</anchor>
      <arglist>(const Control *control1, const Control *control2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nullControl</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>aef270014791c0684dc5f8a201ab36d99</anchor>
      <arglist>(Control *control) const </arglist>
    </member>
    <member kind="function">
      <type>ControlSamplerPtr</type>
      <name>allocControlSampler</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>ae170b12631c700360e2a590319208406</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinMaxControlDuration</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>add99716475bc660f87e1e459c0e50e27</anchor>
      <arglist>(unsigned int minSteps, unsigned int maxSteps)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMinControlDuration</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a8d6da990de7e79e8e0f2553d98a7c02a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMaxControlDuration</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>ae53b0738239876d70ec9a293fdde0457</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DirectedControlSamplerPtr</type>
      <name>allocDirectedControlSampler</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a6c5bde4bb856d7632f5cdcf31dab8176</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDirectedControlSamplerAllocator</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>ab70ba4f5a01d80b3ba56b0ad05fd0bd8</anchor>
      <arglist>(const DirectedControlSamplerAllocator &amp;dcsa)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearDirectedSamplerAllocator</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>ad29d60161e2ffd3956c9ee5992a55d38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StatePropagatorPtr &amp;</type>
      <name>getStatePropagator</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>ada6e62321d971414f4fe85e34e2cfe8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStatePropagator</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a701c9be56b69d156708f3f05aa580389</anchor>
      <arglist>(const StatePropagatorFn &amp;fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStatePropagator</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a8c1713628e1d52e2ed74a0c5de6b83a5</anchor>
      <arglist>(const StatePropagatorPtr &amp;sp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPropagationStepSize</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a88a07cf97a3faca60e1b60bf58079cef</anchor>
      <arglist>(double stepSize)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPropagationStepSize</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>abddbc6962e8723002835d1bb2dcd44be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>propagate</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>aaa5d0c18ae3453704bff0bcd7c840094</anchor>
      <arglist>(const base::State *state, const Control *control, int steps, base::State *result) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canPropagateBackward</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a7f3b185ae628603eca794a8320ea4238</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>propagateWhileValid</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a62706721769680c1aafa41aa368406c7</anchor>
      <arglist>(const base::State *state, const Control *control, int steps, base::State *result) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>propagate</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a3d9930ec96f38bc58dbe3ba840f85c46</anchor>
      <arglist>(const base::State *state, const Control *control, int steps, std::vector&lt; base::State * &gt; &amp;result, bool alloc) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>propagateWhileValid</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>af9d37fe9c3b7aefe8a11d3b52ec39c99</anchor>
      <arglist>(const base::State *state, const Control *control, int steps, std::vector&lt; base::State * &gt; &amp;result, bool alloc) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ControlSpacePtr</type>
      <name>controlSpace_</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a8c16336c760f8dc8ce1788b26597e4b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StatePropagatorPtr</type>
      <name>statePropagator_</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>adece5657085df810c3f4383b3ea89120</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>minSteps_</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a3f6e0db4e2931d756e134e7c7cdbb7c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxSteps_</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>ac07df9763e12abc1d0a0a1826076b2c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DirectedControlSamplerAllocator</type>
      <name>dcsa_</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a51855ba14510bace703e73617c47ac2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>stepSize_</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>aee74d445451a7229524f76c0ad2b0ef7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Control *</type>
      <name>allocControl</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a8d00abfe260796867e4541983434d636</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeControl</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a4fd67c06599f1b1968c16dd59215ec2f</anchor>
      <arglist>(Control *control) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyControl</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>ae1b6da74f15ec7514424461faec4fea8</anchor>
      <arglist>(Control *destination, const Control *source) const </arglist>
    </member>
    <member kind="function">
      <type>Control *</type>
      <name>cloneControl</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a6d3fe11e070f517b8f4e6ff35df826b1</anchor>
      <arglist>(const Control *source) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printControl</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a5a3ab67457a94b8076c3d4c30a0c556a</anchor>
      <arglist>(const Control *control, std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalControls</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a1c4d6d9af45d62c1e4c59dcb7a9268d9</anchor>
      <arglist>(const Control *control1, const Control *control2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nullControl</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>aef270014791c0684dc5f8a201ab36d99</anchor>
      <arglist>(Control *control) const </arglist>
    </member>
    <member kind="function">
      <type>ControlSamplerPtr</type>
      <name>allocControlSampler</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>ae170b12631c700360e2a590319208406</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinMaxControlDuration</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>add99716475bc660f87e1e459c0e50e27</anchor>
      <arglist>(unsigned int minSteps, unsigned int maxSteps)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMinControlDuration</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a8d6da990de7e79e8e0f2553d98a7c02a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMaxControlDuration</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>ae53b0738239876d70ec9a293fdde0457</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DirectedControlSamplerPtr</type>
      <name>allocDirectedControlSampler</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a6c5bde4bb856d7632f5cdcf31dab8176</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDirectedControlSamplerAllocator</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>ab70ba4f5a01d80b3ba56b0ad05fd0bd8</anchor>
      <arglist>(const DirectedControlSamplerAllocator &amp;dcsa)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearDirectedSamplerAllocator</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>ad29d60161e2ffd3956c9ee5992a55d38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StatePropagatorPtr &amp;</type>
      <name>getStatePropagator</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>ada6e62321d971414f4fe85e34e2cfe8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStatePropagator</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a701c9be56b69d156708f3f05aa580389</anchor>
      <arglist>(const StatePropagatorFn &amp;fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStatePropagator</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a8c1713628e1d52e2ed74a0c5de6b83a5</anchor>
      <arglist>(const StatePropagatorPtr &amp;sp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPropagationStepSize</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a88a07cf97a3faca60e1b60bf58079cef</anchor>
      <arglist>(double stepSize)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPropagationStepSize</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>abddbc6962e8723002835d1bb2dcd44be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>propagate</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>aaa5d0c18ae3453704bff0bcd7c840094</anchor>
      <arglist>(const base::State *state, const Control *control, int steps, base::State *result) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canPropagateBackward</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a7f3b185ae628603eca794a8320ea4238</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>propagateWhileValid</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a62706721769680c1aafa41aa368406c7</anchor>
      <arglist>(const base::State *state, const Control *control, int steps, base::State *result) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>propagate</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>a3d9930ec96f38bc58dbe3ba840f85c46</anchor>
      <arglist>(const base::State *state, const Control *control, int steps, std::vector&lt; base::State * &gt; &amp;result, bool alloc) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>propagateWhileValid</name>
      <anchorfile>classompl_1_1control_1_1SpaceInformation.html</anchorfile>
      <anchor>af9d37fe9c3b7aefe8a11d3b52ec39c99</anchor>
      <arglist>(const base::State *state, const Control *control, int steps, std::vector&lt; base::State * &gt; &amp;result, bool alloc) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::SpaceInformationPtr</name>
    <filename>classompl_1_1control_1_1SpaceInformationPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::control::SST</name>
    <filename>classompl_1_1control_1_1SST.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::control::SST::Motion</class>
    <class kind="class">ompl::control::SST::Witness</class>
    <member kind="function">
      <type></type>
      <name>SST</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>a48716b0beb7b2959455012adf49918dc</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>ab3030233da6ff9c9cdc74fd6b40bb324</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>a08881c4590225ff88911cad3564b09c2</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>a0a5fa1f2bbbe3f7d20c79023ad1254b8</anchor>
      <arglist>(base::PlannerData &amp;data) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>acd532c5c1551547296370f9dc81e1dc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalBias</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>a101933772a3bd16e4c9861ac354d802c</anchor>
      <arglist>(double goalBias)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoalBias</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>afd153fd896b83c899b6a9046e7330d7d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSelectionRadius</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>a1977e33638fede3ccca649cb611fed3f</anchor>
      <arglist>(double selectionRadius)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSelectionRadius</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>ae9f7b8e217f499cd51298a8787180692</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPruningRadius</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>ad66558f8fc3d755062ff4cf2fc6c09e1</anchor>
      <arglist>(double pruningRadius)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPruningRadius</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>a81a4239ea2d3002237c76c4ee1b54575</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>ad496ff4d4c1f9ca50c10ed0a16121d8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Motion *</type>
      <name>selectNode</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>a99c97b6a3f93616e25bd80334f3a10a2</anchor>
      <arglist>(Motion *sample)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Witness *</type>
      <name>findClosestWitness</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>afa4ac6e3905ce0469fd746195f1ab30b</anchor>
      <arglist>(Motion *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>a6c303ab5767fe4ea7597905b13c8e575</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>a9032f2163a6cc8bd0d07176979f10dc5</anchor>
      <arglist>(const Motion *a, const Motion *b) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>a3c0400c77a95e1ee6cfbe6b77a2746d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ControlSamplerPtr</type>
      <name>controlSampler_</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>a0ac4c4841497b25d444567ba136c5e2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const SpaceInformation *</type>
      <name>siC_</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>a934475e7a99052ba16b0df40a347b3d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Motion * &gt; &gt;</type>
      <name>nn_</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>a593becaa0ee2c299fac974b68512a955</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Motion * &gt; &gt;</type>
      <name>witnesses_</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>ad8158bf43fa4664c47d813c30fddc2d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>goalBias_</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>a8fa28ef1145df8ae7c4db706638d8fe3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>selectionRadius_</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>a6e9dafb48ffb89d03a7bbcf8fb50f6ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>pruningRadius_</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>a72e1337d7b42cade044bbfb1c3f9accf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>a105f98e9ee8b39a1199c49483555bf7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; base::State * &gt;</type>
      <name>prevSolution_</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>a0df869c7be8567453f869fa4f7402bb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::Cost</type>
      <name>prevSolutionCost_</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>a80dc72f2a643e07afb446d79ae38459b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::OptimizationObjectivePtr</type>
      <name>opt_</name>
      <anchorfile>classompl_1_1control_1_1SST.html</anchorfile>
      <anchor>ab60239e1980a6e3d0537894389fb8eb5</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1control_1_1SST">cSST</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::control::SST::Motion</name>
    <filename>classompl_1_1control_1_1SST_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1control_1_1SST_1_1Motion.html</anchorfile>
      <anchor>ab731029e9900e2b9043660b4e23cac56</anchor>
      <arglist>(const SpaceInformation *si)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state_</name>
      <anchorfile>classompl_1_1control_1_1SST_1_1Motion.html</anchorfile>
      <anchor>a076543633f5d3f6ef9fdc7cf63fe2df9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Control *</type>
      <name>control_</name>
      <anchorfile>classompl_1_1control_1_1SST_1_1Motion.html</anchorfile>
      <anchor>acbcc72d714fe1bfdb8cdb90096e4dd8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>steps_</name>
      <anchorfile>classompl_1_1control_1_1SST_1_1Motion.html</anchorfile>
      <anchor>aecc14346ec30552bd2292b3aee462b02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent_</name>
      <anchorfile>classompl_1_1control_1_1SST_1_1Motion.html</anchorfile>
      <anchor>af22f9b1736958e8050ee482e94d8159d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>numChildren_</name>
      <anchorfile>classompl_1_1control_1_1SST_1_1Motion.html</anchorfile>
      <anchor>aaa1f00f1960990e86b1a19384794cc35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>inactive_</name>
      <anchorfile>classompl_1_1control_1_1SST_1_1Motion.html</anchorfile>
      <anchor>af238c8dd0e25818084996473e7ddcc6d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::SST::Witness</name>
    <filename>classompl_1_1control_1_1SST_1_1Witness.html</filename>
    <base>ompl::control::SST::Motion</base>
    <member kind="variable">
      <type>Motion *</type>
      <name>rep_</name>
      <anchorfile>classompl_1_1control_1_1SST_1_1Witness.html</anchorfile>
      <anchor>ae071df2832c6a7187239e1191692969d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::StatePropagator</name>
    <filename>classompl_1_1control_1_1StatePropagator.html</filename>
    <member kind="function">
      <type></type>
      <name>StatePropagator</name>
      <anchorfile>classompl_1_1control_1_1StatePropagator.html</anchorfile>
      <anchor>a53dff01b0f6a8fe74591f79eecb5a1b0</anchor>
      <arglist>(SpaceInformation *si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StatePropagator</name>
      <anchorfile>classompl_1_1control_1_1StatePropagator.html</anchorfile>
      <anchor>a983b7f976166c2369c76c2332f585eb9</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>propagate</name>
      <anchorfile>classompl_1_1control_1_1StatePropagator.html</anchorfile>
      <anchor>ae052e057eebbd13471c29a0df42df3fa</anchor>
      <arglist>(const base::State *state, const Control *control, const double duration, base::State *result) const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canPropagateBackward</name>
      <anchorfile>classompl_1_1control_1_1StatePropagator.html</anchorfile>
      <anchor>a8e89560212e2aa7f999ef6ba328327f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>steer</name>
      <anchorfile>classompl_1_1control_1_1StatePropagator.html</anchorfile>
      <anchor>a80f9380eb936f7d1296281178b3f1edf</anchor>
      <arglist>(const base::State *, const base::State *, Control *, double &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canSteer</name>
      <anchorfile>classompl_1_1control_1_1StatePropagator.html</anchorfile>
      <anchor>abb01e231d680cd43638830cba6322f03</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SpaceInformation *</type>
      <name>si_</name>
      <anchorfile>classompl_1_1control_1_1StatePropagator.html</anchorfile>
      <anchor>a4458a51bcf9ee437fc6bb2d23cca40d1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::SteeredControlSampler</name>
    <filename>classompl_1_1control_1_1SteeredControlSampler.html</filename>
    <base>ompl::control::DirectedControlSampler</base>
    <member kind="function">
      <type></type>
      <name>SteeredControlSampler</name>
      <anchorfile>classompl_1_1control_1_1SteeredControlSampler.html</anchorfile>
      <anchor>aef5e606c4cb425c9da8389e9493552c4</anchor>
      <arglist>(const SpaceInformation *si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>sampleTo</name>
      <anchorfile>classompl_1_1control_1_1SteeredControlSampler.html</anchorfile>
      <anchor>abaccf4cf46b136ab8bc1019e20eee7e5</anchor>
      <arglist>(Control *control, const base::State *source, base::State *dest)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>sampleTo</name>
      <anchorfile>classompl_1_1control_1_1SteeredControlSampler.html</anchorfile>
      <anchor>a8de32222f331f15c888b5497312171be</anchor>
      <arglist>(Control *control, const Control *previous, const base::State *source, base::State *dest)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::Syclop</name>
    <filename>classompl_1_1control_1_1Syclop.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::control::Syclop::Adjacency</class>
    <class kind="struct">ompl::control::Syclop::Defaults</class>
    <class kind="class">ompl::control::Syclop::Motion</class>
    <class kind="class">ompl::control::Syclop::Region</class>
    <member kind="typedef">
      <type>std::function&lt; double(int, int)&gt;</type>
      <name>EdgeCostFactorFn</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a3fe284d4cc47007e393f2f1b8ad36582</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(int, int, std::vector&lt; int &gt; &amp;)&gt;</type>
      <name>LeadComputeFn</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>abdb816118ca918d8043d625ef6359cf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Syclop</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a57941756ab4b650dea0b3275f57c4858</anchor>
      <arglist>(const SpaceInformationPtr &amp;si, const DecompositionPtr &amp;d, const std::string &amp;plannerName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a90d3bfaa4dd651fe44f3fba97db560fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>afec9f9685ebdb0ad390528842bacc0a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a8eca01366119415f2352ae7e1b68e94c</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLeadComputeFn</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>aea58c8ca3a6ac54a9ad27b2e2e8ab5d8</anchor>
      <arglist>(const LeadComputeFn &amp;compute)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEdgeCostFactor</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a6bf4663e4fbc674d330ce1b71f88d484</anchor>
      <arglist>(const EdgeCostFactorFn &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearEdgeCostFactors</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a6b50f7c0ccd5c11a31f73f29b7b44a45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumFreeVolumeSamples</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a4dd70116458873839e4bb8ee0676e608</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumFreeVolumeSamples</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a3137638571714face5406a83421c8f0a</anchor>
      <arglist>(int numSamples)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getProbShortestPathLead</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a292f74d866e5ca8b5b1479c72e8c7924</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProbShortestPathLead</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a441ac35fa1923d3c6c78d13d03eeff56</anchor>
      <arglist>(double probability)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getProbAddingToAvailableRegions</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a173e700b402e930ac7ed8dafac0b0043</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProbAddingToAvailableRegions</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>aa7db5af2e525007068bf9d387c980194</anchor>
      <arglist>(double probability)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumRegionExpansions</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>ad5d607bf6f9580cd6e3ad1eb31d21747</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumRegionExpansions</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>aacd3f945a23cf0564cae132c7d8cbe88</anchor>
      <arglist>(int regionExpansions)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTreeExpansions</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a74cbed12fb3a9df37c573104b2d1b3b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumTreeExpansions</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a2390834194d6a2ca720d5d5b3678500f</anchor>
      <arglist>(int treeExpansions)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getProbAbandonLeadEarly</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a55f99ba305d53b6e11de87144244be89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProbAbandonLeadEarly</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>ae2a7e44e886dff1b48f626e6aabb57a6</anchor>
      <arglist>(double probability)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual Motion *</type>
      <name>addRoot</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a3c2cd9b1827418a0064eb7d5a7aa6435</anchor>
      <arglist>(const base::State *s)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>selectAndExtend</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a6a079c078fda34de8342b573ac0475fc</anchor>
      <arglist>(Region &amp;region, std::vector&lt; Motion * &gt; &amp;newMotions)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Region &amp;</type>
      <name>getRegionFromIndex</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a55afde7e9d1262aab28d9cedbda96c14</anchor>
      <arglist>(const int rid) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numFreeVolSamples_</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>aea90b6750343b06ee23906f13cf95bc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>probShortestPath_</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a6538062ba65fe1f003d10f19abe99717</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>probKeepAddingToAvail_</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a65109c2475eaf3cb29dd904f863dd1f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numRegionExpansions_</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>abd499bf21f57c342b539b10c65aaaad1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numTreeSelections_</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a7b94f7e024b811555a11da15efaf15a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>probAbandonLeadEarly_</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>aa0c97a2d04b3d9552bdff1575ef7d27a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const SpaceInformation *</type>
      <name>siC_</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a377d79970aab57a05c9b8630aab4e21a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DecompositionPtr</type>
      <name>decomp_</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>af088dc8660099abca33984025e4e40fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>acf70200cbbbc2955d3569e7151c51b2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a90d3bfaa4dd651fe44f3fba97db560fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>afec9f9685ebdb0ad390528842bacc0a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a8eca01366119415f2352ae7e1b68e94c</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLeadComputeFn</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>aea58c8ca3a6ac54a9ad27b2e2e8ab5d8</anchor>
      <arglist>(const LeadComputeFn &amp;compute)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEdgeCostFactor</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a6bf4663e4fbc674d330ce1b71f88d484</anchor>
      <arglist>(const EdgeCostFactorFn &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearEdgeCostFactors</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a6b50f7c0ccd5c11a31f73f29b7b44a45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumFreeVolumeSamples</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a4dd70116458873839e4bb8ee0676e608</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumFreeVolumeSamples</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a3137638571714face5406a83421c8f0a</anchor>
      <arglist>(int numSamples)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getProbShortestPathLead</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a292f74d866e5ca8b5b1479c72e8c7924</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProbShortestPathLead</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a441ac35fa1923d3c6c78d13d03eeff56</anchor>
      <arglist>(double probability)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getProbAddingToAvailableRegions</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a173e700b402e930ac7ed8dafac0b0043</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProbAddingToAvailableRegions</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>aa7db5af2e525007068bf9d387c980194</anchor>
      <arglist>(double probability)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumRegionExpansions</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>ad5d607bf6f9580cd6e3ad1eb31d21747</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumRegionExpansions</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>aacd3f945a23cf0564cae132c7d8cbe88</anchor>
      <arglist>(int regionExpansions)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTreeExpansions</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a74cbed12fb3a9df37c573104b2d1b3b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumTreeExpansions</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a2390834194d6a2ca720d5d5b3678500f</anchor>
      <arglist>(int treeExpansions)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getProbAbandonLeadEarly</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>a55f99ba305d53b6e11de87144244be89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProbAbandonLeadEarly</name>
      <anchorfile>classompl_1_1control_1_1Syclop.html</anchorfile>
      <anchor>ae2a7e44e886dff1b48f626e6aabb57a6</anchor>
      <arglist>(double probability)</arglist>
    </member>
    <docanchor file="classompl_1_1control_1_1Syclop">cSyclop</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::control::Syclop::Adjacency</name>
    <filename>classompl_1_1control_1_1Syclop_1_1Adjacency.html</filename>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Adjacency.html</anchorfile>
      <anchor>adf14d28fc72bcfcdc36469ca1b2cc2d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::set&lt; int &gt;</type>
      <name>covGridCells</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Adjacency.html</anchorfile>
      <anchor>a317b65ecba780aaa2175ffeb40323a4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Region *</type>
      <name>source</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Adjacency.html</anchorfile>
      <anchor>ac2f8c2bda9947a4dc04415e7bc4ef6c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Region *</type>
      <name>target</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Adjacency.html</anchorfile>
      <anchor>a6eb92575d383c337a7d8e7d0e81ab9bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>cost</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Adjacency.html</anchorfile>
      <anchor>ac0fd340e1d70ac712418e6d70d00c073</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numLeadInclusions</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Adjacency.html</anchorfile>
      <anchor>aa4d4a45ce752700a17b2b94a2324ff7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numSelections</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Adjacency.html</anchorfile>
      <anchor>acbda37c9d6a5f141649ca39491dce1ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Adjacency.html</anchorfile>
      <anchor>a7f8426944737b32a9bb79519a058317c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::control::Syclop::Defaults</name>
    <filename>structompl_1_1control_1_1Syclop_1_1Defaults.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::control::Syclop::Motion</name>
    <filename>classompl_1_1control_1_1Syclop_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Motion.html</anchorfile>
      <anchor>a3c8d8228942cf1ed18dd78c39bbc4925</anchor>
      <arglist>(const SpaceInformation *si)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Motion.html</anchorfile>
      <anchor>a82bc505a7cb4712f0730444474434c34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Control *</type>
      <name>control</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Motion.html</anchorfile>
      <anchor>a94c8e4e3f3dee52c25a5256a2a20b21a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Motion *</type>
      <name>parent</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Motion.html</anchorfile>
      <anchor>a6921b51db240b5ffaf30bdbdfdbd1ead</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>steps</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Motion.html</anchorfile>
      <anchor>a1d5bdc499fbbe214c283769241bef95d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::Syclop::Region</name>
    <filename>classompl_1_1control_1_1Syclop_1_1Region.html</filename>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Region.html</anchorfile>
      <anchor>a054176616d7891c5674c774814683720</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::set&lt; int &gt;</type>
      <name>covGridCells</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Region.html</anchorfile>
      <anchor>a0a51e0ca6e451304096a41151b6105f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Motion * &gt;</type>
      <name>motions</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Region.html</anchorfile>
      <anchor>ac48eda803e1a624c088fcf350317396f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>volume</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Region.html</anchorfile>
      <anchor>a028b8d9aa311613785241e33f5fffb1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>freeVolume</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Region.html</anchorfile>
      <anchor>ac38dd3b4df37da3ed7ca4c546114585c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>percentValidCells</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Region.html</anchorfile>
      <anchor>a0369d01b105c4f7e3cdbfe7573e93e24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>weight</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Region.html</anchorfile>
      <anchor>a986ac16be96359e2bae2f181eedc657f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>alpha</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Region.html</anchorfile>
      <anchor>a7e9f27d6279b8d7c892a015bc2608d03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>index</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Region.html</anchorfile>
      <anchor>ae02ddca454aad1a9d62a57cf77615012</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>numSelections</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Region.html</anchorfile>
      <anchor>aab314ecd96233f7287ffec1c66c96e43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PDF&lt; int &gt;::Element *</type>
      <name>pdfElem</name>
      <anchorfile>classompl_1_1control_1_1Syclop_1_1Region.html</anchorfile>
      <anchor>a20eb39322810e547afdac129084398ff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::control::SyclopEST</name>
    <filename>classompl_1_1control_1_1SyclopEST.html</filename>
    <base>ompl::control::Syclop</base>
    <member kind="function">
      <type></type>
      <name>SyclopEST</name>
      <anchorfile>classompl_1_1control_1_1SyclopEST.html</anchorfile>
      <anchor>ac1c59c7e6c9b3607c5490187e156dbb3</anchor>
      <arglist>(const SpaceInformationPtr &amp;si, const DecompositionPtr &amp;d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1control_1_1SyclopEST.html</anchorfile>
      <anchor>aa4abca6f3e9fe664dcab4cca9682f5d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1control_1_1SyclopEST.html</anchorfile>
      <anchor>a7c060a6d696ce6ce188e920a9099234e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1control_1_1SyclopEST.html</anchorfile>
      <anchor>a9fc8af1642774387a17492faee89371c</anchor>
      <arglist>(base::PlannerData &amp;data) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Syclop::Motion *</type>
      <name>addRoot</name>
      <anchorfile>classompl_1_1control_1_1SyclopEST.html</anchorfile>
      <anchor>a4987f35eee1850de207994279a9dda1e</anchor>
      <arglist>(const base::State *s)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>selectAndExtend</name>
      <anchorfile>classompl_1_1control_1_1SyclopEST.html</anchorfile>
      <anchor>ab0c06583764efab9f89714a020419775</anchor>
      <arglist>(Region &amp;region, std::vector&lt; Motion * &gt; &amp;newMotions)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1control_1_1SyclopEST.html</anchorfile>
      <anchor>a32846f1c94f988dd7402a2821518f677</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>lastGoalMotion_</name>
      <anchorfile>classompl_1_1control_1_1SyclopEST.html</anchorfile>
      <anchor>a747796199659bbb54b733df59fce5943</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1control_1_1SyclopEST">cSyclopEST</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::control::SyclopRRT</name>
    <filename>classompl_1_1control_1_1SyclopRRT.html</filename>
    <base>ompl::control::Syclop</base>
    <member kind="function">
      <type></type>
      <name>SyclopRRT</name>
      <anchorfile>classompl_1_1control_1_1SyclopRRT.html</anchorfile>
      <anchor>ad559b223d09d0791895d3c3b82104299</anchor>
      <arglist>(const SpaceInformationPtr &amp;si, const DecompositionPtr &amp;d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1control_1_1SyclopRRT.html</anchorfile>
      <anchor>ace9b8b9a7256872cb047fa86c4cd3ef7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1control_1_1SyclopRRT.html</anchorfile>
      <anchor>a1ce083be514e3e8ecfd8a5fbe3552dfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1control_1_1SyclopRRT.html</anchorfile>
      <anchor>ac3fb85e8f660430f9084bf5ca4172a0c</anchor>
      <arglist>(base::PlannerData &amp;data) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRegionalNearestNeighbors</name>
      <anchorfile>classompl_1_1control_1_1SyclopRRT.html</anchorfile>
      <anchor>ae0bce3ff08c564942a04ccc104a645e1</anchor>
      <arglist>(bool enabled)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>classompl_1_1control_1_1SyclopRRT.html</anchorfile>
      <anchor>a15fcc0c4e91a6b6c796c18a5e9d12f84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Syclop::Motion *</type>
      <name>addRoot</name>
      <anchorfile>classompl_1_1control_1_1SyclopRRT.html</anchorfile>
      <anchor>aa33fea3f71f72fb86b1ee0db7b5e7be3</anchor>
      <arglist>(const base::State *s)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>selectAndExtend</name>
      <anchorfile>classompl_1_1control_1_1SyclopRRT.html</anchorfile>
      <anchor>aa85054e31fee2eba5cf1d1f1575d12c3</anchor>
      <arglist>(Region &amp;region, std::vector&lt; Motion * &gt; &amp;newMotions)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1control_1_1SyclopRRT.html</anchorfile>
      <anchor>afe0b04d9e1b9cb80e77afa11647de5a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1control_1_1SyclopRRT.html</anchorfile>
      <anchor>afc8ddcb74e7d53f6c5cc28e4cfe42019</anchor>
      <arglist>(const Motion *a, const Motion *b) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>lastGoalMotion_</name>
      <anchorfile>classompl_1_1control_1_1SyclopRRT.html</anchorfile>
      <anchor>a0bb7f61c9bca43a0a5124a0660c75f7c</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1control_1_1SyclopRRT">cSyclopRRT</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::control::TriangularDecomposition</name>
    <filename>classompl_1_1control_1_1TriangularDecomposition.html</filename>
    <base>ompl::control::Decomposition</base>
    <class kind="struct">ompl::control::TriangularDecomposition::Polygon</class>
    <class kind="struct">ompl::control::TriangularDecomposition::Triangle</class>
    <class kind="struct">ompl::control::TriangularDecomposition::Vertex</class>
    <member kind="function">
      <type></type>
      <name>TriangularDecomposition</name>
      <anchorfile>classompl_1_1control_1_1TriangularDecomposition.html</anchorfile>
      <anchor>a312340319c406117f822c158c3c72ed9</anchor>
      <arglist>(const base::RealVectorBounds &amp;bounds, const std::vector&lt; Polygon &gt; &amp;holes=std::vector&lt; Polygon &gt;(), const std::vector&lt; Polygon &gt; &amp;intRegs=std::vector&lt; Polygon &gt;())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumRegions</name>
      <anchorfile>classompl_1_1control_1_1TriangularDecomposition.html</anchorfile>
      <anchor>a561ab89616d98c609c11ce459ec71441</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getRegionVolume</name>
      <anchorfile>classompl_1_1control_1_1TriangularDecomposition.html</anchorfile>
      <anchor>a2fb3f4e81c05f243db4b22f5b05ce798</anchor>
      <arglist>(int triID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getNeighbors</name>
      <anchorfile>classompl_1_1control_1_1TriangularDecomposition.html</anchorfile>
      <anchor>a07a86d8433791f4044aa067973f1d7f4</anchor>
      <arglist>(int triID, std::vector&lt; int &gt; &amp;neighbors) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>locateRegion</name>
      <anchorfile>classompl_1_1control_1_1TriangularDecomposition.html</anchorfile>
      <anchor>a363e3f5b7eb72423cf39fc0475b4463d</anchor>
      <arglist>(const base::State *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sampleFromRegion</name>
      <anchorfile>classompl_1_1control_1_1TriangularDecomposition.html</anchorfile>
      <anchor>aedb1d4f2373c718ec2d285f0c55863ac</anchor>
      <arglist>(int triID, RNG &amp;rng, std::vector&lt; double &gt; &amp;coord) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRegionOfInterestAt</name>
      <anchorfile>classompl_1_1control_1_1TriangularDecomposition.html</anchorfile>
      <anchor>a198709031e9677c28897e65ef6455a8f</anchor>
      <arglist>(int triID) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>createTriangles</name>
      <anchorfile>classompl_1_1control_1_1TriangularDecomposition.html</anchorfile>
      <anchor>a56d507dad4636ad8d8b46c0cc797ef10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>intRegInfo_</name>
      <anchorfile>classompl_1_1control_1_1TriangularDecomposition.html</anchorfile>
      <anchor>a7796fd4dd2cf0a397dde77f09d32bfc4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::control::TriangularDecomposition::Polygon</name>
    <filename>structompl_1_1control_1_1TriangularDecomposition_1_1Polygon.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::control::TriangularDecomposition::Triangle</name>
    <filename>structompl_1_1control_1_1TriangularDecomposition_1_1Triangle.html</filename>
    <base>ompl::control::TriangularDecomposition::Polygon</base>
  </compound>
  <compound kind="struct">
    <name>ompl::control::TriangularDecomposition::Vertex</name>
    <filename>structompl_1_1control_1_1TriangularDecomposition_1_1Vertex.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::control::World</name>
    <filename>classompl_1_1control_1_1World.html</filename>
    <member kind="function">
      <type></type>
      <name>World</name>
      <anchorfile>classompl_1_1control_1_1World.html</anchorfile>
      <anchor>a4fff35692311bf030af2fdd52132c2f5</anchor>
      <arglist>(unsigned int numProps)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1control_1_1World.html</anchorfile>
      <anchor>a7f539be75924034c48e5395cd1d788f4</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>bool &amp;</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1control_1_1World.html</anchorfile>
      <anchor>ac8a6972f16a760dde67aaf87cac8374d</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numProps</name>
      <anchorfile>classompl_1_1control_1_1World.html</anchorfile>
      <anchor>a65ab4eee14d8b6c201fddf80f60f051b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>satisfies</name>
      <anchorfile>classompl_1_1control_1_1World.html</anchorfile>
      <anchor>ac1decd9751571be2eabcf942e354d2ec</anchor>
      <arglist>(const World &amp;w) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>formula</name>
      <anchorfile>classompl_1_1control_1_1World.html</anchorfile>
      <anchor>ac9eed0fd5b4737d49176483839440697</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const std::unordered_map&lt; unsigned int, bool &gt; &amp;</type>
      <name>props</name>
      <anchorfile>classompl_1_1control_1_1World.html</anchorfile>
      <anchor>a858b3850f9dae291e0c84dbd0768a08f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classompl_1_1control_1_1World.html</anchorfile>
      <anchor>abdc4ce23fd4bcc2a6c7e8f9efda65f1f</anchor>
      <arglist>(const World &amp;w) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1control_1_1World.html</anchorfile>
      <anchor>ac7399efbcde563187f424fa9661b4763</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::DynamicSSSP</name>
    <filename>classompl_1_1DynamicSSSP.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::Exception</name>
    <filename>classompl_1_1Exception.html</filename>
    <member kind="function">
      <type></type>
      <name>Exception</name>
      <anchorfile>classompl_1_1Exception.html</anchorfile>
      <anchor>a05c4147e7f0bc1e3c1e0993eddabb4bf</anchor>
      <arglist>(const std::string &amp;what)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Exception</name>
      <anchorfile>classompl_1_1Exception.html</anchorfile>
      <anchor>a620e4fbe0b159178830ec27b7ef34ff8</anchor>
      <arglist>(const std::string &amp;prefix, const std::string &amp;what)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::FLANNDistance</name>
    <filename>classompl_1_1FLANNDistance.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::AnytimePathShortening</name>
    <filename>classompl_1_1geometric_1_1AnytimePathShortening.html</filename>
    <base>ompl::base::Planner</base>
    <member kind="function">
      <type></type>
      <name>AnytimePathShortening</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>a68d82f4cd29e154fab61a4d60c68669b</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AnytimePathShortening</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>a22f8b530dcecb9c01b249f16bfcc59fc</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPlanner</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>ad1237257ad575b30aa4957149b446c4b</anchor>
      <arglist>(base::PlannerPtr &amp;planner)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProblemDefinition</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>ab2895a4d5eace23d0264a2b3e7e1993b</anchor>
      <arglist>(const base::ProblemDefinitionPtr &amp;pdef)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>aa8141bc0c01b71c1e338dda2f4e2e39e</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>a76622f4036107d51e80aaaa89eaa146c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>ab49b8a8711a29aa186a1097610fc7be2</anchor>
      <arglist>(base::PlannerData &amp;data) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>acf997f8efd1ae66a2daf351c9f968b54</anchor>
      <arglist>(ompl::base::PlannerData &amp;data, unsigned int idx) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>a74ad79e30b2f41020f519a9d0fedf810</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkValidity</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>a278ccc9b714abd77ff62fe2b243479e2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumPlanners</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>a6bbf03e0e8f19f198514467e6ea46785</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>base::PlannerPtr</type>
      <name>getPlanner</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>a087d72b0e4597c4b4c1906ff95b4df7d</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isShortcutting</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>a9b6de5da4d1a506471f10aac1a8bc6a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setShortcut</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>af957ba758b25d64de347306a45598142</anchor>
      <arglist>(bool shortcut)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isHybridizing</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>ae8684456681f17da480e78dfc131f5b5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHybridize</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>adff084b1cf5ea5c2eda5a7cc5430b14a</anchor>
      <arglist>(bool hybridize)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>maxHybridizationPaths</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>ae42a311d8e59a5daaef7fad1b1b0f3c4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxHybridizationPath</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>ab2610ddcdd47e0bfb8d358e84a0dc5cf</anchor>
      <arglist>(unsigned int maxPathCount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultNumPlanners</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>a4bf18a0fe0790f98df29efad2a57d063</anchor>
      <arglist>(unsigned int numPlanners)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDefaultNumPlanners</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>ae48684bcc6b61c94538f0b77f694281f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getBestCost</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>af12ad05e60cf4ef18a88db205c3cd711</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>threadSolve</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>a45bd5e4eb3b3504054dd3fb7d828ebf1</anchor>
      <arglist>(base::Planner *planner, const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; base::PlannerPtr &gt;</type>
      <name>planners_</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>ae2169c2756e275f7d5c6ffe9bd458c0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>shortcut_</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>a607e4d18be95e649c3b69ee3bdf32651</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>hybridize_</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>a08c5644404eab319beadc35b4ed7812c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxHybridPaths_</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>a62fbc6ffca34e3474359502a456c4497</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>defaultNumPlanners_</name>
      <anchorfile>classompl_1_1geometric_1_1AnytimePathShortening.html</anchorfile>
      <anchor>a1f8e86f356ffafbf6db8521a43f091d5</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1AnytimePathShortening">gAPS</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::BFMT</name>
    <filename>classompl_1_1geometric_1_1BFMT.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::BFMT::BiDirMotion</class>
    <class kind="struct">ompl::geometric::BFMT::BiDirMotionCompare</class>
    <class kind="struct">ompl::geometric::BFMT::CostIndexCompare</class>
    <member kind="enumeration">
      <type></type>
      <name>TreeType</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>ae4c3b14dbf4ab6dcf32d7c3bcf8a6dbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ExploreType</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>aa9128ab0ba686fa4e9902922ccbbd105</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TerminateType</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a729ebe5c13f83a50f6f13a4e220180a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a7157226ee9199f9a3a40130b7ebb97f6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a48766fe690df10e891f93b2c2f6a4133</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a0978704feeec4a2e95abd5144e1198a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a6eb0a220a1b5eb5159cb3f1958bc86e3</anchor>
      <arglist>(base::PlannerData &amp;data) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumSamples</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a2419910ad98bb4bda23c2d549bd78aba</anchor>
      <arglist>(const unsigned int numSamples)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumSamples</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a738b9d436203eba158513daf55b327fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestK</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>aee0ba4eabbfa73b3b74dbe001d8a1ce1</anchor>
      <arglist>(bool nearestK)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getNearestK</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a4a49cdf8600ececad7ae2815ec1317cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadiusMultiplier</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>aea88fb1f6cd2dfb797557650c529fd65</anchor>
      <arglist>(const double radiusMultiplier)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRadiusMultiplier</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a5dea3d1b242bbff12303ec5ae7791eac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFreeSpaceVolume</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>addf51219f122bbed63ee4a8191dc9624</anchor>
      <arglist>(const double freeSpaceVolume)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFreeSpaceVolume</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>adecc2f4db8e26951fda1ba2fe979a9e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCacheCC</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a6d8c5ac49f2df6cbd0f8b276fdf0f138</anchor>
      <arglist>(bool ccc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getCacheCC</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a15aa7d92580d8f76fbbf0b4612e2e519</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeuristics</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>ae16d84f26ee1266de3f0689f0a0b7b64</anchor>
      <arglist>(bool h)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getHeuristics</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a1b6aa7f87fa05151e74dd302dcb47958</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExtendedFMT</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>ad3de0122ec209405dc4e973f85227273</anchor>
      <arglist>(bool e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getExtendedFMT</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>ab7a2d3f2a69231a22571dc02ed29bedd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExploration</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a22c72868883fd9068a775473cc0793fd</anchor>
      <arglist>(bool balanced)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getExploration</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a374ef3734983c6073b0c4071ab7e278e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTermination</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a43a9b9542991c51567493f9a0767bc6a</anchor>
      <arglist>(bool optimality)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getTermination</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>aa5df8c45fc9df9fbeb7afe8aec1c6c2d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrecomputeNN</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>acc9fe1b7b5606ef1edea0168f83afdc0</anchor>
      <arglist>(bool p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPrecomputeNN</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a57642aad209280e75a2fc475624b7d75</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>swapTrees</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>ad16dfb44a33d551bbdf66e0d86d80a06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>useFwdTree</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>ab9252c665756f6c776b196430dca2a6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>useRevTree</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>ac55fc93e01a2b26a37ae969551d729cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a4f638bc9ebf8c1d85cb1f1e44433c256</anchor>
      <arglist>(const BiDirMotion *a, const BiDirMotion *b) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>calculateUnitBallVolume</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>ad540fc34803d875691068371d11093ec</anchor>
      <arglist>(const unsigned int dimension) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>calculateRadius</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a53c3d6c1d6bfac452fbd133a7a11b3b1</anchor>
      <arglist>(unsigned int dimension, unsigned int n) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a3eb3a0b7a44d10d0396b156fb7701f36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>saveNeighborhood</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a1cd2b6757765d05f3d1762e05d78f74d</anchor>
      <arglist>(std::shared_ptr&lt; NearestNeighbors&lt; BiDirMotion * &gt; &gt; nn, BiDirMotion *m)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sampleFree</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a396c78b0e2d6bbacb84c79ad73067c0f</anchor>
      <arglist>(std::shared_ptr&lt; NearestNeighbors&lt; BiDirMotion * &gt; &gt; nn, const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initializeProblem</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a6c4398da349abf2fb41a5bd884e0e1ce</anchor>
      <arglist>(base::GoalSampleableRegion *&amp;goal_s)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>expandTreeFromNode</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a59a090351c3271964c2b2cc37b14ea56</anchor>
      <arglist>(BiDirMotion *&amp;z, BiDirMotion *&amp;connection_point)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>plan</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a176f9b0de007f4075f5595732ffab013</anchor>
      <arglist>(BiDirMotion *x_init, BiDirMotion *x_goal, BiDirMotion *&amp;z, const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>termination</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a308deda6599cfbca27cd273f8cc90dbb</anchor>
      <arglist>(BiDirMotion *&amp;z, BiDirMotion *&amp;connection_point, const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>chooseTreeAndExpansionNode</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>aa6b17f4cbf54e75d8c7592f66a9d4b24</anchor>
      <arglist>(BiDirMotion *&amp;z)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>tracePath</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a2510965e21e83dc60adfbec5bd0775ec</anchor>
      <arglist>(BiDirMotion *z, BiDirMotionPtrs &amp;path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNeighborhood</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>ab4b2e98d74091e4c064f103ced35877c</anchor>
      <arglist>(BiDirMotion *m, const std::vector&lt; BiDirMotion * &gt; nbh)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>insertNewSampleInOpen</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a1b3c080a4a25462e8ff1684b614b5fd9</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numSamples_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>ac25b1403b690567107e6e6870ee7435e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>radiusMultiplier_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a0de0258ec1069c55644eec3a0dea42ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>freeSpaceVolume_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>acd190f9f795e606b77d722503bc86728</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>collisionChecks_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a32227abebf3610b2d3fb87ce56375ed5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>nearestK_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>af42d0e59d9e05e036b08e35d0a2516ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>NNr_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a0bc79090281d3796e323f09ff6acacd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>NNk_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>ab3905c36f37e31dd4b460b46c912ed9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TreeType</type>
      <name>tree_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a2876a95dee7cffdf325afc150e5c86b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExploreType</type>
      <name>exploration_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a61bb6e43d342cd4002302a6903bec65d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TerminateType</type>
      <name>termination_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a067b643ed36e9a38f8bc3132833659ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>precomputeNN_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>adb4970d51d647def2798811418c3f127</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; BiDirMotion * &gt; &gt;</type>
      <name>nn_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>ad0f62f859823776576ca454dc3bd492d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; BiDirMotion *, BiDirMotionPtrs &gt;</type>
      <name>neighborhoods_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>ac87ad158fbacbcacedac762ecb6a0769</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BiDirMotionBinHeap</type>
      <name>Open_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a41ed5647c104481adcdff58a9ca64c53</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; BiDirMotion *, BiDirMotionBinHeap::Element * &gt;</type>
      <name>Open_elements</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a30b52f3283392f400485ca075c3f38c4</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a8f97f2f2f3974cbe46c38d422065ebc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::OptimizationObjectivePtr</type>
      <name>opt_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>aa59cb574b0b461cc87ccf2b280a76527</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>heuristics_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a79677f70203ef35875bfe58e54ad53f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::State *</type>
      <name>heurGoalState_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>a231e5c8671498fd67f02689efade0700</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cacheCC_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>aec9e4c41ad2ed46632f6ab7c41b2af14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>extendedFMT_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT.html</anchorfile>
      <anchor>af54d73530433a9ef7b8517efb97ff0e6</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1BFMT">gBFMT</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::BFMT::BiDirMotion</name>
    <filename>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>SetType</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>a4b79e375f9520c7507036d3c948cedd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BiDirMotion</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>a8f2dee8cae047443418c01b30c88a775</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si, TreeType *tree)</arglist>
    </member>
    <member kind="function">
      <type>base::Cost</type>
      <name>getCost</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>a9ea56324aeed65032a6e98a972112060</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>base::Cost</type>
      <name>getOtherCost</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>a399c36d375b4adcdc4bad158797351f1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCost</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>a55bfe2c89a2a5f948810c283ec2e06c3</anchor>
      <arglist>(base::Cost cost)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParent</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>ad35eb963e631cda60704959d0a3bf289</anchor>
      <arglist>(BiDirMotion *parent)</arglist>
    </member>
    <member kind="function">
      <type>BiDirMotion *</type>
      <name>getParent</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>a80dbc687316fa2e56428a0d7b24167ee</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChildren</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>a62877fb8d6f0f7441d45899908843b84</anchor>
      <arglist>(BiDirMotionPtrs children)</arglist>
    </member>
    <member kind="function">
      <type>BiDirMotionPtrs</type>
      <name>getChildren</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>a4cc1b38653d2c5d00c08e064581a2527</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentSet</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>ad9d60c80413cde10004e924f2210a68a</anchor>
      <arglist>(SetType set)</arglist>
    </member>
    <member kind="function">
      <type>SetType</type>
      <name>getCurrentSet</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>aed86fbe5fada7416ebe000c15fbba329</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>SetType</type>
      <name>getOtherSet</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>a88f9906fe32b7ff526291aba5ae7e047</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTreeType</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>af84ae47907df5cea1e46f36a72503de2</anchor>
      <arglist>(TreeType *treePtr)</arglist>
    </member>
    <member kind="function">
      <type>TreeType</type>
      <name>getTreeType</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>ae77b6985d504520cbb236309e685ba7a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>ac67e11672316769546e2d504fa63b37c</anchor>
      <arglist>(base::State *state)</arglist>
    </member>
    <member kind="function">
      <type>base::State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>a3d484ceaacaaaa241319d2154f745bd4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>alreadyCC</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>a321da3cf04df15cc6f76bd21fd2cb9f7</anchor>
      <arglist>(BiDirMotion *m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCC</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>acb3c3e761fe74aa4ab2645216046cdd2</anchor>
      <arglist>(BiDirMotion *m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeuristicCost</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>a49778c1492842c921a8bd61dc291557a</anchor>
      <arglist>(const base::Cost h)</arglist>
    </member>
    <member kind="function">
      <type>base::Cost</type>
      <name>getHeuristicCost</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>a71536aeb0782fecf7aff37a93d7d0591</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>a78a1560c309f9fd07be8fcc01dbffb88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BiDirMotion *</type>
      <name>parent_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>a6054dbe606f63ad3161f9d438deac205</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>BiDirMotionPtrs</type>
      <name>children_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>a8e2a43e9e8b89ce6bc79e6fd695b1993</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>SetType</type>
      <name>currentSet_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>ad05948bc009ecf7aa580a0e880a35951</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>TreeType *</type>
      <name>tree_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>a4568fa681d357a679b1cfe137a925d7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>base::Cost</type>
      <name>cost_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>a7192d0242567b1ba8093445e2598d9b4</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>base::Cost</type>
      <name>hcost_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>adbd9c9a270e55274efa49b8aec36d25c</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>std::set&lt; BiDirMotion * &gt;</type>
      <name>collChecksDone_</name>
      <anchorfile>classompl_1_1geometric_1_1BFMT_1_1BiDirMotion.html</anchorfile>
      <anchor>af74a4b71b033c5e300772c6849097cf8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::BFMT::BiDirMotionCompare</name>
    <filename>structompl_1_1geometric_1_1BFMT_1_1BiDirMotionCompare.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::BFMT::CostIndexCompare</name>
    <filename>structompl_1_1geometric_1_1BFMT_1_1CostIndexCompare.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::BiEST</name>
    <filename>classompl_1_1geometric_1_1BiEST.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::BiEST::Motion</class>
    <member kind="function">
      <type></type>
      <name>BiEST</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST.html</anchorfile>
      <anchor>a72d99dedaa6f82f033f7131e703acaab</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST.html</anchorfile>
      <anchor>a0344aa53e033a257f8a5a473573c0399</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST.html</anchorfile>
      <anchor>a62eaf5c625ed42bc43f337e4cf0be1e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST.html</anchorfile>
      <anchor>a9d0c2d6131257d38d80323bc1a0fa3fa</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST.html</anchorfile>
      <anchor>a3882419f47f50f35c224c4ef1afbb7b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST.html</anchorfile>
      <anchor>a45b3c3e3eb37c084ecba1765d3c69ad9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST.html</anchorfile>
      <anchor>a2e8edcf833a4c3891764d0a86759f6ab</anchor>
      <arglist>(base::PlannerData &amp;data) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST.html</anchorfile>
      <anchor>a4c4b4784af89afbf1d8480aeb4ef6ce6</anchor>
      <arglist>(const Motion *a, const Motion *b) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST.html</anchorfile>
      <anchor>a1e04a922f474387b538c920d7e4f50a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addMotion</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST.html</anchorfile>
      <anchor>a91f8245f28d5d4dcf9f9fc5486afedde</anchor>
      <arglist>(Motion *motion, std::vector&lt; Motion * &gt; &amp;motions, PDF&lt; Motion * &gt; &amp;pdf, std::shared_ptr&lt; NearestNeighbors&lt; Motion * &gt; &gt; nn, const std::vector&lt; Motion * &gt; &amp;neighbors)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Motion * &gt; &gt;</type>
      <name>nnStart_</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST.html</anchorfile>
      <anchor>a8b31c85f9788722194018a7f7bfc1bd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Motion * &gt;</type>
      <name>startMotions_</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST.html</anchorfile>
      <anchor>a22d86bc5d28e44cd4cb1cb62345005f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PDF&lt; Motion * &gt;</type>
      <name>startPdf_</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST.html</anchorfile>
      <anchor>ade61f5cfcaef35703d4f5e29569b73f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ValidStateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST.html</anchorfile>
      <anchor>a04e975094b3061b1b03aa9a4274f935b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistance_</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST.html</anchorfile>
      <anchor>a5971ef305f4c66d1f3329495b8304d15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>nbrhoodRadius_</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST.html</anchorfile>
      <anchor>a3a84ea128ca195c78dba20afdee2af78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST.html</anchorfile>
      <anchor>a408336528629d3cbc78e1ccf836100af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::pair&lt; base::State *, base::State * &gt;</type>
      <name>connectionPoint_</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST.html</anchorfile>
      <anchor>a7cd4b7f8905131eb3e72b3b6c37bd15b</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1BiEST">gBiEST</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::BiEST::Motion</name>
    <filename>classompl_1_1geometric_1_1BiEST_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST_1_1Motion.html</anchorfile>
      <anchor>a9fe673fbdcb65833c38c1f9ea9bdab09</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST_1_1Motion.html</anchorfile>
      <anchor>a257cfeec9c27bed50015933f54608ddf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST_1_1Motion.html</anchorfile>
      <anchor>abc41a0888e0d444ea20283bcc3d28a66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PDF&lt; Motion * &gt;::Element *</type>
      <name>element</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST_1_1Motion.html</anchorfile>
      <anchor>ac63617b085ed09981db13da281cf2639</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const base::State *</type>
      <name>root</name>
      <anchorfile>classompl_1_1geometric_1_1BiEST_1_1Motion.html</anchorfile>
      <anchor>a4ec4127f810cf3364c386349c95c2292</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::BiTRRT</name>
    <filename>classompl_1_1geometric_1_1BiTRRT.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::BiTRRT::Motion</class>
    <member kind="function">
      <type></type>
      <name>BiTRRT</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a2f3d18a363976e7345cbc28577018766</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>acb404cf06b2af1a334e6c7d385c1cd2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>ac4e7ab47ad62dfa038d12d8e39f40ec4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>ae171a725dbc057b31f831df608715e1d</anchor>
      <arglist>(base::PlannerData &amp;data) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a2175b619054fbd8ce8210f10b06f10be</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>ad71f5b6833006f7e7fc008c51428d9bf</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a3890446c83d6e72ee378a3b6453a7b71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTempChangeFactor</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a7d06fd3929104c9dca2a743b1f4cbddc</anchor>
      <arglist>(double factor)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTempChangeFactor</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a5df195e23629d5d12765a03ee78675e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCostThreshold</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a8f7bbe64f7b08b9c986f189339ceb2d1</anchor>
      <arglist>(double maxCost)</arglist>
    </member>
    <member kind="function">
      <type>*double</type>
      <name>getCostThreshold</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>afc9076389c487664b59a8ab8d0a21d05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitTemperature</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>af01edc2564a947c534f77011027826c2</anchor>
      <arglist>(double initTemperature)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getInitTemperature</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a3cfddc6907d829c741bfb0c8f9ce4f5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrontierThreshold</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a21c3fa749ad83310b40988aa96357a8c</anchor>
      <arglist>(double frontierThreshold)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFrontierThreshold</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a6564f87efcb169cc94140f8280179d01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrontierNodeRatio</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a161724203e2d0ef60e38fe4237835ac4</anchor>
      <arglist>(double frontierNodeRatio)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFrontierNodeRatio</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a2ef37e33497c9159c33dd02ce5e15cda</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a0ad6a91ea3a9e354e9f22846148208ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>GrowResult</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a24f5c91df65e5ad68c24c6d5071bbd1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>FAILED</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a24f5c91df65e5ad68c24c6d5071bbd1fa45b48c0a20c39a03b2356e97ca579dfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>ADVANCED</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a24f5c91df65e5ad68c24c6d5071bbd1fabad5f21d48b119fa4a9c0bfdbadf7590</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>SUCCESS</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a24f5c91df65e5ad68c24c6d5071bbd1fa1341d9ec78c1423dd5d6c92c9d3c2a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Motion * &gt; &gt;</type>
      <name>TreeData</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>ac34c2c2e98623dd1fa7ecd96be400f98</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>FAILED</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a24f5c91df65e5ad68c24c6d5071bbd1fa45b48c0a20c39a03b2356e97ca579dfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>ADVANCED</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a24f5c91df65e5ad68c24c6d5071bbd1fabad5f21d48b119fa4a9c0bfdbadf7590</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>SUCCESS</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a24f5c91df65e5ad68c24c6d5071bbd1fa1341d9ec78c1423dd5d6c92c9d3c2a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>ac63536fa52ee81830fdaad13364c8c21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Motion *</type>
      <name>addMotion</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a6c900b2bbcfe22d0817928b1be743d5f</anchor>
      <arglist>(const base::State *state, TreeData &amp;tree, Motion *parent=nullptr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>transitionTest</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a10a681d8fb04bc7250f2648b0206599e</anchor>
      <arglist>(const base::Cost &amp;motionCost)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>minExpansionControl</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a15fc70c8b2683c10f94ebd2217cac0c9</anchor>
      <arglist>(double dist)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>GrowResult</type>
      <name>extendTree</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>aac34be6221aec908aca65f73f6791367</anchor>
      <arglist>(Motion *rmotion, TreeData &amp;tree, Motion *&amp;xmotion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>GrowResult</type>
      <name>extendTree</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>ace1073d843ebf9969f240cc4d9887708</anchor>
      <arglist>(Motion *nearest, TreeData &amp;tree, Motion *toMotion, Motion *&amp;result)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>connectTrees</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a7ac37e56b8f5363566c445330867efa2</anchor>
      <arglist>(Motion *nmotion, TreeData &amp;tree, Motion *xmotion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a99dc84d51deeea25b77c34af3d547fdc</anchor>
      <arglist>(const Motion *a, const Motion *b) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistance_</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>aa97f7333e6dc521da0ec536ecefe5ce5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>tempChangeFactor_</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a5f53f16b258bd2d48bd922dbeddd6e9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::Cost</type>
      <name>bestCost_</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>ac2d56aaf7da11a6992eca575c051e1fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::Cost</type>
      <name>worstCost_</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a3ab507005fa8061d36fdfd6a40c1bc26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::Cost</type>
      <name>costThreshold_</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a4142a27411b041a5577371c69adfb09a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>initTemperature_</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a6e54c64a3634dce1e148b9e3417c89a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>frontierThreshold_</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a182dc6d9b1c5f3a98236176f47472c80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>frontierNodeRatio_</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>add073ea4b4ff65874b2159f3fdbfc02c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>temp_</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>ab9cc05f70b76afa3a8570f4e005e0e73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>nonfrontierCount_</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>afb877441fed17d062ef66c830f3fce19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>frontierCount_</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>ad0a402f0aa637fae1852bb7e492a88ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>connectionRange_</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a2955eba180dbbd712667d9c3dcb5c060</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::pair&lt; Motion *, Motion * &gt;</type>
      <name>connectionPoint_</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a586e754b956d5b8533b9f26bf9754c83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TreeData</type>
      <name>tStart_</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a1cbe24be39a8389d290940a5d97e4f9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TreeData</type>
      <name>tGoal_</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a474b6411707fc5ad15e2306f83202ca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ompl::base::OptimizationObjectivePtr</type>
      <name>opt_</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT.html</anchorfile>
      <anchor>a3370dfd793af786716a3ebc4e56ee195</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1BiTRRT">gBiTRRT</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::BiTRRT::Motion</name>
    <filename>classompl_1_1geometric_1_1BiTRRT_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT_1_1Motion.html</anchorfile>
      <anchor>ac90cf1aa49a6024c45837df149694b4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT_1_1Motion.html</anchorfile>
      <anchor>a19882c1e9120c5952ec85074d4210658</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT_1_1Motion.html</anchorfile>
      <anchor>a159061928e5d93bef2bbad25a19c00fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT_1_1Motion.html</anchorfile>
      <anchor>a7ddfbdd700ef6024063446c542b6e295</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>base::Cost</type>
      <name>cost</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT_1_1Motion.html</anchorfile>
      <anchor>a2efed905f837948a72bd801d784a04df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const base::State *</type>
      <name>root</name>
      <anchorfile>classompl_1_1geometric_1_1BiTRRT_1_1Motion.html</anchorfile>
      <anchor>aa6405768e8f5ceee5bdfc73b8eed47aa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::BITstar</name>
    <filename>classompl_1_1geometric_1_1BITstar.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::BITstar::IdGenerator</class>
    <class kind="class">ompl::geometric::BITstar::IntegratedQueue</class>
    <class kind="class">ompl::geometric::BITstar::Vertex</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Vertex &gt;</type>
      <name>VertexPtr</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>adff43a966e7cba88d21a4927602703fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Vertex &gt;</type>
      <name>VertexConstPtr</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>ae2c8c06f2c54b1bf182dc62dce515ff0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::weak_ptr&lt; Vertex &gt;</type>
      <name>VertexWeakPtr</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a69da813a0975ab62f230b963d92fb630</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; IntegratedQueue &gt;</type>
      <name>IntegratedQueuePtr</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a738b3c1510907f7d684d0754c0f4c58a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>VertexId</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a457c97219bbc73817071643412c14118</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; VertexPtr, VertexPtr &gt;</type>
      <name>VertexPtrPair</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>ae606dd4b834ca3ac621533ba65b3f19a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; VertexConstPtr, VertexConstPtr &gt;</type>
      <name>VertexConstPtrPair</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a4a191ef6c088df39365ed444e6987438</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; VertexPtr &gt; &gt;</type>
      <name>VertexPtrNNPtr</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>af2f9b7f4de0bb76ae6ce74874ff08f49</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BITstar</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>af6d4e84d731cf2a0961043598864d65b</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si, const std::string &amp;name=&quot;BITstar&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BITstar</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a888e73419db8ea777fe1b54b046d34af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a2abbf41a7443c4a184bc925ca86fd231</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>af009cbbfb05b980234a24970559ac6a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>ac25333bb8b7b0aaae6b05e6063258c61</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a38fd50c959b5b5b736755e9a6bb20c87</anchor>
      <arglist>(base::PlannerData &amp;data) const </arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; const ompl::base::State *, const ompl::base::State * &gt;</type>
      <name>getNextEdgeInQueue</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>af38417dd67de2b6cee9d1ee09e501c68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::Cost</type>
      <name>getNextEdgeValueInQueue</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a9441e73fbec5789e481fbcee9c76d4b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getEdgeQueue</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>aa8214f6cb1e7ed9a3e6a35b3280ebb5d</anchor>
      <arglist>(std::vector&lt; std::pair&lt; VertexConstPtr, VertexConstPtr &gt; &gt; *edgesInQueue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getVertexQueue</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a1a0d4f8b65d64799adf1fa6f4677995e</anchor>
      <arglist>(std::vector&lt; VertexConstPtr &gt; *verticesInQueue)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numIterations</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>abe6e8e20bfafeb14b0783cfe1501f8ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ompl::base::Cost</type>
      <name>bestCost</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>aaf23298fbc6601af0eeba6454b49b8f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a937a1552a3ecb8d3dd1a44ff6512384d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRewireFactor</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a36d6bfe6fc9972debf35a8798c082ba5</anchor>
      <arglist>(double rewireFactor)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRewireFactor</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>ae40f7a96d58f67e75c195302d50f7cbb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSamplesPerBatch</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a8b513410d75af41e532aabe486f3d962</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getSamplesPerBatch</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a4a4fccfafecdcae7fd4c9de87a4ac7fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKNearest</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a4fee5539e3dd2a66479e8ebf9d7aa062</anchor>
      <arglist>(bool useKNearest)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getKNearest</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a42f28f8fabfc987940e48dd3f1db84ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStrictQueueOrdering</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a4c6ed74080a858a36e2bca01eed93073</anchor>
      <arglist>(bool beStrict)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getStrictQueueOrdering</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a4d75a1a791f55614a8f56a342b67d6c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPruning</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a742fde56a552462b86ec5ae593141c2a</anchor>
      <arglist>(bool prune)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getPruning</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>abaeebe13b23c10b351d5ef5ac9e73739</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPruneThresholdFraction</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>ab7a52698a1d43a1858aec85dd21cabb9</anchor>
      <arglist>(double fractionalChange)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPruneThresholdFraction</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>aab1ae41f6fc16955b960f4c1e793849f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDelayRewiringUntilInitialSolution</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>ae4ecec0085a6485ffd5c67857d478e42</anchor>
      <arglist>(bool delayRewiring)</arglist>
      <docanchor file="classompl_1_1geometric_1_1BITstar">gBITstarSetDelayRewiringUntilInitialSolution</docanchor>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getDelayRewiringUntilInitialSolution</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>aa9e93a5b3238350cb27f377dea4f199a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJustInTimeSampling</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a9e6ed621c5da68d0bda40195e5c31c78</anchor>
      <arglist>(bool useJit)</arglist>
      <docanchor file="classompl_1_1geometric_1_1BITstar">gBITstarSetJustInTimeSampling</docanchor>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getJustInTimeSampling</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a41c4caf1d1c4fc00914eafebe2b2e0db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDropSamplesOnPrune</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a1f801a1305705a067da449fa92699d99</anchor>
      <arglist>(bool dropSamples)</arglist>
      <docanchor file="classompl_1_1geometric_1_1BITstar">gBITstarSetDropSamplesOnPrune</docanchor>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getDropSamplesOnPrune</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>aeb58e8afccb069584f652c1de134cc28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStopOnSolnImprovement</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a1ddab1a9472e527a010615dbf107d7b0</anchor>
      <arglist>(bool stopOnChange)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getStopOnSolnImprovement</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a58ff4eac2c7544d374f26d6d7f1d561e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>estimateMeasures</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a3a62b1c1a6de7b66fb4200fe60527b35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>iterate</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>ad58e352b6ad8b40aba2164f848dd7122</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>newBatch</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a7a0f47e45999a607436be9185f922df6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateSamples</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>ad12a2d7a91b33ec515637d13d123570f</anchor>
      <arglist>(const VertexConstPtr &amp;vertex)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>prune</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a975b0c18fa867de36976c0b6bb90f38d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>resort</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a00571593ac7c30d49b8713b6e125eb4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>publishSolution</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>aea0f6d681e7cff5e6261f7de808f7dbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; const ompl::base::State * &gt;</type>
      <name>bestPathFromGoalToStart</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>af97f7f69de37bc8d4348c9473873feb7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateStartAndGoalStates</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a5888b6eff3d95088e5c4a41c35af1b02</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>pruneStartsGoals</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>aee9b70d508afdffd9e39c817ab9dc9c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>pruneSamples</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a8f8174806baa5a2c4f3b61e40b17db3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkEdge</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a11fe5510e8c8f93306608b25d8f58e6a</anchor>
      <arglist>(const VertexConstPtrPair &amp;edge)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dropSample</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>aeb92aeb83fed847fa835b24e685a1e8a</anchor>
      <arglist>(VertexPtr oldSample)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addEdge</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a0331485a574ddb254904ebd073e1bfa2</anchor>
      <arglist>(const VertexPtrPair &amp;newEdge, const ompl::base::Cost &amp;edgeCost, const bool &amp;removeFromFree, const bool &amp;updateDescendants)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>replaceParent</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a25824acd04ef2368c90aa6e6a023fc33</anchor>
      <arglist>(const VertexPtrPair &amp;newEdge, const ompl::base::Cost &amp;edgeCost, const bool &amp;updateDescendants)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateGoalVertex</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a5245ef881a9c5f19e9048f3abc5f6fea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addSample</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a6eda9c6faea2cc1a670426d084c47935</anchor>
      <arglist>(const VertexPtr &amp;newSample)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addVertex</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>ae6cafa0f512ee2ba813c1a10f3c1ee76</anchor>
      <arglist>(const VertexPtr &amp;newVertex, const bool &amp;removeFromFree)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned int</type>
      <name>nearestSamples</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a7d00cf6733495b1a2c98fde86e031594</anchor>
      <arglist>(const VertexPtr &amp;vertex, std::vector&lt; VertexPtr &gt; *neighbourSamples)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned int</type>
      <name>nearestVertices</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a581c5166f7078fa353c60a40698940a4</anchor>
      <arglist>(const VertexPtr &amp;vertex, std::vector&lt; VertexPtr &gt; *neighbourVertices)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>nnDistance</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>acf4cc0542c01504a58f285224e0e8b1a</anchor>
      <arglist>(const VertexConstPtr &amp;a, const VertexConstPtr &amp;b) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ompl::base::Cost</type>
      <name>lowerBoundHeuristicVertex</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a817618a1fed949683dfb1872a869661d</anchor>
      <arglist>(const VertexConstPtr &amp;vertex) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ompl::base::Cost</type>
      <name>currentHeuristicVertex</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>ade5f2d7f662a35de6e974218854bfa8d</anchor>
      <arglist>(const VertexConstPtr &amp;vertex) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ompl::base::Cost</type>
      <name>lowerBoundHeuristicEdge</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a3678fc3cb8b048fd65c7e4b22741231a</anchor>
      <arglist>(const VertexConstPtrPair &amp;edgePair) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ompl::base::Cost</type>
      <name>currentHeuristicEdge</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a8e22437e524b0be8c0bd1fbe9d05bbac</anchor>
      <arglist>(const VertexConstPtrPair &amp;edgePair) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ompl::base::Cost</type>
      <name>currentHeuristicEdgeTarget</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>ade1ffb15f198a34976789f95dea4894d</anchor>
      <arglist>(const VertexConstPtrPair &amp;edgePair) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ompl::base::Cost</type>
      <name>costToComeHeuristic</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>aa96172719f37728877d56fdfd6ec6829</anchor>
      <arglist>(const VertexConstPtr &amp;vertex) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ompl::base::Cost</type>
      <name>edgeCostHeuristic</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>aefd7ae5c7daf39ef17b6f754045173c6</anchor>
      <arglist>(const VertexConstPtrPair &amp;edgePair) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ompl::base::Cost</type>
      <name>costToGoHeuristic</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a74912de273158c6e209aed9bbb2c69f8</anchor>
      <arglist>(const VertexConstPtr &amp;vertex) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ompl::base::Cost</type>
      <name>trueEdgeCost</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>aa5aa9a21a58d1959a6c3bae597bc6730</anchor>
      <arglist>(const VertexConstPtrPair &amp;edgePair) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ompl::base::Cost</type>
      <name>neighbourhoodCost</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>af75a231c62fe44c8f6a003883a4afcfb</anchor>
      <arglist>(const VertexConstPtr &amp;vertex) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isCostWorseThan</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a4634a9dc734481198be1583defe94d03</anchor>
      <arglist>(const ompl::base::Cost &amp;a, const ompl::base::Cost &amp;b) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isCostNotEquivalentTo</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a1a2bf244456dc7233365316c6841f9d7</anchor>
      <arglist>(const ompl::base::Cost &amp;a, const ompl::base::Cost &amp;b) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isCostBetterThanOrEquivalentTo</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>ae5999ecc8eecc51293fa424b256c555f</anchor>
      <arglist>(const ompl::base::Cost &amp;a, const ompl::base::Cost &amp;b) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isCostWorseThanOrEquivalentTo</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>ad5cadbe4da5b8b0908154d5d068ba800</anchor>
      <arglist>(const ompl::base::Cost &amp;a, const ompl::base::Cost &amp;b) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ompl::base::Cost</type>
      <name>combineCosts</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a8dcb138cebae842e26b7360d0588decf</anchor>
      <arglist>(const ompl::base::Cost &amp;a, const ompl::base::Cost &amp;b, const ompl::base::Cost &amp;c) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ompl::base::Cost</type>
      <name>combineCosts</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a85862cc3042e75ff3135ff32562f3c1c</anchor>
      <arglist>(const ompl::base::Cost &amp;a, const ompl::base::Cost &amp;b, const ompl::base::Cost &amp;c, const ompl::base::Cost &amp;d) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>fractionalChange</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>aa5b2634387611fe075f96515ccbadddc</anchor>
      <arglist>(const ompl::base::Cost &amp;newCost, const ompl::base::Cost &amp;oldCost) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>fractionalChange</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>ad4d5ef1db8de977d3bb5473a98d8bbe6</anchor>
      <arglist>(const ompl::base::Cost &amp;newCost, const ompl::base::Cost &amp;oldCost, const ompl::base::Cost &amp;refCost) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initializeNearestTerms</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a1c7c881f7982dba0e87aa315594ad88f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateNearestTerms</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>ae81b3c1ed7643694ecb526d4bc28e347</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>calculateR</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>ad8289209ecd21ae3605610db20bcbf45</anchor>
      <arglist>(unsigned int N) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned int</type>
      <name>calculateK</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>ad507f2ebe37c7b2197e60cd6155263d0</anchor>
      <arglist>(unsigned int N) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>minimumRggR</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a2550840c28ee4a25bef7cba5fbdc594b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>minimumRggK</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>adf6f4f873bcaeaea0d4318aad86bce8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>goalMessage</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a82b158bb49f8063e290586b39d9a7e9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>endSuccessMessage</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a02ec18cd2accc49bf3d51b61e28ba3ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>endFailureMessage</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a6bb2927a25bf20a5786ed4ef9f6729e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>statusMessage</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a696999986d53fc2096cfb20e10fb5094</anchor>
      <arglist>(const ompl::msg::LogLevel &amp;msgLevel, const std::string &amp;status) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>bestCostProgressProperty</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>aa4f6704e62801362259f59c1cde01c2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>bestLengthProgressProperty</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a0da3b967a3157d9c88495225510a6a05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>currentFreeProgressProperty</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a36f0ee04e46f749e7a97fdf65ff8408c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>currentVertexProgressProperty</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a7d371be189ac1c476801f07b7df681ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>vertexQueueSizeProgressProperty</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a6da6f45ff101ec0f3dcaa7faa28dcca0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>edgeQueueSizeProgressProperty</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>ab9402a36332051c53ce254689ca24739</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>iterationProgressProperty</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>afe962cddc0afb1a38b41af2e5ec94424</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned int</type>
      <name>numBatches</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>afb79aaf281003825fcbee267fc6aef23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>batchesProgressProperty</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a1dd630990921b28718e313a2cc1c0a8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>pruningProgressProperty</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>aa8f8ded2f8d68ae0f5b6f463a614b241</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::string</type>
      <name>totalStatesCreatedProgressProperty</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a8151f0e3723a9f0467aedcf84422590b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>verticesConstructedProgressProperty</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a9397cedfe47d519b9bb86fc0ad72402a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>statesPrunedProgressProperty</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a7fb7ebf5d72b097484343a45e77f0dfe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>verticesDisconnectedProgressProperty</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a49de4d1e16390c9e5dfeebbd7a73fdf6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>rewiringProgressProperty</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a338a8a3885f642fa5eeb69c361c230db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>stateCollisionCheckProgressProperty</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>aa41fc06f1ca434decd36433ab864c81f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>edgeCollisionCheckProgressProperty</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>ac6dbaa31d7f9bf8db6dbd0d4743c1746</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>nearestNeighbourProgressProperty</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>add3f3ca02a51273d7295368d6153ca27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>edgesProcessedProgressProperty</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>ac68be7bd5957466a550b10c7a26d9ac9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ompl::RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>af7fb802bfab30501b6df7f109d4388e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ompl::base::InformedSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a87becebd227e3f78c51c567846e3ff24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ompl::base::OptimizationObjectivePtr</type>
      <name>opt_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>aa4c391e5296beeaf0e5b3096f3fc0e6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; VertexPtr &gt;</type>
      <name>startVertices_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a45237647c9bfbd8f3e79addecb2df01c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; VertexPtr &gt;</type>
      <name>goalVertices_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a963202ad390b3c7911de5e6ae66a71eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; VertexPtr &gt;</type>
      <name>prunedStartVertices_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a34c9a55ed8d44937690814cecb49fec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; VertexPtr &gt;</type>
      <name>prunedGoalVertices_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a2393a2bd2fcdbb416c787f7bd8a3d1b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VertexPtr</type>
      <name>curGoalVertex_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>ad3f06825ca0aa9e57837969e501dbf06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VertexPtrNNPtr</type>
      <name>freeStateNN_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>ada76d1b50f332e1dc7f66f633a718d00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VertexPtrNNPtr</type>
      <name>vertexNN_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a9b3d25bb85e2bba21b2f6addafc11dec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntegratedQueuePtr</type>
      <name>intQueue_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a5344c924ba17e73c099fe58c69b3ee63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; VertexPtr &gt;</type>
      <name>newSamples_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a71f06bd8717c4749ceecd43553396388</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; VertexPtr &gt;</type>
      <name>recycledSamples_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>abf6efc4e0fa7da2801106126b6dacc0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numUniformStates_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a6901fa8c5161e9c6018b7bfda585b6a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>r_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a1b81f92f5927c714c5b151b7569cc633</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>k_rgg_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>aa24504d05af42185f928ce834ead5775</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>k_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a93b0d6b5e4b737585f6e256a1cfa0178</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ompl::base::Cost</type>
      <name>bestCost_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>ac1110f9c6b25b162b942d57e67a09522</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>bestLength_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>accda9a3cfe5a61e34d4b46377b3a654f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ompl::base::Cost</type>
      <name>prunedCost_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a55fc3020c331f0abdafd2b83646e3c4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>prunedMeasure_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>af8c88d9dd3dcb845fbb1b69a949b79dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ompl::base::Cost</type>
      <name>minCost_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a2174900a6a611a8f23861b2fa1767f48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ompl::base::Cost</type>
      <name>costSampled_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>aaf90ef50fd56cbfa8eeeab62276e654f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>hasSolution_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>ae5cd0b6d587300cd64f13757801d3a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>stopLoop_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a45fcd2adf4a0cb11e6c2c3e4084fd4ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>approximateSoln_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a0544ef68c44f3da7b7ebe106a077351a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>approximateDiff_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a21fc5bf430585e347d02c656aab2d381</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numIterations_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a5a1104fcbdff7d874c89d4b5254558e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numBatches_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>ae3bd5ab14e38a4d3259ab8e9d4838aec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numPrunings_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a0e1a6720742e7c5f1a85ca9fb1ab0b97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numSamples_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>aaf6334594885aebe466eec0f3c852827</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numVertices_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a81d0cf6c7f7ccf125a1b1bcd21379181</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numFreeStatesPruned_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a1e25211ec527d30d99bd45a4e828421b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numVerticesDisconnected_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>aaa9426e5c2f5942513a669a0ccd0f338</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numRewirings_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a59447bab82daba5027351b1bc260f3cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numStateCollisionChecks_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a91b268903fe3024b4b5a168552abeb9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numEdgeCollisionChecks_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a9d2764a57f7303a2e03a2cd6e58c7fb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numNearestNeighbours_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a9c6a937bdbed561568d910b4df3c2bc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numEdgesProcessed_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>ae3ce4815f967854133d2b360a4e25061</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useStrictQueueOrdering_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a84181ecaef9f56797a6bd0b84b9702ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>rewireFactor_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a4c02309f6fe85744c383409186e0901d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>samplesPerBatch_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>ab6e6fca524a7c3aa567a702744c2d9dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useKNearest_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>af5f1008960a560b29832191db5c0c21c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>usePruning_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a8347af9e71d584506fbc1a989f63bf59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>pruneFraction_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a7ea70a263d5152e6309052634ea8966f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>delayRewiring_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>aea0c4d7a263628e0332d265db4b6bf62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useJustInTimeSampling_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>acd66d48b24364cf864533e53f8a02e32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>dropSamplesOnPrune_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>ad9a55401eb7f8e2acebba721d6527c2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>stopOnSolnChange_</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar.html</anchorfile>
      <anchor>a4037e21728b03289b30fea824c75ad64</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1BITstar">gBITstar</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::BITstar::IdGenerator</name>
    <filename>classompl_1_1geometric_1_1BITstar_1_1IdGenerator.html</filename>
    <member kind="function">
      <type>BITstar::VertexId</type>
      <name>getNewId</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IdGenerator.html</anchorfile>
      <anchor>a99921e15f14c31933a8d00b1e1cb5c59</anchor>
      <arglist>()</arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1BITstar_1_1IdGenerator">IdGenerator</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::BITstar::IntegratedQueue</name>
    <filename>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</filename>
    <member kind="typedef">
      <type>std::pair&lt; ompl::base::Cost, ompl::base::Cost &gt;</type>
      <name>CostPair</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>add27c92e6ae089e333d603c97ddd02e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; ompl::base::Cost(const VertexConstPtr &amp;)&gt;</type>
      <name>VertexHeuristicFunc</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>a1f21877b7d4d5fa45f26366041b2ddf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; ompl::base::Cost(const VertexConstPtrPair &amp;)&gt;</type>
      <name>EdgeHeuristicFunc</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>a6679b31d47dc8f06b20df66da10715e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; double(const VertexConstPtr &amp;, const VertexConstPtr &amp;)&gt;</type>
      <name>DistanceFunc</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>ab65ac275bb9e273f60e7348cec878cea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; unsigned int(const VertexPtr &amp;, std::vector&lt; VertexPtr &gt; *)&gt;</type>
      <name>NeighbourhoodFunc</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>afe556ae151398b2081eb69a86c35aecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntegratedQueue</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>aeec37c6a3ee123e905c409dd7424153b</anchor>
      <arglist>(const ompl::base::OptimizationObjectivePtr &amp;opt, const DistanceFunc &amp;distanceFunc, const NeighbourhoodFunc &amp;nearSamplesFunc, const NeighbourhoodFunc &amp;nearVerticesFunc, const VertexHeuristicFunc &amp;lowerBoundHeuristicVertex, const VertexHeuristicFunc &amp;currentHeuristicVertex, const EdgeHeuristicFunc &amp;lowerBoundHeuristicEdge, const EdgeHeuristicFunc &amp;currentHeuristicEdge, const EdgeHeuristicFunc &amp;currentHeuristicEdgeTarget)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDelayedRewiring</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>a909336b8f1c1748d4e52268841a68ae5</anchor>
      <arglist>(bool delayRewiring)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getDelayedRewiring</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>a13bc7c32c3ec8e7339f797067a85682e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertVertex</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>a689c53e5ab0bf20bc05f0f733dbc1874</anchor>
      <arglist>(const VertexPtr &amp;newVertex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertEdge</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>adc4d9a979592702d2e794a4fe12355b5</anchor>
      <arglist>(const VertexPtrPair &amp;newEdge)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseVertex</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>a47f447973b86790e3738570b5658adf3</anchor>
      <arglist>(const VertexPtr &amp;oldVertex, bool disconnectParent, const VertexPtrNNPtr &amp;vertexNN, const VertexPtrNNPtr &amp;freeStateNN, std::vector&lt; VertexPtr &gt; *recycledVertices)</arglist>
    </member>
    <member kind="function">
      <type>VertexPtr</type>
      <name>frontVertex</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>aceea726309ed615c998cef5f1a578d6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VertexPtrPair</type>
      <name>frontEdge</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>a30a104b3334cb4161fbce8d684aa5420</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::Cost</type>
      <name>frontVertexValue</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>a42cbab5c9e792a400809f95659876e73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CostPair</type>
      <name>frontEdgeValue</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>ae1af1d4bed27a6265a0274c5d45cda9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popFrontEdge</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>abf096c0cae2840bea8fc371deb57fbfa</anchor>
      <arglist>(VertexPtrPair *bestEdge)</arglist>
    </member>
    <member kind="function">
      <type>VertexPtrPair</type>
      <name>popFrontEdge</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>a935cb33648c97dc2d775e0f0589b2a4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hasSolution</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>a2c4e919dcffe30b0ba31d9a647e33e24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setThreshold</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>a3ab6a00dc8e2c34d7bfbcce2a0c94d60</anchor>
      <arglist>(const ompl::base::Cost &amp;costThreshold)</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::Cost</type>
      <name>getThreshold</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>a1f14f35adb88ef7c2010b5070d489bef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeEdgesTo</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>a1e4a01a31f1f06f016c0f2df4cc59e9a</anchor>
      <arglist>(const VertexPtr &amp;cVertex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeEdgesFrom</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>a48b6a66c209f634e2a97937958a18b7a</anchor>
      <arglist>(const VertexPtr &amp;pVertex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneEdgesTo</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>af1da1f51322521b2f31000f5ae2d811e</anchor>
      <arglist>(const VertexPtr &amp;cVertex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pruneEdgesFrom</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>a053757b3ef228f042492990013c39ca2</anchor>
      <arglist>(const VertexPtr &amp;pVertex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markVertexUnsorted</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>a135dd303977d7a0762bc48a03b2bc43f</anchor>
      <arglist>(const VertexPtr &amp;vertex)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; unsigned int, unsigned int &gt;</type>
      <name>prune</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>a193a6e97fac19b38a37bf207991de411</anchor>
      <arglist>(const VertexPtr &amp;pruneStartPtr, const VertexPtrNNPtr &amp;vertexNN, const VertexPtrNNPtr &amp;freeStateNN, std::vector&lt; VertexPtr &gt; *recycledVertices)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; unsigned int, unsigned int &gt;</type>
      <name>resort</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>a919cf87458536f8f06c15321efbf1007</anchor>
      <arglist>(const VertexPtrNNPtr &amp;vertexNN, const VertexPtrNNPtr &amp;freeStateNN, std::vector&lt; VertexPtr &gt; *recycledVertices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>aa186c504678d5ee4a5fd9b4c65306229</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>a00893471a0e44c57ab243a3249dc6810</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>af128e2b728f65bd8b2c0c8bed389ee7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>vertexPruneCondition</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>a2d8e55721ac2464fdc5f69a3472080c6</anchor>
      <arglist>(const VertexPtr &amp;vertex) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>samplePruneCondition</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>a71827623d6e34af05c37fd725e877229</anchor>
      <arglist>(const VertexPtr &amp;vertex) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>edgePruneCondition</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>a0e72254247a0b554757301946dfdf932</anchor>
      <arglist>(const VertexPtrPair &amp;edge) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numEdges</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>adb8ff196d2f081a42aaa0b4546be3d9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numVertices</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>afa51b7dc8edf02eb9021aaa936233954</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numEdgesTo</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>a4be70311fb4a8b45d02f544bc0f75405</anchor>
      <arglist>(const VertexPtr &amp;cVertex) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numEdgesFrom</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>a20ade2f1bdead44b62d8fcc6ea45049c</anchor>
      <arglist>(const VertexPtr &amp;pVertex) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSorted</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>a6c1ceabd4af6cf2efe2cd4cc49a7af32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isReset</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>ab94884af3f1943aa984754b6ad91adfb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>a91564e55df815e8b6c7523943712b8ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVertexExpanded</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>a39bd297de92bcbe702de030cb9090645</anchor>
      <arglist>(const VertexConstPtr &amp;vertex) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>listVertices</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>a8ea7aa81b9b9a6b128dd1f06b7bd705c</anchor>
      <arglist>(std::vector&lt; VertexConstPtr &gt; *vertexQueue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>listEdges</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue.html</anchorfile>
      <anchor>aec953e955b595c3f053bd52ae1f1d760</anchor>
      <arglist>(std::vector&lt; std::pair&lt; VertexConstPtr, VertexConstPtr &gt; &gt; *edgeQueue)</arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1BITstar_1_1IntegratedQueue">IntegratedQueue</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::BITstar::Vertex</name>
    <filename>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</filename>
    <member kind="function">
      <type></type>
      <name>Vertex</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a0395bf2e16886bc9c29c872916645f7f</anchor>
      <arglist>(const ompl::base::SpaceInformationPtr &amp;si, const ompl::base::OptimizationObjectivePtr &amp;opt, bool root=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Vertex</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a2ea0eb96d9a4127dde59e836283fd856</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BITstar::VertexId</type>
      <name>getId</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a4d46f188768717efe1c24f43db99617d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ompl::base::OptimizationObjectivePtr</type>
      <name>getOpt</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a2bda5f42b64ad33c0c6ae1a9db94d229</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ompl::base::State const *</type>
      <name>stateConst</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a501c71d13dfc447f4668cebf82884482</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ompl::base::State *</type>
      <name>state</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>abaded93206e9cf0be92ec24986d52533</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRoot</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>aa6d2160518e62e7d14a0b04ecf6b587c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasParent</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>ae8406fb8c6674e2f64009fd0506528a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInTree</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a54cdc3defcb12fa8717f8a777da2ea52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDepth</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a28c01b252b82e25ea7e0cfa66be494fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VertexConstPtr</type>
      <name>getParentConst</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a135fbbf686c092ddf9e849d39cc5d5c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VertexPtr</type>
      <name>getParent</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a9022ed1769a211d5709cf16bd9b218f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addParent</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>ac5219162f447d5c21dcede8fa1254731</anchor>
      <arglist>(const VertexPtr &amp;newParent, const ompl::base::Cost &amp;edgeInCost, bool updateChildCosts=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeParent</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a54db328d90aced270a8e9c29556c36e8</anchor>
      <arglist>(bool updateChildCosts=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasChildren</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>ad8f78c3752c1abecbdc2ceb21252afdf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getChildrenConst</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>aa5ac32ea789736673b96aaffa51e4e55</anchor>
      <arglist>(std::vector&lt; VertexConstPtr &gt; *children) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getChildren</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a9ce74fe4fa707cb5255bef117fbbeb31</anchor>
      <arglist>(std::vector&lt; VertexPtr &gt; *children)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addChild</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a94c1e8805036ca92b29e1e80a487f2cb</anchor>
      <arglist>(const VertexPtr &amp;newChild, bool updateChildCosts=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeChild</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a0155620f33de5d56fe2f828030ec808e</anchor>
      <arglist>(VertexPtr oldChild, bool updateChildCosts=true)</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::Cost</type>
      <name>getCost</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a0b3a435cbd27ac91a989847278f976d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ompl::base::Cost</type>
      <name>getEdgeInCost</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>ab4429f5827c56807ed9f4427e5c2b77c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNew</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>ae1dd6718aa65ee252e07c597590d1c7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markNew</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>ae1a339ecf66745e26e19e88f82b37895</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markOld</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a455e1b7546a5d0603557d30b9e2615fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasBeenExpandedToSamples</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>afd3e5974143a1208d0bffef8795d2afb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markExpandedToSamples</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a3207670686530701aa189e8b7254ae9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markUnexpandedToSamples</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>afadef33aa5d0ee415e411d6b8df839ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasBeenExpandedToVertices</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a9a0ef8f9fce85eec0b2a79c5b5f52512</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markExpandedToVertices</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a73a48a90dd81745e5b970472175a2066</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markUnexpandedToVertices</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a90473482b8029c282ba4466ebaf563c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPruned</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a45494f9c7e8b733f6282eef6f36ba01c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markPruned</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a169e5d64d04eb8f46a30080e0c0d319a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markUnpruned</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a789938595253a13e87e3b193db162e0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markAsFailedChild</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a74fc3e9c91825b39867d229ac3bf9ed7</anchor>
      <arglist>(const VertexConstPtr &amp;failedChild)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasAlreadyFailed</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a5229a902a45a36ef62a0db351a155054</anchor>
      <arglist>(const VertexConstPtr &amp;potentialChild) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateCostAndDepth</name>
      <anchorfile>classompl_1_1geometric_1_1BITstar_1_1Vertex.html</anchorfile>
      <anchor>a6a176c5469acbc9c3cc1e49d3bedaddd</anchor>
      <arglist>(bool cascadeUpdates=true)</arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1BITstar_1_1Vertex">gVertex</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::BKPIECE1</name>
    <filename>classompl_1_1geometric_1_1BKPIECE1.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::BKPIECE1::Motion</class>
    <member kind="function">
      <type></type>
      <name>BKPIECE1</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>a1e61534ba2f912016e00d94cfc5449e5</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>a0e505ace63ee03e5ccde6e9820aeabdb</anchor>
      <arglist>(const base::ProjectionEvaluatorPtr &amp;projectionEvaluator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>a0dbd0c85fa51f8ebce39a0ddc18517d8</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const base::ProjectionEvaluatorPtr &amp;</type>
      <name>getProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>a7139dc3077fb0891159c5eac03954b8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>ab803b4859de12fd5788e87b99c672679</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>a6ddfe2e00407011ace43b17081db7792</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderFraction</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>a57e4e557bbd43543c4fe5d5d3733b443</anchor>
      <arglist>(double bp)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBorderFraction</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>a2862941b1435fe1b184765f73db77252</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFailedExpansionCellScoreFactor</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>a06f49930fd458b8ff60626a1f0b1b775</anchor>
      <arglist>(double factor)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFailedExpansionCellScoreFactor</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>a6c0e814697c64ebe53fc445aa76a8ff8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinValidPathFraction</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>a1cc89cb07e13a333f6eed645a3dfcda3</anchor>
      <arglist>(double fraction)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMinValidPathFraction</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>a24d66a411aa912401c62d673c3f8c94c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>a2db256623b56ea1ea4ef04f072532ee8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>a8cd49874a2404f68169af2766afb2865</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>a601a2d24bf6b1425692d3a93e7d97960</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>a1e43aa6d5965a85004951302954de5d5</anchor>
      <arglist>(base::PlannerData &amp;data) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMotion</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>ae81ac9338565790508efaebbef3d8459</anchor>
      <arglist>(Motion *motion)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ValidStateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>a88a3a9f2986351a001955070e7d22046</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ProjectionEvaluatorPtr</type>
      <name>projectionEvaluator_</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>ac4b29de63c1a79e5ab2b819b182e230f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Discretization&lt; Motion &gt;</type>
      <name>dStart_</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>aa70b018d82b7bf967b7ed5ade3c51a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Discretization&lt; Motion &gt;</type>
      <name>dGoal_</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>a6083e1178d64a2064b8403a6e4d7f5be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>failedExpansionScoreFactor_</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>a921e950972763ff2a9fb7e3a32a710ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>minValidPathFraction_</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>aa0962644ccc8c2cf71dd42ca0bac3ff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistance_</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>a15a290a36bac34264d12f0ca3c3dc46d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>a422ff4aa4fe25dd13e40e8c9962ccc12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::pair&lt; base::State *, base::State * &gt;</type>
      <name>connectionPoint_</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1.html</anchorfile>
      <anchor>a8b25e79145b45633eba89d24a1de0d63</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1BKPIECE1">gBKPIECE1</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::BKPIECE1::Motion</name>
    <filename>classompl_1_1geometric_1_1BKPIECE1_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1_1_1Motion.html</anchorfile>
      <anchor>ac115375f7782835ba53dab9453de65bf</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="variable">
      <type>const base::State *</type>
      <name>root</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1_1_1Motion.html</anchorfile>
      <anchor>ab658fee6c2727e70f145252ec4df86c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1_1_1Motion.html</anchorfile>
      <anchor>a4a6799d168bbc9ee73504b56ddc8c34e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent</name>
      <anchorfile>classompl_1_1geometric_1_1BKPIECE1_1_1Motion.html</anchorfile>
      <anchor>a31d66a709c8a16e44787f019c9fc13b2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::CForest</name>
    <filename>classompl_1_1geometric_1_1CForest.html</filename>
    <base>ompl::base::Planner</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>aa74209da6c3cd825a014094891c24b54</anchor>
      <arglist>(base::PlannerData &amp;data) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>a8956019d5e87837b5c3aaf420ea51767</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPlannerInstance</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>af28102f31f63b45c5230ec59335bff1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPlannerInstances</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>a72a520063706be6efa62e68cf1f7c179</anchor>
      <arglist>(std::size_t num=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearPlannerInstances</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>aea227489f58d6fdda9ba4d0de82e88e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerPtr &amp;</type>
      <name>getPlannerInstance</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>a07715853f17ce077692818f47ea654f5</anchor>
      <arglist>(const std::size_t idx)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>a19e23f7488b89ace3973644140adaf8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>a47a45f7a61312bae716b43fa1261442c</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFocusSearch</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>adaaa851a40d4e7ceecd4a7d6351f1f00</anchor>
      <arglist>(const bool focus)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getFocusSearch</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>a2c2329bdc2035df932bd36347690fee9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumThreads</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>a8afa358915bfa89765f78fce46b0595f</anchor>
      <arglist>(unsigned int numThreads=0)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumThreads</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>a132f958ae097a3a1d71e9db49adfad36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getBestCost</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>ab70ce856328c8543f5124b6cf650b1d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getNumPathsShared</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>a5f627d67be759dc24e79f64a014ac125</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getNumStatesShared</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>a61a3e6dfeb92938a6be2be8c37a154a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>a185bafe7c4cd4297efc87bfefb9737f3</anchor>
      <arglist>(base::Planner *planner, const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::OptimizationObjectivePtr</type>
      <name>opt_</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>a2b25a59faa0fabbb99d9a540ab252303</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; base::PlannerPtr &gt;</type>
      <name>planners_</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>a26984b385802c484d2444c0f61e46fe4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; base::StateSamplerPtr &gt;</type>
      <name>samplers_</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>a0cd9f52782a607c696649a18b879ae16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_set&lt; const base::State * &gt;</type>
      <name>statesShared_</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>a98df21465bd40a0ca381bf92328ce12e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::Cost</type>
      <name>bestCost_</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>a26caf4e8b3d20b8e2b0b245d1faa7afa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numPathsShared_</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>a8da0b7ee06c5009bdef0fdf9100522b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numStatesShared_</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>aff4bc36cb2c7cbf006a59c4a809a192b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::mutex</type>
      <name>newSolutionFoundMutex_</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>ab6e764f914f8514eb92d1f77b2402373</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::mutex</type>
      <name>addSamplerMutex_</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>a60fdfef9f1d1e9fee70dab618280ae81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>focusSearch_</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>ae523000e355ae5144669a57084efb1ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numThreads_</name>
      <anchorfile>classompl_1_1geometric_1_1CForest.html</anchorfile>
      <anchor>a0c4118c49564c89c7e42c556115cb9b2</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1CForest">gCForest</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::Discretization</name>
    <filename>classompl_1_1geometric_1_1Discretization.html</filename>
    <templarg>Motion</templarg>
    <class kind="struct">ompl::geometric::Discretization::CellData</class>
    <class kind="struct">ompl::geometric::Discretization::OrderCellsByImportance</class>
    <member kind="typedef">
      <type>GridB&lt; CellData *, OrderCellsByImportance &gt;</type>
      <name>Grid</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>ac21186181755603cb91938f280e9dbc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::Cell</type>
      <name>Cell</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a810ca49dd7278f5699560d2af1a4bc26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::Coord</type>
      <name>Coord</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a685f1b61176111a7a248f20350f421e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(Motion *)&gt;</type>
      <name>FreeMotionFn</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a4751b8382ffd0a524df59aea6312c3fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderFraction</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>aac6dfc7acc8db082a84b7bbdadb78e87</anchor>
      <arglist>(double bp)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBorderFraction</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>aede8396b50f3e68cb8de595adbf036a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimension</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>acfdbc5b059330490b55185dda00f0eb1</anchor>
      <arglist>(unsigned int dim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a43c29d951fd5206e08a33931b02c4ddc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a28df4ebd2c0d78eab8b4fc72c6f27d43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>addMotion</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a6ac71e099d8a69dc6c2ee5ff1736a277</anchor>
      <arglist>(Motion *motion, const Coord &amp;coord, double dist=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selectMotion</name>
      <anchorfile>classompl_1_1geometric_1_1Discretization.html</anchorfile>
      <anchor>a8db183fa4a3231509336ffb7057805df</anchor>
      <arglist>(Motion *&amp;smotion, Cell *&amp;scell)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::Discretization::CellData</name>
    <filename>structompl_1_1geometric_1_1Discretization_1_1CellData.html</filename>
    <member kind="variable">
      <type>std::vector&lt; Motion * &gt;</type>
      <name>motions</name>
      <anchorfile>structompl_1_1geometric_1_1Discretization_1_1CellData.html</anchorfile>
      <anchor>aee2a1799a55bdc3ed15e7920b1d36757</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>coverage</name>
      <anchorfile>structompl_1_1geometric_1_1Discretization_1_1CellData.html</anchorfile>
      <anchor>ac7a58b36b1ec1834200c1704b63bfa3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>selections</name>
      <anchorfile>structompl_1_1geometric_1_1Discretization_1_1CellData.html</anchorfile>
      <anchor>a45ea371833bde9daba518b76d54ff794</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>score</name>
      <anchorfile>structompl_1_1geometric_1_1Discretization_1_1CellData.html</anchorfile>
      <anchor>a42338a1046b5d86cd309d79d30d34321</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>iteration</name>
      <anchorfile>structompl_1_1geometric_1_1Discretization_1_1CellData.html</anchorfile>
      <anchor>ae2164d5b2e2d2805a61aabd3e326ea62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>importance</name>
      <anchorfile>structompl_1_1geometric_1_1Discretization_1_1CellData.html</anchorfile>
      <anchor>ab6eecc2c36a2cda7a473f7fa2f556c3d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::Discretization::OrderCellsByImportance</name>
    <filename>structompl_1_1geometric_1_1Discretization_1_1OrderCellsByImportance.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structompl_1_1geometric_1_1Discretization_1_1OrderCellsByImportance.html</anchorfile>
      <anchor>ad7bebc77a8c63baac356336e706a66b2</anchor>
      <arglist>(const CellData *const a, const CellData *const b) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::DynamicTimeWarpPtr</name>
    <filename>classompl_1_1geometric_1_1DynamicTimeWarpPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::EST</name>
    <filename>classompl_1_1geometric_1_1EST.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::EST::Motion</class>
    <member kind="function">
      <type></type>
      <name>EST</name>
      <anchorfile>classompl_1_1geometric_1_1EST.html</anchorfile>
      <anchor>a1c75f832cbc2519158f3bbf9ee700362</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1EST.html</anchorfile>
      <anchor>a36c008f1281af34cd405b7a6f42938e4</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1EST.html</anchorfile>
      <anchor>a90af1f880ca72d43be38fe96d9c73f9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1EST.html</anchorfile>
      <anchor>a8b442f32077d90406ae1811a519e2177</anchor>
      <arglist>(double goalBias)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1EST.html</anchorfile>
      <anchor>a01c8d67602a2085b3f8491c5ea8d13bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1EST.html</anchorfile>
      <anchor>a936be30374d627e1fd6b1d2781a030e6</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1EST.html</anchorfile>
      <anchor>a765ee327ba017da3f432a63b12db2391</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1EST.html</anchorfile>
      <anchor>a9323f881c2ac2cd32d6cd8675c520977</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1EST.html</anchorfile>
      <anchor>af5e5d1ba32389dac630db53c1bdd867b</anchor>
      <arglist>(base::PlannerData &amp;data) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1EST.html</anchorfile>
      <anchor>a929a5b7ec9a643a3975fccc5fe4d2d41</anchor>
      <arglist>(const Motion *a, const Motion *b) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1EST.html</anchorfile>
      <anchor>ab17af4f487d7f9abeb6be6baf32909e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addMotion</name>
      <anchorfile>classompl_1_1geometric_1_1EST.html</anchorfile>
      <anchor>ac7f0ef1520cceef81b84aef59376e59e</anchor>
      <arglist>(Motion *motion, const std::vector&lt; Motion * &gt; &amp;neighbors)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Motion * &gt; &gt;</type>
      <name>nn_</name>
      <anchorfile>classompl_1_1geometric_1_1EST.html</anchorfile>
      <anchor>a0786a71eccb3a9543ac0a1a620307fe1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Motion * &gt;</type>
      <name>motions_</name>
      <anchorfile>classompl_1_1geometric_1_1EST.html</anchorfile>
      <anchor>a5db24287eb8d75ddfa5241f59d9742a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PDF&lt; Motion * &gt;</type>
      <name>pdf_</name>
      <anchorfile>classompl_1_1geometric_1_1EST.html</anchorfile>
      <anchor>a31ba7d4c7a6483387aec3be0632cad38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ValidStateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1EST.html</anchorfile>
      <anchor>ad8a720f509aba891d30bb8765f98ab31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>goalBias_</name>
      <anchorfile>classompl_1_1geometric_1_1EST.html</anchorfile>
      <anchor>a6b33b06f16776e104073cd74af8480b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistance_</name>
      <anchorfile>classompl_1_1geometric_1_1EST.html</anchorfile>
      <anchor>adecb398b5fd5d0c202663b5e2ee3f7d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>nbrhoodRadius_</name>
      <anchorfile>classompl_1_1geometric_1_1EST.html</anchorfile>
      <anchor>ae57c920eb92171c4e2dc97a45adcc847</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1EST.html</anchorfile>
      <anchor>ace4457f72f78ca1f991035c3beb17dcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>lastGoalMotion_</name>
      <anchorfile>classompl_1_1geometric_1_1EST.html</anchorfile>
      <anchor>acf7454edcd211d0b75d96388d47bd9c4</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1EST">gEST</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::EST::Motion</name>
    <filename>classompl_1_1geometric_1_1EST_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1geometric_1_1EST_1_1Motion.html</anchorfile>
      <anchor>a71671c21d659fea1959b7cb31e03f0c1</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state</name>
      <anchorfile>classompl_1_1geometric_1_1EST_1_1Motion.html</anchorfile>
      <anchor>acd1f3149d66c9708e29177956c1fca5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent</name>
      <anchorfile>classompl_1_1geometric_1_1EST_1_1Motion.html</anchorfile>
      <anchor>afd5c7859f515492855e625d0afef5376</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PDF&lt; Motion * &gt;::Element *</type>
      <name>element</name>
      <anchorfile>classompl_1_1geometric_1_1EST_1_1Motion.html</anchorfile>
      <anchor>a18a67ffa58e074538ec7e2db7cc094d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::ExperienceSetupPtr</name>
    <filename>classompl_1_1geometric_1_1ExperienceSetupPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::FMT</name>
    <filename>classompl_1_1geometric_1_1FMT.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="struct">ompl::geometric::FMT::CostIndexCompare</class>
    <class kind="class">ompl::geometric::FMT::Motion</class>
    <class kind="struct">ompl::geometric::FMT::MotionCompare</class>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a252fefa86a8e4adcead4db153a193b3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a16c1fb13fd113c89f9ac8fe19e4dcdba</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>aad1abe78084898384748b807310bf918</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>ade1f5d6a45f2df8b65f68ab77496794d</anchor>
      <arglist>(base::PlannerData &amp;data) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumSamples</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>afb43613a5f83ade6f8e90a0fa2afa544</anchor>
      <arglist>(const unsigned int numSamples)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumSamples</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a856e0fe3b0b230f755b1753fe53d7980</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestK</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a42f5988a32959677a5359606e456bf35</anchor>
      <arglist>(bool nearestK)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getNearestK</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a28ac7acb4109f75428483ba3abeba1f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadiusMultiplier</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>aa83e373538a982c432ac02ec432e1f01</anchor>
      <arglist>(const double radiusMultiplier)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRadiusMultiplier</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a2dcc08aef047b155f404d943b3bfe047</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFreeSpaceVolume</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a4759ec382b8b7d936ca3217094e72cc0</anchor>
      <arglist>(const double freeSpaceVolume)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFreeSpaceVolume</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a18a7bb076cf18d04cb572806d29d4f91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCacheCC</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>ad2c94de24c34b0179245f7e0fbf244c8</anchor>
      <arglist>(bool ccc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getCacheCC</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a0d993593a050529444f05dabc6f25bda</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeuristics</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a9853289ae258425e0e2d164cbe4de2c3</anchor>
      <arglist>(bool h)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getHeuristics</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a5b48ed54511ba39ab41ae175bf98a616</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExtendedFMT</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a239d84affbc51508147b25493d0369de</anchor>
      <arglist>(bool e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getExtendedFMT</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a5840a25b05a28ced53cb3f1bf4089fa4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ompl::BinaryHeap&lt; Motion *, MotionCompare &gt;</type>
      <name>MotionBinHeap</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a21b8699f0cc26dec8fab109b882a8e4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a12a419a5c6dce0d5961d62e37382731b</anchor>
      <arglist>(const Motion *a, const Motion *b) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a78b1fd3cfca7f4c32f2d3bf3a1fa5172</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sampleFree</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a61887b3a9a652085c2086491455b26c0</anchor>
      <arglist>(const ompl::base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>assureGoalIsSampled</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>afed93c73acbf178c41fe49d4d6a3e0de</anchor>
      <arglist>(const ompl::base::GoalSampleableRegion *goal)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>calculateUnitBallVolume</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a7125eb3d06ef10fa71b50732ba8a5881</anchor>
      <arglist>(const unsigned int dimension) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>calculateRadius</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>ab5ad6be63140371f4e7b98fdd185a182</anchor>
      <arglist>(unsigned int dimension, unsigned int n) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>saveNeighborhood</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a257fcb8c64559bc2514493878e25675a</anchor>
      <arglist>(Motion *m)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>traceSolutionPathThroughTree</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a474bc61c2381a765f447406b0150e031</anchor>
      <arglist>(Motion *goalMotion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>expandTreeFromNode</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>ac77f66e21b5d554fac36d1f8e5b58159</anchor>
      <arglist>(Motion **z)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNeighborhood</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a6fb6eb95ee63dd04dea911ee7ec85f4b</anchor>
      <arglist>(Motion *m, const std::vector&lt; Motion * &gt; nbh)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Motion *</type>
      <name>getBestParent</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a5c0b13a2dc2b976701ea76e22f93b96f</anchor>
      <arglist>(Motion *m, std::vector&lt; Motion * &gt; &amp;neighbors, base::Cost &amp;cMin)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MotionBinHeap</type>
      <name>Open_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>aca5af8c2d2b2a977c24a5077e386e39d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; Motion *, std::vector&lt; Motion * &gt; &gt;</type>
      <name>neighborhoods_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>abb4c5549da4296ff25cbce7a427b3e98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numSamples_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a4cf51874570d8086f93d84cdcf5afa38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>collisionChecks_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>ac2363aeafad97afc4dca4da81d4465f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>nearestK_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a0f6a9a5969fc80fcf10e84ec46056a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cacheCC_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a3dcccb245843c4a244af2bb2fc8accb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>heuristics_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a46469aa4f63eb64b41cc3fca8dc6d503</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>NNr_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a72da258028ee6eafe239b4ba6cc4822c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>NNk_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a0728a9660b89e6fea28f6b3dff82d2d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>freeSpaceVolume_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a8dd5fe05d2383b43f96318afc8eb0be0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>radiusMultiplier_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a46d97fd804d843808f96973d8428665a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Motion * &gt; &gt;</type>
      <name>nn_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>aae71532705d421fb1e6b8269f74b046b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a9f9dd746c6cb063687e266617c4b1c29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::OptimizationObjectivePtr</type>
      <name>opt_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a67cd18c51459d03b612fb3c8355a4b66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>lastGoalMotion_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>ab3251b6c49209567fadcc43bf567eb1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::State *</type>
      <name>goalState_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>a6ca36dda45204a1b4b6d90b2770d7f92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>extendedFMT_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT.html</anchorfile>
      <anchor>adff4cf3f367615fc892ec60383f3230a</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1FMT">gFMT</docanchor>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::FMT::CostIndexCompare</name>
    <filename>structompl_1_1geometric_1_1FMT_1_1CostIndexCompare.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::FMT::Motion</name>
    <filename>classompl_1_1geometric_1_1FMT_1_1Motion.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>SetType</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>a68a989125a03b512037ee3c8aea8bd28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>a2e9bdc4483bd55bcfa7b31bba08fee8d</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>a4488bd2a64f04406454492b0c014ea5a</anchor>
      <arglist>(base::State *state)</arglist>
    </member>
    <member kind="function">
      <type>base::State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>a3327f83fba5dbcf717d7cdf84da9e545</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParent</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>a1449922309b22b10155222173fd163dd</anchor>
      <arglist>(Motion *parent)</arglist>
    </member>
    <member kind="function">
      <type>Motion *</type>
      <name>getParent</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>af9de53b1395f6db36366b23c5e88a15b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCost</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>a5db676fc41c3bebbc7c0fd440d2dba95</anchor>
      <arglist>(const base::Cost cost)</arglist>
    </member>
    <member kind="function">
      <type>base::Cost</type>
      <name>getCost</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>a007f31a970ec00d44ef397763a2ce2d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSetType</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>a1d61a21c419567a7b28343a0970d6f72</anchor>
      <arglist>(const SetType currentSet)</arglist>
    </member>
    <member kind="function">
      <type>SetType</type>
      <name>getSetType</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>a1c712884be50b161b02ef3d0d7f7192c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>alreadyCC</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>ab8348b2ffa273ad5e8743e88aa919ae1</anchor>
      <arglist>(Motion *m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCC</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>a572eb9444051a1e04e937b38abf81ece</anchor>
      <arglist>(Motion *m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeuristicCost</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>a3d6d4d1e6a8ccbaa539e979ea2a5c9c8</anchor>
      <arglist>(const base::Cost h)</arglist>
    </member>
    <member kind="function">
      <type>base::Cost</type>
      <name>getHeuristicCost</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>ab42caf767f3491d9fdab226be000d887</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Motion * &gt; &amp;</type>
      <name>getChildren</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>a2a185baaf7d146a8a2b83db9dfb7b737</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::State *</type>
      <name>state_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>aa72507244f4d8bdf0cdfc4fa0f80f61c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>parent_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>acd90f2933f4efdd50cf3abe95a34727d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::Cost</type>
      <name>cost_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>a0cae6a60321e25e746a63fdfaa47b6a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::Cost</type>
      <name>hcost_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>a73deb7e54e0a15fb282ba2c5d3604e5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SetType</type>
      <name>currentSet_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>aeb5bf2d1c873379ca41c28464153102c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; Motion * &gt;</type>
      <name>collChecksDone_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>a03b1658af9d7d9003369bd731232ac53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Motion * &gt;</type>
      <name>children_</name>
      <anchorfile>classompl_1_1geometric_1_1FMT_1_1Motion.html</anchorfile>
      <anchor>af5011f60954ba54975c1bfcefb0ed545</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::FMT::MotionCompare</name>
    <filename>structompl_1_1geometric_1_1FMT_1_1MotionCompare.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::GeneticSearch</name>
    <filename>classompl_1_1geometric_1_1GeneticSearch.html</filename>
    <member kind="function">
      <type></type>
      <name>GeneticSearch</name>
      <anchorfile>classompl_1_1geometric_1_1GeneticSearch.html</anchorfile>
      <anchor>a102ebe13ba8e436580b10589ced5dbd7</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1GeneticSearch.html</anchorfile>
      <anchor>a49004df0b90369b7c576d34f5a1c5458</anchor>
      <arglist>(double solveTime, const base::GoalRegion &amp;goal, base::State *result, const std::vector&lt; base::State * &gt; &amp;hint=std::vector&lt; base::State * &gt;())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxImproveSteps</name>
      <anchorfile>classompl_1_1geometric_1_1GeneticSearch.html</anchorfile>
      <anchor>a0b221def8d25da4d523097bafb0c0382</anchor>
      <arglist>(unsigned int maxSteps)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMaxImproveSteps</name>
      <anchorfile>classompl_1_1geometric_1_1GeneticSearch.html</anchorfile>
      <anchor>aa3216464ae31b9b1a886f462c6845638</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValidityCheck</name>
      <anchorfile>classompl_1_1geometric_1_1GeneticSearch.html</anchorfile>
      <anchor>a342d6b266d8cad1707e826ad6862fc21</anchor>
      <arglist>(bool valid)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getValidityCheck</name>
      <anchorfile>classompl_1_1geometric_1_1GeneticSearch.html</anchorfile>
      <anchor>a96c3b112108680c85e4790b37addbd30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTryImprove</name>
      <anchorfile>classompl_1_1geometric_1_1GeneticSearch.html</anchorfile>
      <anchor>a874fd7d6f65219d166bd2657ba8e21a6</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getTryImprove</name>
      <anchorfile>classompl_1_1geometric_1_1GeneticSearch.html</anchorfile>
      <anchor>a00e4df3765c0946bb0d8f27715b9b943</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPoolSize</name>
      <anchorfile>classompl_1_1geometric_1_1GeneticSearch.html</anchorfile>
      <anchor>a7e1bfe0ff0b32538d8e86b9f6aafd65c</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getPoolSize</name>
      <anchorfile>classompl_1_1geometric_1_1GeneticSearch.html</anchorfile>
      <anchor>a805bf20d5cc357d85915078d462dd4bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPoolMutationSize</name>
      <anchorfile>classompl_1_1geometric_1_1GeneticSearch.html</anchorfile>
      <anchor>ae7d2b17af8b3da5ef2d0e387f40ee7d3</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getPoolMutationSize</name>
      <anchorfile>classompl_1_1geometric_1_1GeneticSearch.html</anchorfile>
      <anchor>ac9cf039bc5450dca11b5f2098aeebdf9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPoolRandomSize</name>
      <anchorfile>classompl_1_1geometric_1_1GeneticSearch.html</anchorfile>
      <anchor>a657e0ff0af8aec75bcac6c6542703226</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getPoolRandomSize</name>
      <anchorfile>classompl_1_1geometric_1_1GeneticSearch.html</anchorfile>
      <anchor>ad91415d83f790f5c6fd5d4d684126561</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1GeneticSearch.html</anchorfile>
      <anchor>a5159ccc66833ed8a99f4e540ecb55252</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1GeneticSearch.html</anchorfile>
      <anchor>a86e1df7aaeb1460104bc3093fd981c0e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1GeneticSearch.html</anchorfile>
      <anchor>afc6aec650f165b0b911a52adcea6f0a1</anchor>
      <arglist>()</arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1GeneticSearch">GeneticSearch</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::HillClimbing</name>
    <filename>classompl_1_1geometric_1_1HillClimbing.html</filename>
    <member kind="function">
      <type></type>
      <name>HillClimbing</name>
      <anchorfile>classompl_1_1geometric_1_1HillClimbing.html</anchorfile>
      <anchor>af58b37f3042fb71757b5b655e0aa6330</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryToImprove</name>
      <anchorfile>classompl_1_1geometric_1_1HillClimbing.html</anchorfile>
      <anchor>a48f57c4965b7422fe5b8f594f18ba122</anchor>
      <arglist>(const base::GoalRegion &amp;goal, base::State *state, double nearDistance, double *betterGoalDistance=nullptr) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxImproveSteps</name>
      <anchorfile>classompl_1_1geometric_1_1HillClimbing.html</anchorfile>
      <anchor>af5c758bf483d9271d0948d10e631d9e7</anchor>
      <arglist>(unsigned int steps)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMaxImproveSteps</name>
      <anchorfile>classompl_1_1geometric_1_1HillClimbing.html</anchorfile>
      <anchor>a3c95cfe671da71f258044952f3232428</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValidityCheck</name>
      <anchorfile>classompl_1_1geometric_1_1HillClimbing.html</anchorfile>
      <anchor>a5f58d79e6cd1075d96bc2a8f8199ec6f</anchor>
      <arglist>(bool valid)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getValidityCheck</name>
      <anchorfile>classompl_1_1geometric_1_1HillClimbing.html</anchorfile>
      <anchor>aa59ad67446051f6f5f031b3bdf25ea64</anchor>
      <arglist>() const </arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1HillClimbing">HillClimbing</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::InformedRRTstar</name>
    <filename>classompl_1_1geometric_1_1InformedRRTstar.html</filename>
    <base>ompl::geometric::RRTstar</base>
    <member kind="function">
      <type></type>
      <name>InformedRRTstar</name>
      <anchorfile>classompl_1_1geometric_1_1InformedRRTstar.html</anchorfile>
      <anchor>a989e59137c9ca2dfd2d2953d02d9e6b6</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1InformedRRTstar">gInformedRRTstar</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::KBoundedStrategy</name>
    <filename>classompl_1_1geometric_1_1KBoundedStrategy.html</filename>
    <templarg>Milestone</templarg>
    <base>ompl::geometric::KStrategy</base>
    <member kind="function">
      <type></type>
      <name>KBoundedStrategy</name>
      <anchorfile>classompl_1_1geometric_1_1KBoundedStrategy.html</anchorfile>
      <anchor>aebfcb632b1235d72432cbd164e21cf37</anchor>
      <arglist>(const unsigned int k, const double bound, const std::shared_ptr&lt; NearestNeighbors&lt; Milestone &gt; &gt; &amp;nn)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const double</type>
      <name>bound_</name>
      <anchorfile>classompl_1_1geometric_1_1KBoundedStrategy.html</anchorfile>
      <anchor>a8417c2d35fa2f74ce103623888815110</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::KPIECE1</name>
    <filename>classompl_1_1geometric_1_1KPIECE1.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::KPIECE1::Motion</class>
    <member kind="function">
      <type></type>
      <name>KPIECE1</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>a192f8ba0095c91a178fc70c3eb8f0e8e</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>a2d1544eb8c6ab2bf955f663422eadf4b</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>a9f222058c40e9f9e24534c6a08b91f9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>a8fd941be8060c5c17019887229f062d8</anchor>
      <arglist>(double goalBias)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>a8e105aea72823f2b18aec1ff337a3b0f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>aa2cbc576cd5a67a32883e9ab7bac2583</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>a0a2240cf05e57f3c6b42160d3c9a18e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderFraction</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>ab51c0306d01ffe4d1912d9cdd4f55a3a</anchor>
      <arglist>(double bp)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBorderFraction</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>ac49513b2b5f41f70fa5d3c5bbaf359dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinValidPathFraction</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>a75474aa3b762ac9afa6bf475dfbe1fec</anchor>
      <arglist>(double fraction)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMinValidPathFraction</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>ac625f70b7cd7f3aa7d5eefe9f051fcad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFailedExpansionCellScoreFactor</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>a335139a09460d65db1a8eb5700d1aab7</anchor>
      <arglist>(double factor)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFailedExpansionCellScoreFactor</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>a06b05e732d95371b31d3303ccf8ac7fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>ac62f9854c1f26808a0cfa319b0060fc2</anchor>
      <arglist>(const base::ProjectionEvaluatorPtr &amp;projectionEvaluator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>a680d607659b8ceaa51c43f0e342ce49e</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const base::ProjectionEvaluatorPtr &amp;</type>
      <name>getProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>a09bee33813eea6ed013fc4aa4d9ec8f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>afa5584731e3728dfaca4e8a0065277b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>a9237d5408e901a53951948c08f70ae88</anchor>
      <arglist>(base::PlannerData &amp;data) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMotion</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>aea9ced6e390f478d108e7e8c1a662a54</anchor>
      <arglist>(Motion *motion)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>aeed29532bca0d2956addd5d9fe9888b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Discretization&lt; Motion &gt;</type>
      <name>disc_</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>a60d8490911f47565fc085d0b0e5c9f62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ProjectionEvaluatorPtr</type>
      <name>projectionEvaluator_</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>a0d2bea89173b3bd0b6dba6dfee899805</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>failedExpansionScoreFactor_</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>abc4ccdca2bed53632dd68c1e21f78489</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>goalBias_</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>a27013f7e58c20bf7a7ecb16a662358fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>minValidPathFraction_</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>a8fdf659ed4635fbbefc64fa627ae6ce0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistance_</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>af35630c62772c43535d8cdb6f6d87b55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>acbdf66ac8834a27368ac30d9e6d24f5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>lastGoalMotion_</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1.html</anchorfile>
      <anchor>a7011055d98a77343bf8e8b275b5a82e5</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1KPIECE1">gKPIECE1</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::KPIECE1::Motion</name>
    <filename>classompl_1_1geometric_1_1KPIECE1_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1_1_1Motion.html</anchorfile>
      <anchor>a943e0fe9f06808cc94fa0533b8c93a11</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1_1_1Motion.html</anchorfile>
      <anchor>a5d1e5baf3d93eef48769ba2dd635aac1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent</name>
      <anchorfile>classompl_1_1geometric_1_1KPIECE1_1_1Motion.html</anchorfile>
      <anchor>a15cb8c4fbbdf9131bf3db4679b14dace</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::KStarStrategy</name>
    <filename>classompl_1_1geometric_1_1KStarStrategy.html</filename>
    <templarg>Milestone</templarg>
    <base>ompl::geometric::KStrategy</base>
    <member kind="function">
      <type></type>
      <name>KStarStrategy</name>
      <anchorfile>classompl_1_1geometric_1_1KStarStrategy.html</anchorfile>
      <anchor>a44cd5500c81d9277c1e2d5104973535c</anchor>
      <arglist>(const NumNeighborsFn &amp;n, const std::shared_ptr&lt; NearestNeighbors&lt; Milestone &gt; &gt; &amp;nn, const unsigned int d=1)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const NumNeighborsFn</type>
      <name>n_</name>
      <anchorfile>classompl_1_1geometric_1_1KStarStrategy.html</anchorfile>
      <anchor>a575ab299a1f4c23a2e3c42ae3a587634</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::KStrategy</name>
    <filename>classompl_1_1geometric_1_1KStrategy.html</filename>
    <templarg>Milestone</templarg>
    <member kind="function">
      <type></type>
      <name>KStrategy</name>
      <anchorfile>classompl_1_1geometric_1_1KStrategy.html</anchorfile>
      <anchor>ab2bc46e62e1a01152b20fd0b7dd00f0c</anchor>
      <arglist>(const unsigned int k, const std::shared_ptr&lt; NearestNeighbors&lt; Milestone &gt; &gt; &amp;nn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1KStrategy.html</anchorfile>
      <anchor>a1f2a3e83d00f2a2b1443e2d182e6b6ce</anchor>
      <arglist>(const std::shared_ptr&lt; NearestNeighbors&lt; Milestone &gt; &gt; &amp;nn)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Milestone &gt; &amp;</type>
      <name>operator()</name>
      <anchorfile>classompl_1_1geometric_1_1KStrategy.html</anchorfile>
      <anchor>ad0f6f3289047f520643ff557628b0d3b</anchor>
      <arglist>(const Milestone &amp;m)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>k_</name>
      <anchorfile>classompl_1_1geometric_1_1KStrategy.html</anchorfile>
      <anchor>aa9592c00a8daa71d247077553052e48d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Milestone &gt; &gt;</type>
      <name>nn_</name>
      <anchorfile>classompl_1_1geometric_1_1KStrategy.html</anchorfile>
      <anchor>a5e60a606835ee3a293332e2526c23904</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Milestone &gt;</type>
      <name>neighbors_</name>
      <anchorfile>classompl_1_1geometric_1_1KStrategy.html</anchorfile>
      <anchor>ae087877ca61f5f8822cf0d702fd581e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::LazyLBTRRT</name>
    <filename>classompl_1_1geometric_1_1LazyLBTRRT.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::LazyLBTRRT::CostEstimatorApx</class>
    <class kind="class">ompl::geometric::LazyLBTRRT::CostEstimatorLb</class>
    <class kind="class">ompl::geometric::LazyLBTRRT::Motion</class>
    <member kind="function">
      <type></type>
      <name>LazyLBTRRT</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>ae34dc9b792936eb4a273f31805e1cc22</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>a37a0a8f446c6786b993c588089d20b55</anchor>
      <arglist>(base::PlannerData &amp;data) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>a38705a1607d96b6fa35b567b0314c849</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>aa83acc6053ee13d85bec53370c2b2496</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>a6d9f3699a393f1c50c186938d486ca36</anchor>
      <arglist>(double goalBias)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>aa259f3e945e46c864bab3cd03fa4dd16</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>a7eb03c283f638abb7f54b03748501bc1</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>a11f24f86ce098c9fba8917e57e77f7a1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>a1a5590d302606366bdf7bac0d79db87f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>adda6e7f9ff9c7fb9a4659942f6182e9a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setApproximationFactor</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>a2496f76d0750da327cb330f5531a037c</anchor>
      <arglist>(double epsilon)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sampleBiased</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>a253accb0ac1a5a5a2c036ef7ce588f72</anchor>
      <arglist>(const base::GoalSampleableRegion *goal_s, base::State *rstate)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>af5b63b0811d921ef5559b6f7e0f75d27</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>aa4fb0616a58f43e6e977e611c8b763ee</anchor>
      <arglist>(const base::State *a, const base::State *b) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>getApproximationFactor</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>ad2ea153497011ef6b374fcdb2025934f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>a48492a7923ea8c4e6599ca7e86976088</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Motion * &gt; &gt;</type>
      <name>nn_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>aed65958b46b839cb208aec8a7a4de2b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>goalBias_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>a362cc07f268a019ae61509bf05a5b2be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistance_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>a73ae9346e492a6df2d3db7e2d8d3ae36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>a1b3193f058100bb4da45bb8dec57c0c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>epsilon_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>ad9258357d42c94f2d24204c6595f153c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>lastGoalMotion_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>a3dce5e9e307bb96c31ca16ce14f356fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>iterations_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>ad3de274dd126e7c178d09a2a0a0c6414</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bestCost_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT.html</anchorfile>
      <anchor>add5eeab0c15873aacb5af4ecd7361f8b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::LazyLBTRRT::CostEstimatorApx</name>
    <filename>classompl_1_1geometric_1_1LazyLBTRRT_1_1CostEstimatorApx.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::LazyLBTRRT::CostEstimatorLb</name>
    <filename>classompl_1_1geometric_1_1LazyLBTRRT_1_1CostEstimatorLb.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::LazyLBTRRT::Motion</name>
    <filename>classompl_1_1geometric_1_1LazyLBTRRT_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT_1_1Motion.html</anchorfile>
      <anchor>a6d8d88b3df3df747b379c4c593cdc910</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>id_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT_1_1Motion.html</anchorfile>
      <anchor>a9d151ba9285a89c8ce233ecdaadd0521</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyLBTRRT_1_1Motion.html</anchorfile>
      <anchor>a5ed2a01d70318f885691a98c8e34705b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::LazyPRM</name>
    <filename>classompl_1_1geometric_1_1LazyPRM.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="struct">ompl::geometric::LazyPRM::edge_flags_t</class>
    <class kind="struct">ompl::geometric::LazyPRM::vertex_component_t</class>
    <class kind="struct">ompl::geometric::LazyPRM::vertex_flags_t</class>
    <class kind="struct">ompl::geometric::LazyPRM::vertex_state_t</class>
    <member kind="typedef">
      <type>boost::adjacency_list_traits&lt; boost::vecS, boost::listS, boost::undirectedS &gt;::vertex_descriptor</type>
      <name>Vertex</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a832a28e2d5e40f583ca6e33ad6dad681</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::adjacency_list&lt; boost::vecS, boost::listS, boost::undirectedS, boost::property&lt; vertex_state_t, base::State *, boost::property&lt; boost::vertex_index_t, unsigned long int, boost::property&lt; vertex_flags_t, unsigned int, boost::property&lt; vertex_component_t, unsigned long int, boost::property&lt; boost::vertex_predecessor_t, Vertex, boost::property&lt; boost::vertex_rank_t, unsigned long int &gt; &gt; &gt; &gt; &gt; &gt;, boost::property&lt; boost::edge_weight_t, base::Cost, boost::property&lt; edge_flags_t, unsigned int &gt; &gt; &gt;</type>
      <name>Graph</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>aa5d1f8fd95cadf3d76b38d4eb4fe11a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph_traits&lt; Graph &gt;::edge_descriptor</type>
      <name>Edge</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a31a9a1b56b9bdfe92f08bdac56dfca43</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Vertex &gt; &gt;</type>
      <name>RoadmapNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a81212290057edf4a489deb16ea13eefc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; const std::vector&lt; Vertex &gt; &amp;(const Vertex)&gt;</type>
      <name>ConnectionStrategy</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a15b636abe0725b8a64287f801cde9925</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; bool(const Vertex &amp;, const Vertex &amp;)&gt;</type>
      <name>ConnectionFilter</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>aa399dadc9a1f5d6e7a9dbf09e3d445fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LazyPRM</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>aa63b04145d5e0af3da3f674a812dccdb</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si, bool starStrategy=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a1765a9b7fcd212255dee4c1d19ad6e68</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a4636e500437c9195dc3232f2851e2774</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a5fc492995adb9a7cde597b5ccc9492ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProblemDefinition</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>aeff323559d66f356e8391d9b6b28534d</anchor>
      <arglist>(const base::ProblemDefinitionPtr &amp;pdef)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConnectionStrategy</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a1e40a02beaa616ed5113e6c684451c96</anchor>
      <arglist>(const ConnectionStrategy &amp;connectionStrategy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxNearestNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a401a0017e3d7f0af28b994ca15551760</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConnectionFilter</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a8e5afdfd294ce840b5918990406854da</anchor>
      <arglist>(const ConnectionFilter &amp;connectionFilter)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long int</type>
      <name>milestoneCount</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a2a865612c8197c599e3fcd9ff598b36e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned long int</type>
      <name>edgeCount</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>aa58174cd155a40ce9ec6b7cc7fda0a8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>af9bd3c1017da6310d839345ff8cdeb5a</anchor>
      <arglist>(base::PlannerData &amp;data) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a562a73e90cd88a59510381ec5fd5d199</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a74fb9c8af7a655ffc29b2c69b9e11d5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearQuery</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>ad53276b0c3b1741868a9c216a1eada3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a3505e7736a97667060a350877b174e18</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a39498f53a3a21f6b2f79b969c21b6f47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Vertex</type>
      <name>addMilestone</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a67fc35ddf02bfda235c5c1cf9bc4562f</anchor>
      <arglist>(base::State *state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>long int</type>
      <name>solutionComponent</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>ac9aca2dd88db07ce361226c2178baf98</anchor>
      <arglist>(std::pair&lt; std::size_t, std::size_t &gt; *startGoalPair) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ompl::base::PathPtr</type>
      <name>constructSolution</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a45c2d9a402b4a0ed55e159857157c1ac</anchor>
      <arglist>(const Vertex &amp;start, const Vertex &amp;goal)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>afac0b24df74538621488f0cda06fb84b</anchor>
      <arglist>(const Vertex a, const Vertex b) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>base::Cost</type>
      <name>costHeuristic</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a4b161e796213ee4cafd8e72be85aa3bf</anchor>
      <arglist>(Vertex u, Vertex v) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>starStrategy_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a69e4d8cc2927af5087ee17a298d75a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConnectionStrategy</type>
      <name>connectionStrategy_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>ae1e9b00858c7f6db43c067917fb11fef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConnectionFilter</type>
      <name>connectionFilter_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>afd182af51b6ee32e9524d2facba797c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>userSetConnectionStrategy_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a3bea9f10cbd61b2918ac4be6f6815e50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistance_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a66bd8ec10704ff451fbc06c590dfa540</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>af8d4a07e4fe1cbbae2c882e208b30f44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RoadmapNeighbors</type>
      <name>nn_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>ab63912cee459a58f13540dcd851b2e93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Graph</type>
      <name>g_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a791c1417a166d7a891d62dfde5e816c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Vertex &gt;</type>
      <name>startM_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a193ae6dbe80dee3d69097664cf4cc157</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Vertex &gt;</type>
      <name>goalM_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>aba83ef4574f52fe4127ac35f96b360cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; Graph, boost::vertex_index_t &gt;::type</type>
      <name>indexProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>ac6883f39c60bace14e1ad799a34ecd97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; Graph, vertex_state_t &gt;::type</type>
      <name>stateProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>afcd49e46180b5049341e6933a9de1b0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; Graph, boost::edge_weight_t &gt;::type</type>
      <name>weightProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a661d990a47db9f64ff51d93020037584</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; Graph, vertex_component_t &gt;::type</type>
      <name>vertexComponentProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a62769ed475cd1e37ff07ec407a0c6474</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; Graph, vertex_flags_t &gt;::type</type>
      <name>vertexValidityProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a37d00831d96da1a1be102bddefbea94e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; Graph, edge_flags_t &gt;::type</type>
      <name>edgeValidityProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a150ec69782ce5334c8c7c4ab016ec820</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long int</type>
      <name>componentCount_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a30baba1e3bcffaff085f832ac162e4e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; unsigned long int, unsigned long int &gt;</type>
      <name>componentSize_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a62ef1b20443606277a39897328d6a202</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::OptimizationObjectivePtr</type>
      <name>opt_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>af9b2195ab4aab77da2d502852e733bb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned int</type>
      <name>VALIDITY_UNKNOWN</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a0f8d4331eaf7c657f88fa3415191ecba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned int</type>
      <name>VALIDITY_TRUE</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRM.html</anchorfile>
      <anchor>a661a08c5c42362193d401f41e14d9d56</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1LazyPRM">gLazyPRM</docanchor>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::LazyPRM::edge_flags_t</name>
    <filename>structompl_1_1geometric_1_1LazyPRM_1_1edge__flags__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::LazyPRM::vertex_component_t</name>
    <filename>structompl_1_1geometric_1_1LazyPRM_1_1vertex__component__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::LazyPRM::vertex_flags_t</name>
    <filename>structompl_1_1geometric_1_1LazyPRM_1_1vertex__flags__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::LazyPRM::vertex_state_t</name>
    <filename>structompl_1_1geometric_1_1LazyPRM_1_1vertex__state__t.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::LazyPRMstar</name>
    <filename>classompl_1_1geometric_1_1LazyPRMstar.html</filename>
    <base>ompl::geometric::LazyPRM</base>
    <member kind="function">
      <type></type>
      <name>LazyPRMstar</name>
      <anchorfile>classompl_1_1geometric_1_1LazyPRMstar.html</anchorfile>
      <anchor>a09c824259fa29308a8fcf43271f2b891</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1LazyPRMstar">gLazyPRMstar</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::LazyRRT</name>
    <filename>classompl_1_1geometric_1_1LazyRRT.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::LazyRRT::Motion</class>
    <member kind="function">
      <type></type>
      <name>LazyRRT</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT.html</anchorfile>
      <anchor>a2dc07de136a0b403de8c6a3a1522e37b</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT.html</anchorfile>
      <anchor>ab8a78fadcee41bf3049db08449f03d44</anchor>
      <arglist>(base::PlannerData &amp;data) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT.html</anchorfile>
      <anchor>aac66a3e66159e623337c55656633f1c9</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT.html</anchorfile>
      <anchor>a1056e680608324969ef8e4cc8f14c94d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT.html</anchorfile>
      <anchor>a10f898a72e483d07aeb1c342da680647</anchor>
      <arglist>(double goalBias)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT.html</anchorfile>
      <anchor>af11b519c09609c2ff464085b6ae30115</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT.html</anchorfile>
      <anchor>a3ad217eae43c5334c541ca1b970cd05a</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT.html</anchorfile>
      <anchor>a882e808661e361ee1fd0f973b72c8541</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT.html</anchorfile>
      <anchor>a14e546ee737569ebcffe39b5b67302ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT.html</anchorfile>
      <anchor>a5d56fced75baca3fb41ce101012f35e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT.html</anchorfile>
      <anchor>afa65d03f2d1708f90348a6ecc04b133d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeMotion</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT.html</anchorfile>
      <anchor>a52db5160e4d6d95b94fd24ca0e8ed7ed</anchor>
      <arglist>(Motion *motion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT.html</anchorfile>
      <anchor>aba8dc49513af11bcb4c9d4d819a59a55</anchor>
      <arglist>(const Motion *a, const Motion *b) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT.html</anchorfile>
      <anchor>a5aa999ccbedbabb3fa1fddc4f32ba868</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Motion * &gt; &gt;</type>
      <name>nn_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT.html</anchorfile>
      <anchor>a560875c5b2f144b24edc4eba40245913</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>goalBias_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT.html</anchorfile>
      <anchor>a10e6b543e9422141d63192733e47dd55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistance_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT.html</anchorfile>
      <anchor>a612432cabf814516d250b47fb5e0d62a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT.html</anchorfile>
      <anchor>a95998cdb5bc1e7fd7c49c9d5edfd586f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>lastGoalMotion_</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT.html</anchorfile>
      <anchor>a3bd26266e597fec0398dd416366ef452</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1LazyRRT">gLazyRRT</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::LazyRRT::Motion</name>
    <filename>classompl_1_1geometric_1_1LazyRRT_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT_1_1Motion.html</anchorfile>
      <anchor>af7627ac68593b7e94950836c05fc617e</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT_1_1Motion.html</anchorfile>
      <anchor>abe60e6fad09f70801cae054c6c44a05d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT_1_1Motion.html</anchorfile>
      <anchor>a7cf8143be840e71b21fa8837507f50be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT_1_1Motion.html</anchorfile>
      <anchor>abfb04aece324f8c752b1070cf03247de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Motion * &gt;</type>
      <name>children</name>
      <anchorfile>classompl_1_1geometric_1_1LazyRRT_1_1Motion.html</anchorfile>
      <anchor>aede9f2698536438cb1e651537f6c9abb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::LBKPIECE1</name>
    <filename>classompl_1_1geometric_1_1LBKPIECE1.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::LBKPIECE1::Motion</class>
    <member kind="function">
      <type></type>
      <name>LBKPIECE1</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>a8e0b666627ef259f53f1f61d39e0e144</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>ad1a19e34bbf41e4417193acdb9588a01</anchor>
      <arglist>(const base::ProjectionEvaluatorPtr &amp;projectionEvaluator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>aea762724dae8ea9fb0dd505e5547f0a0</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const base::ProjectionEvaluatorPtr &amp;</type>
      <name>getProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>ad598ac9c5e6b8eb18f1fa4dd01830d1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>a7f5b7bb07df09b0004126c544e767d05</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>ae45ee0da8686713672c9800a4b4b5900</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderFraction</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>a75bf4fdda87e444fe86ad1c5280e20eb</anchor>
      <arglist>(double bp)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getBorderFraction</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>af20871ab17542f3a959a4a6e9b381fcd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinValidPathFraction</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>a127a917b708457b75841ab0fcbdc0f5d</anchor>
      <arglist>(double fraction)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMinValidPathFraction</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>a0083171619e2b03455d9764479d0e396</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>a3ea9fbd55cf9ad099971230d01fc0ccb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>a350a7a0d6546580d2d2c8e806a2b47a8</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>a902a3cca5fcf1992fce680b948c2bf7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>aa6e1f100b606a36ebc7fe9f6c9645c44</anchor>
      <arglist>(base::PlannerData &amp;data) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMotion</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>ad0749f58ef83e7c6206646d0b6c22640</anchor>
      <arglist>(Motion *motion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeMotion</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>a17099eefde5f6bbcc95fc9c0492c25af</anchor>
      <arglist>(Discretization&lt; Motion &gt; &amp;disc, Motion *motion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isPathValid</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>aa018c98afa53ab5a27ae60d9336b3d75</anchor>
      <arglist>(Discretization&lt; Motion &gt; &amp;disc, Motion *motion, base::State *temp)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>ae02c891235992920b5c0e7b69f554c9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ProjectionEvaluatorPtr</type>
      <name>projectionEvaluator_</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>a0aa6ba979bea06453f4fee03e1159556</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Discretization&lt; Motion &gt;</type>
      <name>dStart_</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>aeced0b4215221d09d1469b378b96c971</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Discretization&lt; Motion &gt;</type>
      <name>dGoal_</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>afb985c691eff1d1e0dafc816c4278549</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>minValidPathFraction_</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>a2232185fbc0d75b6848e10cc08913299</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistance_</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>a0d2971f710e5e969955bca7fd81136b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>a479b1ca98e2f83020e1a9063c388ef92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::pair&lt; base::State *, base::State * &gt;</type>
      <name>connectionPoint_</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1.html</anchorfile>
      <anchor>a423f0052068ebf05430bc54234fa3376</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1LBKPIECE1">gLBKPIECE1</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::LBKPIECE1::Motion</name>
    <filename>classompl_1_1geometric_1_1LBKPIECE1_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1_1_1Motion.html</anchorfile>
      <anchor>aae061391718efcded6e346f2ea6ce243</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="variable">
      <type>const base::State *</type>
      <name>root</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1_1_1Motion.html</anchorfile>
      <anchor>a8c1ec81c132808c43d8eac4ae1215505</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1_1_1Motion.html</anchorfile>
      <anchor>aa8e2b686b5de213e2fd0221927086990</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1_1_1Motion.html</anchorfile>
      <anchor>a6a7023de2ed53ea46eccb659c81b33c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1_1_1Motion.html</anchorfile>
      <anchor>aed3e73c089b6bf639c95d3eded41346d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Motion * &gt;</type>
      <name>children</name>
      <anchorfile>classompl_1_1geometric_1_1LBKPIECE1_1_1Motion.html</anchorfile>
      <anchor>a9eda8240f08dc71cbed843f6d12bd189</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::LBTRRT</name>
    <filename>classompl_1_1geometric_1_1LBTRRT.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="struct">ompl::geometric::LBTRRT::IsLessThan</class>
    <class kind="struct">ompl::geometric::LBTRRT::IsLessThanLB</class>
    <class kind="class">ompl::geometric::LBTRRT::Motion</class>
    <member kind="function">
      <type></type>
      <name>LBTRRT</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>ab0536dead0cb0e12e71dd6df46ad2024</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a45f319c61bf8ca059f80a31be1fd7db0</anchor>
      <arglist>(base::PlannerData &amp;data) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>aa60bbdf3135b78ddfd48408beb79c0f0</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a6c060bfe52834e525b6b1b7c4010ddfb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>ab9750d0634408d023e6a749270b4df4f</anchor>
      <arglist>(double goalBias)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a2122a1b8e736fa4d6da0254065c6b553</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a358e28dee50dfb709f250bd019c826b2</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a0a0df05a5969d01fddc334e77ef71993</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>ae9a2ab041d5ff5f4dd570399bbfca6bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a9e0b63ef2687a8c87ca07f65cacf58ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setApproximationFactor</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a18f75351beeb490c55d2b0593c3dbb77</anchor>
      <arglist>(double epsilon)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getApproximationFactor</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>ab5095d81ab39e757d10314fc400a1720</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>considerEdge</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>aa399272399c733321a7c048ca8bfca2c</anchor>
      <arglist>(Motion *parent, Motion *child, double c)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>lazilyUpdateApxParent</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a3438d940f59bff76794d27563910babb</anchor>
      <arglist>(Motion *child, Motion *parent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateChildCostsApx</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>abd4fb1d4c9dae12d171d6bd84e85becf</anchor>
      <arglist>(Motion *m, double delta)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeFromParentApx</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a0e14a3b94b1cc882fbac85ef16fa5dd5</anchor>
      <arglist>(Motion *m)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a806c3990afa5a5d03cfd7079099666c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a61acf06dc2223bb46fab80a459e04e6e</anchor>
      <arglist>(const Motion *a, const Motion *b) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkMotion</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>acb2a0602d86673eeb5c53792f5ba56a4</anchor>
      <arglist>(const Motion *a, const Motion *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkMotion</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a67ab287545c888b365152409325c4a34</anchor>
      <arglist>(const base::State *a, const base::State *b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Motion *</type>
      <name>getMotion</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a5470b0c0d9ab1ca44ff5ece305df32ca</anchor>
      <arglist>(std::size_t i)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>af34446f208aed4e824b01929e6a180ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Motion * &gt; &gt;</type>
      <name>nn_</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>ad0a1225658fb81264918888e449f07c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DynamicSSSP</type>
      <name>lowerBoundGraph_</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a11c52c90fde376912ba02a48e8e42b04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Motion * &gt;</type>
      <name>idToMotionMap_</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>acd13c3e6d762edb0eeb0d305d63553f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>goalBias_</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a59d5d9da393631ec5b159fbf1334b7d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistance_</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a8c1d7d465b8a71041959413bc7a6691e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>epsilon_</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a5fe177063850efdaac7ca1a01ed07630</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a72884b4660a347e352fac9f54b21cb6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>lastGoalMotion_</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a55a1df1e9042d885b7092440b31962e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>iterations_</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a1f8d3c3a0528a8f1ed20f759a6ccaeaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>bestCost_</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT.html</anchorfile>
      <anchor>a87ba7cc4cbdf98f46856f150e4db7252</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1LBTRRT">gLBTRRT</docanchor>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::LBTRRT::IsLessThan</name>
    <filename>structompl_1_1geometric_1_1LBTRRT_1_1IsLessThan.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::LBTRRT::IsLessThanLB</name>
    <filename>structompl_1_1geometric_1_1LBTRRT_1_1IsLessThanLB.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::LBTRRT::Motion</name>
    <filename>classompl_1_1geometric_1_1LBTRRT_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT_1_1Motion.html</anchorfile>
      <anchor>afa267a16c3ccd400f868f08a262ca8f6</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state_</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT_1_1Motion.html</anchorfile>
      <anchor>a5e7419827789c28c05935db3e6cddd92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>id_</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT_1_1Motion.html</anchorfile>
      <anchor>a2cde0daa86fd557543c49e7ca525e80c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>costLb_</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT_1_1Motion.html</anchorfile>
      <anchor>a3616d7e157fc80baa052f31001edf226</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parentApx_</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT_1_1Motion.html</anchorfile>
      <anchor>a8b44fb0e469c88338bd332365052af78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>costApx_</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT_1_1Motion.html</anchorfile>
      <anchor>aa17308ad2ca1f90c730dafc729ebf782</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Motion * &gt;</type>
      <name>childrenApx_</name>
      <anchorfile>classompl_1_1geometric_1_1LBTRRT_1_1Motion.html</anchorfile>
      <anchor>a383742d828649ccf88e63982ef0a353a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::LightningDBPtr</name>
    <filename>classompl_1_1geometric_1_1LightningDBPtr.html</filename>
    <docanchor file="classompl_1_1geometric_1_1LightningDBPtr">LightningDB</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::LightningPtr</name>
    <filename>classompl_1_1geometric_1_1LightningPtr.html</filename>
    <docanchor file="classompl_1_1geometric_1_1LightningPtr">Lightning</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::LightningRetrieveRepair</name>
    <filename>classompl_1_1geometric_1_1LightningRetrieveRepair.html</filename>
    <base>ompl::base::Planner</base>
    <member kind="function">
      <type></type>
      <name>LightningRetrieveRepair</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>afa436bf30571735782e7c8e27e1a291f</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si, const tools::LightningDBPtr &amp;experienceDB)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>a93d7b83bc8fe5bded11773660b408564</anchor>
      <arglist>(base::PlannerData &amp;data) const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; base::PlannerDataPtr &gt; &amp;</type>
      <name>getLastRecalledNearestPaths</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>a711f67fb757ee69e6a74fe1db0914cfa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getLastRecalledNearestPathChosen</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>ab88903849d04900aa05143600e1fce9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>base::PlannerDataPtr</type>
      <name>getChosenRecallPath</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>a7bf7404f348f39548a530b22bb790e22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRepairPlannerDatas</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>a9f5f4ddd0684c2cacfaf753bf33d0f33</anchor>
      <arglist>(std::vector&lt; base::PlannerDataPtr &gt; &amp;data) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>a3f89370ae3f66a851e1ec00f4dd6e4dd</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>a59192b39c55ec8d2b5b8342bd88e3833</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLightningDB</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>a26f37bdcb6bef0d3d680a7cb15459577</anchor>
      <arglist>(const tools::LightningDBPtr &amp;experienceDB)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRepairPlanner</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>a23fa9a3cf9f8b172e61b1f70e84217e7</anchor>
      <arglist>(const base::PlannerPtr &amp;planner)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>a6b1148881b1af685cd659989679a1bc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>repairPath</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>ac2cbf4a0e339523086f1414e6952ee1c</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc, geometric::PathGeometric &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>replan</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>a183839946bff248b82d2aece6d5852e8</anchor>
      <arglist>(const base::State *start, const base::State *goal, geometric::PathGeometric &amp;newPathSegment, const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumNearestSolutions</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>a12d54a5d70d0e23c57384e7e09e67c03</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumNearestSolutions</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>a42c04059093fe30958e23e31fd197502</anchor>
      <arglist>(int nearestK)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::size_t</type>
      <name>checkMotionScore</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>ae58e2629aad3b9c04ae7483881539771</anchor>
      <arglist>(const base::State *s1, const base::State *s2) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>findBestPath</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>a2dd7a6aac3c66f107834a8395c0136a0</anchor>
      <arglist>(const base::State *startState, const base::State *goalState, base::PlannerDataPtr &amp;chosenPath)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>tools::LightningDBPtr</type>
      <name>experienceDB_</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>a4cb53d64947938c60db15da564e48481</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; base::PlannerDataPtr &gt;</type>
      <name>nearestPaths_</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>ad56a997e554ee11da7bdadacca0a458a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>nearestPathsChosenID_</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>ab301d33cde52e726b07d2c2b2146ff3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::PlannerPtr</type>
      <name>repairPlanner_</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>aea4d6fabb4d877e238d380da5684d8a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ProblemDefinitionPtr</type>
      <name>repairProblemDef_</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>a1a17a072841129d9a064b80cedbfd22b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; base::PlannerDataPtr &gt;</type>
      <name>repairPlannerDatas_</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>ab255f5dfcdc7c925dc5774f7b07d8d14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>geometric::PathSimplifierPtr</type>
      <name>psk_</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>a5758fd81b6ed0d1df24e686617647f26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nearestK_</name>
      <anchorfile>classompl_1_1geometric_1_1LightningRetrieveRepair.html</anchorfile>
      <anchor>a139f8d7fb60e79fcdc16a08ebb4e1fdc</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1LightningRetrieveRepair">LightningRetrieveRepair</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::PathGeometric</name>
    <filename>classompl_1_1geometric_1_1PathGeometric.html</filename>
    <base>ompl::base::Path</base>
    <member kind="function">
      <type></type>
      <name>PathGeometric</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>ab85d32ca5bce67da74a3b116ac11fd73</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PathGeometric</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a45d676fcc2896ecf9e9156bac2cba4fb</anchor>
      <arglist>(const PathGeometric &amp;path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PathGeometric</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a1e872d1a6b4528ec809b2fcc1e2c34bd</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si, const base::State *state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PathGeometric</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>aa61a7877241c63468398fa82d9021957</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si, const base::State *state1, const base::State *state2)</arglist>
    </member>
    <member kind="function">
      <type>PathGeometric &amp;</type>
      <name>operator=</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a44bcadcd08a5c494557652d7f75f0e17</anchor>
      <arglist>(const PathGeometric &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::Cost</type>
      <name>cost</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>ab42459fa09ee5c78a27ea0b16ca0a6be</anchor>
      <arglist>(const base::OptimizationObjectivePtr &amp;obj) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>length</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>ae6b95e0e5e5dc38ded85cce0dba41d8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>check</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>aac6b25b73db9278270a331a95035d71b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>smoothness</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>af7f4574eefaf088f0987ad6c8ed9b5f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>clearance</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>ace4f8478419100af0375c37e7cb4e3a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a7a27d7d046e4fc52a18966cec79adbc1</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printAsMatrix</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a3bb5066416f1bc696c205dc323f93d79</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a29c50018bc71d4d25b0f8e4d3e97aecd</anchor>
      <arglist>(unsigned int count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a824b91d04ba886c82c1dda3e356fd1f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subdivide</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a5caa37ae16443f1d9b271f6e8d5baf77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverse</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a68e0627b7957b35e2723f9434ace5a95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; bool, bool &gt;</type>
      <name>checkAndRepair</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a348f26bf4989964dddf791ef746a9098</anchor>
      <arglist>(unsigned int attempts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>overlay</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>addc7c545fa8a284978c1e1e016425779</anchor>
      <arglist>(const PathGeometric &amp;over, unsigned int startIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>aa9eb3ea81cc3ab442aae67d311bc4156</anchor>
      <arglist>(const base::State *state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>aa054135956c0ce6c7c447451a0a02cbb</anchor>
      <arglist>(const PathGeometric &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepend</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a569a99480710219771fe9a5e00b0b271</anchor>
      <arglist>(const base::State *state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>keepAfter</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a362fc9c2882411fb1a9a4ed6f455bb24</anchor>
      <arglist>(const base::State *state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>keepBefore</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a795008c4bba0631eae4bbaedb953d6a0</anchor>
      <arglist>(const base::State *state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>random</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a67c54a5fc580e7914bb594e58a096089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>randomValid</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a1441132f612f309257fb172def71de1a</anchor>
      <arglist>(unsigned int attempts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getClosestIndex</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>ae98171a71c6b4d757443d93a5dcb4f75</anchor>
      <arglist>(const base::State *state) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; base::State * &gt; &amp;</type>
      <name>getStates</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>aa1f2bd46e6cab28a74819a47e3ff04c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>base::State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>acea7c8dc9b28e6bb81ec62d4c0b4730b</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>const base::State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a40029f1ffe8fd45fdb00cc3cb7251f35</anchor>
      <arglist>(unsigned int index) const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getStateCount</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>ab91d34d3a08178b85d84d9ca8c8c6df9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a41fcd4765ed30b4e8058fc3a7869160b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>copyFrom</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a79b0a01a8075a16666b475e1c0227968</anchor>
      <arglist>(const PathGeometric &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; base::State * &gt;</type>
      <name>states_</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>abc29369bf134ea98a4e0be9f1464bbfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a29c50018bc71d4d25b0f8e4d3e97aecd</anchor>
      <arglist>(unsigned int count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a824b91d04ba886c82c1dda3e356fd1f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subdivide</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a5caa37ae16443f1d9b271f6e8d5baf77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverse</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a68e0627b7957b35e2723f9434ace5a95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; bool, bool &gt;</type>
      <name>checkAndRepair</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a348f26bf4989964dddf791ef746a9098</anchor>
      <arglist>(unsigned int attempts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>overlay</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>addc7c545fa8a284978c1e1e016425779</anchor>
      <arglist>(const PathGeometric &amp;over, unsigned int startIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>aa9eb3ea81cc3ab442aae67d311bc4156</anchor>
      <arglist>(const base::State *state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>aa054135956c0ce6c7c447451a0a02cbb</anchor>
      <arglist>(const PathGeometric &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepend</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a569a99480710219771fe9a5e00b0b271</anchor>
      <arglist>(const base::State *state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>keepAfter</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a362fc9c2882411fb1a9a4ed6f455bb24</anchor>
      <arglist>(const base::State *state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>keepBefore</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a795008c4bba0631eae4bbaedb953d6a0</anchor>
      <arglist>(const base::State *state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>random</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a67c54a5fc580e7914bb594e58a096089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>randomValid</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a1441132f612f309257fb172def71de1a</anchor>
      <arglist>(unsigned int attempts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getClosestIndex</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>ae98171a71c6b4d757443d93a5dcb4f75</anchor>
      <arglist>(const base::State *state) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; base::State * &gt; &amp;</type>
      <name>getStates</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>aa1f2bd46e6cab28a74819a47e3ff04c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>base::State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>acea7c8dc9b28e6bb81ec62d4c0b4730b</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>const base::State *</type>
      <name>getState</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>a40029f1ffe8fd45fdb00cc3cb7251f35</anchor>
      <arglist>(unsigned int index) const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getStateCount</name>
      <anchorfile>classompl_1_1geometric_1_1PathGeometric.html</anchorfile>
      <anchor>ab91d34d3a08178b85d84d9ca8c8c6df9</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::PathHybridization</name>
    <filename>classompl_1_1geometric_1_1PathHybridization.html</filename>
    <member kind="function">
      <type></type>
      <name>PathHybridization</name>
      <anchorfile>classompl_1_1geometric_1_1PathHybridization.html</anchorfile>
      <anchor>ab82860c7cb7cbe0e881229f7c25e991d</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>const base::PathPtr &amp;</type>
      <name>getHybridPath</name>
      <anchorfile>classompl_1_1geometric_1_1PathHybridization.html</anchorfile>
      <anchor>a9ccbf94e488916ee2a905b9884a42609</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeHybridPath</name>
      <anchorfile>classompl_1_1geometric_1_1PathHybridization.html</anchorfile>
      <anchor>a79c48a4d834b1dca0c688f7cb737e5f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>recordPath</name>
      <anchorfile>classompl_1_1geometric_1_1PathHybridization.html</anchorfile>
      <anchor>a403872506dd71971b6a7a2a804e3ac04</anchor>
      <arglist>(const base::PathPtr &amp;pp, bool matchAcrossGaps)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>pathCount</name>
      <anchorfile>classompl_1_1geometric_1_1PathHybridization.html</anchorfile>
      <anchor>af5a64712f5bc26820c9b90f1dd1508ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>matchPaths</name>
      <anchorfile>classompl_1_1geometric_1_1PathHybridization.html</anchorfile>
      <anchor>acb3a473737667cc029a7c362685b85e8</anchor>
      <arglist>(const geometric::PathGeometric &amp;p, const geometric::PathGeometric &amp;q, double gapCost, std::vector&lt; int &gt; &amp;indexP, std::vector&lt; int &gt; &amp;indexQ) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1PathHybridization.html</anchorfile>
      <anchor>a74c4015d5af2479d1e6ab03117b0bb08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classompl_1_1geometric_1_1PathHybridization.html</anchorfile>
      <anchor>a8facc154e9f6ecd211f9b17dd613db9f</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classompl_1_1geometric_1_1PathHybridization.html</anchorfile>
      <anchor>a1cd5fd79f521a726dcf2f9480a8a43e9</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::PathHybridizationPtr</name>
    <filename>classompl_1_1geometric_1_1PathHybridizationPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::PathSimplifier</name>
    <filename>classompl_1_1geometric_1_1PathSimplifier.html</filename>
    <member kind="function">
      <type></type>
      <name>PathSimplifier</name>
      <anchorfile>classompl_1_1geometric_1_1PathSimplifier.html</anchorfile>
      <anchor>ac3916d2d7aa3dc4650480a6875ee4d14</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si, const base::GoalPtr &amp;goal=ompl::base::GoalPtr())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reduceVertices</name>
      <anchorfile>classompl_1_1geometric_1_1PathSimplifier.html</anchorfile>
      <anchor>a693986392b3b13a17743035cf295c539</anchor>
      <arglist>(PathGeometric &amp;path, unsigned int maxSteps=0, unsigned int maxEmptySteps=0, double rangeRatio=0.33)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shortcutPath</name>
      <anchorfile>classompl_1_1geometric_1_1PathSimplifier.html</anchorfile>
      <anchor>a911bdadf0c84acdae69d003b99f8d48e</anchor>
      <arglist>(PathGeometric &amp;path, unsigned int maxSteps=0, unsigned int maxEmptySteps=0, double rangeRatio=0.33, double snapToVertex=0.005)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>collapseCloseVertices</name>
      <anchorfile>classompl_1_1geometric_1_1PathSimplifier.html</anchorfile>
      <anchor>a2761f8b4e41e01db0b4ecf11ee16d5bd</anchor>
      <arglist>(PathGeometric &amp;path, unsigned int maxSteps=0, unsigned int maxEmptySteps=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>smoothBSpline</name>
      <anchorfile>classompl_1_1geometric_1_1PathSimplifier.html</anchorfile>
      <anchor>aa4ecd0970d2061c457f57b7665fd6f6b</anchor>
      <arglist>(PathGeometric &amp;path, unsigned int maxSteps=5, double minChange=std::numeric_limits&lt; double &gt;::epsilon())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>simplifyMax</name>
      <anchorfile>classompl_1_1geometric_1_1PathSimplifier.html</anchorfile>
      <anchor>a7dc99833c0ee64ddd5ab8e9a73c0fdc0</anchor>
      <arglist>(PathGeometric &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>simplify</name>
      <anchorfile>classompl_1_1geometric_1_1PathSimplifier.html</anchorfile>
      <anchor>a9834b1fda038c543ec4c8b1dcffa601b</anchor>
      <arglist>(PathGeometric &amp;path, double maxTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>simplify</name>
      <anchorfile>classompl_1_1geometric_1_1PathSimplifier.html</anchorfile>
      <anchor>a070e4bed32452edab6ec74178f6d5540</anchor>
      <arglist>(PathGeometric &amp;path, const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findBetterGoal</name>
      <anchorfile>classompl_1_1geometric_1_1PathSimplifier.html</anchorfile>
      <anchor>acf1dae2d22eccd4ffde5a0c95e18dbe1</anchor>
      <arglist>(PathGeometric &amp;path, double maxTime, unsigned int samplingAttempts=10, double rangeRatio=0.33, double snapToVertex=0.005)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findBetterGoal</name>
      <anchorfile>classompl_1_1geometric_1_1PathSimplifier.html</anchorfile>
      <anchor>a44074cdbbb873e096694eace130c98b5</anchor>
      <arglist>(PathGeometric &amp;path, const base::PlannerTerminationCondition &amp;ptc, unsigned int samplingAttempts=10, double rangeRatio=0.33, double snapToVertex=0.005)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeStates</name>
      <anchorfile>classompl_1_1geometric_1_1PathSimplifier.html</anchorfile>
      <anchor>aed7e93fa582c5480ae1e7610e787f3c7</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>freeStates</name>
      <anchorfile>classompl_1_1geometric_1_1PathSimplifier.html</anchorfile>
      <anchor>a8f457e5b27c79d518761bdbd67dede07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::SpaceInformationPtr</type>
      <name>si_</name>
      <anchorfile>classompl_1_1geometric_1_1PathSimplifier.html</anchorfile>
      <anchor>a37aa79782fd655f32d3b67a748e9a0db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; base::GoalSampleableRegion &gt;</type>
      <name>gsr_</name>
      <anchorfile>classompl_1_1geometric_1_1PathSimplifier.html</anchorfile>
      <anchor>afde59be0e054bff41c2abd6204ba6174</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>freeStates_</name>
      <anchorfile>classompl_1_1geometric_1_1PathSimplifier.html</anchorfile>
      <anchor>a0c9255a96aa9ed4104595070c6a91d92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1PathSimplifier.html</anchorfile>
      <anchor>ad022db6be6de403569e517ed0910d2cb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::PathSimplifierPtr</name>
    <filename>classompl_1_1geometric_1_1PathSimplifierPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::PDST</name>
    <filename>classompl_1_1geometric_1_1PDST.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="struct">ompl::geometric::PDST::Cell</class>
    <class kind="struct">ompl::geometric::PDST::Motion</class>
    <class kind="struct">ompl::geometric::PDST::MotionCompare</class>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1PDST.html</anchorfile>
      <anchor>a0ed4ae72a85c4d3c86535e52dc5fba0c</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1PDST.html</anchorfile>
      <anchor>a78fbc372684f11d6fa03b583766c4ef0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1PDST.html</anchorfile>
      <anchor>a6d64c601f455b5f9427900f05f487734</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1PDST.html</anchorfile>
      <anchor>adaa29ce4acf62d38c6d6e048359756bc</anchor>
      <arglist>(base::PlannerData &amp;data) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1PDST.html</anchorfile>
      <anchor>a71fd25df52a5a3588065b9575952da3e</anchor>
      <arglist>(const base::ProjectionEvaluatorPtr &amp;projectionEvaluator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1PDST.html</anchorfile>
      <anchor>a2987b016e359f3be411072782cdf1b1b</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const base::ProjectionEvaluatorPtr &amp;</type>
      <name>getProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1PDST.html</anchorfile>
      <anchor>aad41192e24343b1779704b1a66b37ef8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>*void</type>
      <name>setGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1PDST.html</anchorfile>
      <anchor>a3792d2e346c2b0a7fdc3ade7e1a49c98</anchor>
      <arglist>(double goalBias)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1PDST.html</anchorfile>
      <anchor>a905c0bdfa0883806e709283f45e9acea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addMotion</name>
      <anchorfile>classompl_1_1geometric_1_1PDST.html</anchorfile>
      <anchor>ae640a311699c8fe8a6560dec98ec61c0</anchor>
      <arglist>(Motion *motion, Cell *cell, base::State *, base::EuclideanProjection &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateHeapElement</name>
      <anchorfile>classompl_1_1geometric_1_1PDST.html</anchorfile>
      <anchor>a0828e91a6e330da250990246bddc5319</anchor>
      <arglist>(Motion *motion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Motion *</type>
      <name>propagateFrom</name>
      <anchorfile>classompl_1_1geometric_1_1PDST.html</anchorfile>
      <anchor>a3f828b1bdb7e2359cd9effc14119bd5f</anchor>
      <arglist>(Motion *motion, base::State *, base::State *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ompl::base::StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1PDST.html</anchorfile>
      <anchor>ad02cb5ffb9edd51f403979602cf8f649</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Motion * &gt;</type>
      <name>startMotions_</name>
      <anchorfile>classompl_1_1geometric_1_1PDST.html</anchorfile>
      <anchor>aa6b06bc2d9efac15c8aabac79aa5de4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ompl::BinaryHeap&lt; Motion *, MotionCompare &gt;</type>
      <name>priorityQueue_</name>
      <anchorfile>classompl_1_1geometric_1_1PDST.html</anchorfile>
      <anchor>a4706c901c065ea6d00039a5c30bf6cdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Cell *</type>
      <name>bsp_</name>
      <anchorfile>classompl_1_1geometric_1_1PDST.html</anchorfile>
      <anchor>a082a3599f34b79a6b0a2118175da5f2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ompl::base::ProjectionEvaluatorPtr</type>
      <name>projectionEvaluator_</name>
      <anchorfile>classompl_1_1geometric_1_1PDST.html</anchorfile>
      <anchor>a001c70226bbe4da93a68bdd7d928cda7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>goalBias_</name>
      <anchorfile>classompl_1_1geometric_1_1PDST.html</anchorfile>
      <anchor>a3147c054de5a11fbff91dd12c448578e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ompl::base::GoalSampleableRegion *</type>
      <name>goalSampler_</name>
      <anchorfile>classompl_1_1geometric_1_1PDST.html</anchorfile>
      <anchor>addf2a9dde2778eaf7c04506d96053bfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>iteration_</name>
      <anchorfile>classompl_1_1geometric_1_1PDST.html</anchorfile>
      <anchor>a89646d3854b1f43b9bca6fb429fd3e8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>lastGoalMotion_</name>
      <anchorfile>classompl_1_1geometric_1_1PDST.html</anchorfile>
      <anchor>aec3060815b656861bf8a2314dce86547</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1PDST">gPDST</docanchor>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::PDST::Cell</name>
    <filename>structompl_1_1geometric_1_1PDST_1_1Cell.html</filename>
    <member kind="function">
      <type>void</type>
      <name>subdivide</name>
      <anchorfile>structompl_1_1geometric_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>aeb59ec305f1b40d5f1ae78bcc3cc46ed</anchor>
      <arglist>(unsigned int spaceDimension)</arglist>
    </member>
    <member kind="function">
      <type>Cell *</type>
      <name>stab</name>
      <anchorfile>structompl_1_1geometric_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>a812225af822a28907fa613393ccafc6e</anchor>
      <arglist>(const ompl::base::EuclideanProjection &amp;projection) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMotion</name>
      <anchorfile>structompl_1_1geometric_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>a2ee83e5fc1a12abf5dbdde82086640d6</anchor>
      <arglist>(Motion *motion)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>structompl_1_1geometric_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>acd5887159894825133a86f04e0fb86af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>volume_</name>
      <anchorfile>structompl_1_1geometric_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>ae3e603e66c90b7605255a0097abc1ac1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>splitDimension_</name>
      <anchorfile>structompl_1_1geometric_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>aba8fe44796f9ac02b6992bac919e3caf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>splitValue_</name>
      <anchorfile>structompl_1_1geometric_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>aa6ad9fdb838bfff22b19fe00d8ba780c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Cell *</type>
      <name>left_</name>
      <anchorfile>structompl_1_1geometric_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>a6fe368b4022b7cccddf90375981d19dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Cell *</type>
      <name>right_</name>
      <anchorfile>structompl_1_1geometric_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>a1287af11bd85f01b168b7b7595663b0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ompl::base::RealVectorBounds</type>
      <name>bounds_</name>
      <anchorfile>structompl_1_1geometric_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>ac11a751c5eb80d111728ebc286ff4099</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Motion * &gt;</type>
      <name>motions_</name>
      <anchorfile>structompl_1_1geometric_1_1PDST_1_1Cell.html</anchorfile>
      <anchor>a2bd3eb0e764ad5f7f83d41e8aac41b8f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::PDST::Motion</name>
    <filename>structompl_1_1geometric_1_1PDST_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>structompl_1_1geometric_1_1PDST_1_1Motion.html</anchorfile>
      <anchor>a53ae411c47edb237bf06fde39c9d33d8</anchor>
      <arglist>(base::State *state)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>score</name>
      <anchorfile>structompl_1_1geometric_1_1PDST_1_1Motion.html</anchorfile>
      <anchor>a7a10e716e3794b174b14647e46990623</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>ompl::base::State *</type>
      <name>startState_</name>
      <anchorfile>structompl_1_1geometric_1_1PDST_1_1Motion.html</anchorfile>
      <anchor>a4e900bc956baaf3f7fc42dc69ba35498</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ompl::base::State *</type>
      <name>endState_</name>
      <anchorfile>structompl_1_1geometric_1_1PDST_1_1Motion.html</anchorfile>
      <anchor>a9ffc5d5be4fdc9be0ea9e1da407d8d23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>priority_</name>
      <anchorfile>structompl_1_1geometric_1_1PDST_1_1Motion.html</anchorfile>
      <anchor>a2ea9a6e9998d4c2dc537e4c19625152d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent_</name>
      <anchorfile>structompl_1_1geometric_1_1PDST_1_1Motion.html</anchorfile>
      <anchor>a58d72ce946def04d3661310ba83fa194</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Cell *</type>
      <name>cell_</name>
      <anchorfile>structompl_1_1geometric_1_1PDST_1_1Motion.html</anchorfile>
      <anchor>a81f5482c7785309a032a2614d93615c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ompl::BinaryHeap&lt; Motion *, MotionCompare &gt;::Element *</type>
      <name>heapElement_</name>
      <anchorfile>structompl_1_1geometric_1_1PDST_1_1Motion.html</anchorfile>
      <anchor>ac8f7085abacbfee24ca4bc35cf2cd156</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isSplit_</name>
      <anchorfile>structompl_1_1geometric_1_1PDST_1_1Motion.html</anchorfile>
      <anchor>af4a376263efff68f3caea46ce9a30004</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::PDST::MotionCompare</name>
    <filename>structompl_1_1geometric_1_1PDST_1_1MotionCompare.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structompl_1_1geometric_1_1PDST_1_1MotionCompare.html</anchorfile>
      <anchor>a8eb98ce8800a8f5f363dbcacad12a000</anchor>
      <arglist>(Motion *p1, Motion *p2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::PRM</name>
    <filename>classompl_1_1geometric_1_1PRM.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="struct">ompl::geometric::PRM::vertex_state_t</class>
    <class kind="struct">ompl::geometric::PRM::vertex_successful_connection_attempts_t</class>
    <class kind="struct">ompl::geometric::PRM::vertex_total_connection_attempts_t</class>
    <member kind="typedef">
      <type>boost::adjacency_list&lt; boost::vecS, boost::vecS, boost::undirectedS, boost::property&lt; vertex_state_t, base::State *, boost::property&lt; vertex_total_connection_attempts_t, unsigned long int, boost::property&lt; vertex_successful_connection_attempts_t, unsigned long int, boost::property&lt; boost::vertex_predecessor_t, unsigned long int, boost::property&lt; boost::vertex_rank_t, unsigned long int &gt; &gt; &gt; &gt; &gt;, boost::property&lt; boost::edge_weight_t, base::Cost &gt; &gt;</type>
      <name>Graph</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a4c1ac7c7f66512d4bce03ab27fffe24a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph_traits&lt; Graph &gt;::vertex_descriptor</type>
      <name>Vertex</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>ae5e716e7ab7cc38987dd47566490694f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph_traits&lt; Graph &gt;::edge_descriptor</type>
      <name>Edge</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a1ae7fb5b9ce5a81217f22e8cde19c9a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Vertex &gt; &gt;</type>
      <name>RoadmapNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a8f119fe047d495a63183f55a02ee7e20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; const std::vector&lt; Vertex &gt; &amp;(const Vertex)&gt;</type>
      <name>ConnectionStrategy</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>aee29aa4e21e75b32449b3bce3b9b47c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; bool(const Vertex &amp;, const Vertex &amp;)&gt;</type>
      <name>ConnectionFilter</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>abfe897806b77d91871a083b5135fce5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PRM</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a5db629bb4a2bf02fb76a4cabbc5e0dcb</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si, bool starStrategy=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProblemDefinition</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>aefef4c0c54de26622152347fa0078961</anchor>
      <arglist>(const base::ProblemDefinitionPtr &amp;pdef)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConnectionStrategy</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a8a7ce65640dd499ba32d80d3495d38bf</anchor>
      <arglist>(const ConnectionStrategy &amp;connectionStrategy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxNearestNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>ab8832a466b3178de436acbb000712f2b</anchor>
      <arglist>(unsigned int k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConnectionFilter</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>ad1e0bed0774005cf08bca672eec73abf</anchor>
      <arglist>(const ConnectionFilter &amp;connectionFilter)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a294b21109833dbbc80f5eb322e9c4fbc</anchor>
      <arglist>(base::PlannerData &amp;data) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructRoadmap</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a8da5dd602d45e477612bb1401cf68c19</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>growRoadmap</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a9f15e6dafe26d97547526317b457c201</anchor>
      <arglist>(double growTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>growRoadmap</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a3a3d60479b122a35b6425db26bf9e6f2</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expandRoadmap</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a718ea717e0928e0d4555683021508e46</anchor>
      <arglist>(double expandTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expandRoadmap</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>aefbf3a3bb25b810e12e8b85b155858ce</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a0e101dcced6fbf9971dc20d30736d00f</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearQuery</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a821506e6c7997bb93b96dd64bfda6051</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>ae9af092666bd96c2a238bf7bb2acd700</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a6e698183182fa65fa309bd0f075c4176</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a542eb5e312323a8a1ab588fe2a183632</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned long int</type>
      <name>milestoneCount</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>ada9558397f62b6a3a1af850c42a6dcf3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned long int</type>
      <name>edgeCount</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>ae251b30525d1c6dbaf24f845efe6921c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a2cb318fda9ada561e357a2dd539ec11b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Vertex</type>
      <name>addMilestone</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>aa393c5591243c7d166fc0f73b46627f2</anchor>
      <arglist>(base::State *state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>uniteComponents</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a8b699f5d6c9ffd15094ef3854f1eb7b4</anchor>
      <arglist>(Vertex m1, Vertex m2)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>sameComponent</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a20caf404f1f9fa7462bb23950a5c9c0a</anchor>
      <arglist>(Vertex m1, Vertex m2)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>growRoadmap</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a4647ad646432fdd063fa5867049ad611</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc, base::State *workState)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>expandRoadmap</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>af5fb6ce74e9f11411acba7b544ced5b0</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc, std::vector&lt; base::State * &gt; &amp;workStates)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkForSolution</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a664410622628a8a1283963dc51b92b03</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc, base::PathPtr &amp;solution)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>maybeConstructSolution</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a819cc1db3a6b03f356a11aa0151f2fe4</anchor>
      <arglist>(const std::vector&lt; Vertex &gt; &amp;starts, const std::vector&lt; Vertex &gt; &amp;goals, base::PathPtr &amp;solution)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>addedNewSolution</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a566ccdc75bd560e89740f3e2e05c524f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>base::PathPtr</type>
      <name>constructSolution</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a868cfb5924859c224fcab04081680065</anchor>
      <arglist>(const Vertex &amp;start, const Vertex &amp;goal)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>base::Cost</type>
      <name>costHeuristic</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>afefd85b9fb3783fddc7a592ba7e5ae23</anchor>
      <arglist>(Vertex u, Vertex v) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a983bce5dd72ba208357b5518f4515125</anchor>
      <arglist>(const Vertex a, const Vertex b) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>starStrategy_</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a03722f1e038d5e2e7dcbb97832f6458b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ValidStateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>ad440cded7058f4b8fd703891d151922c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSamplerPtr</type>
      <name>simpleSampler_</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a2e22fbb5fdd9f79211631cfad8c6e52d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RoadmapNeighbors</type>
      <name>nn_</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a3c4074fd06b96a0b12d39b11bf19f310</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Graph</type>
      <name>g_</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>aa25666bfa02ff8d549b967d411202ea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Vertex &gt;</type>
      <name>startM_</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a084b230c442b1f7e0a22febdf2892ee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Vertex &gt;</type>
      <name>goalM_</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>ac8d91585b24b60381244e928a3e8d0f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; Graph, vertex_state_t &gt;::type</type>
      <name>stateProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>ad88ed69d1ac8d376f91639eb5b0b638c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; Graph, vertex_total_connection_attempts_t &gt;::type</type>
      <name>totalConnectionAttemptsProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>ad279ee7f7070426d6835dd03a970f3a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; Graph, vertex_successful_connection_attempts_t &gt;::type</type>
      <name>successfulConnectionAttemptsProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>aa2bbda9d19b0cb3c4b848bdebdfeecb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; Graph, boost::edge_weight_t &gt;::type</type>
      <name>weightProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>aef27444f5bb1cd1735a6653a00232f18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::disjoint_sets&lt; boost::property_map&lt; Graph, boost::vertex_rank_t &gt;::type, boost::property_map&lt; Graph, boost::vertex_predecessor_t &gt;::type &gt;</type>
      <name>disjointSets_</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a287f90dddb41fabd54c8840901dcf551</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConnectionStrategy</type>
      <name>connectionStrategy_</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a834d99372562ad29dafb42c2c5758299</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConnectionFilter</type>
      <name>connectionFilter_</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>afdcd00e44119e8519bb39900f881332f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>userSetConnectionStrategy_</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>aad9c9af7b63886f0d866da2953320e2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>adca46f63edd3ad7ff1a13483242c1bf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>addedNewSolution_</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a25f19b6c720216328774cf37728a23c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::mutex</type>
      <name>graphMutex_</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a0219ab88b8e1f602fb3911f53c4faf3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::OptimizationObjectivePtr</type>
      <name>opt_</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a239c45504980e2a55d10f30fb46f5a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned long int</type>
      <name>iterations_</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a9976d04ec636ab524044306a7c46075f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::Cost</type>
      <name>bestCost_</name>
      <anchorfile>classompl_1_1geometric_1_1PRM.html</anchorfile>
      <anchor>a28f594ee634a63807362ad6c00b7aca2</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1PRM">gPRM</docanchor>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::PRM::vertex_state_t</name>
    <filename>structompl_1_1geometric_1_1PRM_1_1vertex__state__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::PRM::vertex_successful_connection_attempts_t</name>
    <filename>structompl_1_1geometric_1_1PRM_1_1vertex__successful__connection__attempts__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::PRM::vertex_total_connection_attempts_t</name>
    <filename>structompl_1_1geometric_1_1PRM_1_1vertex__total__connection__attempts__t.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::PRMstar</name>
    <filename>classompl_1_1geometric_1_1PRMstar.html</filename>
    <base>ompl::geometric::PRM</base>
    <member kind="function">
      <type></type>
      <name>PRMstar</name>
      <anchorfile>classompl_1_1geometric_1_1PRMstar.html</anchorfile>
      <anchor>a214dacff7aa3c161f37da90196b8bb6f</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1PRMstar">gPRMstar</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::ProjEST</name>
    <filename>classompl_1_1geometric_1_1ProjEST.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::ProjEST::Motion</class>
    <class kind="struct">ompl::geometric::ProjEST::MotionInfo</class>
    <class kind="struct">ompl::geometric::ProjEST::TreeData</class>
    <member kind="function">
      <type></type>
      <name>ProjEST</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>af28980b8f556ba800172040f05cfdd2e</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>af239fe671b70b25b410072a51711c895</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>ade49b64de1303deec60fea7ca9f432bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>ae0f3f42e5fdd5c145d9bcd929ea758cc</anchor>
      <arglist>(double goalBias)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>ad44e8ed56f8b3df29304fb25d523eaec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>af6fd274771bf909129080d7ed13a87e0</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>ab13d4093d03857fc16364b717424cc40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>af161009ea6017b04b0bf7ee4c30e8c41</anchor>
      <arglist>(const base::ProjectionEvaluatorPtr &amp;projectionEvaluator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>a9b3768c56d657c35ff729c0b26f7afe4</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const base::ProjectionEvaluatorPtr &amp;</type>
      <name>getProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>a1a9be5a45a3e0aaaa0a6c7e7ec13fc3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>ab6690f9ee0b4410414fe7192401c5c33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>a12ee5ce2f0c82d208ca0f8c8cccd0f84</anchor>
      <arglist>(base::PlannerData &amp;data) const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Grid&lt; MotionInfo &gt;::Cell</type>
      <name>GridCell</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>add5f841e1a4984c17d72564a7b5a28af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>PDF&lt; GridCell * &gt;</type>
      <name>CellPDF</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>ad7460f9c6c84a75c3ec969b45a7d83f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>a7f892af221d050a0828ea33a7bc848e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addMotion</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>a58b5413b06405cc69190b3785bd4d538</anchor>
      <arglist>(Motion *motion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Motion *</type>
      <name>selectMotion</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>adb5a9cc3fd1013fb6a15653d0f7fbd6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ValidStateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>ad0797c68f681b53e636dc7cb01695fad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TreeData</type>
      <name>tree_</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>a0648b63f5b6d0be251b8160fd9203098</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ProjectionEvaluatorPtr</type>
      <name>projectionEvaluator_</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>a8e4ea14c2a6b83747ecbc33b915372c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>goalBias_</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>a95ec1bcc27b1357948360feb9f397716</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistance_</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>adbd786bbe42ce94e189f1bfc2aa939f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>a16c24bebf25e7b2da6b13e417e272cce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CellPDF</type>
      <name>pdf_</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>a5f81c257e069af24cd80c505bf459ff6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>lastGoalMotion_</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST.html</anchorfile>
      <anchor>a2511a8752b0851839fbcfbc3615de0df</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1ProjEST">gProjEST</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::ProjEST::Motion</name>
    <filename>classompl_1_1geometric_1_1ProjEST_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST_1_1Motion.html</anchorfile>
      <anchor>a40d2ce6da57d50544c0bc00f79eec11c</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST_1_1Motion.html</anchorfile>
      <anchor>ad5454a08018da012097a44a73341f5a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent</name>
      <anchorfile>classompl_1_1geometric_1_1ProjEST_1_1Motion.html</anchorfile>
      <anchor>a96197308ce9edb55062af62fcacf98db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::ProjEST::MotionInfo</name>
    <filename>structompl_1_1geometric_1_1ProjEST_1_1MotionInfo.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::ProjEST::TreeData</name>
    <filename>structompl_1_1geometric_1_1ProjEST_1_1TreeData.html</filename>
    <member kind="variable">
      <type>Grid&lt; MotionInfo &gt;</type>
      <name>grid</name>
      <anchorfile>structompl_1_1geometric_1_1ProjEST_1_1TreeData.html</anchorfile>
      <anchor>a4639810ba523b8d98b2562ed8c0177b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>structompl_1_1geometric_1_1ProjEST_1_1TreeData.html</anchorfile>
      <anchor>a3ad5e731e481a03d3b8332ab976f8747</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::pRRT</name>
    <filename>classompl_1_1geometric_1_1pRRT.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::pRRT::Motion</class>
    <class kind="struct">ompl::geometric::pRRT::SolutionInfo</class>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1pRRT.html</anchorfile>
      <anchor>afb65bde371fca3628ef9622ca32e0985</anchor>
      <arglist>(base::PlannerData &amp;data) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1pRRT.html</anchorfile>
      <anchor>a8e40fdaa14f107ccc051c9278dab7013</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1pRRT.html</anchorfile>
      <anchor>abda1396939313e264fe3077abd0e3974</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1pRRT.html</anchorfile>
      <anchor>a525bff8c62317b7b7e45cd6865c0357e</anchor>
      <arglist>(double goalBias)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1pRRT.html</anchorfile>
      <anchor>a1a5803c8dead83874d3d2e649ca240be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1pRRT.html</anchorfile>
      <anchor>ac854a72b384f1a45946d7d23c2425ed2</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1pRRT.html</anchorfile>
      <anchor>a55fc60561c22b99844f532a911c90d18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setThreadCount</name>
      <anchorfile>classompl_1_1geometric_1_1pRRT.html</anchorfile>
      <anchor>adfba9c3246fd29e4d72196c417cb1fda</anchor>
      <arglist>(unsigned int nthreads)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1pRRT.html</anchorfile>
      <anchor>af3ed3b0675c24c9938877448d9e70f69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1pRRT.html</anchorfile>
      <anchor>ae7b22d8f0a6c281a637dc3f4b2a51e15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>lastGoalMotion_</name>
      <anchorfile>classompl_1_1geometric_1_1pRRT.html</anchorfile>
      <anchor>a6a0762e288594e90a2c9fa7db89f09b6</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1pRRT">gpRRT</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::pRRT::Motion</name>
    <filename>classompl_1_1geometric_1_1pRRT_1_1Motion.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::pRRT::SolutionInfo</name>
    <filename>structompl_1_1geometric_1_1pRRT_1_1SolutionInfo.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::pSBL</name>
    <filename>classompl_1_1geometric_1_1pSBL.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::pSBL::Motion</class>
    <class kind="struct">ompl::geometric::pSBL::MotionInfo</class>
    <class kind="struct">ompl::geometric::pSBL::MotionsToBeRemoved</class>
    <class kind="struct">ompl::geometric::pSBL::PendingRemoveMotion</class>
    <class kind="struct">ompl::geometric::pSBL::SolutionInfo</class>
    <class kind="struct">ompl::geometric::pSBL::TreeData</class>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1pSBL.html</anchorfile>
      <anchor>a8c706561dc3d5256a69f8aff5a6a4dab</anchor>
      <arglist>(const base::ProjectionEvaluatorPtr &amp;projectionEvaluator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1pSBL.html</anchorfile>
      <anchor>a3ef968832cbe29236891c5ae731219fc</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const base::ProjectionEvaluatorPtr &amp;</type>
      <name>getProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1pSBL.html</anchorfile>
      <anchor>af25c7d495e7872b73beab63aed155d9a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1pSBL.html</anchorfile>
      <anchor>a684881ad135214cf17dc1d417a921805</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1pSBL.html</anchorfile>
      <anchor>a5aa31fd087855b2c8f648284ea388a8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setThreadCount</name>
      <anchorfile>classompl_1_1geometric_1_1pSBL.html</anchorfile>
      <anchor>aa4ac4755ecdf651d5d0e584cbf742393</anchor>
      <arglist>(unsigned int nthreads)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getThreadCount</name>
      <anchorfile>classompl_1_1geometric_1_1pSBL.html</anchorfile>
      <anchor>a7f18c3f6104cdad3841d67afdd904d18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1pSBL.html</anchorfile>
      <anchor>abee35fddcae435af52ebf169328bb044</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1pSBL.html</anchorfile>
      <anchor>aa487312ea5c2cb970654ae324e8941cc</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1pSBL.html</anchorfile>
      <anchor>add0c81901c04f9f7e7a427c5d018018f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1pSBL.html</anchorfile>
      <anchor>ab9f5004971fe0571e6145a64e4a8772c</anchor>
      <arglist>(base::PlannerData &amp;data) const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Grid&lt; MotionInfo &gt;::Cell</type>
      <name>GridCell</name>
      <anchorfile>classompl_1_1geometric_1_1pSBL.html</anchorfile>
      <anchor>a8a75dd55b02767ff5854d3431bf252cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>PDF&lt; GridCell * &gt;</type>
      <name>CellPDF</name>
      <anchorfile>classompl_1_1geometric_1_1pSBL.html</anchorfile>
      <anchor>a38b4b10dc399a3f21601ba8332318310</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::pair&lt; base::State *, base::State * &gt;</type>
      <name>connectionPoint_</name>
      <anchorfile>classompl_1_1geometric_1_1pSBL.html</anchorfile>
      <anchor>a31807f5e444fec3d05328dcaf61cf784</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1pSBL">gpSBL</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::pSBL::Motion</name>
    <filename>classompl_1_1geometric_1_1pSBL_1_1Motion.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::pSBL::MotionInfo</name>
    <filename>structompl_1_1geometric_1_1pSBL_1_1MotionInfo.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::pSBL::MotionsToBeRemoved</name>
    <filename>structompl_1_1geometric_1_1pSBL_1_1MotionsToBeRemoved.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::pSBL::PendingRemoveMotion</name>
    <filename>structompl_1_1geometric_1_1pSBL_1_1PendingRemoveMotion.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::pSBL::SolutionInfo</name>
    <filename>structompl_1_1geometric_1_1pSBL_1_1SolutionInfo.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::pSBL::TreeData</name>
    <filename>structompl_1_1geometric_1_1pSBL_1_1TreeData.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::RRT</name>
    <filename>classompl_1_1geometric_1_1RRT.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::RRT::Motion</class>
    <member kind="function">
      <type></type>
      <name>RRT</name>
      <anchorfile>classompl_1_1geometric_1_1RRT.html</anchorfile>
      <anchor>ad5d527eb6ae532aaa2ebdac6d743f8f7</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1RRT.html</anchorfile>
      <anchor>a928abf7aaeb87e52d231c09a9e78b3a9</anchor>
      <arglist>(base::PlannerData &amp;data) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1RRT.html</anchorfile>
      <anchor>ae463bbe09f56dbbd8f691ac3d6dbcf20</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1RRT.html</anchorfile>
      <anchor>ae7e221f5d477dafabcb7b6b2635316ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1RRT.html</anchorfile>
      <anchor>a266da7a6379a2893e19d06993335ed25</anchor>
      <arglist>(double goalBias)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1RRT.html</anchorfile>
      <anchor>a672803b1b47c8b0a731843d0e798e13e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1RRT.html</anchorfile>
      <anchor>abe92fdafd6201308401d149c4d47b5ed</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1RRT.html</anchorfile>
      <anchor>a052c35fd0647646acae0007d9c8821c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1RRT.html</anchorfile>
      <anchor>a251d7203d3741b838004e35940b58488</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1RRT.html</anchorfile>
      <anchor>a0928e3a0c76bba1ae75387bb89faa67b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1RRT.html</anchorfile>
      <anchor>acd14575621042052a2f3a86ad96bc308</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1RRT.html</anchorfile>
      <anchor>a4fc0b1e2020a8305395fb5d3e7533bfd</anchor>
      <arglist>(const Motion *a, const Motion *b) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1RRT.html</anchorfile>
      <anchor>a2c158677fe09bf0b112732a331462bdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Motion * &gt; &gt;</type>
      <name>nn_</name>
      <anchorfile>classompl_1_1geometric_1_1RRT.html</anchorfile>
      <anchor>aa84398aaef1c675486878ace31ac4dbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>goalBias_</name>
      <anchorfile>classompl_1_1geometric_1_1RRT.html</anchorfile>
      <anchor>adaf18fdeef00563d5a9010540664619f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistance_</name>
      <anchorfile>classompl_1_1geometric_1_1RRT.html</anchorfile>
      <anchor>aab0d2454d49ba18b34a891270e21302b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1RRT.html</anchorfile>
      <anchor>a0d8f48d596b39914128e40ce0c488817</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>lastGoalMotion_</name>
      <anchorfile>classompl_1_1geometric_1_1RRT.html</anchorfile>
      <anchor>ab6654563ff78efc363a4a074ed98569c</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1RRT">gRRT</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::RRT::Motion</name>
    <filename>classompl_1_1geometric_1_1RRT_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1geometric_1_1RRT_1_1Motion.html</anchorfile>
      <anchor>aba5559c353c48e374436775151c75260</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state</name>
      <anchorfile>classompl_1_1geometric_1_1RRT_1_1Motion.html</anchorfile>
      <anchor>acd5df45a1c0bcb5a22d2ac77b40013f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent</name>
      <anchorfile>classompl_1_1geometric_1_1RRT_1_1Motion.html</anchorfile>
      <anchor>a961d989d3e74304cc4677cc61d5b3cf0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::RRTConnect</name>
    <filename>classompl_1_1geometric_1_1RRTConnect.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::RRTConnect::Motion</class>
    <class kind="struct">ompl::geometric::RRTConnect::TreeGrowingInfo</class>
    <member kind="function">
      <type></type>
      <name>RRTConnect</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a918795ad317b8cee40184c3e289f8d51</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a32e3f019f790cb85b1f97a6cacb02e02</anchor>
      <arglist>(base::PlannerData &amp;data) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a73d2a382a52f75eaf8ee35ae36656aca</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a0ce571b0313938bb1ca026fce1dbcbaf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a6d672e3b8c4e5f09719a5db74c75ca41</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>ae3bed4090501ec5a3698d8108cb94df2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a8b4577228d584d25ff58d85d117d01d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>afc3cc95aae55d09631c80dad116107cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>GrowState</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a6df5b0ed7234e4a70f82fd84f3e83c4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>TRAPPED</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a6df5b0ed7234e4a70f82fd84f3e83c4ba8c504cf08c1829a11f98ce4d6f38320b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>ADVANCED</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a6df5b0ed7234e4a70f82fd84f3e83c4ba0969940dcdb34f22e1a1ce0c9129e7ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>REACHED</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a6df5b0ed7234e4a70f82fd84f3e83c4baf7876405ca61b09872f30ab8c79a12eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Motion * &gt; &gt;</type>
      <name>TreeData</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a0a42ad5b647317e2248f7b45075fcc3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>TRAPPED</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a6df5b0ed7234e4a70f82fd84f3e83c4ba8c504cf08c1829a11f98ce4d6f38320b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>ADVANCED</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a6df5b0ed7234e4a70f82fd84f3e83c4ba0969940dcdb34f22e1a1ce0c9129e7ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>REACHED</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a6df5b0ed7234e4a70f82fd84f3e83c4baf7876405ca61b09872f30ab8c79a12eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a74eab29b7c7ac5e75d88134067121e45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a96e7a7a8ed32a88c490204fcb8847fb5</anchor>
      <arglist>(const Motion *a, const Motion *b) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>GrowState</type>
      <name>growTree</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a140a2bf524fe7c39dfbe1e8d5f55fe80</anchor>
      <arglist>(TreeData &amp;tree, TreeGrowingInfo &amp;tgi, Motion *rmotion)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>abb9c22bc9815d896ae9c029b2047b0da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TreeData</type>
      <name>tStart_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a91ce4e34b670b36588fdcc7030fe692d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TreeData</type>
      <name>tGoal_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>aeeb74200ede46e3d1eef584325ec1484</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistance_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a299caf818f757d96793d1bc092a665b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a89885ce34b34c5c880993f3ad553bffa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::pair&lt; base::State *, base::State * &gt;</type>
      <name>connectionPoint_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTConnect.html</anchorfile>
      <anchor>a4d0a02d3328dc40ae4cd32719e10f25c</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1RRTConnect">gRRTC</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::RRTConnect::Motion</name>
    <filename>classompl_1_1geometric_1_1RRTConnect_1_1Motion.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::RRTConnect::TreeGrowingInfo</name>
    <filename>structompl_1_1geometric_1_1RRTConnect_1_1TreeGrowingInfo.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::RRTstar</name>
    <filename>classompl_1_1geometric_1_1RRTstar.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="struct">ompl::geometric::RRTstar::CostIndexCompare</class>
    <class kind="class">ompl::geometric::RRTstar::Motion</class>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a9deb3ad92188d3a18fcb50d82d75fd40</anchor>
      <arglist>(base::PlannerData &amp;data) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a5d1ba1288c3929c6c758ac4544adc42a</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>ab584d649926413df4ccbca6e5d4b79e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>afb7547b2ac7557354cb71e02d567ed4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a2ffc63f0014372c460a63c549be44bbb</anchor>
      <arglist>(double goalBias)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a1a4b7e9371ac7dbb47bdd4597cf16c54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>abc09caed4e70c8660ea63170ff4a399c</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>af12862b8a8165d890f2a7237c49e48eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRewireFactor</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a47948a2021dbfdbd0cdf4b18cf8d718c</anchor>
      <arglist>(double rewireFactor)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRewireFactor</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a25ad256be7f237cc3a8ba6b6d229fe45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a797b5c16997b3e19bdca5adf31dd8f5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDelayCC</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a67848bffdda2ddcfbac59b358907e1b9</anchor>
      <arglist>(bool delayCC)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getDelayCC</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a1007fe6ab00b4278f8de8d0a2f6c9bb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTreePruning</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>ae7a6c0ed7b1c6a13b9094e488809517f</anchor>
      <arglist>(const bool prune)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getTreePruning</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a33d5c2f5ba616cd994f080d9ec8b43fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPruneThreshold</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a129f4fbfd1074228f1cd64b622b050d7</anchor>
      <arglist>(const double pp)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPruneThreshold</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a692c2caac8ff03b9e814fde7ea63d138</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrunedMeasure</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>aa3bfb692a5e18a77e72260802a5ccacc</anchor>
      <arglist>(bool informedMeasure)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getPrunedMeasure</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>ae2656ef3abb5609b947663664cf28cc3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInformedSampling</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a81ca16e4dfbc8cd2fbe5992250324404</anchor>
      <arglist>(bool informedSampling)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getInformedSampling</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a0a7dbb23c99c8312c91fe993920b9ce4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSampleRejection</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>ab633a4b6132757444ad79d760880b517</anchor>
      <arglist>(const bool reject)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getSampleRejection</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a476e3c20ad32fb1158bd54425087bffa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNewStateRejection</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>add3ea03a2640fb1931d5accd146e12c9</anchor>
      <arglist>(const bool reject)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getNewStateRejection</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>ad9b2cdf84f396fea0bf383e794bb5805</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAdmissibleCostToCome</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a7de444eb0d3d1831353267cc94e08506</anchor>
      <arglist>(const bool admissible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAdmissibleCostToCome</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a9c4cb83357161dca61ee7e129c51c396</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFocusSearch</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>ae6a8cb24a300de2df01a3dcdd9a9a7a5</anchor>
      <arglist>(const bool focus)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getFocusSearch</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>abf8ba23824c24f3957a1813910f0ef70</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKNearest</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>aa5e2a9ce790c719cd22354ea2b264b24</anchor>
      <arglist>(bool useKNearest)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getKNearest</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a507b4103c9e7a53e407b0eeabcfe3cf7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumSamplingAttempts</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>ad21c04eaffbe4ebe337350f8ab7e7318</anchor>
      <arglist>(unsigned int numAttempts)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumSamplingAttempts</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a90668aa7316d5020a960dbac21deb134</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>allocSampler</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>aa8180ea327090c82278680c2505aa433</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>sampleUniform</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a98378d793112b21395a5b52e3f53e490</anchor>
      <arglist>(base::State *statePtr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a2046b5ca17c6030dac16cad855621a7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a31a4b56088352e6e2d12300e2c4bc3bf</anchor>
      <arglist>(const Motion *a, const Motion *b) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>aad32b78f55a2e739c74012b9c96715f1</anchor>
      <arglist>(Motion *motion, std::vector&lt; Motion * &gt; &amp;nbh) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeFromParent</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a7c90cd3eabefa41bfeb4bfa81619dcd8</anchor>
      <arglist>(Motion *m)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateChildCosts</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a6564971aba61a74bf620b2ffb439db09</anchor>
      <arglist>(Motion *m)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>pruneTree</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>afde43e06e2d50fedfc2f42062a23dce1</anchor>
      <arglist>(const base::Cost &amp;pruneTreeCost)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>base::Cost</type>
      <name>solutionHeuristic</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a24ce0c6d2c70b48c8b39cbd2a540defb</anchor>
      <arglist>(const Motion *motion) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addChildrenToList</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>ab9331edc37ced21d90248936e3346b19</anchor>
      <arglist>(std::queue&lt; Motion *, std::deque&lt; Motion * &gt; &gt; *motionList, Motion *motion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>keepCondition</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>afc39886c07f4ea670961a9b0addebd38</anchor>
      <arglist>(const Motion *motion, const base::Cost &amp;threshold) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>calculateRewiringLowerBounds</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a290bc15f4f774f138c78d58732ac2ed7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a217157cf8281f4da5f68f62c9423235c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::InformedSamplerPtr</type>
      <name>infSampler_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a19ce83eeaab6c6f08295aee9173338f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Motion * &gt; &gt;</type>
      <name>nn_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a5c492c2f0ab5fe4c1c05d596d2d3cc22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>goalBias_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>ae20251dbc5dbc0f9bdfb4c72141fbe13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistance_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>ac63a1848f74d9b61604d012d4e9cc87d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>abceef0ae95921f2f58278864e1fe425a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useKNearest_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>aeb2eab7fa3855a1ea9767ef9940c4bb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>rewireFactor_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a54e2598442b2a24f816eed7a106313ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>k_rrg_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>ad915a94be433a1d4df709d6778328576</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>r_rrg_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>af7242bfebcfd2446a1aa9bc250e9ee4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>delayCC_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a7cb1f7e0fbf61224324231de92d320cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::OptimizationObjectivePtr</type>
      <name>opt_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>ad6ed5fc62253eeaf7740aaafe9e485e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>lastGoalMotion_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>ab980c4b7c4bbdd577b17e1514c3749e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Motion * &gt;</type>
      <name>goalMotions_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>ab4b4535ae0a3d01551fec707d0eea655</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useTreePruning_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a75595f5071448f5b881284bad2a4464e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>pruneThreshold_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a4f72ce957f0faab2807c0464a388cfc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>usePrunedMeasure_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>ac2c9609386aa92723ecca8f2d2cdf3b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useInformedSampling_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a8ed8134d7be9844f5fb0629c46d7f314</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useRejectionSampling_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a036418995f08919149010d74409830a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useNewStateRejection_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a7743608a9b100d5952dba8229a96c600</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useAdmissibleCostToCome_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a087d9305553e568032e5cb3b08f8e4bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numSampleAttempts_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a2a5aeeff6bd5341e8b36efbb89c8ffe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Motion * &gt;</type>
      <name>startMotions_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a45562c40eb688c73c1e3b5574fc5855d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::Cost</type>
      <name>bestCost_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a4056a3fb20f8076902fa194c1f711632</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::Cost</type>
      <name>prunedCost_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a77b4f37fae45b57c04c5fbeae10b4c13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>prunedMeasure_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>a913ab1d8a770041a49918dce168112f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>iterations_</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar.html</anchorfile>
      <anchor>afb8a6117217d2525b34bd0f00c1e9675</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1RRTstar">gRRTstar</docanchor>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::RRTstar::CostIndexCompare</name>
    <filename>structompl_1_1geometric_1_1RRTstar_1_1CostIndexCompare.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::RRTstar::Motion</name>
    <filename>classompl_1_1geometric_1_1RRTstar_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar_1_1Motion.html</anchorfile>
      <anchor>a9160d69f161f72ea8ff7371a0e018f7f</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar_1_1Motion.html</anchorfile>
      <anchor>af26b3af216daafb9dd4e5d593b310588</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar_1_1Motion.html</anchorfile>
      <anchor>ac925497a707b8fe5d096047d4a042e81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>base::Cost</type>
      <name>cost</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar_1_1Motion.html</anchorfile>
      <anchor>a24d0430fac3f0ac44d7cbefe53c553ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>base::Cost</type>
      <name>incCost</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar_1_1Motion.html</anchorfile>
      <anchor>a3eb6f4563fe325c7f40a4d3432f225f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Motion * &gt;</type>
      <name>children</name>
      <anchorfile>classompl_1_1geometric_1_1RRTstar_1_1Motion.html</anchorfile>
      <anchor>ae1b580b7146bd0b96973ed881353f4e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::SBL</name>
    <filename>classompl_1_1geometric_1_1SBL.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::SBL::Motion</class>
    <class kind="struct">ompl::geometric::SBL::MotionInfo</class>
    <class kind="struct">ompl::geometric::SBL::TreeData</class>
    <member kind="function">
      <type></type>
      <name>SBL</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>afba6f0f7e5db8e5537c56b00c54ba778</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>a062c4fb5aaaf93b5cb2ab3a1fc1d9b7e</anchor>
      <arglist>(const base::ProjectionEvaluatorPtr &amp;projectionEvaluator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>a95b5c3a3493d8b369ed878b57d6074b1</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const base::ProjectionEvaluatorPtr &amp;</type>
      <name>getProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>a466fc622f4458b9d4eb2a67b0ab5004c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>ae14bef7bf3d19c5fe29b439186b9d8ec</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>a467124305b982f7b5dd414f09091f7d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>aba021a685995f1553572650d43970137</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>a49325e1f1fd75b8bc93e2ffd08f1e42b</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>ab1239e44ffa4d076b138b850982ddd34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>a5d8ac60361bd040a03d6fcdba7da29cd</anchor>
      <arglist>(base::PlannerData &amp;data) const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Grid&lt; MotionInfo &gt;::Cell</type>
      <name>GridCell</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>a98bdea6dc631f78458452da367fd495b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>PDF&lt; GridCell * &gt;</type>
      <name>CellPDF</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>ae96f2d6d793aa0c5435d43decbe357cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>a481eee58f78971d35b3a72ceb7903ef2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeGridMotions</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>a045bc6073187af3c95302e98a40c29c7</anchor>
      <arglist>(Grid&lt; MotionInfo &gt; &amp;grid)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addMotion</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>aa7aaf57300e6a8474aade8c2b9899454</anchor>
      <arglist>(TreeData &amp;tree, Motion *motion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Motion *</type>
      <name>selectMotion</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>afb79a0fdc7fc54251d6ef246cdbf2a0c</anchor>
      <arglist>(TreeData &amp;tree)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeMotion</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>a61d240f219227b2476df8d534289a200</anchor>
      <arglist>(TreeData &amp;tree, Motion *motion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isPathValid</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>a5c290474f7aadefb7c5ed24bcab832be</anchor>
      <arglist>(TreeData &amp;tree, Motion *motion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkSolution</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>af71623082dc34713a0584baddf327bf1</anchor>
      <arglist>(bool start, TreeData &amp;tree, TreeData &amp;otherTree, Motion *motion, std::vector&lt; Motion * &gt; &amp;solution)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ValidStateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>a6e21ebdb80aa3df138b711f739458929</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ProjectionEvaluatorPtr</type>
      <name>projectionEvaluator_</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>a63cfcb2e97c2a1904202ccc81569958c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TreeData</type>
      <name>tStart_</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>a33a1bf5cb144b453e4b69855e19f3d18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TreeData</type>
      <name>tGoal_</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>ad917d94e5877b0a1f65c861e73329c58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistance_</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>afd6d54cc164f50d105aa615a2052daa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>afffdc21c6d41c1de3a55daebac85cff0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::pair&lt; base::State *, base::State * &gt;</type>
      <name>connectionPoint_</name>
      <anchorfile>classompl_1_1geometric_1_1SBL.html</anchorfile>
      <anchor>ad8561a85612a008237b87a5d19f689e4</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1SBL">gSBL</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::SBL::Motion</name>
    <filename>classompl_1_1geometric_1_1SBL_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1geometric_1_1SBL_1_1Motion.html</anchorfile>
      <anchor>ae3910334f47bed1311dd666f4158dad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1geometric_1_1SBL_1_1Motion.html</anchorfile>
      <anchor>a3457c79596453ae61dcf30e745a52169</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="variable">
      <type>const base::State *</type>
      <name>root</name>
      <anchorfile>classompl_1_1geometric_1_1SBL_1_1Motion.html</anchorfile>
      <anchor>ab4c75449dee78c54accf15a27e45a138</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state</name>
      <anchorfile>classompl_1_1geometric_1_1SBL_1_1Motion.html</anchorfile>
      <anchor>a1961e2628ac13bd2946f32a0df0e0644</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent</name>
      <anchorfile>classompl_1_1geometric_1_1SBL_1_1Motion.html</anchorfile>
      <anchor>a6909be2bcc8fc942027be974fc583035</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classompl_1_1geometric_1_1SBL_1_1Motion.html</anchorfile>
      <anchor>af10d75ce5c240a98e1ccf1daa34e3d26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Motion * &gt;</type>
      <name>children</name>
      <anchorfile>classompl_1_1geometric_1_1SBL_1_1Motion.html</anchorfile>
      <anchor>a7b089779e76f706e05c63b29aa0eadca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::SBL::MotionInfo</name>
    <filename>structompl_1_1geometric_1_1SBL_1_1MotionInfo.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::SBL::TreeData</name>
    <filename>structompl_1_1geometric_1_1SBL_1_1TreeData.html</filename>
    <member kind="variable">
      <type>Grid&lt; MotionInfo &gt;</type>
      <name>grid</name>
      <anchorfile>structompl_1_1geometric_1_1SBL_1_1TreeData.html</anchorfile>
      <anchor>a58b1c4ab2f8d03b8464bc798ac6772fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>structompl_1_1geometric_1_1SBL_1_1TreeData.html</anchorfile>
      <anchor>a5468bf9faf38d010765fda43bdfedbca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CellPDF</type>
      <name>pdf</name>
      <anchorfile>structompl_1_1geometric_1_1SBL_1_1TreeData.html</anchorfile>
      <anchor>a0632632651469a858e0148af4daafe1a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::SimpleSetup</name>
    <filename>classompl_1_1geometric_1_1SimpleSetup.html</filename>
    <member kind="function">
      <type></type>
      <name>SimpleSetup</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a6c77f5085972396a3797bb838667e8df</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleSetup</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>af945064d1e9216058e5ad1a4daa8d1f1</anchor>
      <arglist>(const base::StateSpacePtr &amp;space)</arglist>
    </member>
    <member kind="function">
      <type>const base::SpaceInformationPtr &amp;</type>
      <name>getSpaceInformation</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a735d4f184302d9c18fd08ed068731533</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const base::ProblemDefinitionPtr &amp;</type>
      <name>getProblemDefinition</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>aa96ee7350ba2e076f48a33037568c11e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const base::StateSpacePtr &amp;</type>
      <name>getStateSpace</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>ae1a66d09baf92854d9cb4fbd4c55caa9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const base::StateValidityCheckerPtr &amp;</type>
      <name>getStateValidityChecker</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a473762d97fa6eb655ea8ce67a0015043</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const base::GoalPtr &amp;</type>
      <name>getGoal</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a10255bd7d29bc6014613d47dbb48cd46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const base::PlannerPtr &amp;</type>
      <name>getPlanner</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a07571d41a38b8c0b7ae66172559979e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const base::PlannerAllocator &amp;</type>
      <name>getPlannerAllocator</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a458ee1bcb5fb15fe6a659758da5a5995</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PathSimplifierPtr &amp;</type>
      <name>getPathSimplifier</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a23c01de9e8925a740ee80ec2cb457d8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PathSimplifierPtr &amp;</type>
      <name>getPathSimplifier</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>aed52ed9ae614cab6fa843975b8b3c60f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const base::OptimizationObjectivePtr &amp;</type>
      <name>getOptimizationObjective</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a27b49612bfb86d1c07bfecf94f234af4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveExactSolutionPath</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a0a47163e799d3367f58437dfd903cb0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveSolutionPath</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>ae8b0aa5f124609bdade2d85dca1b9db9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>getSolutionPlannerName</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>ad068d05484a4466287613b0f1327f644</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>PathGeometric &amp;</type>
      <name>getSolutionPath</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a39ebfd4caa153fb0a5a4312f85cffebf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>af95bf82b928f80ec9985bf7a0979dbd3</anchor>
      <arglist>(base::PlannerData &amp;pd) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateValidityChecker</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a6774bcc65c0968e2cb927bab464a3aad</anchor>
      <arglist>(const base::StateValidityCheckerPtr &amp;svc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStateValidityChecker</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>ad6b07d6a351500ea1333151733b254e2</anchor>
      <arglist>(const base::StateValidityCheckerFn &amp;svc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOptimizationObjective</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a9f69de97e7c0cfce7cd8e5a927591ac8</anchor>
      <arglist>(const base::OptimizationObjectivePtr &amp;optimizationObjective)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartAndGoalStates</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a5613360d370f7c68adde45f03d1966d3</anchor>
      <arglist>(const base::ScopedState&lt;&gt; &amp;start, const base::ScopedState&lt;&gt; &amp;goal, const double threshold=std::numeric_limits&lt; double &gt;::epsilon())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addStartState</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>ab1dc047ae0b70d3492d7e222f56d83a7</anchor>
      <arglist>(const base::ScopedState&lt;&gt; &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearStartStates</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>abfd69f5fb87a3e95811ebe5f4f45ea0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartState</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>aee17b73abd2876dc4dbffd02038ded34</anchor>
      <arglist>(const base::ScopedState&lt;&gt; &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalState</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a8bb806d078ddaded372d7cbe4b1ef82a</anchor>
      <arglist>(const base::ScopedState&lt;&gt; &amp;goal, const double threshold=std::numeric_limits&lt; double &gt;::epsilon())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoal</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a6f6e9a1b5facde7915f51e86b48860e9</anchor>
      <arglist>(const base::GoalPtr &amp;goal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlanner</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a8a94558b2ece27d938a92b062d55df71</anchor>
      <arglist>(const base::PlannerPtr &amp;planner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlannerAllocator</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a9e2d929e58376c4806234b6a473cd3e8</anchor>
      <arglist>(const base::PlannerAllocator &amp;pa)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a387050f69afb31e4869f848cc837f8ba</anchor>
      <arglist>(double time=1.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>adae88a9d800135ebf84daedc77b23543</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>getLastPlannerStatus</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a6583b0cb996572ed376b360b2f650c44</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLastPlanComputationTime</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a336c44049aa54258f67e11abd8b693b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLastSimplificationTime</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a2fced050bceb5eb5db2e8e8d9553bc1d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>simplifySolution</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a6be73057e3a2e13fa8342c70c2e4f674</anchor>
      <arglist>(double duration=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>simplifySolution</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>adbbd67d9d06f2f9debde230b0c0e92c4</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a6a2ed93879c02efab472c5db3e9a6aff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>ae787775ec6d05e0e9dcd6cd379839ce5</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>af245005feb3c0b525e1ac5d397c8d3ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::SpaceInformationPtr</type>
      <name>si_</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a769e167e2959b1ca59fc9b3ea2416f45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ProblemDefinitionPtr</type>
      <name>pdef_</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>ab996b6b96ab19c5f51ca5167bb8dd60a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::PlannerPtr</type>
      <name>planner_</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a580b3608f6b473a1ea0bc5febd0b83cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::PlannerAllocator</type>
      <name>pa_</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>af0eec15376eb6e47b0ad03e7f281c420</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PathSimplifierPtr</type>
      <name>psk_</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a0b1dcfac122177dfdd3d64a0bbf86212</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>configured_</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a4a346b6fccff04f3df867d78dba27db4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>planTime_</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a1747fe1bdce1cb4c9284c98f381fcc1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>simplifyTime_</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a07bd87a344ef361d581b799e75471307</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::PlannerStatus</type>
      <name>lastStatus_</name>
      <anchorfile>classompl_1_1geometric_1_1SimpleSetup.html</anchorfile>
      <anchor>a2dff9b30ec063e43d154d59ef8a7bca9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::SimpleSetupPtr</name>
    <filename>classompl_1_1geometric_1_1SimpleSetupPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::SPARS</name>
    <filename>classompl_1_1geometric_1_1SPARS.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="struct">ompl::geometric::SPARS::vertex_color_t</class>
    <class kind="struct">ompl::geometric::SPARS::vertex_interface_list_t</class>
    <class kind="struct">ompl::geometric::SPARS::vertex_list_t</class>
    <class kind="struct">ompl::geometric::SPARS::vertex_representative_t</class>
    <class kind="struct">ompl::geometric::SPARS::vertex_state_t</class>
    <member kind="enumeration">
      <type></type>
      <name>GuardType</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>ab32058a4cdbd6e4ab645537cc7735cdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long int</type>
      <name>VertexIndexType</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>aad7654a88ebd166e41d3ed6e1b0c3b5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unordered_map&lt; VertexIndexType, std::set&lt; VertexIndexType &gt; &gt;</type>
      <name>InterfaceHash</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a81edac38a1e360515ccbb23e03bde035</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::deque&lt; base::State * &gt;</type>
      <name>DensePath</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a8a5be424f43decdc6078024f865c069d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::adjacency_list&lt; boost::vecS, boost::vecS, boost::undirectedS, boost::property&lt; vertex_state_t, base::State *, boost::property&lt; boost::vertex_predecessor_t, VertexIndexType, boost::property&lt; boost::vertex_rank_t, VertexIndexType, boost::property&lt; vertex_color_t, GuardType, boost::property&lt; vertex_list_t, std::set&lt; VertexIndexType &gt;, boost::property&lt; vertex_interface_list_t, InterfaceHash &gt; &gt; &gt; &gt; &gt; &gt;, boost::property&lt; boost::edge_weight_t, base::Cost &gt; &gt;</type>
      <name>SpannerGraph</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a14c53c6a505e8797f6066d4652f7efcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph_traits&lt; SpannerGraph &gt;::vertex_descriptor</type>
      <name>SparseVertex</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a8084fd9bf075d1248dce995175a469ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph_traits&lt; SpannerGraph &gt;::edge_descriptor</type>
      <name>SparseEdge</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>af3cb7d22c7e537c197e480f25ef5319f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; SparseVertex &gt; &gt;</type>
      <name>SparseNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a1cd8232fe17482c8a67f31fccc8eac85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::adjacency_list&lt; boost::vecS, boost::vecS, boost::undirectedS, boost::property&lt; vertex_state_t, base::State *, boost::property&lt; boost::vertex_predecessor_t, VertexIndexType, boost::property&lt; boost::vertex_rank_t, VertexIndexType, boost::property&lt; vertex_representative_t, SparseVertex &gt; &gt; &gt; &gt;, boost::property&lt; boost::edge_weight_t, double &gt; &gt;</type>
      <name>DenseGraph</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>ada0f38e9d7359fac443869d98735ff1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph_traits&lt; DenseGraph &gt;::vertex_descriptor</type>
      <name>DenseVertex</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a309ea6c01d2ccfd8b2c6696f2de70d6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph_traits&lt; DenseGraph &gt;::edge_descriptor</type>
      <name>DenseEdge</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a86371fd420fa3d3dbaf1ff941279704e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; DenseVertex &gt; &gt;</type>
      <name>DenseNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>aeb9f481df65c577724ebf557f2f8f9cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SPARS</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>afe94f657ab8a846a37ae50d3501ecd0a</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SPARS</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>abdd0ee2d927e4d5c2513e7c4046183fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProblemDefinition</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>aafbe82bc4bbae529e6c96852687fdb5e</anchor>
      <arglist>(const base::ProblemDefinitionPtr &amp;pdef)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a4084d446045f2b589d1ebaf07b33e60c</anchor>
      <arglist>(base::PlannerData &amp;data) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructRoadmap</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>aa46c8edc6d85033ea57c63f6ce41bb20</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructRoadmap</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a84fd8e31fd66ca1bc891f2009287086e</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc, bool stopOnMaxFail)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>afd7e65865c23b5085391f2c77d5a4e1f</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearQuery</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a22cd80376d404ab0f6196178d8da09c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>ad312e20c05ad06e654511d2cee39d4c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDenseNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>ae9ddaf2a9f9c95b04b88faac63521f39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSparseNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>ada846fd037a1893a91f40810a8ac9e7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxFailures</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>aed716541c53dca9f22892b1a6da267b0</anchor>
      <arglist>(unsigned int m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDenseDeltaFraction</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a47ae542f88f539d3356598812be62111</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSparseDeltaFraction</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a980542126f0d879fc609d3b26eedb6bf</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStretchFactor</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a2f6f345d22d946135837af4db90ce242</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>getMaxFailures</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>aec5cc5d03588f57015f7f346808ebc09</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDenseDeltaFraction</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>ad8fa61744b9a6e2d11803f42a8ed3945</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSparseDeltaFraction</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>acbdd6b7ddc48b02a10783434c8aa8063</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getStretchFactor</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a39fd669966990f1cd065af72e1b74458</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>abd203a0e85a59c1bca40858fe27f3d66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DenseGraph &amp;</type>
      <name>getDenseGraph</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a6a8d36951358f8ab6e29fcb8a02ea34c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SpannerGraph &amp;</type>
      <name>getRoadmap</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a39b51f99740570d5318daf4d41b1fdef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>milestoneCount</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a7b54266fce0af16a712930b04e3f8b0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>guardCount</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a72820275c6e5fb6f9f88d8b11e6f6383</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>averageValence</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a933074ca85fb22806c8b50959f27314d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printDebug</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a792b63ed1763bf63a8f65aea0490dffa</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reachedFailureLimit</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>ae18599f4e0becff02a4b7dfe61c00dab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DenseVertex</type>
      <name>addSample</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>af0e41b1a4118d02fa562d8e78bbc0aaa</anchor>
      <arglist>(base::State *workState, const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkQueryStateInitialization</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a38d0e60ca6ccf611ef49abb23c799f50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>sameComponent</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>afc1867f92259c775e85f44e2e8336da0</anchor>
      <arglist>(SparseVertex m1, SparseVertex m2)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DenseVertex</type>
      <name>addMilestone</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a265196562943fea265b218d91c65f345</anchor>
      <arglist>(base::State *state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SparseVertex</type>
      <name>addGuard</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a63e1c6fef239f3cc525fe8318403007b</anchor>
      <arglist>(base::State *state, GuardType type)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>connectSparsePoints</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>ab94afd1ff296f91f05adf5c774fdbf1a</anchor>
      <arglist>(SparseVertex v, SparseVertex vp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>connectDensePoints</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a39879cdfb5770defe1b6735c3325bfae</anchor>
      <arglist>(DenseVertex v, DenseVertex vp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkAddCoverage</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>ada97a57b55366f6b1a524399b99c68c4</anchor>
      <arglist>(const base::State *lastState, const std::vector&lt; SparseVertex &gt; &amp;neigh)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkAddConnectivity</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a7cd536b31670fcc8d78d7c69ccca22e6</anchor>
      <arglist>(const base::State *lastState, const std::vector&lt; SparseVertex &gt; &amp;neigh)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkAddInterface</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a5fe14a1f2274a806bc67b705f1821c7c</anchor>
      <arglist>(const std::vector&lt; DenseVertex &gt; &amp;graphNeighborhood, const std::vector&lt; DenseVertex &gt; &amp;visibleNeighborhood, DenseVertex q)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkAddPath</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a0cf12b3bff14f346c9a62dada40f15bb</anchor>
      <arglist>(DenseVertex q, const std::vector&lt; DenseVertex &gt; &amp;neigh)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DenseVertex</type>
      <name>getInterfaceNeighbor</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a8f8315d98eeb8c4ae315cf7def77eb38</anchor>
      <arglist>(DenseVertex q, SparseVertex rep)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>addPathToSpanner</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a6b52502f78dfcaf771ef296f519885b3</anchor>
      <arglist>(const DensePath &amp;p, SparseVertex vp, SparseVertex vpp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateRepresentatives</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a4b95826123a856037f7d0ee74c943630</anchor>
      <arglist>(SparseVertex v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>calculateRepresentative</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a962e2d3526d358b3d4fc9015b2405d21</anchor>
      <arglist>(DenseVertex q)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToRepresentatives</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>ad9f9dd1fc29f7dc48bb0a1c2896274a3</anchor>
      <arglist>(DenseVertex q, SparseVertex rep, const std::set&lt; SparseVertex &gt; &amp;oreps)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeFromRepresentatives</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>af9bad238da1ed18fae83e90d4ca25fbc</anchor>
      <arglist>(DenseVertex q, SparseVertex rep)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeVPP</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>aeffda4d03123a688a734ef74e08c7993</anchor>
      <arglist>(DenseVertex v, DenseVertex vp, std::vector&lt; SparseVertex &gt; &amp;VPPs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeX</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a224b01b87deb0c0c16e14732b6a669de</anchor>
      <arglist>(DenseVertex v, DenseVertex vp, DenseVertex vpp, std::vector&lt; SparseVertex &gt; &amp;Xs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resetFailures</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>ae422eed3faaa03f793895e7412905e1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkForSolution</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>afe63255333497becd56880a2021fa5d0</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc, base::PathPtr &amp;solution)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>haveSolution</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a3686dcca022363e008dbfea7c2f1864e</anchor>
      <arglist>(const std::vector&lt; DenseVertex &gt; &amp;start, const std::vector&lt; DenseVertex &gt; &amp;goal, base::PathPtr &amp;solution)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>reachedTerminationCriterion</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>ae71e7f41b798f5fcb9a9ea1c4948f7ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>base::PathPtr</type>
      <name>constructSolution</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a4a63f320e40c03e5acbbeb0ca6c356d3</anchor>
      <arglist>(const SparseVertex start, const SparseVertex goal) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeDensePath</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>af6d221cd04db0c0e83528cae5438bb99</anchor>
      <arglist>(const DenseVertex start, const DenseVertex goal, DensePath &amp;path) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>abe82b072d388aac5650dde001cd3bc9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getSparseNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a165d082906ea801944422499aad42a63</anchor>
      <arglist>(base::State *inState, std::vector&lt; SparseVertex &gt; &amp;graphNeighborhood)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>filterVisibleNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a4caecfda1f3c81732e80960a0f62a710</anchor>
      <arglist>(base::State *inState, const std::vector&lt; SparseVertex &gt; &amp;graphNeighborhood, std::vector&lt; SparseVertex &gt; &amp;visibleNeighborhood) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getInterfaceNeighborRepresentatives</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a1348206e86ac6383f4f9d98be3bb764f</anchor>
      <arglist>(DenseVertex q, std::set&lt; SparseVertex &gt; &amp;interfaceRepresentatives)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getInterfaceNeighborhood</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>af84d5f12e7cfde6384adb6f4c92b335a</anchor>
      <arglist>(DenseVertex q, std::vector&lt; DenseVertex &gt; &amp;interfaceNeighborhood)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>ab577456c5e58b6935b93a016437a20c9</anchor>
      <arglist>(const DenseVertex a, const DenseVertex b) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>sparseDistanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a7d279cb8c9fb820c402b400e7770d52d</anchor>
      <arglist>(const SparseVertex a, const SparseVertex b) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>base::Cost</type>
      <name>costHeuristic</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a8e8b742ccd3314d6c1fed4d5eed1b8d3</anchor>
      <arglist>(SparseVertex u, SparseVertex v) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ValidStateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>acd50cb44ea98fdf1f2820a85838c3bb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSamplerPtr</type>
      <name>simpleSampler_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>afcd0bb3d9efd3ff8d5b681a5eed38e4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DenseNeighbors</type>
      <name>nn_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a48bc1a8d735608ee371e2403e862adbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SparseNeighbors</type>
      <name>snn_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>ade5b67adc31063b7e60007600e50ae4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DenseGraph</type>
      <name>g_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>ae082222c487348b1e13d74975763a4e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SpannerGraph</type>
      <name>s_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>abe54cfe52c76097b0326685293b023b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; SparseVertex &gt;</type>
      <name>startM_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a83371198a453f553f07e0ec331a74067</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; SparseVertex &gt;</type>
      <name>goalM_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a1cee990db83fd464d4d020f6bfc9e626</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DenseVertex</type>
      <name>sparseQueryVertex_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a96b374b38cac7805cc5e3371b1fcde6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DenseVertex</type>
      <name>queryVertex_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a63c5733d408829e0e704030ad68b138a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PathGeometric</type>
      <name>geomPath_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a62771ddf86a03d2a25bc4f47a8c83987</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; DenseGraph, vertex_state_t &gt;::type</type>
      <name>stateProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a83a2e7d2f1abe84a909d2fc860edf21e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; SpannerGraph, vertex_state_t &gt;::type</type>
      <name>sparseStateProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a4730df61de7338d11f55bfdd91331f94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; SpannerGraph, vertex_color_t &gt;::type</type>
      <name>sparseColorProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>aca084020b77381bab083e918b417f6e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; DenseGraph, vertex_representative_t &gt;::type</type>
      <name>representativesProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a44350a6b9cb924c6d588b38ea2e4fa79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; SpannerGraph, vertex_list_t &gt;::type</type>
      <name>nonInterfaceListsProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>ad1c0ad7450ceeb833395f2caffce6a2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; SpannerGraph, vertex_interface_list_t &gt;::type</type>
      <name>interfaceListsProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a35ffa3f844aa2c6b1339d240edb885fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PathSimplifierPtr</type>
      <name>psimp_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>aa88488f15645266e02661fe370df3a2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; DenseGraph, boost::edge_weight_t &gt;::type</type>
      <name>weightProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a240e9215b995a65bfc64c9684dd31c5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::disjoint_sets&lt; boost::property_map&lt; SpannerGraph, boost::vertex_rank_t &gt;::type, boost::property_map&lt; SpannerGraph, boost::vertex_predecessor_t &gt;::type &gt;</type>
      <name>sparseDJSets_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>adb1e5acd47a34fba8e5a64a15689f98a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::function&lt; const std::vector&lt; DenseVertex &gt; &amp;(const DenseVertex)&gt;</type>
      <name>connectionStrategy_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>affabb4fa6329d4c3f81e1541af22658c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>consecutiveFailures_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a3a9053596063ce65ae1469a44211ee4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>stretchFactor_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a33dee098737eb963368ef74bb43cf59c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxFailures_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>ae402ddf68d55b16b696b478ebb8c349d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>addedSolution_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a8f3e8537fac3946c786dfa7598268531</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>denseDeltaFraction_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>ab906f7ac6bb9c163ea9152e7ad917357</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>sparseDeltaFraction_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>ad966c5db5423fd83e7ebfb22f361dce4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>denseDelta_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a06d059117303085093f2ac04bc0e8b60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>sparseDelta_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a168b6ad450d1b5100894bf4bff8e3a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>ae60003e270a038a494dcfd8b98d8743e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::mutex</type>
      <name>graphMutex_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a9bde82bf267e2f36d7548e2a1d0048c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::OptimizationObjectivePtr</type>
      <name>opt_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a520fdf4b30e1384488af1f96e0878723</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long unsigned int</type>
      <name>iterations_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>a07dcba24f9a1ab7f0d2bd0b8aead74f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::Cost</type>
      <name>bestCost_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARS.html</anchorfile>
      <anchor>aa7678cf28ee3b137e41c98154422990d</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1SPARS">gSPARS</docanchor>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::SPARS::vertex_color_t</name>
    <filename>structompl_1_1geometric_1_1SPARS_1_1vertex__color__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::SPARS::vertex_interface_list_t</name>
    <filename>structompl_1_1geometric_1_1SPARS_1_1vertex__interface__list__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::SPARS::vertex_list_t</name>
    <filename>structompl_1_1geometric_1_1SPARS_1_1vertex__list__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::SPARS::vertex_representative_t</name>
    <filename>structompl_1_1geometric_1_1SPARS_1_1vertex__representative__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::SPARS::vertex_state_t</name>
    <filename>structompl_1_1geometric_1_1SPARS_1_1vertex__state__t.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::SPARSdb</name>
    <filename>classompl_1_1geometric_1_1SPARSdb.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="struct">ompl::geometric::SPARSdb::CandidateSolution</class>
    <class kind="class">ompl::geometric::SPARSdb::CustomVisitor</class>
    <class kind="struct">ompl::geometric::SPARSdb::edge_collision_state_t</class>
    <class kind="class">ompl::geometric::SPARSdb::edgeWeightMap</class>
    <class kind="class">ompl::geometric::SPARSdb::foundGoalException</class>
    <class kind="struct">ompl::geometric::SPARSdb::InterfaceData</class>
    <class kind="struct">ompl::geometric::SPARSdb::InterfaceHashStruct</class>
    <class kind="struct">ompl::geometric::SPARSdb::vertex_color_t</class>
    <class kind="struct">ompl::geometric::SPARSdb::vertex_interface_data_t</class>
    <class kind="struct">ompl::geometric::SPARSdb::vertex_state_t</class>
    <member kind="enumeration">
      <type></type>
      <name>GuardType</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>afaa43af9e99fd2e9d0d59cb94bb79be9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EdgeCollisionState</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a4630a99320d5696a4840255cb635b74d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long int</type>
      <name>VertexIndexType</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a88f265d11819f9ce1f5489c40e1b460e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; VertexIndexType, VertexIndexType &gt;</type>
      <name>VertexPair</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a11b86f80eb19e6ac691506725fe14223</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unordered_map&lt; VertexPair, InterfaceData &gt;</type>
      <name>InterfaceHash</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>abfad0971cb58764176b70564a49c2454</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::property&lt; vertex_state_t, base::State *, boost::property&lt; boost::vertex_predecessor_t, VertexIndexType, boost::property&lt; boost::vertex_rank_t, VertexIndexType, boost::property&lt; vertex_color_t, GuardType, boost::property&lt; vertex_interface_data_t, InterfaceHashStruct &gt; &gt; &gt; &gt; &gt;</type>
      <name>VertexProperties</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a7e8d8a604149c00e703c87001203ff34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::property&lt; boost::edge_weight_t, double, boost::property&lt; edge_collision_state_t, int &gt; &gt;</type>
      <name>EdgeProperties</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a52818ccd3208796f8f0f7ed41703db90</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::adjacency_list&lt; boost::vecS, boost::vecS, boost::undirectedS, VertexProperties, EdgeProperties &gt;</type>
      <name>Graph</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>af8a54b58dd92508952423aa4e6a473e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph_traits&lt; Graph &gt;::vertex_descriptor</type>
      <name>Vertex</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a07c6085d461bd3ab6f1bba2a0ac06062</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph_traits&lt; Graph &gt;::edge_descriptor</type>
      <name>Edge</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a018b3bc1d2c34865c42aaebce288977a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::property_map&lt; Graph, edge_collision_state_t &gt;::type</type>
      <name>EdgeCollisionStateMap</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>ae80dc952d9a39d6684dfb3693afb0fba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SPARSdb</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>afc23d5d2e73d0876f608b2c030642f5b</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SPARSdb</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a4b6bb23b6d9c286edfb246c6fe42b889</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProblemDefinition</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a65332176f03ba8ce77f8c9f08a8bff01</anchor>
      <arglist>(const base::ProblemDefinitionPtr &amp;pdef)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStretchFactor</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a205e64b58526ac94852524ed2ebcacf1</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSparseDeltaFraction</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a5ba9f329d38a319205caf88026ee17b1</anchor>
      <arglist>(double D)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDenseDeltaFraction</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>aab6be9550e44a4499fc1fd88055003b1</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxFailures</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>aa1b1cb45b613a6d5722770ea27fe8452</anchor>
      <arglist>(unsigned int m)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMaxFailures</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>aaea0c54300250075c93cd9b24b546001</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDenseDeltaFraction</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a3ae64fee23f1e8f641738db49d92ddf3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSparseDeltaFraction</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>ae211e5fa73fa1847d88c7ea9a54210af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getStretchFactor</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a7368a84b0b4c884ad20c420b7c3c9ebe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getGuardSpacingFactor</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>ade79ccfab43de111a2be46256a7204e7</anchor>
      <arglist>(const double pathLength, int &amp;numGuards, double &amp;spacingFactor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a118e024881c829adf3a70ec6cf550a51</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearQuery</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a75302525b80044373243707d64349be0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a021a82354f57cf8f51259746d9d4392d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a16fb36f708bcef7bea1c6ec9a64820f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getSimilarPaths</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a168f113cca61d7c31a78e1bda83131e9</anchor>
      <arglist>(int nearestK, const base::State *start, const base::State *goal, CandidateSolution &amp;candidateSolution, const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>ac5aafcc85aa68a3931f439df034bfdfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Graph &amp;</type>
      <name>getRoadmap</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a3fec8d0e761f8a714b8d5c3f9e255976</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumVertices</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a02011065631ef648c383154f41d76bb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumEdges</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a134bddbebaa408e98e557b6a8644a324</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumConnectedComponents</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>ac1e359e977c4768e97137b6925068423</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumPathInsertionFailed</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a758edee48885036e985b2d6043eb0913</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumConsecutiveFailures</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a2cd4145be246f6a808c3f6c2e2f3eb4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long unsigned int</type>
      <name>getIterations</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>aaefe4bd099f4e6e8b187b18d1f004f79</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertVertexPathToStatePath</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a04ee70325fb640569ac8ab59c7658749</anchor>
      <arglist>(std::vector&lt; Vertex &gt; &amp;vertexPath, const base::State *actualStart, const base::State *actualGoal, CandidateSolution &amp;candidateSolution, bool disableCollisionWarning=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>ad8d7e7368b3e73ca25965f13222e8e53</anchor>
      <arglist>(base::PlannerData &amp;data) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>af79df2b117570e32727c8bd72e3a7def</anchor>
      <arglist>(const base::PlannerData &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reachedFailureLimit</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a9ca10eb8d034349e03b220385b63fb89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printDebug</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>ab253a5474ae0cabcd7cff1b2df65eec1</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearEdgeCollisionStates</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>ae213c75203413e0a31a688a5df8e9c14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>aca0f287e35cdd63492bdad22df59f55e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkQueryStateInitialization</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a9f0878a9e18b7c7d10d22c3051f4f297</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkAddCoverage</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a06178d0b2c8178f8559538ae343e7c13</anchor>
      <arglist>(const base::State *qNew, std::vector&lt; Vertex &gt; &amp;visibleNeighborhood)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkAddConnectivity</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a1e13afe80fde9c95ed9e9a4fd5714685</anchor>
      <arglist>(const base::State *qNew, std::vector&lt; Vertex &gt; &amp;visibleNeighborhood)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkAddInterface</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a2da533e0e067880152e37133e74d16c8</anchor>
      <arglist>(const base::State *qNew, std::vector&lt; Vertex &gt; &amp;graphNeighborhood, std::vector&lt; Vertex &gt; &amp;visibleNeighborhood)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkAddPath</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a61ce19d1cd9f26018dd9da99baf7e45e</anchor>
      <arglist>(Vertex v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resetFailures</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a5590919f04a6e9ba9c0d70d8f54f2393</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>findGraphNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>ab0cf26ff3693472005cbfe74180c9f90</anchor>
      <arglist>(base::State *state, std::vector&lt; Vertex &gt; &amp;graphNeighborhood, std::vector&lt; Vertex &gt; &amp;visibleNeighborhood)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>findGraphNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>aef80e5b49c5901a5221f1d700bf0667f</anchor>
      <arglist>(const base::State *state, std::vector&lt; Vertex &gt; &amp;graphNeighborhood)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>approachGraph</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>aa822343bfc75dee17622a259e000504c</anchor>
      <arglist>(Vertex v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Vertex</type>
      <name>findGraphRepresentative</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>acf2e8acdb49a0b6baba9ae9b34429bf8</anchor>
      <arglist>(base::State *st)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>findCloseRepresentatives</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a4bbfe4e52768d964ca4097f3307b3d1b</anchor>
      <arglist>(base::State *workState, const base::State *qNew, Vertex qRep, std::map&lt; Vertex, base::State * &gt; &amp;closeRepresentatives, const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updatePairPoints</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>ae16687b4f0e58a3780f309f7bd11f6c9</anchor>
      <arglist>(Vertex rep, const base::State *q, Vertex r, const base::State *s)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeVPP</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>adc9ca10cfa917299baa36e578bf01787</anchor>
      <arglist>(Vertex v, Vertex vp, std::vector&lt; Vertex &gt; &amp;VPPs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeX</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a7ccf3f44516b29474ca76b4bbb68264d</anchor>
      <arglist>(Vertex v, Vertex vp, Vertex vpp, std::vector&lt; Vertex &gt; &amp;Xs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>VertexPair</type>
      <name>index</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a44e3795fdf40260fb7a24fb4bbdba5e1</anchor>
      <arglist>(Vertex vp, Vertex vpp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>InterfaceData &amp;</type>
      <name>getData</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a8ecbce662fc486138a2c55a45c3010c0</anchor>
      <arglist>(Vertex v, Vertex vp, Vertex vpp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>distanceCheck</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>accd49a2071fce3c7f5edfbfa17b4f822</anchor>
      <arglist>(Vertex rep, const base::State *q, Vertex r, const base::State *s, Vertex rp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>abandonLists</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a7001e6e6400d931c67af423c4593c26f</anchor>
      <arglist>(base::State *st)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Vertex</type>
      <name>addGuard</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>ab539ba09c175b705ba3d07990fd8b461</anchor>
      <arglist>(base::State *state, GuardType type)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>connectGuards</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>afc7a4a3cad27df9dea9ba0cfbbf39ae5</anchor>
      <arglist>(Vertex v, Vertex vp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getPaths</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>ae4c6ff91634e9724f65e94d21216b336</anchor>
      <arglist>(const std::vector&lt; Vertex &gt; &amp;candidateStarts, const std::vector&lt; Vertex &gt; &amp;candidateGoals, const base::State *actualStart, const base::State *actualGoal, CandidateSolution &amp;candidateSolution, const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>lazyCollisionSearch</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a48864277198fe9884478cb6ead83d096</anchor>
      <arglist>(const Vertex &amp;start, const Vertex &amp;goal, const base::State *actualStart, const base::State *actualGoal, CandidateSolution &amp;candidateSolution, const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>lazyCollisionCheck</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>aac100d3af98c610a177c271376825256</anchor>
      <arglist>(std::vector&lt; Vertex &gt; &amp;vertexPath, const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkForSolution</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>ae56df47ebf824ce976d188fad9db5035</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc, base::PathPtr &amp;solution)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>constructSolution</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>adba6dc415a531b87c31be44e8100214f</anchor>
      <arglist>(const Vertex start, const Vertex goal, std::vector&lt; Vertex &gt; &amp;vertexPath) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>sameComponent</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>ad0fc73394cf3a4698e1ff718c76c5a7c</anchor>
      <arglist>(Vertex m1, Vertex m2)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a0693953ff0859ac868955d44e6ebda40</anchor>
      <arglist>(const Vertex a, const Vertex b) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ValidStateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a5592f0f550685e990625ee6d9ff0222a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Vertex &gt; &gt;</type>
      <name>nn_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>ab86be437a303f456d0f692608a762659</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Graph</type>
      <name>g_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>ab5caaf5bde4ae4c30c34e70c183c2e41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Vertex &gt;</type>
      <name>startM_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a610b681b7c6c1b69e63fc486d19e0bb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Vertex &gt;</type>
      <name>goalM_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a0caba3047f362682acc644a03bfa7b05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vertex</type>
      <name>queryVertex_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a01c4ad869bf0685eec9ac997a267e5e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>stretchFactor_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>aaf7ceaf3107711e4cddf8c7d0cf3a275</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>sparseDeltaFraction_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a15e8b03435bbe4781d2d7ac22d638924</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>denseDeltaFraction_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a79095ce0cf3773e0bb0acac85539c486</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxFailures_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a157a6eb305f471c60ff2a942a92a930a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>numPathInsertionFailures_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a685d6aa5a571309f21fef1b2d49979d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>nearSamplePoints_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>accb07a02117d61db2d4cf92857e5f21d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PathSimplifierPtr</type>
      <name>psimp_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a9f84b32f79c29b0f32ab8d4a73589069</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; Graph, boost::edge_weight_t &gt;::type</type>
      <name>edgeWeightProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a9dc9ed65b66365898ee7926f25595945</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeCollisionStateMap</type>
      <name>edgeCollisionStateProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a72b5c4f063484c45cf81dd51dda8ad9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; Graph, vertex_state_t &gt;::type</type>
      <name>stateProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>af09c4c672b30f62dca76f8cbce6d20c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; Graph, vertex_color_t &gt;::type</type>
      <name>colorProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>ab9f3b46d7b1c640a8ff5da4b31a919df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; Graph, vertex_interface_data_t &gt;::type</type>
      <name>interfaceDataProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a34b18aa4f0a86f1b265e7d86d1e20872</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::disjoint_sets&lt; boost::property_map&lt; Graph, boost::vertex_rank_t &gt;::type, boost::property_map&lt; Graph, boost::vertex_predecessor_t &gt;::type &gt;</type>
      <name>disjointSets_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>aa3ce649df0d3524fcb0b550160e5edec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a19592dee1c9ec65dbb4a6623d6786e97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>addedSolution_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a32abeea555ae74fc00573dd1f1621be3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>consecutiveFailures_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a3bbe6b21bd32ea8e19d3c1da977b072b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long unsigned int</type>
      <name>iterations_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>ae3c4eb519b7dcdb65f02abcac5439a7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>sparseDelta_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a3794a87b6e9b3a55b0123ebc48a1de34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>denseDelta_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>ab3f05d627cc48f280c027dcf82207afb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Vertex &gt;</type>
      <name>startVertexCandidateNeighbors_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>a24b984d6917ddb6b009b8d546dcc1c3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>verbose_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb.html</anchorfile>
      <anchor>af32d774893fa877a89a2fac3580871e2</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1SPARSdb">gSPARSdb</docanchor>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::SPARSdb::CandidateSolution</name>
    <filename>structompl_1_1geometric_1_1SPARSdb_1_1CandidateSolution.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::SPARSdb::CustomVisitor</name>
    <filename>classompl_1_1geometric_1_1SPARSdb_1_1CustomVisitor.html</filename>
    <member kind="function">
      <type></type>
      <name>CustomVisitor</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb_1_1CustomVisitor.html</anchorfile>
      <anchor>ae83cfec406c231ce1dae9f8c4440aea4</anchor>
      <arglist>(Vertex goal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>examine_vertex</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb_1_1CustomVisitor.html</anchorfile>
      <anchor>ae7247090d7ca3db209b6121af458375f</anchor>
      <arglist>(Vertex u, const Graph &amp;g) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::SPARSdb::edge_collision_state_t</name>
    <filename>structompl_1_1geometric_1_1SPARSdb_1_1edge__collision__state__t.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::SPARSdb::edgeWeightMap</name>
    <filename>classompl_1_1geometric_1_1SPARSdb_1_1edgeWeightMap.html</filename>
    <member kind="typedef">
      <type>Edge</type>
      <name>key_type</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb_1_1edgeWeightMap.html</anchorfile>
      <anchor>a2cca2f791b9c71da150fb1b5ae2f511b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>value_type</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb_1_1edgeWeightMap.html</anchorfile>
      <anchor>ae2934a85dc776067567b7540346b9f6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double &amp;</type>
      <name>reference</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb_1_1edgeWeightMap.html</anchorfile>
      <anchor>a4eeac6e1c781cc08ae263b409bd6480f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::readable_property_map_tag</type>
      <name>category</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb_1_1edgeWeightMap.html</anchorfile>
      <anchor>abfc8e5f6d0f20b7d7ac12c812ade6adc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>edgeWeightMap</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb_1_1edgeWeightMap.html</anchorfile>
      <anchor>aff932b3c435818a7cf90c008cd6d9e88</anchor>
      <arglist>(const Graph &amp;graph, const EdgeCollisionStateMap &amp;collisionStates)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get</name>
      <anchorfile>classompl_1_1geometric_1_1SPARSdb_1_1edgeWeightMap.html</anchorfile>
      <anchor>ae27adabc013416398aae2bad22ce2348</anchor>
      <arglist>(Edge e) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::SPARSdb::foundGoalException</name>
    <filename>classompl_1_1geometric_1_1SPARSdb_1_1foundGoalException.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::SPARSdb::InterfaceData</name>
    <filename>structompl_1_1geometric_1_1SPARSdb_1_1InterfaceData.html</filename>
    <member kind="function">
      <type></type>
      <name>InterfaceData</name>
      <anchorfile>structompl_1_1geometric_1_1SPARSdb_1_1InterfaceData.html</anchorfile>
      <anchor>ad9145df1d5c5e06672c5a0549d8f4285</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>structompl_1_1geometric_1_1SPARSdb_1_1InterfaceData.html</anchorfile>
      <anchor>a26c321017ec5e67e7d31b1db8d3966d7</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFirst</name>
      <anchorfile>structompl_1_1geometric_1_1SPARSdb_1_1InterfaceData.html</anchorfile>
      <anchor>a7dfe2a9c21520c00487056fa8f77ee3a</anchor>
      <arglist>(const base::State *p, const base::State *s, const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSecond</name>
      <anchorfile>structompl_1_1geometric_1_1SPARSdb_1_1InterfaceData.html</anchorfile>
      <anchor>a561b95776b6da44bc21b1dc60e61665d</anchor>
      <arglist>(const base::State *p, const base::State *s, const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>pointA_</name>
      <anchorfile>structompl_1_1geometric_1_1SPARSdb_1_1InterfaceData.html</anchorfile>
      <anchor>a7780fc336495ad8d9875d15b8f4cf012</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>sigmaA_</name>
      <anchorfile>structompl_1_1geometric_1_1SPARSdb_1_1InterfaceData.html</anchorfile>
      <anchor>ae894adb92585f7bcfd1ba6e791bfc423</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>d_</name>
      <anchorfile>structompl_1_1geometric_1_1SPARSdb_1_1InterfaceData.html</anchorfile>
      <anchor>a02a447da54843eaba6448da21867ba71</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::SPARSdb::InterfaceHashStruct</name>
    <filename>structompl_1_1geometric_1_1SPARSdb_1_1InterfaceHashStruct.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::SPARSdb::vertex_color_t</name>
    <filename>structompl_1_1geometric_1_1SPARSdb_1_1vertex__color__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::SPARSdb::vertex_interface_data_t</name>
    <filename>structompl_1_1geometric_1_1SPARSdb_1_1vertex__interface__data__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::SPARSdb::vertex_state_t</name>
    <filename>structompl_1_1geometric_1_1SPARSdb_1_1vertex__state__t.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::SPARStwo</name>
    <filename>classompl_1_1geometric_1_1SPARStwo.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="struct">ompl::geometric::SPARStwo::InterfaceData</class>
    <class kind="struct">ompl::geometric::SPARStwo::vertex_color_t</class>
    <class kind="struct">ompl::geometric::SPARStwo::vertex_interface_data_t</class>
    <class kind="struct">ompl::geometric::SPARStwo::vertex_state_t</class>
    <member kind="enumeration">
      <type></type>
      <name>GuardType</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a6b3571a9600142a5e1b08f5b04413b81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long int</type>
      <name>VertexIndexType</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a90f037b9ef625be0cde0bb8da6baad5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; VertexIndexType, VertexIndexType &gt;</type>
      <name>VertexPair</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>ab62c07516d0bd8208c4d944cd950d143</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unordered_map&lt; VertexPair, InterfaceData &gt;</type>
      <name>InterfaceHash</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>aef98fc634f49b7e3c344eadf36f5407c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::adjacency_list&lt; boost::vecS, boost::vecS, boost::undirectedS, boost::property&lt; vertex_state_t, base::State *, boost::property&lt; boost::vertex_predecessor_t, VertexIndexType, boost::property&lt; boost::vertex_rank_t, VertexIndexType, boost::property&lt; vertex_color_t, GuardType, boost::property&lt; vertex_interface_data_t, InterfaceHash &gt; &gt; &gt; &gt; &gt;, boost::property&lt; boost::edge_weight_t, base::Cost &gt; &gt;</type>
      <name>Graph</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a2624d59f5a648270a971c83ba62191ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph_traits&lt; Graph &gt;::vertex_descriptor</type>
      <name>Vertex</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>ab3573be612a3928091fe5edf6fd0907d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph_traits&lt; Graph &gt;::edge_descriptor</type>
      <name>Edge</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a9e25c05925713207d727aaea6a6ce69b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SPARStwo</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>aa212ec1cd1e496ce802cb892b242e079</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SPARStwo</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>aeb71539484ecad27ff509f9ea37fbb7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setProblemDefinition</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a79345e44524a9e7c1f20fdc041e4d40e</anchor>
      <arglist>(const base::ProblemDefinitionPtr &amp;pdef)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStretchFactor</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a1faca5d8e7bbcf32d0393b32064573d5</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSparseDeltaFraction</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a48f504453efc15734ee800da4ed3c15e</anchor>
      <arglist>(double D)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDenseDeltaFraction</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a1ce421639b3276212439a5cc1d0f8bd0</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxFailures</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>adbe67c69c36595af9dfdcb576e1cba3a</anchor>
      <arglist>(unsigned int m)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMaxFailures</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>ad0a5488f0c64f5b9e0d635c3b9a14404</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDenseDeltaFraction</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a15b1ad5b1e2299c5445e87c4515c8a5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSparseDeltaFraction</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a808b1a2eee2d46d9f0880b7755e8ba7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getStretchFactor</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>ac22dd02da2036db6a86358618f8411f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructRoadmap</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a7ddec9d2b9e5639080fb730628b62211</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructRoadmap</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>aafb4014c9c5acc4ba89e4635998614f6</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc, bool stopOnMaxFail)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a19dc67f97d78d1578dcaa261c4352569</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearQuery</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a99a2018844c526aa85c2f283e8259fef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a13168568bcdf17e628c0adb08b4ac6f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a0cf433d4fe08c935a31e0b16107d0f15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>aa9be9dc61e807d7c36e5b74657d14c0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Graph &amp;</type>
      <name>getRoadmap</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a4bb1896cab4eceadf6de14b11fbfe3db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>milestoneCount</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a09d43b33362a7e4a629932b6225b9fee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>add0fda6acf3e64b47b92140fdd0c2e4b</anchor>
      <arglist>(base::PlannerData &amp;data) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printDebug</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a78a475b7bf706f013d6008ead1107a34</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a26f90b76e80ac5076fdc48415aa2585a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkQueryStateInitialization</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>ab62d9a6e84f4238a311bcbfeb48bb3ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkAddCoverage</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>ae9f886af88ea6248d449d71e773078f2</anchor>
      <arglist>(const base::State *qNew, std::vector&lt; Vertex &gt; &amp;visibleNeighborhood)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkAddConnectivity</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a24ff941cc90f6c79afb4531926af63e7</anchor>
      <arglist>(const base::State *qNew, std::vector&lt; Vertex &gt; &amp;visibleNeighborhood)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkAddInterface</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a363ef43403e3aa156ed7863d9f9d1c7f</anchor>
      <arglist>(const base::State *qNew, std::vector&lt; Vertex &gt; &amp;graphNeighborhood, std::vector&lt; Vertex &gt; &amp;visibleNeighborhood)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkAddPath</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a4834fd533b27b18a7997e9bb35779360</anchor>
      <arglist>(Vertex v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resetFailures</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a1e31d2dc32bd013a70c4642e48857771</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>findGraphNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>af97de154be5aa7aebfe443ab369b5ff6</anchor>
      <arglist>(base::State *st, std::vector&lt; Vertex &gt; &amp;graphNeighborhood, std::vector&lt; Vertex &gt; &amp;visibleNeighborhood)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>approachGraph</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a48d327d8816d976fa4214067d2d657fa</anchor>
      <arglist>(Vertex v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Vertex</type>
      <name>findGraphRepresentative</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>ad5ea6eea62d2f38686875f8867fabc7b</anchor>
      <arglist>(base::State *st)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>findCloseRepresentatives</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>abfe6c45d25a481367e153298a14524a3</anchor>
      <arglist>(base::State *workArea, const base::State *qNew, Vertex qRep, std::map&lt; Vertex, base::State * &gt; &amp;closeRepresentatives, const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updatePairPoints</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a5f8e1576d83e86db366a5c31ffebee2b</anchor>
      <arglist>(Vertex rep, const base::State *q, Vertex r, const base::State *s)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeVPP</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a4da612d05a90a20140868573555bf132</anchor>
      <arglist>(Vertex v, Vertex vp, std::vector&lt; Vertex &gt; &amp;VPPs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeX</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>ae05a5d0b6193ce1e5057bb0f236565bb</anchor>
      <arglist>(Vertex v, Vertex vp, Vertex vpp, std::vector&lt; Vertex &gt; &amp;Xs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>VertexPair</type>
      <name>index</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a94d0bd537ba65ab5016955edf3b7c105</anchor>
      <arglist>(Vertex vp, Vertex vpp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>InterfaceData &amp;</type>
      <name>getData</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>acfc362da7931b7cf9c7e1b07a6a3a35e</anchor>
      <arglist>(Vertex v, Vertex vp, Vertex vpp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>distanceCheck</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a08ebf31474c192801c581745476f1dbb</anchor>
      <arglist>(Vertex rep, const base::State *q, Vertex r, const base::State *s, Vertex rp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>abandonLists</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>aae49132628c82ad725fc356464f69cca</anchor>
      <arglist>(base::State *st)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Vertex</type>
      <name>addGuard</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>af92e4beced5c0ebb303668f65326b83c</anchor>
      <arglist>(base::State *state, GuardType type)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>connectGuards</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>abb4c11336f7485e50eeb99dd94e2d94d</anchor>
      <arglist>(Vertex v, Vertex vp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>haveSolution</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a57bfc6740dcbd03cba8a3dc96cb89961</anchor>
      <arglist>(const std::vector&lt; Vertex &gt; &amp;start, const std::vector&lt; Vertex &gt; &amp;goal, base::PathPtr &amp;solution)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkForSolution</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>aae99bfb4aa17e6b131e068495085a891</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc, base::PathPtr &amp;solution)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>reachedTerminationCriterion</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a2504e031216746d8f1702f29ce0428e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>reachedFailureLimit</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a34be8b54bf513f506a59f0ec5feca6c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>base::PathPtr</type>
      <name>constructSolution</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a7cbf7a68717e0d6763c427b34e26a6f5</anchor>
      <arglist>(const Vertex start, const Vertex goal) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>sameComponent</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a4f52f9ebe885288e5980e1894476e8fc</anchor>
      <arglist>(Vertex m1, Vertex m2)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a620389bf2e44e9f751cb0f01ce905e6d</anchor>
      <arglist>(const Vertex a, const Vertex b) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>base::Cost</type>
      <name>costHeuristic</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>abb160718ac736d52515f853b0303cf5c</anchor>
      <arglist>(Vertex u, Vertex v) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ValidStateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>ad018ad5507cd56a7c0ab947bb55b694a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSamplerPtr</type>
      <name>simpleSampler_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a266f8169798c0836eea0ccfd38721e0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Vertex &gt; &gt;</type>
      <name>nn_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>ac40b1f324eac0e0ebc857ee35353dbfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Graph</type>
      <name>g_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a854016cd0fea7c9d2aea1cf149f25e8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Vertex &gt;</type>
      <name>startM_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a7d245fb73679d79ed93b6f74c6f7e141</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Vertex &gt;</type>
      <name>goalM_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a11b90682963688bfe8a3f85679651dda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vertex</type>
      <name>queryVertex_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>af91d34b6a492b4ae5f44584a315e927e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>stretchFactor_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>aa73616350d6259053aaaa89670afcf8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>sparseDeltaFraction_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>ad1418242bacbd56cc969c862b193909f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>denseDeltaFraction_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a16744cca3916e0abd9eb65c852ab409f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxFailures_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a376f66d6e8c16b525dbb937112dece45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>nearSamplePoints_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>acee8b08731de6675f6bd02102ec07c05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; Graph, vertex_state_t &gt;::type</type>
      <name>stateProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a80fd4594a8a95d4214e12799f14d71df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PathSimplifierPtr</type>
      <name>psimp_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a6ff5e30c20ecf7fa86cfe98f13c3bbfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; Graph, boost::edge_weight_t &gt;::type</type>
      <name>weightProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a85a319c98729874690eee9f7719bdce4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; Graph, vertex_color_t &gt;::type</type>
      <name>colorProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a3b6c81f7671da3764d55b929c627fb26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::property_map&lt; Graph, vertex_interface_data_t &gt;::type</type>
      <name>interfaceDataProperty_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a1b997b15c2e49651cfd5b1eebff4512a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::disjoint_sets&lt; boost::property_map&lt; Graph, boost::vertex_rank_t &gt;::type, boost::property_map&lt; Graph, boost::vertex_predecessor_t &gt;::type &gt;</type>
      <name>disjointSets_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>ab367a21ef19e942439c39eafe6bac543</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a73a536e798e886c1542796b681ed0e94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>addedSolution_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a0431fe0a06855bf74a2472bcfc128339</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>consecutiveFailures_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a5f9b9987ad6832adbaec459d4eda5109</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>sparseDelta_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a35087ca1c1b52f55fcfc9d4a725b752f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>denseDelta_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a39cc89e087375afd76d57ee10a4e6595</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::mutex</type>
      <name>graphMutex_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a8832e4447c8399d3a3e3ef2083a1e4e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::OptimizationObjectivePtr</type>
      <name>opt_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a8dad2ff2d21a19e71c59f1329e5a43fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long unsigned int</type>
      <name>iterations_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a277250cca2d65902e1ed0aa00219a960</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::Cost</type>
      <name>bestCost_</name>
      <anchorfile>classompl_1_1geometric_1_1SPARStwo.html</anchorfile>
      <anchor>a2d97ef0cbb15bc5d9c84b2371daf513e</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1SPARStwo">gSPARStwo</docanchor>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::SPARStwo::InterfaceData</name>
    <filename>structompl_1_1geometric_1_1SPARStwo_1_1InterfaceData.html</filename>
    <member kind="function">
      <type></type>
      <name>InterfaceData</name>
      <anchorfile>structompl_1_1geometric_1_1SPARStwo_1_1InterfaceData.html</anchorfile>
      <anchor>aa3f217697a0f4fe5d08b4086b90e762c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>structompl_1_1geometric_1_1SPARStwo_1_1InterfaceData.html</anchorfile>
      <anchor>ad1554c9909d120f8685ff0ed7b8cd83d</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFirst</name>
      <anchorfile>structompl_1_1geometric_1_1SPARStwo_1_1InterfaceData.html</anchorfile>
      <anchor>a557bf81456558c148075edb5b64b73b4</anchor>
      <arglist>(const base::State *p, const base::State *s, const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSecond</name>
      <anchorfile>structompl_1_1geometric_1_1SPARStwo_1_1InterfaceData.html</anchorfile>
      <anchor>a815086371dd2ba4a1448b64c9d34f2b5</anchor>
      <arglist>(const base::State *p, const base::State *s, const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>pointA_</name>
      <anchorfile>structompl_1_1geometric_1_1SPARStwo_1_1InterfaceData.html</anchorfile>
      <anchor>a4aebee7a63db441d506e51c7297d4c04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>sigmaA_</name>
      <anchorfile>structompl_1_1geometric_1_1SPARStwo_1_1InterfaceData.html</anchorfile>
      <anchor>a2957b150ed1f2e2c3668fb94db5cb17c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>d_</name>
      <anchorfile>structompl_1_1geometric_1_1SPARStwo_1_1InterfaceData.html</anchorfile>
      <anchor>a0c06712a35f8cb866f98c1fc4927642a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::SPARStwo::vertex_color_t</name>
    <filename>structompl_1_1geometric_1_1SPARStwo_1_1vertex__color__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::SPARStwo::vertex_interface_data_t</name>
    <filename>structompl_1_1geometric_1_1SPARStwo_1_1vertex__interface__data__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::geometric::SPARStwo::vertex_state_t</name>
    <filename>structompl_1_1geometric_1_1SPARStwo_1_1vertex__state__t.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::SST</name>
    <filename>classompl_1_1geometric_1_1SST.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::SST::Motion</class>
    <class kind="class">ompl::geometric::SST::Witness</class>
    <member kind="function">
      <type></type>
      <name>SST</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>ada7da5e01597ff6d49742af8c77b19f2</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>ad76d4cf60aa65f64e74e0363876b5d8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>ac21928ee1af84564e56c5512a739db33</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>a58895280e00231fc95d7bd9b351f0eab</anchor>
      <arglist>(base::PlannerData &amp;data) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>a8da529d7dbd98f76b65be84e9ccfc021</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>a47a018e222ad8ebb3c94f6f46f8d2bfa</anchor>
      <arglist>(double goalBias)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>acd6e8702c2b07f8841c2883cacf364a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>af7631a6fa986f21882e76e11ee9324eb</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>a9df2d6654c934f9f801df85579e12134</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSelectionRadius</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>ab0d51dd197b4dfe2d8ed828bf8c3c947</anchor>
      <arglist>(double selectionRadius)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSelectionRadius</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>a781596d51e086bd6c04099256dfcfe2c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPruningRadius</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>a3fe64d0cd82d077ea0694d76ed8b9226</anchor>
      <arglist>(double pruningRadius)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPruningRadius</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>a895e409799ca6531aa26ef38bb16c41f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>a3a2e36007c4f0e342c7bd6cbae74625c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Motion *</type>
      <name>selectNode</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>a703af29b4df7012a4d8c153c813fae72</anchor>
      <arglist>(Motion *sample)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Witness *</type>
      <name>findClosestWitness</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>a29fd8eeffe3ceb542af92d96d44f8a78</anchor>
      <arglist>(Motion *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>base::State *</type>
      <name>monteCarloProp</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>af06f5dcdf42ec62669a194811fe57ec7</anchor>
      <arglist>(Motion *m)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>abad59437ddc112e3f4bce8a36b7f1712</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>ad405f725d1ab74583bd4d450d074a6b0</anchor>
      <arglist>(const Motion *a, const Motion *b) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>a0ae607ecc42492fb7e434609c68fd64b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Motion * &gt; &gt;</type>
      <name>nn_</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>a368f5d27267e9c16808b528203654188</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Motion * &gt; &gt;</type>
      <name>witnesses_</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>ada6b29a9fc81924121a447c52eee8332</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>goalBias_</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>abf46b9611f2e650d4e80a2849db6a71e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistance_</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>a05d0e69423c6d3045ff9254eb32c6a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>selectionRadius_</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>ab6085b9cdc62848753caa581dd5acb68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>pruningRadius_</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>ad2635d3b507ae619dd77c6dc6a2b2dcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>aadcf8f1df9c64d9a106925b6ed16d73f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; base::State * &gt;</type>
      <name>prevSolution_</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>afa54eec618ce840c2c6e3d8c18370ddf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::Cost</type>
      <name>prevSolutionCost_</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>a1a28d7823a66a1452d08cd0973108b5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::OptimizationObjectivePtr</type>
      <name>opt_</name>
      <anchorfile>classompl_1_1geometric_1_1SST.html</anchorfile>
      <anchor>a8591f51720c34f1a040a97d5f74859f2</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1SST">gSST</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::SST::Motion</name>
    <filename>classompl_1_1geometric_1_1SST_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1geometric_1_1SST_1_1Motion.html</anchorfile>
      <anchor>ab6b0ac014b3e02b5983e54bd5bd6f1d7</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state_</name>
      <anchorfile>classompl_1_1geometric_1_1SST_1_1Motion.html</anchorfile>
      <anchor>a751c6653a8e53751a58d24dc3578367c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent_</name>
      <anchorfile>classompl_1_1geometric_1_1SST_1_1Motion.html</anchorfile>
      <anchor>a7b10232f6a79a4c724e3739a7dba4279</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>numChildren_</name>
      <anchorfile>classompl_1_1geometric_1_1SST_1_1Motion.html</anchorfile>
      <anchor>a0bc49be84a42a8be92bc599d09bf0cd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>inactive_</name>
      <anchorfile>classompl_1_1geometric_1_1SST_1_1Motion.html</anchorfile>
      <anchor>ac1f63721c8d037f1fb30927317c9cb0d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::SST::Witness</name>
    <filename>classompl_1_1geometric_1_1SST_1_1Witness.html</filename>
    <base>ompl::geometric::SST::Motion</base>
    <member kind="variable">
      <type>Motion *</type>
      <name>rep_</name>
      <anchorfile>classompl_1_1geometric_1_1SST_1_1Witness.html</anchorfile>
      <anchor>a871cd0686bda47d4ed61043b7a1b2969</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::STRIDE</name>
    <filename>classompl_1_1geometric_1_1STRIDE.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::STRIDE::Motion</class>
    <member kind="function">
      <type></type>
      <name>STRIDE</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a4ca073e2319711b3c882495769164f7c</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si, bool useProjectedDistance=false, unsigned int degree=16, unsigned int minDegree=12, unsigned int maxDegree=18, unsigned int maxNumPtsPerLeaf=6, double estimatedDimension=0.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a40b4e90be589ab90c73a5bdff7913377</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a07152e666956e65f14dc7f397abd1144</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>ac32bfff0ffe815ed91cda18432b04b87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a9d50e6641ae3d8e35d91e565b166e3c8</anchor>
      <arglist>(double goalBias)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a4b3aaf17dd71b3436d129c3ec27068bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseProjectedDistance</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a2e6ace0af3911c5ee34db3ffd263db45</anchor>
      <arglist>(bool useProjectedDistance)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUseProjectedDistance</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a979f3a403c011b93277bdf0649b38a04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDegree</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a2a2e8357faa4c7c96cdcd194c6d69630</anchor>
      <arglist>(unsigned int degree)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDegree</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a58d1229480ce8e707e0cbef95ea9e3a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinDegree</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a2adc40c50cb46f7ab1ebbc9b8cf3e770</anchor>
      <arglist>(unsigned int minDegree)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMinDegree</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a7145e4749793900205d6e4630846cd24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxDegree</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>ab573839974ff34bbcc560083277bbbe9</anchor>
      <arglist>(unsigned int maxDegree)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMaxDegree</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a6da74843218d67e07a4b81103b3edf73</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxNumPtsPerLeaf</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>ab50348ae1e21c135b677ff36dea41817</anchor>
      <arglist>(unsigned int maxNumPtsPerLeaf)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMaxNumPtsPerLeaf</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a127b22d779b9be81a30b4f8a15f6fe9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEstimatedDimension</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a2e7aa117389d54a98d7ed5fdff3ab0b6</anchor>
      <arglist>(double estimatedDimension)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEstimatedDimension</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a89a0c13c606e9440c446354c59a2b48d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a421b9ed7f95da2e13134dcedbd18718e</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>af9741b74172aaf4303c6225f8961a0d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinValidPathFraction</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a94c58f1d54c93ee474c1d4f0b13346cd</anchor>
      <arglist>(double fraction)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMinValidPathFraction</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a6ec038aa763fc5f72a335f90fb640094</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a45a55e26ab3ad057ee460e49090d84f4</anchor>
      <arglist>(const base::ProjectionEvaluatorPtr &amp;projectionEvaluator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>af6592a10978efdfb76e4eb2f79f11148</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const base::ProjectionEvaluatorPtr &amp;</type>
      <name>getProjectionEvaluator</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a0aa3b9c14924b6d309ec6c2e6889fd59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a3dd39bb6e17fdd1388c90ccd89cc3b91</anchor>
      <arglist>(base::PlannerData &amp;data) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>aedba1f8369c75afbe2c36a103253832f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupTree</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a0f501545c061accc1633b28bb85730c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a592ca92d4ab9a22242e4da6828b7f817</anchor>
      <arglist>(const Motion *a, const Motion *b) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>projectedDistanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a954440e2ad4919b56cce26c658fa9acd</anchor>
      <arglist>(const Motion *a, const Motion *b) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addMotion</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>aa6f7b770deecb0f22d197f49b33ca6b7</anchor>
      <arglist>(Motion *motion)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Motion *</type>
      <name>selectMotion</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a8d76d0e8e97867705e27ea076ebb9800</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ValidStateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a522a770347fa60391e815d20077d6646</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ProjectionEvaluatorPtr</type>
      <name>projectionEvaluator_</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a0ff8cd07b4ba20a4e2caad3d4664a171</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::scoped_ptr&lt; NearestNeighborsGNAT&lt; Motion * &gt; &gt;</type>
      <name>tree_</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a4aa21db1f6f72bcadbb273e8ec50f174</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>goalBias_</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a9e0c7576bef82920ba589ac211cd1422</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistance_</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a7b7c981e0884cce1999f4135c7d27447</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>useProjectedDistance_</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>addd4a72e19d6e3475a4598f34712bd7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>degree_</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a3eb85a33b773b82bb52dd5690b8016b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>minDegree_</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>ad4989f2d71e32a3967d491bd502bd56a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxDegree_</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>af4317a7f719b20cf7a06d75e4be55823</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxNumPtsPerLeaf_</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>ac42bf5bfecc1d3e3fd90946f4c56ce4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>estimatedDimension_</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a9f2d60188acc0afe477a9f97aa437f5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>minValidPathFraction_</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a08431ea656245b1dc221c460c849f5ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE.html</anchorfile>
      <anchor>a90d67e16a4b4ac83aeb14cfa3867fdfe</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1STRIDE">gSTRIDE</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::STRIDE::Motion</name>
    <filename>classompl_1_1geometric_1_1STRIDE_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE_1_1Motion.html</anchorfile>
      <anchor>ae95d79897010ed9e5a46026170adb2ca</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE_1_1Motion.html</anchorfile>
      <anchor>ae21fe1ff8289d8580e9f8fd75bcafb63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent</name>
      <anchorfile>classompl_1_1geometric_1_1STRIDE_1_1Motion.html</anchorfile>
      <anchor>aaa5a30775df6b14f5ac8f4b37194a9bb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::ThunderDBPtr</name>
    <filename>classompl_1_1geometric_1_1ThunderDBPtr.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::ThunderPtr</name>
    <filename>classompl_1_1geometric_1_1ThunderPtr.html</filename>
    <docanchor file="classompl_1_1geometric_1_1ThunderPtr">Thunder</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::ThunderRetrieveRepair</name>
    <filename>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</filename>
    <base>ompl::base::Planner</base>
    <member kind="function">
      <type></type>
      <name>ThunderRetrieveRepair</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>ad5268bf8ffce2ef9d6aac67d704c585b</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si, const tools::ThunderDBPtr &amp;experienceDB)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>acaf28b2442c74084460917a1ca8a6e7f</anchor>
      <arglist>(base::PlannerData &amp;data) const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; PathGeometric &gt; &amp;</type>
      <name>getLastRecalledNearestPaths</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>a81139cd3f31630a1d40f97d55219f435</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getLastRecalledNearestPathChosen</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>a3857756c598fccf6caa01a99f53fe0e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PathGeometric &amp;</type>
      <name>getChosenRecallPath</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>a6b9044cd7d33cd3943bcdff130bb0afa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRepairPlannerDatas</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>a1464c3ab148ad8134b232c432e78d626</anchor>
      <arglist>(std::vector&lt; base::PlannerDataPtr &gt; &amp;data) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>a7dac374cdce6dc8a642e09140770cec2</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>ac103e76e710d513159175be771903350</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExperienceDB</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>a05b4c45080b639afb306e8c84b1df3c1</anchor>
      <arglist>(const tools::ThunderDBPtr &amp;experienceDB)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRepairPlanner</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>ae27cf2c8b41891d049f89c80206b824b</anchor>
      <arglist>(const base::PlannerPtr &amp;planner)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>a21eea8bfc9082b27746c7c7ab85c7f71</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>repairPath</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>aeba13057f46403076e81b58d5dfc419a</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc, PathGeometric &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>replan</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>a45b5b08ce5fd4850fea007d070840ad7</anchor>
      <arglist>(const base::State *start, const base::State *goal, PathGeometric &amp;newPathSegment, const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNearestK</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>a410fcb14ffebb155ef6bd3cfdc97362f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestK</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>a4b25ec765e34e80d8f7d3ae988d388bf</anchor>
      <arglist>(int nearestK)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableSmoothing</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>a4b53aa5b5b4d602550c3ec16d82a6b3b</anchor>
      <arglist>(bool enable)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::size_t</type>
      <name>checkMotionScore</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>a84fcbf5918283a9c88d8050f75518dd1</anchor>
      <arglist>(const base::State *s1, const base::State *s2) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>af0542c2041fb0f7ff2c7482966634357</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>tools::ThunderDBPtr</type>
      <name>experienceDB_</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>ae20f82d2a1518d733eaee5c2dda9cfa2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; PathGeometric &gt;</type>
      <name>nearestPaths_</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>a7314cec2447bda81ec61a46442358460</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>nearestPathsChosenID_</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>a45d0f12d30ca9fc64be0be49f811e7b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::PlannerPtr</type>
      <name>repairPlanner_</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>a7136cfa8cefc1cb88b44ba887f07543f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ProblemDefinitionPtr</type>
      <name>repairProblemDef_</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>ae0a5db3bf0cdf96e2fa6fdb005fff02d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; base::PlannerDataPtr &gt;</type>
      <name>repairPlannerDatas_</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>aa33b6ec3e2ecefbfa6757c5a77a4a496</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PathSimplifierPtr</type>
      <name>path_simplifier_</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>af340bc6f4852f096565f46e743da4b1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nearestK_</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>a103933fe248fd0d9f7886945ce49165c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>smoothingEnabled_</name>
      <anchorfile>classompl_1_1geometric_1_1ThunderRetrieveRepair.html</anchorfile>
      <anchor>a5b346eec67c4645eac498dbb86b60c3e</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1ThunderRetrieveRepair">ThunderRetrieveRepair</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::TRRT</name>
    <filename>classompl_1_1geometric_1_1TRRT.html</filename>
    <base>ompl::base::Planner</base>
    <class kind="class">ompl::geometric::TRRT::Motion</class>
    <member kind="function">
      <type></type>
      <name>TRRT</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>ad61a99cc1f7a4b5c1156ad165e37ef38</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlannerData</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a194d0564d5210e7e73a6bf3f4d14a26e</anchor>
      <arglist>(base::PlannerData &amp;data) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a080d1409db867e5a321dba9a766723c7</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;plannerTerminationCondition)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a1fe3a3b4d040bd5846cd0888928969c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>abf01bc73f6a435029e40fa1cde168c79</anchor>
      <arglist>(double goalBias)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGoalBias</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a97d6e3f42122c3dddddc2fcc9ce628c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRange</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a88488f425f4ff5f47f973a31b4de97b2</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRange</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a83dc7084b66fba052c95ef7ab1c6fa5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTempChangeFactor</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a18212ef51d67d0e1e71291e2b1e2beea</anchor>
      <arglist>(double factor)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTempChangeFactor</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>afc8f374836ea953ce31f39ae7ffadd16</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCostThreshold</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a1f4c28a0453fa631ad0f39f7e9b3a142</anchor>
      <arglist>(double maxCost)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCostThreshold</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a20aa0eca0e8d45fe382bbc9559e79448</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitTemperature</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a54b75fca0c41d89db8d3475f8a546096</anchor>
      <arglist>(double initTemperature)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getInitTemperature</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a0b5ea98d817c6cd49128f852a1e1eb5e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrontierThreshold</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a4de4dc950c5b705cc831408c155d6ef0</anchor>
      <arglist>(double frontier_threshold)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFrontierThreshold</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a859dcba093f63c8f2cb8af2c52b37af0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrontierNodeRatio</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a2ca9ee4a3c36a22e1935cf2f419adb1e</anchor>
      <arglist>(double frontierNodeRatio)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFrontierNodeRatio</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a3f7a972865cdbdba92517cfad0295385</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighbors</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>ad14d60f76491e9baa1d51e26d51c3a70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>ad98e2d1a83fc2f3a4851129422449220</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a0afc6e754e4bcb83b29d292312c54eea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>distanceFunction</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>aace4cb9b2319d9de00ae7e831692a028</anchor>
      <arglist>(const Motion *a, const Motion *b) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>transitionTest</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>ad74a8c71e598ea01badbe80ba0d27319</anchor>
      <arglist>(const base::Cost &amp;motionCost)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>minExpansionControl</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>ab4bf42dd232334ab7b0eaddbc9ae78d8</anchor>
      <arglist>(double randMotionDistance)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::StateSamplerPtr</type>
      <name>sampler_</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>ade44118592d5e236b6ebdb1419f2c9f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; NearestNeighbors&lt; Motion * &gt; &gt;</type>
      <name>nearestNeighbors_</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>ae039663801ebc00d6630f06647d69756</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>goalBias_</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a206a7dffcb734c7888fa6aeb310a5515</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>maxDistance_</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>ad9bf201c78f94737e55f67a2bdc11419</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a6a7641c73a280c0e9adb9a06fca6ed7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Motion *</type>
      <name>lastGoalMotion_</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a52ccfe22a44bb4a3f52b4fe4212741d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>temp_</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a74e44038f700808efb5dc6f0deb979f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::Cost</type>
      <name>bestCost_</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>ab1ea051e0154ab2f7646b9338f03d029</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::Cost</type>
      <name>worstCost_</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a32d1ac247c068da9ffe66269c47dfa74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::Cost</type>
      <name>costThreshold_</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a3834927a88acfb9e1f98ce74ad29e60d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>tempChangeFactor_</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a634ef8c26dd94c7b717259c3949d7be2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>initTemperature_</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a8ae55d97410606a2451914f9b86931e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>nonfrontierCount_</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a6c3b2463823b6ce3caa1eb9a508283c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>frontierCount_</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a22b9559b5760bb0565c03010e88c4919</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>frontierThreshold_</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a213e79967a30dee30c175796b6a7816b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>frontierNodeRatio_</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>aec0140776240aaed71d592699ffc6758</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ompl::base::OptimizationObjectivePtr</type>
      <name>opt_</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT.html</anchorfile>
      <anchor>a713805975a6c1972f047056847a949b4</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1TRRT">gTRRT</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::TRRT::Motion</name>
    <filename>classompl_1_1geometric_1_1TRRT_1_1Motion.html</filename>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT_1_1Motion.html</anchorfile>
      <anchor>aa1ea3c39665bcba57aa39d244b56752f</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="variable">
      <type>base::State *</type>
      <name>state</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT_1_1Motion.html</anchorfile>
      <anchor>ad8a60f42d44cc444ac030b14be55bfad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Motion *</type>
      <name>parent</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT_1_1Motion.html</anchorfile>
      <anchor>a51193986d21f3cbb4e356e143c7e4100</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>base::Cost</type>
      <name>cost</name>
      <anchorfile>classompl_1_1geometric_1_1TRRT_1_1Motion.html</anchorfile>
      <anchor>a878515236711e1725a914092c7afb142</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::geometric::VFRRT</name>
    <filename>classompl_1_1geometric_1_1VFRRT.html</filename>
    <base>ompl::geometric::RRT</base>
    <member kind="function">
      <type></type>
      <name>VFRRT</name>
      <anchorfile>classompl_1_1geometric_1_1VFRRT.html</anchorfile>
      <anchor>acc49c243efa3f36ffaccaef7af423215</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si, const VectorField &amp;vf, double exploration, double initial_lambda, unsigned int update_freq)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VFRRT</name>
      <anchorfile>classompl_1_1geometric_1_1VFRRT.html</anchorfile>
      <anchor>a1426756c6981685f9a2609aa1a40226d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1geometric_1_1VFRRT.html</anchorfile>
      <anchor>a6263507c074d9f2ba11878d47aae6312</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>determineMeanNorm</name>
      <anchorfile>classompl_1_1geometric_1_1VFRRT.html</anchorfile>
      <anchor>a5372c93ad16fed5af6e376702983ca14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>getNewDirection</name>
      <anchorfile>classompl_1_1geometric_1_1VFRRT.html</anchorfile>
      <anchor>a92d172e81ac691cd7eac258dab296587</anchor>
      <arglist>(const base::State *qnear, const base::State *qrand)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>biasedSampling</name>
      <anchorfile>classompl_1_1geometric_1_1VFRRT.html</anchorfile>
      <anchor>a2965b9a1de187f46bdc3e7c38fdc605d</anchor>
      <arglist>(const Eigen::VectorXd &amp;vrand, const Eigen::VectorXd &amp;vfield, double lambdaScale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateGain</name>
      <anchorfile>classompl_1_1geometric_1_1VFRRT.html</anchorfile>
      <anchor>abaedb6548c551e43f3069849a1abbabf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>computeAlphaBeta</name>
      <anchorfile>classompl_1_1geometric_1_1VFRRT.html</anchorfile>
      <anchor>af64a6f2c7157152b48d22895f0d84763</anchor>
      <arglist>(double omega, const Eigen::VectorXd &amp;vrand, const Eigen::VectorXd &amp;vfield)</arglist>
    </member>
    <member kind="function">
      <type>Motion *</type>
      <name>extendTree</name>
      <anchorfile>classompl_1_1geometric_1_1VFRRT.html</anchorfile>
      <anchor>a966f9a9cdec569a3fe18942b61724fb2</anchor>
      <arglist>(Motion *m, base::State *rstate, const Eigen::VectorXd &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateExplorationEfficiency</name>
      <anchorfile>classompl_1_1geometric_1_1VFRRT.html</anchorfile>
      <anchor>ab0e0a7475bf0911a07a661dd44fcf4e5</anchor>
      <arglist>(Motion *m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1geometric_1_1VFRRT.html</anchorfile>
      <anchor>a0408a05337ddce30ca9a4d1d972445d5</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1geometric_1_1VFRRT.html</anchorfile>
      <anchor>a291a7f17a971156548278f16dce6f8c3</anchor>
      <arglist>()</arglist>
    </member>
    <docanchor file="classompl_1_1geometric_1_1VFRRT">gVFRRT</docanchor>
  </compound>
  <compound kind="class">
    <name>ompl::GreedyKCenters</name>
    <filename>classompl_1_1GreedyKCenters.html</filename>
    <templarg>_T</templarg>
    <member kind="typedef">
      <type>std::function&lt; double(const _T &amp;, const _T &amp;)&gt;</type>
      <name>DistanceFunction</name>
      <anchorfile>classompl_1_1GreedyKCenters.html</anchorfile>
      <anchor>ab7bca113d3893eef51ec7623df287120</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::numeric::ublas::matrix&lt; double &gt;</type>
      <name>Matrix</name>
      <anchorfile>classompl_1_1GreedyKCenters.html</anchorfile>
      <anchor>a3b4082081ba758973acf1d1e7e4d25d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDistanceFunction</name>
      <anchorfile>classompl_1_1GreedyKCenters.html</anchorfile>
      <anchor>aa46b77a69db20e4c411bbb85956eab21</anchor>
      <arglist>(const DistanceFunction &amp;distFun)</arglist>
    </member>
    <member kind="function">
      <type>const DistanceFunction &amp;</type>
      <name>getDistanceFunction</name>
      <anchorfile>classompl_1_1GreedyKCenters.html</anchorfile>
      <anchor>a32dc0196b4cabe4ba01241c37bb7c533</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>kcenters</name>
      <anchorfile>classompl_1_1GreedyKCenters.html</anchorfile>
      <anchor>ad8e0e7c79e810f3b3827dd8a5a8eeb01</anchor>
      <arglist>(const std::vector&lt; _T &gt; &amp;data, unsigned int k, std::vector&lt; unsigned int &gt; &amp;centers, Matrix &amp;dists)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DistanceFunction</type>
      <name>distFun_</name>
      <anchorfile>classompl_1_1GreedyKCenters.html</anchorfile>
      <anchor>a4c617a02bb7489b3d1e32261f099f113</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>classompl_1_1GreedyKCenters.html</anchorfile>
      <anchor>a9f9f1e9cacc57cc0a7c1526406cc94dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::Grid</name>
    <filename>classompl_1_1Grid.html</filename>
    <templarg>_T</templarg>
    <class kind="struct">ompl::Grid::Cell</class>
    <class kind="struct">ompl::Grid::EqualCoordPtr</class>
    <class kind="struct">ompl::Grid::HashFunCoordPtr</class>
    <class kind="struct">ompl::Grid::SortComponents</class>
    <member kind="typedef">
      <type>std::vector&lt; int &gt;</type>
      <name>Coord</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ada6a72bd91ec78dd8a0806c00055d917</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Cell * &gt;</type>
      <name>CellArray</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a75eda082fd346c84697130d347c1eb2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CoordHash::const_iterator</type>
      <name>iterator</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ac85bc047c9574aea0fb08c1c53701eb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Grid</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>aa11294d2cb47b1e55bacd101b131d3c1</anchor>
      <arglist>(unsigned int dimension)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Grid</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>acace53abca008ae9210248cb2d54739d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>aa6a94d0ecdc11fd7e60d72b24b9d1930</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>aa58eb9423709340be0fa233986c3f6fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimension</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a118373bcfe70886449d94782b0a7c783</anchor>
      <arglist>(unsigned int dimension)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ac6f884d8fc3c401a3610d7e5659e16b9</anchor>
      <arglist>(const Coord &amp;coord) const </arglist>
    </member>
    <member kind="function">
      <type>Cell *</type>
      <name>getCell</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ae563fea4e6a46c741682b6dcbe93ce54</anchor>
      <arglist>(const Coord &amp;coord) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>af462d094f175c8c409237802d875aad2</anchor>
      <arglist>(const Cell *cell, CellArray &amp;list) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a75d952cdcfbf49f084d7ec1434170fbf</anchor>
      <arglist>(const Coord &amp;coord, CellArray &amp;list) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a6a9e29f3d8bb2d337d36f0ba8efb0d45</anchor>
      <arglist>(Coord &amp;coord, CellArray &amp;list) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; Cell * &gt; &gt;</type>
      <name>components</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a27fcbd257ec49b14b88cffd182db8b39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cell *</type>
      <name>createCell</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a1d0e09b5912dff94caa57aee681053cf</anchor>
      <arglist>(const Coord &amp;coord, CellArray *nbh=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a72386f9ffd43e98d25aa38b224541564</anchor>
      <arglist>(Cell *cell)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ac72fa046a57332c7627126e8d84fb1dc</anchor>
      <arglist>(Cell *cell)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroyCell</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a5876a2ff7b1092fd00fc58fee9ad1829</anchor>
      <arglist>(Cell *cell) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getContent</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>afe4fa2e9e3b6db8d57c69daaeb1be0b7</anchor>
      <arglist>(std::vector&lt; _T &gt; &amp;content) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCoordinates</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a0864cd4aae571bd30003b7ae82dccbd5</anchor>
      <arglist>(std::vector&lt; Coord * &gt; &amp;coords) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCells</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a5606423660b0f121ad2f227030085a9c</anchor>
      <arglist>(CellArray &amp;cells) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printCoord</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ab586680ae4fb05376c91b114d95e1b7b</anchor>
      <arglist>(Coord &amp;coord, std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a68c59b4c32f76bf4d698305be349faa8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a1b6823f08c397d48bc7e6b2b4567566e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>status</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ac38c23cf1a7f5dea01f49e325ad53371</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a73ad31c53eef29b58c753634b886b49c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a8155d8b764675cec88b3c670bb9cc705</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::unordered_map&lt; Coord *, Cell *, HashFunCoordPtr, EqualCoordPtr &gt;</type>
      <name>CoordHash</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>af21ae5cd41d9e4e3ccebafd6b1c03066</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>freeMemory</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>ab5f51d3c4ae3f021f17d8435643cd3d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>dimension_</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a8dfdf767f8c14a15fddbdb4bc1e993f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxNeighbors_</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>a826614263d30ffcc37924cecfef25471</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordHash</type>
      <name>hash_</name>
      <anchorfile>classompl_1_1Grid.html</anchorfile>
      <anchor>afbf8751613b70340e9e287d3bb53650d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::Grid::Cell</name>
    <filename>structompl_1_1Grid_1_1Cell.html</filename>
    <member kind="variable">
      <type>_T</type>
      <name>data</name>
      <anchorfile>structompl_1_1Grid_1_1Cell.html</anchorfile>
      <anchor>a9a32dbce70bab52e6d45b0a4d0106366</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Coord</type>
      <name>coord</name>
      <anchorfile>structompl_1_1Grid_1_1Cell.html</anchorfile>
      <anchor>a3c410d94a7026951a4eb7e6966fd6229</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::Grid::EqualCoordPtr</name>
    <filename>structompl_1_1Grid_1_1EqualCoordPtr.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structompl_1_1Grid_1_1EqualCoordPtr.html</anchorfile>
      <anchor>a83630334aa3883bc3345ef0c137b8713</anchor>
      <arglist>(const Coord *const c1, const Coord *const c2) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::Grid::HashFunCoordPtr</name>
    <filename>structompl_1_1Grid_1_1HashFunCoordPtr.html</filename>
    <member kind="function">
      <type>std::size_t</type>
      <name>operator()</name>
      <anchorfile>structompl_1_1Grid_1_1HashFunCoordPtr.html</anchorfile>
      <anchor>a9c99e2c39f1078d5f11f52ac5958811e</anchor>
      <arglist>(const Coord *const s) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::Grid::SortComponents</name>
    <filename>structompl_1_1Grid_1_1SortComponents.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structompl_1_1Grid_1_1SortComponents.html</anchorfile>
      <anchor>ae481c5566c631352d05450342f89bff3</anchor>
      <arglist>(const std::vector&lt; Cell * &gt; &amp;a, const std::vector&lt; Cell * &gt; &amp;b) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::GridB</name>
    <filename>classompl_1_1GridB.html</filename>
    <templarg>_T</templarg>
    <templarg>LessThanExternal</templarg>
    <templarg>LessThanInternal</templarg>
    <base>ompl::GridN</base>
    <class kind="struct">ompl::GridB::LessThanExternalCell</class>
    <class kind="struct">ompl::GridB::LessThanInternalCell</class>
    <member kind="typedef">
      <type>GridN&lt; _T &gt;::Cell</type>
      <name>Cell</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a7fd1b48d2b5451f40c57f4e3fba4e4c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridN&lt; _T &gt;::CellArray</type>
      <name>CellArray</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a8af7231656ec5aac513048369d7388d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridN&lt; _T &gt;::Coord</type>
      <name>Coord</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>ae1ffa2705f26a8916307afa7b020ba49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>EventCellUpdate</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a7af310f35313f4e2342d227138ce156f</anchor>
      <arglist>)(Cell *, void *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridB</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a6f51bf34a19905e875d6bdffa3246b11</anchor>
      <arglist>(unsigned int dimension)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onCellUpdate</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a89bffe3573ef977f63b4ab4ff7759705</anchor>
      <arglist>(EventCellUpdate event, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>Cell *</type>
      <name>topInternal</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a91963302f00507b2c8c52e1b049525d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Cell *</type>
      <name>topExternal</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a59964153d08cd2af9d80cad73aa10b48</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>countInternal</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a4474d70facf47e05f73dda1464760ef2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>countExternal</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a68d281d2f257392080725ccb408fb6b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fracExternal</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>ac7afdbf67ca787a6cb135b10a0227521</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fracInternal</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a179a5009ee225315d07865ff15c673a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>aceb50d07f1b2bdb195df8ef2c06999e7</anchor>
      <arglist>(Cell *cell)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateAll</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a177ec08a842589d77338095e36a3b2f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cell *</type>
      <name>createCell</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>ab5b346ddd6e6c21cc2e35a493a59f420</anchor>
      <arglist>(const Coord &amp;coord, CellArray *nbh=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a2d028cfdf6233f097ff43fd70591896b</anchor>
      <arglist>(Cell *cell)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a35d8377f870c0e03fca9f2839d863165</anchor>
      <arglist>(Cell *cell)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>ad5c6fe7b6616afef1120f34811124286</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>status</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a08fa3fdf1d4a74a1bdab9d99ca5e8925</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>BinaryHeap&lt; CellX *, LessThanInternalCell &gt;</type>
      <name>internalBHeap</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>abf7cedc47aa3e2b2cb87986fcdf9ed44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>BinaryHeap&lt; CellX *, LessThanExternalCell &gt;</type>
      <name>externalBHeap</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a01bc4d75a25963312eecd700ed643399</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupHeaps</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a885d2d151a374acf376617019f0c4f86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clearHeaps</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>ab332ad98c88d0ddc7c2ba9e04eaa6c65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>noCellUpdate</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a24ba3c3dfcd76b0f7f79006252e18928</anchor>
      <arglist>(Cell *, void *)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>setHeapElementI</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a5d5d287741c00a9dba43113064f867d1</anchor>
      <arglist>(typename internalBHeap::Element *element, void *)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>setHeapElementE</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>ae2fb49e37b99d8f9e224c17577f5c622</anchor>
      <arglist>(typename externalBHeap::Element *element, void *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventCellUpdate</type>
      <name>eventCellUpdate_</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a21a662edc0904ba14495d44b2088669f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>eventCellUpdateData_</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>ab229dc7aca157fe152411fe75ad2f73f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>internalBHeap</type>
      <name>internal_</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>a00fa01d1103ced09fb7ee3ebee187665</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>externalBHeap</type>
      <name>external_</name>
      <anchorfile>classompl_1_1GridB.html</anchorfile>
      <anchor>afede0d811f4f9b53abc0f1945b871516</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::GridB::LessThanExternalCell</name>
    <filename>structompl_1_1GridB_1_1LessThanExternalCell.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::GridB::LessThanInternalCell</name>
    <filename>structompl_1_1GridB_1_1LessThanInternalCell.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::GridN</name>
    <filename>classompl_1_1GridN.html</filename>
    <templarg>_T</templarg>
    <base>ompl::Grid</base>
    <class kind="struct">ompl::GridN::Cell</class>
    <member kind="typedef">
      <type>Grid&lt; _T &gt;::Cell</type>
      <name>BaseCell</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>aa26d52609e9a958a0dee1c774d817f34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid&lt; _T &gt;::CellArray</type>
      <name>BaseCellArray</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a4b26a5015ed43cb79442a1d7041ca877</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid&lt; _T &gt;::Coord</type>
      <name>Coord</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>ae15a0d9d76a01bc9f98afbed8ce23342</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Cell * &gt;</type>
      <name>CellArray</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a44c57859eaebc6bdc3c9c453662ac252</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridN</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a19056d56c0b54dd8ef2c3c9d483f1211</anchor>
      <arglist>(unsigned int dimension)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimension</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a8f301e691e48294e1e216d1c7971aa9d</anchor>
      <arglist>(unsigned int dimension)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBounds</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>ae69767d44f200c28b21683ac76d1624d</anchor>
      <arglist>(const Coord &amp;low, const Coord &amp;up)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInteriorCellNeighborLimit</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>ae5d42e023d6aa00ac1d479dad46d7144</anchor>
      <arglist>(unsigned int count)</arglist>
    </member>
    <member kind="function">
      <type>Cell *</type>
      <name>getCell</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a55b24fea201c89c9dab91c8624cec4e5</anchor>
      <arglist>(const Coord &amp;coord) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>adfe8ed73a5dc1ce935e9abf51d91682b</anchor>
      <arglist>(const Cell *cell, CellArray &amp;list) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a1ba55b0907ff580f04447d58af044de0</anchor>
      <arglist>(const Coord &amp;coord, CellArray &amp;list) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>neighbors</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a6833ae9f28a7b57275faee82437255d9</anchor>
      <arglist>(Coord &amp;coord, CellArray &amp;list) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual BaseCell *</type>
      <name>createCell</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a6423dadd35335d4466af7174803f99f9</anchor>
      <arglist>(const Coord &amp;coord, BaseCellArray *nbh=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>abafef2aa6c3f2e6c35ef1a82f10f97c8</anchor>
      <arglist>(BaseCell *cell)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCells</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a1bc2efb9f3533a98381ee2e12da28117</anchor>
      <arglist>(CellArray &amp;cells) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned int</type>
      <name>numberOfBoundaryDimensions</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>ab065311737237a3731d41e0cbc4e1b76</anchor>
      <arglist>(const Coord &amp;coord) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>hasBounds_</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>ace239cb56364f32748d8c4a66ec8b31f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>lowBound_</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>acdf65b3cd4603c5d25597e62064751d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Coord</type>
      <name>upBound_</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a422a9ee23538f070a2d9704e2ca70ead</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>interiorCellNeighborsLimit_</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a035b9527b8cfd98a6e4f4d7472e668a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>overrideCellNeighborsLimit_</name>
      <anchorfile>classompl_1_1GridN.html</anchorfile>
      <anchor>a1e9cc38ff1df4dca6c9969f73dcad61e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::GridN::Cell</name>
    <filename>structompl_1_1GridN_1_1Cell.html</filename>
    <base>ompl::Grid::Cell</base>
    <member kind="variable">
      <type>unsigned int</type>
      <name>neighbors</name>
      <anchorfile>structompl_1_1GridN_1_1Cell.html</anchorfile>
      <anchor>ab454d9ba57e23ae1687e34bde67a4cae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>border</name>
      <anchorfile>structompl_1_1GridN_1_1Cell.html</anchorfile>
      <anchor>adb46d818fb6457e25c0c9455591048c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::LPAstarOnGraph</name>
    <filename>classompl_1_1LPAstarOnGraph.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classompl_1_1LPAstarOnGraph.html</anchorfile>
      <anchor>af5eb5a571ab730cd22545f271bc3f007</anchor>
      <arglist>(std::size_t u)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::msg::OutputHandler</name>
    <filename>classompl_1_1msg_1_1OutputHandler.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>log</name>
      <anchorfile>classompl_1_1msg_1_1OutputHandler.html</anchorfile>
      <anchor>a072c8de5bbe4bea4fc7763b74fcc2f4b</anchor>
      <arglist>(const std::string &amp;text, LogLevel level, const char *filename, int line)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::msg::OutputHandlerFile</name>
    <filename>classompl_1_1msg_1_1OutputHandlerFile.html</filename>
    <base>ompl::msg::OutputHandler</base>
    <member kind="function">
      <type></type>
      <name>OutputHandlerFile</name>
      <anchorfile>classompl_1_1msg_1_1OutputHandlerFile.html</anchorfile>
      <anchor>abc64dc38951bc6cb6e80756b6bf95e81</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>log</name>
      <anchorfile>classompl_1_1msg_1_1OutputHandlerFile.html</anchorfile>
      <anchor>a9b46268ab475fd1952d91a21cc72c6a9</anchor>
      <arglist>(const std::string &amp;text, LogLevel level, const char *filename, int line)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::msg::OutputHandlerSTD</name>
    <filename>classompl_1_1msg_1_1OutputHandlerSTD.html</filename>
    <base>ompl::msg::OutputHandler</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>log</name>
      <anchorfile>classompl_1_1msg_1_1OutputHandlerSTD.html</anchorfile>
      <anchor>a563f816ad96670e44ca899fa48757a83</anchor>
      <arglist>(const std::string &amp;text, LogLevel level, const char *filename, int line)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::NearestNeighbors</name>
    <filename>classompl_1_1NearestNeighbors.html</filename>
    <templarg>_T</templarg>
    <member kind="typedef">
      <type>std::function&lt; double(const _T &amp;, const _T &amp;)&gt;</type>
      <name>DistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a333e01beb66ea371bbcbd678cfbb7812</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>abb8cd1ac5b87a0a01b27aecab2094d8f</anchor>
      <arglist>(const DistanceFunction &amp;distFun)</arglist>
    </member>
    <member kind="function">
      <type>const DistanceFunction &amp;</type>
      <name>getDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a0cdebb14635a8a7ec4c965aa7db89662</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>reportsSortedResults</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a9cf25d648f1590dffe340b9f19290d57</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aac3adbd29fa8719b399896bdb79bab3f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>acdec6e843eb3e2f039df9b5b24ce0ad7</anchor>
      <arglist>(const _T &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>aae3c2592a0ef5c64f3bde107c144d70a</anchor>
      <arglist>(const std::vector&lt; _T &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af4fcf7cc39c33a4e25e2f7e00b0220c0</anchor>
      <arglist>(const _T &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual _T</type>
      <name>nearest</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a35a3a90d9a22ed3e63add0a911736173</anchor>
      <arglist>(const _T &amp;data) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>af4c371bd279a0ca5b2fb7b221b88a983</anchor>
      <arglist>(const _T &amp;data, std::size_t k, std::vector&lt; _T &gt; &amp;nbh) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>ae898b3d7f57f4646101586fe695c5498</anchor>
      <arglist>(const _T &amp;data, double radius, std::vector&lt; _T &gt; &amp;nbh) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a96638162b2bd031636672dcb9f844047</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>list</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a3c7262c93a1b17c7a477d3434e405b6b</anchor>
      <arglist>(std::vector&lt; _T &gt; &amp;data) const  =0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DistanceFunction</type>
      <name>distFun_</name>
      <anchorfile>classompl_1_1NearestNeighbors.html</anchorfile>
      <anchor>a6f15f3b591fb69b91ca35e504723b54f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::NearestNeighborsFLANN</name>
    <filename>classompl_1_1NearestNeighborsFLANN.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>ompl::NearestNeighbors</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>aa096ed65b68d1057905f9ba0b5bb661e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>reportsSortedResults</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a5f48d30c5d4d6f6945610ff524704685</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a00c61f35a45c51f02e1dbcb7489c56ed</anchor>
      <arglist>(const _T &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a19bf90d9ad22775cbc167e327b3b963b</anchor>
      <arglist>(const std::vector&lt; _T &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a996c09ef23e7225fa30c595030e2eca7</anchor>
      <arglist>(const _T &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _T</type>
      <name>nearest</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a796d557ada3d401845c92f611ef2a907</anchor>
      <arglist>(const _T &amp;data) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>ac1e20184db04a2ceb23006001e5aab8d</anchor>
      <arglist>(const _T &amp;data, std::size_t k, std::vector&lt; _T &gt; &amp;nbh) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a426f6a5c45afdff06f4091012155b791</anchor>
      <arglist>(const _T &amp;data, double radius, std::vector&lt; _T &gt; &amp;nbh) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>acc02ea68c02e9b1ede71e9893ff6d220</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>list</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a08b489871340c9d28001a6e36247b285</anchor>
      <arglist>(std::vector&lt; _T &gt; &amp;data) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIndexParams</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a8744517fb9f49287501de1e29dce0151</anchor>
      <arglist>(const std::shared_ptr&lt; flann::IndexParams &gt; &amp;params)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::shared_ptr&lt; flann::IndexParams &gt; &amp;</type>
      <name>getIndexParams</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a1db2893a52c73a6ae88bd0c20db60a76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSearchParams</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a61713a0d38ec52ee242d3f6b21caaf79</anchor>
      <arglist>(const flann::SearchParams &amp;searchParams)</arglist>
    </member>
    <member kind="function">
      <type>flann::SearchParams &amp;</type>
      <name>getSearchParams</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a550e09c5d54d1f157da5385900aef93e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const flann::SearchParams &amp;</type>
      <name>getSearchParams</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>ae29224f458a1fe9395b91c3f0084aa3c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createIndex</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>aad212794536e6ecfddff9b281fde1e00</anchor>
      <arglist>(const flann::Matrix&lt; _T &gt; &amp;mat)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>rebuildIndex</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a7b935f8afe093da0397144ca500f0afc</anchor>
      <arglist>(unsigned int capacity=0)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; _T &gt;</type>
      <name>data_</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a5cff9cb3adfe57413fa7dbf17ed32c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>flann::Index&lt; _Dist &gt; *</type>
      <name>index_</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>ab3a4cee81352c5baa2526b0579bf0206</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; flann::IndexParams &gt;</type>
      <name>params_</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a125e83d30f061dbd1f45f6f495de6e44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>flann::SearchParams</type>
      <name>searchParams_</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>ab15a612bcea206654d9ff23b36a719bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>dimension_</name>
      <anchorfile>classompl_1_1NearestNeighborsFLANN.html</anchorfile>
      <anchor>a64354375954f00fce065c2520ee8bba3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::NearestNeighborsFLANNHierarchicalClustering</name>
    <filename>classompl_1_1NearestNeighborsFLANNHierarchicalClustering.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>ompl::NearestNeighborsFLANN</base>
  </compound>
  <compound kind="class">
    <name>ompl::NearestNeighborsFLANNLinear</name>
    <filename>classompl_1_1NearestNeighborsFLANNLinear.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>ompl::NearestNeighborsFLANN</base>
  </compound>
  <compound kind="class">
    <name>ompl::NearestNeighborsGNAT</name>
    <filename>classompl_1_1NearestNeighborsGNAT.html</filename>
    <templarg></templarg>
    <base>ompl::NearestNeighbors</base>
    <class kind="class">ompl::NearestNeighborsGNAT::Node</class>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a96c08474dffa1ce6752353800bbe7e0d</anchor>
      <arglist>(const typename NearestNeighbors&lt; _T &gt;::DistanceFunction &amp;distFun)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a62b3d99db2a436fd2ce089be74f25fa7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>reportsSortedResults</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a6499b439a61e2cd6e19a1329684840d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a60b97dc0a8a7f31bd63a351ea930a230</anchor>
      <arglist>(const _T &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a0c7197b99ddf80e9bcf5db4531abcd94</anchor>
      <arglist>(const std::vector&lt; _T &gt; &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rebuildDataStructure</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a5a5d1ed1969d8a94096af37c2212953c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a24e1b1aabb8b32e8af7d4ddf96c39e5c</anchor>
      <arglist>(const _T &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _T</type>
      <name>nearest</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a80dc0b7d6598f10ca318562f5e09d3ef</anchor>
      <arglist>(const _T &amp;data) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>ad6875308bed42c183ab98480ded8d30c</anchor>
      <arglist>(const _T &amp;data, std::size_t k, std::vector&lt; _T &gt; &amp;nbh) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a206cf7958c9d6a9187675ea534c3fe87</anchor>
      <arglist>(const _T &amp;data, double radius, std::vector&lt; _T &gt; &amp;nbh) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a5dd9504ebdfa0031145f1a9900b6d302</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>list</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a4b96ff84909b0246f1e69427e469e829</anchor>
      <arglist>(std::vector&lt; _T &gt; &amp;data) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isRemoved</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a3a666ee2a3d6521c163b4f433c1c78b6</anchor>
      <arglist>(const _T &amp;data) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>nearestKInternal</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a23f766f698acbe58ec08f232dc02fee7</anchor>
      <arglist>(const _T &amp;data, std::size_t k, NearQueue &amp;nbhQueue) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>nearestRInternal</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a8c6fc2226e7904dc1d20d5d98849bea4</anchor>
      <arglist>(const _T &amp;data, double radius, NearQueue &amp;nbhQueue) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>postprocessNearest</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a40ff6ca10c40710e288adfeb14bca272</anchor>
      <arglist>(NearQueue &amp;nbhQueue, std::vector&lt; _T &gt; &amp;nbh) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Node *</type>
      <name>tree_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>af71f11d8395bb7ab208df7cf03351aaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>degree_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a9d705ed546c919cd52c428255a0c1a9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>minDegree_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a0843613b6418efbb2b417c37789246c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxDegree_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a925bada72c7c7e7826acdc1581a0a920</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxNumPtsPerLeaf_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a41c47b9f460e190bfadc2dc6f07cae3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>size_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a40bd930123e198450f10736efe73a970</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>rebuildSize_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a2da7487ea1149c183ec8560280855a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>removedCacheSize_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a79547bf4b75f57dcf2d736c11f612b1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GreedyKCenters&lt; _T &gt;</type>
      <name>pivotSelector_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a36b2e4bad87ded77f629a48425156bdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_set&lt; const _T * &gt;</type>
      <name>removed_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a33b37bc3d492032d6bbcdc823857fdb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT.html</anchorfile>
      <anchor>a1e1b937c81eb1d184ffa588589bcc07f</anchor>
      <arglist>(std::ostream &amp;out, const NearestNeighborsGNAT&lt; _T &gt; &amp;gnat)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::NearestNeighborsGNAT::Node</name>
    <filename>classompl_1_1NearestNeighborsGNAT_1_1Node.html</filename>
    <member kind="function">
      <type></type>
      <name>Node</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT_1_1Node.html</anchorfile>
      <anchor>a0b351b9793617230a30107947b46b986</anchor>
      <arglist>(int degree, int capacity, const _T &amp;pivot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateRadius</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT_1_1Node.html</anchorfile>
      <anchor>a3fea6c3f1208595ec4674418067a34ea</anchor>
      <arglist>(double dist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateRange</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT_1_1Node.html</anchorfile>
      <anchor>afc24a1f4b39957f6e7742b684deb741b</anchor>
      <arglist>(unsigned int i, double dist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT_1_1Node.html</anchorfile>
      <anchor>a2df84056b435a85ff89f1df8f4bc1e6a</anchor>
      <arglist>(GNAT &amp;gnat, const _T &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>needToSplit</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT_1_1Node.html</anchorfile>
      <anchor>a645beefc39066ad921863a32e224eb42</anchor>
      <arglist>(const GNAT &amp;gnat) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>split</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT_1_1Node.html</anchorfile>
      <anchor>a541428ab978630f4b8a25db60850f9c5</anchor>
      <arglist>(GNAT &amp;gnat)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>insertNeighborK</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT_1_1Node.html</anchorfile>
      <anchor>ab7a1c73e15a797a07fcc7d9364757413</anchor>
      <arglist>(NearQueue &amp;nbh, std::size_t k, const _T &amp;data, const _T &amp;key, double dist) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT_1_1Node.html</anchorfile>
      <anchor>a8d5614149d9f322eb28fdd3355e3aaf3</anchor>
      <arglist>(const GNAT &amp;gnat, const _T &amp;data, std::size_t k, NearQueue &amp;nbh, NodeQueue &amp;nodeQueue, bool &amp;isPivot) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertNeighborR</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT_1_1Node.html</anchorfile>
      <anchor>ac232bd7a9fdf8b6e660c60c15f79a570</anchor>
      <arglist>(NearQueue &amp;nbh, double r, const _T &amp;data, double dist) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT_1_1Node.html</anchorfile>
      <anchor>ac1bbecca939723d7c216fc50a314508b</anchor>
      <arglist>(const GNAT &amp;gnat, const _T &amp;data, double r, NearQueue &amp;nbh, NodeQueue &amp;nodeQueue) const </arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>degree_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT_1_1Node.html</anchorfile>
      <anchor>af2c95b71712957d839d5c200a293725d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const _T</type>
      <name>pivot_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT_1_1Node.html</anchorfile>
      <anchor>a5cd86d473687a1ba9a24514f854cb8ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>minRadius_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT_1_1Node.html</anchorfile>
      <anchor>a46475fd63721c3b3c75b009b200358fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>maxRadius_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT_1_1Node.html</anchorfile>
      <anchor>aa91ee97e818b369b8fda56967cfb7347</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>minRange_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT_1_1Node.html</anchorfile>
      <anchor>a1ca0e0c705f46204916de6e5fa3d1b3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>maxRange_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT_1_1Node.html</anchorfile>
      <anchor>aac25f4b4c74f0ba693c5e274119cf5ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; _T &gt;</type>
      <name>data_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT_1_1Node.html</anchorfile>
      <anchor>a3182d76413e664a9d60073a367365138</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Node * &gt;</type>
      <name>children_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNAT_1_1Node.html</anchorfile>
      <anchor>a2833091ccb6ee5b62a1e03c6be069af2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::NearestNeighborsGNATNoThreadSafety</name>
    <filename>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</filename>
    <templarg></templarg>
    <base>ompl::NearestNeighbors</base>
    <class kind="class">ompl::NearestNeighborsGNATNoThreadSafety::Node</class>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDistanceFunction</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>afda808c12e68a10eb08eeb1a9f2af704</anchor>
      <arglist>(const typename NearestNeighbors&lt; _T &gt;::DistanceFunction &amp;distFun)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a1e27bce1da76dd352b9ed47448061d50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>reportsSortedResults</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a7e3828f5d1a844c9e3bab7aecfff5551</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>ae52956fef631a789c2a8ed87f7149a70</anchor>
      <arglist>(const _T &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>af95c0f468f6c9338f82b580a096df721</anchor>
      <arglist>(const std::vector&lt; _T &gt; &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rebuildDataStructure</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>af3717a4ddc0fff565b500ce7a438d034</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a61cb948067947d21a0211e9ba4e107e8</anchor>
      <arglist>(const _T &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _T</type>
      <name>nearest</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>acb0697977766d7b875e8915fca0c8162</anchor>
      <arglist>(const _T &amp;data) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a3b0acadc838a635700d959e47c1e9d09</anchor>
      <arglist>(const _T &amp;data, std::size_t k, std::vector&lt; _T &gt; &amp;nbh) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>aa85802358b9578e3e9dd0e0407ce6f14</anchor>
      <arglist>(const _T &amp;data, double radius, std::vector&lt; _T &gt; &amp;nbh) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a06a923b860296185e0d9b4665333389f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>list</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a6ed49273e0e6d52db68218e939d418eb</anchor>
      <arglist>(std::vector&lt; _T &gt; &amp;data) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isRemoved</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>af104acd1116eaef278480cab635f3101</anchor>
      <arglist>(const _T &amp;data) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>nearestKInternal</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a6e12ce82d2d5cad9f0db171e8917e2ad</anchor>
      <arglist>(const _T &amp;data, std::size_t k) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>nearestRInternal</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a5ac45fc41632a3f9a3dc127c6bda0490</anchor>
      <arglist>(const _T &amp;data, double radius) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>postprocessNearest</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a2c0ceb99ff1480cf1ebc87a61edc9934</anchor>
      <arglist>(std::vector&lt; _T &gt; &amp;nbh) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Node *</type>
      <name>tree_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a2b49cb68c80321a951ff19756cf5191e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>degree_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a8959464f3e38151e2292e4c1858f58c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>minDegree_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a4ba5298198ef2188b9e3f956462193c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxDegree_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a4d1d3a2402968ff67980675bf78380e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxNumPtsPerLeaf_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a77fb35650377c5917f1383a3fdc618eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>size_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>aa458a54056dcfae4d9700220c0c31591</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>rebuildSize_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a6a9f147a6e698731e37315f647c1e19c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>removedCacheSize_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a8ef42c25ab1f81812a2ec9abee28a76a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GreedyKCenters&lt; _T &gt;</type>
      <name>pivotSelector_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>aad11fc2ef17a9015c19a28ec24f3b703</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_set&lt; const _T * &gt;</type>
      <name>removed_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a3c2660aa0fa1c36a32e04bcf5ca0a2c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeQueue</type>
      <name>nodeQueue_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a7ab94ab52946fe49dab384c7e14d0a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Permutation</type>
      <name>permutation_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>acf47844443e2f2d5a8ab3b0d5f4392d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>pivots_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a2d085f6316b3a5c7f378d19b7765d006</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GreedyKCenters&lt; _T &gt;::Matrix</type>
      <name>distances_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a925191fb1c63bcdfad0915dde2724036</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>aefae7627603eaea6da67d53ed3fc3ac6</anchor>
      <arglist>(std::ostream &amp;out, const NearestNeighborsGNATNoThreadSafety&lt; _T &gt; &amp;gnat)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeQueue</type>
      <name>nodeQueue_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a7ab94ab52946fe49dab384c7e14d0a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Permutation</type>
      <name>permutation_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>acf47844443e2f2d5a8ab3b0d5f4392d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>pivots_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a2d085f6316b3a5c7f378d19b7765d006</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GreedyKCenters&lt; _T &gt;::Matrix</type>
      <name>distances_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety.html</anchorfile>
      <anchor>a925191fb1c63bcdfad0915dde2724036</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::NearestNeighborsGNATNoThreadSafety::Node</name>
    <filename>classompl_1_1NearestNeighborsGNATNoThreadSafety_1_1Node.html</filename>
    <member kind="function">
      <type></type>
      <name>Node</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety_1_1Node.html</anchorfile>
      <anchor>a9b14a812b0a018658fcfa0c90dd30223</anchor>
      <arglist>(int degree, int capacity, const _T &amp;pivot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateRadius</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety_1_1Node.html</anchorfile>
      <anchor>a8d7f7421814fe7cde19f62eedc0a0f1a</anchor>
      <arglist>(double dist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateRange</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety_1_1Node.html</anchorfile>
      <anchor>aba1ab1794c0b2f6e301736c1ff5ae00e</anchor>
      <arglist>(unsigned int i, double dist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety_1_1Node.html</anchorfile>
      <anchor>ac24b88c00ffa8d57ad823da0ece6d2ae</anchor>
      <arglist>(GNAT &amp;gnat, const _T &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>needToSplit</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety_1_1Node.html</anchorfile>
      <anchor>a0ff01616312e96e9b7544afed1281b8b</anchor>
      <arglist>(const GNAT &amp;gnat) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>split</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety_1_1Node.html</anchorfile>
      <anchor>a07a9ee86348d6296a66d05e5cdea7273</anchor>
      <arglist>(GNAT &amp;gnat)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>insertNeighborK</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety_1_1Node.html</anchorfile>
      <anchor>a5ae83cc50e2052329dddc8c62646a896</anchor>
      <arglist>(NearQueue &amp;nbh, std::size_t k, const _T &amp;data, const _T &amp;key, double dist) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety_1_1Node.html</anchorfile>
      <anchor>adaa199dbdb2657786710ba2c540fbf62</anchor>
      <arglist>(const GNAT &amp;gnat, const _T &amp;data, std::size_t k, bool &amp;isPivot) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertNeighborR</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety_1_1Node.html</anchorfile>
      <anchor>a2c4d42f7de006a8335ca21a238c3aab6</anchor>
      <arglist>(NearQueue &amp;nbh, double r, const _T &amp;data, double dist) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety_1_1Node.html</anchorfile>
      <anchor>a43f0d1ad47b766d411452b6e4682dad1</anchor>
      <arglist>(const GNAT &amp;gnat, const _T &amp;data, double r) const </arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>degree_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety_1_1Node.html</anchorfile>
      <anchor>ae0171b70bcc604b70703695b12be761b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const _T</type>
      <name>pivot_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety_1_1Node.html</anchorfile>
      <anchor>a4fc9de301c94bf274b4fbaadd791b73b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>minRadius_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety_1_1Node.html</anchorfile>
      <anchor>a68c90a817c59dc685e5aff26580af6d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>maxRadius_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety_1_1Node.html</anchorfile>
      <anchor>abd0b96392f38f24a5009a02b19626aed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>minRange_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety_1_1Node.html</anchorfile>
      <anchor>ae64ef29b6600d602d454799db0a21e81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>maxRange_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety_1_1Node.html</anchorfile>
      <anchor>a934a638c3b5715bace7cf291fc879dd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; _T &gt;</type>
      <name>data_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety_1_1Node.html</anchorfile>
      <anchor>ad9442c6b66a9d49a20581097acd08ebc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Node * &gt;</type>
      <name>children_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety_1_1Node.html</anchorfile>
      <anchor>a6962699daaf8dde7201388aa3a49abbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>distToPivot_</name>
      <anchorfile>classompl_1_1NearestNeighborsGNATNoThreadSafety_1_1Node.html</anchorfile>
      <anchor>a439f168fc524940ac08e1ed1a14e885c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::NearestNeighborsLinear</name>
    <filename>classompl_1_1NearestNeighborsLinear.html</filename>
    <templarg>_T</templarg>
    <base>ompl::NearestNeighbors</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1NearestNeighborsLinear.html</anchorfile>
      <anchor>a7dda0b588f1ff5d2d51448dcc88c63a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>reportsSortedResults</name>
      <anchorfile>classompl_1_1NearestNeighborsLinear.html</anchorfile>
      <anchor>ad1be1bbe7725e4a5d3c5200349a6ce61</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighborsLinear.html</anchorfile>
      <anchor>a806e0408ffd272cc56679af0ebf27ec6</anchor>
      <arglist>(const _T &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighborsLinear.html</anchorfile>
      <anchor>a8be4e7098a8a42f888e9ec19e64e4ef1</anchor>
      <arglist>(const std::vector&lt; _T &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1NearestNeighborsLinear.html</anchorfile>
      <anchor>a39f7343cae117b245483f663e25bd06c</anchor>
      <arglist>(const _T &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _T</type>
      <name>nearest</name>
      <anchorfile>classompl_1_1NearestNeighborsLinear.html</anchorfile>
      <anchor>af82484d2cc4f469dc6e0456123210ab9</anchor>
      <arglist>(const _T &amp;data) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>nearestK</name>
      <anchorfile>classompl_1_1NearestNeighborsLinear.html</anchorfile>
      <anchor>ae26a7842faa8f914277155185ff82bbf</anchor>
      <arglist>(const _T &amp;data, std::size_t k, std::vector&lt; _T &gt; &amp;nbh) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>nearestR</name>
      <anchorfile>classompl_1_1NearestNeighborsLinear.html</anchorfile>
      <anchor>a833519244d353b76a0c2e878e8234607</anchor>
      <arglist>(const _T &amp;data, double radius, std::vector&lt; _T &gt; &amp;nbh) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1NearestNeighborsLinear.html</anchorfile>
      <anchor>a82d7deb538d787bd738d8988ab121dbf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>list</name>
      <anchorfile>classompl_1_1NearestNeighborsLinear.html</anchorfile>
      <anchor>af0095b24dbae29d4d051589d8a107ac2</anchor>
      <arglist>(std::vector&lt; _T &gt; &amp;data) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; _T &gt;</type>
      <name>data_</name>
      <anchorfile>classompl_1_1NearestNeighborsLinear.html</anchorfile>
      <anchor>a6af69c36b87793d1004d15b986117182</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::NearestNeighborsSqrtApprox</name>
    <filename>classompl_1_1NearestNeighborsSqrtApprox.html</filename>
    <templarg></templarg>
    <base>ompl::NearestNeighborsLinear</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1NearestNeighborsSqrtApprox.html</anchorfile>
      <anchor>a37dc04d880f54e8d915cae65cb18b6ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighborsSqrtApprox.html</anchorfile>
      <anchor>a11938c39607da11312eb86aadfd5a31e</anchor>
      <arglist>(const _T &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classompl_1_1NearestNeighborsSqrtApprox.html</anchorfile>
      <anchor>a4dddcdda3bad96170741194eec86cbe8</anchor>
      <arglist>(const std::vector&lt; _T &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>classompl_1_1NearestNeighborsSqrtApprox.html</anchorfile>
      <anchor>a8608eb9488f4bcccf552e6c32788edb5</anchor>
      <arglist>(const _T &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _T</type>
      <name>nearest</name>
      <anchorfile>classompl_1_1NearestNeighborsSqrtApprox.html</anchorfile>
      <anchor>a896e254c8bece8de4f4b5e8a00dee5b0</anchor>
      <arglist>(const _T &amp;data) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateCheckCount</name>
      <anchorfile>classompl_1_1NearestNeighborsSqrtApprox.html</anchorfile>
      <anchor>abab5eb276a0d9fdc737bd47919e2d3ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>checks_</name>
      <anchorfile>classompl_1_1NearestNeighborsSqrtApprox.html</anchorfile>
      <anchor>af5cfd5ec0b959ec740b192f08999d7d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>offset_</name>
      <anchorfile>classompl_1_1NearestNeighborsSqrtApprox.html</anchorfile>
      <anchor>ad52b7cdb2a00ed4f0df7af2faf9dae4b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::PDF</name>
    <filename>classompl_1_1PDF.html</filename>
    <templarg>_T</templarg>
    <class kind="class">ompl::PDF::Element</class>
    <member kind="function">
      <type></type>
      <name>PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a74eb5856577a7c51f157c3dd0a0bb211</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a5b46002df3734b53e8340a031ec081cc</anchor>
      <arglist>(const std::vector&lt; _T &gt; &amp;d, const std::vector&lt; double &gt; &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a9f6f99197d8379496126a1a48021d149</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Element * &gt; &amp;</type>
      <name>getElements</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a503b5f7191b709f9ed92a7f7f3530394</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>add</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ae0e20ec9697abbbff4eb5ca7f06c04f7</anchor>
      <arglist>(const _T &amp;d, const double w)</arglist>
    </member>
    <member kind="function">
      <type>_T &amp;</type>
      <name>sample</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a9eabafd0857350a3c70b2c5e0cb8709b</anchor>
      <arglist>(double r) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a5a6869bcc93cf5b5483048cd26dcb635</anchor>
      <arglist>(Element *elem, const double w)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWeight</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a5d521366fafb2030f496268386a2494b</anchor>
      <arglist>(const Element *elem) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>abb42f3f0ae997173f6d4368c5d5aec6e</anchor>
      <arglist>(Element *elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>acaa1582a3143b6d282186d6c75dd8cf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>aa4532134f60295236ebefee210b73313</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const _T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a83f3f0380ac1eed3a0b6d04603150b35</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a207bc400e0fc68265f9076538419c58d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printTree</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a122f69b2622ec5708070c111fab2347b</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::PDF::Element</name>
    <filename>classompl_1_1PDF_1_1Element.html</filename>
    <member kind="variable">
      <type>_T</type>
      <name>data_</name>
      <anchorfile>classompl_1_1PDF_1_1Element.html</anchorfile>
      <anchor>a74bab4cc2921bfdd11012d34fca1d6f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::Permutation</name>
    <filename>classompl_1_1Permutation.html</filename>
    <member kind="function">
      <type></type>
      <name>Permutation</name>
      <anchorfile>classompl_1_1Permutation.html</anchorfile>
      <anchor>acb149deb21b2337d7ce463f1babf5e28</anchor>
      <arglist>(std::size_t n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>permute</name>
      <anchorfile>classompl_1_1Permutation.html</anchorfile>
      <anchor>ac69487500e408e9c4e135625c4a1d861</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::PPM</name>
    <filename>classompl_1_1PPM.html</filename>
    <class kind="struct">ompl::PPM::Color</class>
    <member kind="function">
      <type>void</type>
      <name>loadFile</name>
      <anchorfile>classompl_1_1PPM.html</anchorfile>
      <anchor>a2a2e18b226ae88b23ea4d0b8e50b5a38</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveFile</name>
      <anchorfile>classompl_1_1PPM.html</anchorfile>
      <anchor>af035ef0485e02411c0e6d4c7066c50ed</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getWidth</name>
      <anchorfile>classompl_1_1PPM.html</anchorfile>
      <anchor>a4fa42bc472dae1a2f5894e4aebd94bd8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getHeight</name>
      <anchorfile>classompl_1_1PPM.html</anchorfile>
      <anchor>a995055996f5cc3349fa1b8fff65bcc69</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classompl_1_1PPM.html</anchorfile>
      <anchor>ad3950fc7b8768e36f0c77cd65c834f67</anchor>
      <arglist>(unsigned int width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classompl_1_1PPM.html</anchorfile>
      <anchor>af992ebc83113f5c5a3a43c7b3f66b0e7</anchor>
      <arglist>(unsigned int height)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Color &gt; &amp;</type>
      <name>getPixels</name>
      <anchorfile>classompl_1_1PPM.html</anchorfile>
      <anchor>a83ef6cd8ca3bdc32b1c045711476a892</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Color &gt; &amp;</type>
      <name>getPixels</name>
      <anchorfile>classompl_1_1PPM.html</anchorfile>
      <anchor>a52b6aad2f738e99847153c9600c573fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Color &amp;</type>
      <name>getPixel</name>
      <anchorfile>classompl_1_1PPM.html</anchorfile>
      <anchor>a296f38c40c3127c79b9f2aad015e0258</anchor>
      <arglist>(const int row, const int col) const </arglist>
    </member>
    <member kind="function">
      <type>Color &amp;</type>
      <name>getPixel</name>
      <anchorfile>classompl_1_1PPM.html</anchorfile>
      <anchor>a13896ca755f07d350a3d7a4d95f16674</anchor>
      <arglist>(const int row, const int col)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::PPM::Color</name>
    <filename>structompl_1_1PPM_1_1Color.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::ProlateHyperspheroid</name>
    <filename>classompl_1_1ProlateHyperspheroid.html</filename>
    <member kind="function">
      <type></type>
      <name>ProlateHyperspheroid</name>
      <anchorfile>classompl_1_1ProlateHyperspheroid.html</anchorfile>
      <anchor>af062656026512ff07095eaf6ff0d633d</anchor>
      <arglist>(unsigned int n, const double focus1[], const double focus2[])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransverseDiameter</name>
      <anchorfile>classompl_1_1ProlateHyperspheroid.html</anchorfile>
      <anchor>a76a16bf0a6e4d69a2cb9b3b53e520c4a</anchor>
      <arglist>(double transverseDiameter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform</name>
      <anchorfile>classompl_1_1ProlateHyperspheroid.html</anchorfile>
      <anchor>aa47ff42aaa76a1cc325d44180469e483</anchor>
      <arglist>(const double sphere[], double phs[]) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInPhs</name>
      <anchorfile>classompl_1_1ProlateHyperspheroid.html</anchorfile>
      <anchor>af4c55f844556afad50f35bea486bdeef</anchor>
      <arglist>(const double point[]) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOnPhs</name>
      <anchorfile>classompl_1_1ProlateHyperspheroid.html</anchorfile>
      <anchor>abe0d0fc3a4a62ab8673a33c71e846703</anchor>
      <arglist>(const double point[]) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getPhsDimension</name>
      <anchorfile>classompl_1_1ProlateHyperspheroid.html</anchorfile>
      <anchor>a61ed21e6bea6ac858c964953c60a36d1</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPhsMeasure</name>
      <anchorfile>classompl_1_1ProlateHyperspheroid.html</anchorfile>
      <anchor>a1cc29364d35534385344073a3ac43a71</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPhsMeasure</name>
      <anchorfile>classompl_1_1ProlateHyperspheroid.html</anchorfile>
      <anchor>a3c03b0f7bc1db3ec601c277037a761fa</anchor>
      <arglist>(double tranDiam) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMinTransverseDiameter</name>
      <anchorfile>classompl_1_1ProlateHyperspheroid.html</anchorfile>
      <anchor>a40fe6e64cc9c9395f8a59111e99fd466</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPathLength</name>
      <anchorfile>classompl_1_1ProlateHyperspheroid.html</anchorfile>
      <anchor>a0f698683bbccb3bf78739e2cbc89e30c</anchor>
      <arglist>(const double point[]) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDimension</name>
      <anchorfile>classompl_1_1ProlateHyperspheroid.html</anchorfile>
      <anchor>a3dd3e13f4ffa970d95b62865bcd1c48f</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::RNG</name>
    <filename>classompl_1_1RNG.html</filename>
    <member kind="function">
      <type></type>
      <name>RNG</name>
      <anchorfile>classompl_1_1RNG.html</anchorfile>
      <anchor>a95878438c4bc3fa1b8c000543a91d16e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RNG</name>
      <anchorfile>classompl_1_1RNG.html</anchorfile>
      <anchor>a15ad25463fdddf00f028db5da2cecf1a</anchor>
      <arglist>(std::uint_fast32_t localSeed)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>uniform01</name>
      <anchorfile>classompl_1_1RNG.html</anchorfile>
      <anchor>af9450941c808fc53f30173c364bbfd25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>uniformReal</name>
      <anchorfile>classompl_1_1RNG.html</anchorfile>
      <anchor>a691ddf8d21630c69d4ba3f8b1f8c449f</anchor>
      <arglist>(double lower_bound, double upper_bound)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>uniformInt</name>
      <anchorfile>classompl_1_1RNG.html</anchorfile>
      <anchor>ad122fd3309d2a2c72ca1dd665c1a2803</anchor>
      <arglist>(int lower_bound, int upper_bound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>uniformBool</name>
      <anchorfile>classompl_1_1RNG.html</anchorfile>
      <anchor>acf5a5eac4ab0ffc8aa337facac60c491</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gaussian01</name>
      <anchorfile>classompl_1_1RNG.html</anchorfile>
      <anchor>a75aacd082ebc60a2e63120d6a384f835</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gaussian</name>
      <anchorfile>classompl_1_1RNG.html</anchorfile>
      <anchor>a13631925b09cc5bc7d977240bf67cfd3</anchor>
      <arglist>(double mean, double stddev)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>halfNormalReal</name>
      <anchorfile>classompl_1_1RNG.html</anchorfile>
      <anchor>aa042546370a4144a4250ee30052496d5</anchor>
      <arglist>(double r_min, double r_max, double focus=3.0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>halfNormalInt</name>
      <anchorfile>classompl_1_1RNG.html</anchorfile>
      <anchor>a26c0a9c26d9a34e2f6004536dc92bf1d</anchor>
      <arglist>(int r_min, int r_max, double focus=3.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quaternion</name>
      <anchorfile>classompl_1_1RNG.html</anchorfile>
      <anchor>a082bc8ed509e999acea09880447a7955</anchor>
      <arglist>(double value[4])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eulerRPY</name>
      <anchorfile>classompl_1_1RNG.html</anchorfile>
      <anchor>a2a356471002c4ffe5dbf5aa5bfea9ef6</anchor>
      <arglist>(double value[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLocalSeed</name>
      <anchorfile>classompl_1_1RNG.html</anchorfile>
      <anchor>a49c340e231c073a5acb44f7b99a2ebc9</anchor>
      <arglist>(std::uint_fast32_t localSeed)</arglist>
    </member>
    <member kind="function">
      <type>std::uint_fast32_t</type>
      <name>getLocalSeed</name>
      <anchorfile>classompl_1_1RNG.html</anchorfile>
      <anchor>a06162e1867b0bcabb2f361db07a43a70</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uniformNormalVector</name>
      <anchorfile>classompl_1_1RNG.html</anchorfile>
      <anchor>aa5394020e887f9f836bf01ae00c7a08f</anchor>
      <arglist>(unsigned int n, double value[])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uniformInBall</name>
      <anchorfile>classompl_1_1RNG.html</anchorfile>
      <anchor>a18270e83630f7710ea0aad2298e26f08</anchor>
      <arglist>(double r, unsigned int n, double value[])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setSeed</name>
      <anchorfile>classompl_1_1RNG.html</anchorfile>
      <anchor>a5a2d71d1c12f13707457c9461807ee2c</anchor>
      <arglist>(std::uint_fast32_t seed)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::uint_fast32_t</type>
      <name>getSeed</name>
      <anchorfile>classompl_1_1RNG.html</anchorfile>
      <anchor>a9b59291cc9599888d41a1b7a748aa5fe</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::tools::Benchmark</name>
    <filename>classompl_1_1tools_1_1Benchmark.html</filename>
    <class kind="struct">ompl::tools::Benchmark::CompleteExperiment</class>
    <class kind="struct">ompl::tools::Benchmark::PlannerExperiment</class>
    <class kind="struct">ompl::tools::Benchmark::Request</class>
    <class kind="struct">ompl::tools::Benchmark::Status</class>
    <member kind="typedef">
      <type>std::map&lt; std::string, std::string &gt;</type>
      <name>RunProperties</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a33e431d5d9eefbca8abc17e6a5fabdf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(const base::PlannerPtr &amp;)&gt;</type>
      <name>PreSetupEvent</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>ab7f8940729e65af625f17be38a285090</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(const base::PlannerPtr &amp;, RunProperties &amp;)&gt;</type>
      <name>PostSetupEvent</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a71b6da04735d89b71f84ccb430a0729e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Benchmark</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>ade874bfcc461409dbe925aa6ee0bcbd3</anchor>
      <arglist>(geometric::SimpleSetup &amp;setup, const std::string &amp;name=std::string())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Benchmark</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a85887f3c709f330558df3f9c2217d177</anchor>
      <arglist>(control::SimpleSetup &amp;setup, const std::string &amp;name=std::string())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addExperimentParameter</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>afab48f173edc785ee005301642b1afb1</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;type, const std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, std::string &gt; &amp;</type>
      <name>getExperimentParameters</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a8cd054efce49d0b6b37093f0ec9e50b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numExperimentParameters</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>afaa63c8bffd1e9e34e63c951aa36d08c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExperimentName</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a5cd270d95be4b130654bb6f3b978badf</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getExperimentName</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a1fc5d801f52c5f946d890984d76384e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPlanner</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a86fdc0094b39debe8ee310a9e2de8e31</anchor>
      <arglist>(const base::PlannerPtr &amp;planner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPlannerAllocator</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a9641c6a479d33dc5e59a836bdd511fa4</anchor>
      <arglist>(const base::PlannerAllocator &amp;pa)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearPlanners</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a3dd03001e2d2afb0dc209fe8f6980f58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlannerSwitchEvent</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a641cd9b520392c02eefd1ce96ec07a4e</anchor>
      <arglist>(const PreSetupEvent &amp;event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPreRunEvent</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a405e0a2857e17e93992ca9e642618787</anchor>
      <arglist>(const PreSetupEvent &amp;event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPostRunEvent</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a8c97a673cf3d27b4c8d6dbc592b56ce4</anchor>
      <arglist>(const PostSetupEvent &amp;event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>benchmark</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a3257cb8dccc15037e81c0f235c61a7e8</anchor>
      <arglist>(const Request &amp;req)</arglist>
    </member>
    <member kind="function">
      <type>const Status &amp;</type>
      <name>getStatus</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>aee286c4153d9e6ff1fe5e71b3d00a70e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CompleteExperiment &amp;</type>
      <name>getRecordedExperimentData</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a2182799517045ade27e2f34a86cd6656</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>saveResultsToStream</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a418eab9311edb1c22ab1ab3d71ff1e26</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>saveResultsToFile</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a9f50b8c4131b31cc93749c66e66e2de8</anchor>
      <arglist>(const char *filename) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>saveResultsToFile</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>af3a6a5e912d5cf8e4199892ce3246913</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>geometric::SimpleSetup *</type>
      <name>gsetup_</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a8a562ed0d721cffc94c8aa0a2e565a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>control::SimpleSetup *</type>
      <name>csetup_</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a74f68df4ca4750779c5a2d5ef202c27e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; base::PlannerPtr &gt;</type>
      <name>planners_</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a3e166b0c8a0e8c935ec5b5f8627ed119</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CompleteExperiment</type>
      <name>exp_</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a6a7267b64dbde28d9b505ffac55c217e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Status</type>
      <name>status_</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a28b6c76500d022dba4a8bc075bdcc5d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PreSetupEvent</type>
      <name>plannerSwitch_</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a1bf6e6b434ae98d6d54808d5e65ded43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PreSetupEvent</type>
      <name>preRun_</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>ab3b2565d2fb0362bff5fbdd0d0080159</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PostSetupEvent</type>
      <name>postRun_</name>
      <anchorfile>classompl_1_1tools_1_1Benchmark.html</anchorfile>
      <anchor>a48b0e489b98ae6d5801f730467430bc1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::tools::Benchmark::CompleteExperiment</name>
    <filename>structompl_1_1tools_1_1Benchmark_1_1CompleteExperiment.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1CompleteExperiment.html</anchorfile>
      <anchor>afbe731482939c3147ef29b7e66a417d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; PlannerExperiment &gt;</type>
      <name>planners</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1CompleteExperiment.html</anchorfile>
      <anchor>a7341ae70fc4d72e580d56df8aebef2e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>maxTime</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1CompleteExperiment.html</anchorfile>
      <anchor>a6e2afb5aa508d11d99c8c900ac185e31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>maxMem</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1CompleteExperiment.html</anchorfile>
      <anchor>acf7f8e1be434e3d9232985a1a1fe8bb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>runCount</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1CompleteExperiment.html</anchorfile>
      <anchor>a9c8a6e8d4bef143a7bf69ec4ea8e2c67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>time::point</type>
      <name>startTime</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1CompleteExperiment.html</anchorfile>
      <anchor>a1ad2ed8592172cb1d976584fa29d9c30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>totalDuration</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1CompleteExperiment.html</anchorfile>
      <anchor>a4ff470f8a256307379d1b739df30ba1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>setupInfo</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1CompleteExperiment.html</anchorfile>
      <anchor>ae421cc31f15ae5f738618da2d3a94d1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::uint32_t</type>
      <name>seed</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1CompleteExperiment.html</anchorfile>
      <anchor>ae7ba23aa3cb97e4f6e6e9ce817775024</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>host</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1CompleteExperiment.html</anchorfile>
      <anchor>ac282bd0d6ecc36a2ff8fb66dd8a05c02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>cpuInfo</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1CompleteExperiment.html</anchorfile>
      <anchor>a4aa91e531666d7140810a65b2e489b2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; std::string, std::string &gt;</type>
      <name>parameters</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1CompleteExperiment.html</anchorfile>
      <anchor>a7012b4d10d4fe0280f8403e7f5f67860</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::tools::Benchmark::PlannerExperiment</name>
    <filename>structompl_1_1tools_1_1Benchmark_1_1PlannerExperiment.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1PlannerExperiment.html</anchorfile>
      <anchor>ac03fb585834a6e081ece6f6ccc402158</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; RunProperties &gt;</type>
      <name>runs</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1PlannerExperiment.html</anchorfile>
      <anchor>abbfb1d6bae161a16ea1f2d08b41bf4e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>progressPropertyNames</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1PlannerExperiment.html</anchorfile>
      <anchor>a8cab8dc9d760daa1726f055ac6d2252e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; RunProgressData &gt;</type>
      <name>runsProgressData</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1PlannerExperiment.html</anchorfile>
      <anchor>ae181cf473036c591985bd0a2d8dea589</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RunProperties</type>
      <name>common</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1PlannerExperiment.html</anchorfile>
      <anchor>abc46f29154525e0ee1e18331a1d9ffa4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::tools::Benchmark::Request</name>
    <filename>structompl_1_1tools_1_1Benchmark_1_1Request.html</filename>
    <member kind="function">
      <type></type>
      <name>Request</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1Request.html</anchorfile>
      <anchor>ae8ea85b8e56595ce42d4fa6372c38eb6</anchor>
      <arglist>(double maxTime=5.0, double maxMem=4096.0, unsigned int runCount=100, double timeBetweenUpdates=0.05, bool displayProgress=true, bool saveConsoleOutput=true, bool useThreads=true, bool simplify=true)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>maxTime</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1Request.html</anchorfile>
      <anchor>ae29e119a2a3ca7d1325f701159a7636a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>maxMem</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1Request.html</anchorfile>
      <anchor>a12b3d959f8e7349120cdd87ef21f72b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>runCount</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1Request.html</anchorfile>
      <anchor>a0252082e35f936c93c86eabf0d713e01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>timeBetweenUpdates</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1Request.html</anchorfile>
      <anchor>a7f308d71127840e12c6fedfe2668d652</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>displayProgress</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1Request.html</anchorfile>
      <anchor>a0e63ef873358346cfb78a69121dfd2ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>saveConsoleOutput</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1Request.html</anchorfile>
      <anchor>a882d384685f86176fbb441c256d34044</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>useThreads</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1Request.html</anchorfile>
      <anchor>a1c188da13dfe7bf45d2a56e3f3c60b43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>simplify</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1Request.html</anchorfile>
      <anchor>af7c98e06da0e8b8181a5feec8b57ac6d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::tools::Benchmark::Status</name>
    <filename>structompl_1_1tools_1_1Benchmark_1_1Status.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>running</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1Status.html</anchorfile>
      <anchor>a4fa5303fcbae2c3ca68e050bc220eb6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>activePlanner</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1Status.html</anchorfile>
      <anchor>ae55a5240665b668a98d772f20dd8e896</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>activeRun</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1Status.html</anchorfile>
      <anchor>a898b2051fc610aac110391b821ddbe19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>progressPercentage</name>
      <anchorfile>structompl_1_1tools_1_1Benchmark_1_1Status.html</anchorfile>
      <anchor>ac8f03ae95e93e777ad9742aa7bcde3be</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::tools::DynamicTimeWarp</name>
    <filename>classompl_1_1tools_1_1DynamicTimeWarp.html</filename>
    <member kind="function">
      <type>double</type>
      <name>calcDTWDistance</name>
      <anchorfile>classompl_1_1tools_1_1DynamicTimeWarp.html</anchorfile>
      <anchor>a7f40e0b6eab241dfec596719f57724b1</anchor>
      <arglist>(const og::PathGeometric &amp;path1, const og::PathGeometric &amp;path2) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPathsScore</name>
      <anchorfile>classompl_1_1tools_1_1DynamicTimeWarp.html</anchorfile>
      <anchor>a80595c13fa631168499fc13769928a95</anchor>
      <arglist>(const og::PathGeometric &amp;path1, const og::PathGeometric &amp;path2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::tools::ExperienceSetup</name>
    <filename>classompl_1_1tools_1_1ExperienceSetup.html</filename>
    <base>ompl::geometric::SimpleSetup</base>
    <class kind="struct">ompl::tools::ExperienceSetup::ExperienceLog</class>
    <class kind="struct">ompl::tools::ExperienceSetup::ExperienceStats</class>
    <member kind="function">
      <type></type>
      <name>ExperienceSetup</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>af8b43ed0577cd1c6ff65cb20e0205817</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExperienceSetup</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>a17e117263e19ed9060da471fad0f7834</anchor>
      <arglist>(const base::StateSpacePtr &amp;space)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logInitialize</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>a2a274a70a325bc7bf478b2559b9ddf68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertLogToString</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>a4c3ad0eb4683cdb94c0905a340a5ec26</anchor>
      <arglist>(const ExperienceLog &amp;log)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>printResultsInfo</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>a28126dd6db845bebfff2c997712c87db</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>printLogs</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>af72628879ecdc2678669e03742bc4a3b</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveDataLog</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>a919d07ec1a21340bebf512693665be76</anchor>
      <arglist>(std::ostream &amp;out=std::cout)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setRepairPlanner</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>ab4357db72bb8814d183cdcd6ba43b9e2</anchor>
      <arglist>(const base::PlannerPtr &amp;planner)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>save</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>a3e2e150b39d27972485dcd8b3aedb5c5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>saveIfChanged</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>a4c3684e487702baf56058004327e7dfa</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enablePlanningFromRecall</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>a3a88a2c9b4dbb55b8b12562391cc5846</anchor>
      <arglist>(bool enable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enablePlanningFromScratch</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>a00682838d91d3f9af46ba8de4d652068</anchor>
      <arglist>(bool enable)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getAllPlannerDatas</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>a244195f53ce1fa5b869825d4abc29cd1</anchor>
      <arglist>(std::vector&lt; ompl::base::PlannerDataPtr &gt; &amp;plannerDatas) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>getExperiencesCount</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>a25c9782638c43e1e20518ecb00266afc</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getFilePath</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>a460ca4833fa79dcb65a418cca4037226</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setFilePath</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>a1770985c7547dfb08beeb5b332f1d2aa</anchor>
      <arglist>(const std::string &amp;filePath)</arglist>
    </member>
    <member kind="function">
      <type>const ExperienceStats &amp;</type>
      <name>getStats</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>aac752701ff4f456d6e7ba1da3732a42b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>doPostProcessing</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>aa5e8cf4418760ccccc5c1c55f6865d69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>recallEnabled_</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>ad1562726a66a34e2d0bd2fdfb80a9bfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>scratchEnabled_</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>aebb90ec592e29bddf24a4af092e65cbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>filePath_</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>a1cfa5e779e8f2704c93517c96ca162da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExperienceStats</type>
      <name>stats_</name>
      <anchorfile>classompl_1_1tools_1_1ExperienceSetup.html</anchorfile>
      <anchor>a9e9c568354ff6c2de85e3a341c747631</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ompl::tools::ExperienceSetup::ExperienceLog</name>
    <filename>structompl_1_1tools_1_1ExperienceSetup_1_1ExperienceLog.html</filename>
  </compound>
  <compound kind="struct">
    <name>ompl::tools::ExperienceSetup::ExperienceStats</name>
    <filename>structompl_1_1tools_1_1ExperienceSetup_1_1ExperienceStats.html</filename>
  </compound>
  <compound kind="class">
    <name>ompl::tools::Lightning</name>
    <filename>classompl_1_1tools_1_1Lightning.html</filename>
    <base>ompl::tools::ExperienceSetup</base>
    <member kind="function">
      <type></type>
      <name>Lightning</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>af148743f9ddd1ab99bf6eeb994b4fd1b</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Lightning</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>af60e1927f5d6d9c90e1b203f1363b2ef</anchor>
      <arglist>(const base::StateSpacePtr &amp;space)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printResultsInfo</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>a0753d5f3f5d0bd289cc231136995f300</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printLogs</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>a15a62244203ce7537624c58a3c6ca77e</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function">
      <type>ompl::geometric::LightningRetrieveRepair &amp;</type>
      <name>getLightningRetrieveRepairPlanner</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>a0113631b91330417e600d7b0afdc5914</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRepairPlanner</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>ae6f884d90f33b45a17b4843c4921daa9</anchor>
      <arglist>(const base::PlannerPtr &amp;planner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlannerAllocator</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>ad68b628a897631ca4c0598d1bc9ecf1b</anchor>
      <arglist>(const base::PlannerAllocator &amp;pa)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>a7daff65868cb3d18a4ca523fc8775ecb</anchor>
      <arglist>(double time=1.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>a070789e9b3c38a818431d846a6df1e35</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>save</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>ae0c49b4321c5455fc5d188c4230df1ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>saveIfChanged</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>a87f35f56f474bdd962c8c2a0609f3cde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>ae45894b0b9a24cf001ff387ed912db11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>a0c4abe1a44307387c4bff71edc8f150d</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>aeb6245205f59ece1478d641579090dd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAllPlannerDatas</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>a37bbf501ade19c5c4b523d176e1a3880</anchor>
      <arglist>(std::vector&lt; ompl::base::PlannerDataPtr &gt; &amp;plannerDatas) const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getExperiencesCount</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>a4300df54346e44c7197934d3f6114f45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertPlannerData</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>a5a4aac266b63f485ad6d6570564a6470</anchor>
      <arglist>(const ompl::base::PlannerDataPtr plannerData, ompl::geometric::PathGeometric &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>const ompl::tools::DynamicTimeWarpPtr &amp;</type>
      <name>getDynamicTimeWarp</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>a280611ac66407f5f592ef287c0ac268e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>reversePathIfNecessary</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>aae1345dd7412346e8c35bc92151e4759</anchor>
      <arglist>(ompl::geometric::PathGeometric &amp;path1, ompl::geometric::PathGeometric &amp;path2)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::PlannerPtr</type>
      <name>rrPlanner_</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>aacb5a20e2734797c87fceaab13e520bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ompl::tools::ParallelPlanPtr</type>
      <name>pp_</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>aa25e598cfef46554837f859b26ca3c3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ompl::tools::LightningDBPtr</type>
      <name>experienceDB_</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>a0a42b706f228b4bf3b01ff3d1fefa904</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ompl::tools::DynamicTimeWarpPtr</type>
      <name>dtw_</name>
      <anchorfile>classompl_1_1tools_1_1Lightning.html</anchorfile>
      <anchor>afe2a5c7f41d978e90a66d81a20920a6c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::tools::LightningDB</name>
    <filename>classompl_1_1tools_1_1LightningDB.html</filename>
    <member kind="function">
      <type></type>
      <name>LightningDB</name>
      <anchorfile>classompl_1_1tools_1_1LightningDB.html</anchorfile>
      <anchor>a2f66cffe479034cef4d0d0f54edc3cb3</anchor>
      <arglist>(const base::StateSpacePtr &amp;space)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LightningDB</name>
      <anchorfile>classompl_1_1tools_1_1LightningDB.html</anchorfile>
      <anchor>a2bc311d02286154535987b6375317f37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load</name>
      <anchorfile>classompl_1_1tools_1_1LightningDB.html</anchorfile>
      <anchor>adac169bc8e2d1ac32e500a6583bde8d3</anchor>
      <arglist>(const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPath</name>
      <anchorfile>classompl_1_1tools_1_1LightningDB.html</anchorfile>
      <anchor>ab18f978add52fa4727966bf351a8bd6d</anchor>
      <arglist>(geometric::PathGeometric &amp;solutionPath, double &amp;insertionTime)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>saveIfChanged</name>
      <anchorfile>classompl_1_1tools_1_1LightningDB.html</anchorfile>
      <anchor>abfeebec4c7372bbda89b1aa2a6ae9645</anchor>
      <arglist>(const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>save</name>
      <anchorfile>classompl_1_1tools_1_1LightningDB.html</anchorfile>
      <anchor>abf4408321190f604f4ac9c0d30c0c5b1</anchor>
      <arglist>(const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAllPlannerDatas</name>
      <anchorfile>classompl_1_1tools_1_1LightningDB.html</anchorfile>
      <anchor>ac13f6b84e21bdd57de22f30b92d3da0e</anchor>
      <arglist>(std::vector&lt; ompl::base::PlannerDataPtr &gt; &amp;plannerDatas) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ompl::base::PlannerDataPtr &gt;</type>
      <name>findNearestStartGoal</name>
      <anchorfile>classompl_1_1tools_1_1LightningDB.html</anchorfile>
      <anchor>af38421240dd876aa4c5b5a0fdacf3fb8</anchor>
      <arglist>(int nearestK, const base::State *start, const base::State *goal)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getExperiencesCount</name>
      <anchorfile>classompl_1_1tools_1_1LightningDB.html</anchorfile>
      <anchor>ae19f2d410faa1eadb11b78eaf3adaf2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getStatesCount</name>
      <anchorfile>classompl_1_1tools_1_1LightningDB.html</anchorfile>
      <anchor>ac0699bc4d9b47aa854c21a06693c3545</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumUnsavedPaths</name>
      <anchorfile>classompl_1_1tools_1_1LightningDB.html</anchorfile>
      <anchor>afdebb84ec700e9357ebc8857a6809a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classompl_1_1tools_1_1LightningDB.html</anchorfile>
      <anchor>af4dcfa3862443cb63e8adaa8817ea976</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::SpaceInformationPtr</type>
      <name>si_</name>
      <anchorfile>classompl_1_1tools_1_1LightningDB.html</anchorfile>
      <anchor>a743877fc7aafd42d80166c341e751504</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ompl::base::PlannerDataStorage</type>
      <name>plannerDataStorage_</name>
      <anchorfile>classompl_1_1tools_1_1LightningDB.html</anchorfile>
      <anchor>aa9c6d05ba4d4109d520a755995bf7ba0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::tools::OptimizePlan</name>
    <filename>classompl_1_1tools_1_1OptimizePlan.html</filename>
    <member kind="function">
      <type></type>
      <name>OptimizePlan</name>
      <anchorfile>classompl_1_1tools_1_1OptimizePlan.html</anchorfile>
      <anchor>a987dce1eaf7644ee7e23a2d3938ad060</anchor>
      <arglist>(const base::ProblemDefinitionPtr &amp;pdef)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPlanner</name>
      <anchorfile>classompl_1_1tools_1_1OptimizePlan.html</anchorfile>
      <anchor>a10d2adad0c5bcbe0c7c1d247db2eb9b9</anchor>
      <arglist>(const base::PlannerPtr &amp;planner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPlannerAllocator</name>
      <anchorfile>classompl_1_1tools_1_1OptimizePlan.html</anchorfile>
      <anchor>a8132f5c49c22b05d72e8146169006c65</anchor>
      <arglist>(const base::PlannerAllocator &amp;pa)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearPlanners</name>
      <anchorfile>classompl_1_1tools_1_1OptimizePlan.html</anchorfile>
      <anchor>a2246259e1289280eb7c009ae98b7f868</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const base::ProblemDefinitionPtr &amp;</type>
      <name>getProblemDefinition</name>
      <anchorfile>classompl_1_1tools_1_1OptimizePlan.html</anchorfile>
      <anchor>a57947dd196e4293fbd56878184035454</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1tools_1_1OptimizePlan.html</anchorfile>
      <anchor>a7defd2cde3ea43b4677213aca089a702</anchor>
      <arglist>(double solveTime, unsigned int maxSol=10, unsigned int nthreads=1)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParallelPlan</type>
      <name>pp_</name>
      <anchorfile>classompl_1_1tools_1_1OptimizePlan.html</anchorfile>
      <anchor>a58e79fbd8e80b02288779d33fce39a08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; base::PlannerPtr &gt;</type>
      <name>planners_</name>
      <anchorfile>classompl_1_1tools_1_1OptimizePlan.html</anchorfile>
      <anchor>aaa6bccd0a8dce8d86831a8ecb3ff8fbb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::tools::ParallelPlan</name>
    <filename>classompl_1_1tools_1_1ParallelPlan.html</filename>
    <member kind="function">
      <type></type>
      <name>ParallelPlan</name>
      <anchorfile>classompl_1_1tools_1_1ParallelPlan.html</anchorfile>
      <anchor>a948f7be33f9278616b2d6544f794cff4</anchor>
      <arglist>(const base::ProblemDefinitionPtr &amp;pdef)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPlanner</name>
      <anchorfile>classompl_1_1tools_1_1ParallelPlan.html</anchorfile>
      <anchor>a5249639994ad99171ec20d927c024d9c</anchor>
      <arglist>(const base::PlannerPtr &amp;planner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPlannerAllocator</name>
      <anchorfile>classompl_1_1tools_1_1ParallelPlan.html</anchorfile>
      <anchor>a6b50af9f331814868450ea764c56ac4d</anchor>
      <arglist>(const base::PlannerAllocator &amp;pa)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearHybridizationPaths</name>
      <anchorfile>classompl_1_1tools_1_1ParallelPlan.html</anchorfile>
      <anchor>af134c34398a1e28ce9cdfac193429754</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearPlanners</name>
      <anchorfile>classompl_1_1tools_1_1ParallelPlan.html</anchorfile>
      <anchor>ac83642ddb6166656e07d8ce8abd6fcd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const base::ProblemDefinitionPtr &amp;</type>
      <name>getProblemDefinition</name>
      <anchorfile>classompl_1_1tools_1_1ParallelPlan.html</anchorfile>
      <anchor>a5dcc0e605cab8525acd77409c6c0de75</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1tools_1_1ParallelPlan.html</anchorfile>
      <anchor>adec2cb17fadfd6232577f8e7d572f8f1</anchor>
      <arglist>(double solveTime, bool hybridize=true)</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1tools_1_1ParallelPlan.html</anchorfile>
      <anchor>a81a168d8259aa61aa213da66e13722eb</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc, bool hybridize=true)</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1tools_1_1ParallelPlan.html</anchorfile>
      <anchor>acfcbc69d5e3a871a83c3ed024aff959e</anchor>
      <arglist>(double solveTime, std::size_t minSolCount, std::size_t maxSolCount, bool hybridize=true)</arglist>
    </member>
    <member kind="function">
      <type>base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1tools_1_1ParallelPlan.html</anchorfile>
      <anchor>aff62b7ded2affd4f95b268f5b329137c</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc, std::size_t minSolCount, std::size_t maxSolCount, bool hybridize=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>solveOne</name>
      <anchorfile>classompl_1_1tools_1_1ParallelPlan.html</anchorfile>
      <anchor>aac59a889361c61883f064f47263413cf</anchor>
      <arglist>(base::Planner *planner, std::size_t minSolCount, const base::PlannerTerminationCondition *ptc)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>solveMore</name>
      <anchorfile>classompl_1_1tools_1_1ParallelPlan.html</anchorfile>
      <anchor>a9e0e35fc1ef0885798ed1635ae2d9df9</anchor>
      <arglist>(base::Planner *planner, std::size_t minSolCount, std::size_t maxSolCount, const base::PlannerTerminationCondition *ptc)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::ProblemDefinitionPtr</type>
      <name>pdef_</name>
      <anchorfile>classompl_1_1tools_1_1ParallelPlan.html</anchorfile>
      <anchor>aa0673c19459faaa24da1a1685483c412</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; base::PlannerPtr &gt;</type>
      <name>planners_</name>
      <anchorfile>classompl_1_1tools_1_1ParallelPlan.html</anchorfile>
      <anchor>af7103aa29f496c2ecc2e471cb7e18e60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>geometric::PathHybridizationPtr</type>
      <name>phybrid_</name>
      <anchorfile>classompl_1_1tools_1_1ParallelPlan.html</anchorfile>
      <anchor>aea34f6b7d308d255a2a45e3f4bf42f6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::mutex</type>
      <name>phlock_</name>
      <anchorfile>classompl_1_1tools_1_1ParallelPlan.html</anchorfile>
      <anchor>ad375de2e9cd3af18c1575d41adb7def0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::tools::PlannerMonitor</name>
    <filename>classompl_1_1tools_1_1PlannerMonitor.html</filename>
    <member kind="function">
      <type></type>
      <name>PlannerMonitor</name>
      <anchorfile>classompl_1_1tools_1_1PlannerMonitor.html</anchorfile>
      <anchor>aa6230dcf1073ecf535620adf713924cd</anchor>
      <arglist>(const base::PlannerPtr &amp;planner, std::ostream &amp;out, double period=0.5, bool autoStart=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PlannerMonitor</name>
      <anchorfile>classompl_1_1tools_1_1PlannerMonitor.html</anchorfile>
      <anchor>a22ad6a17d1d23d4c25e6b8b9b49af4a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startMonitor</name>
      <anchorfile>classompl_1_1tools_1_1PlannerMonitor.html</anchorfile>
      <anchor>a675f2056ed96b680489cfed76de1388b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopMonitor</name>
      <anchorfile>classompl_1_1tools_1_1PlannerMonitor.html</anchorfile>
      <anchor>ad050a2eb4bb5e381695e1ae55a0fd367</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::tools::Profiler</name>
    <filename>classompl_1_1tools_1_1Profiler.html</filename>
    <class kind="class">ompl::tools::Profiler::ScopedBlock</class>
    <class kind="class">ompl::tools::Profiler::ScopedStart</class>
    <member kind="function">
      <type></type>
      <name>Profiler</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>ae5e4b7c2dadc5e4d671b3b4a19a738ea</anchor>
      <arglist>(bool printOnDestroy=false, bool autoStart=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Profiler</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a3fe921fbbd004300bf7aec938a5b566c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>ad5a95b01527f558c61b5a60734e61557</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>af5ea8d2ca7c920e0afb306469141794c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>ab0d0af1965eb54113e8b8dcc17eeaa71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>event</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>afc2f152cc2b136d2ea7ee4cff530eb7f</anchor>
      <arglist>(const std::string &amp;name, const unsigned int times=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>average</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>ae264470e9c5534a01a3b652138d704ef</anchor>
      <arglist>(const std::string &amp;name, const double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>begin</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a73f8db5bef259e72aa7d945d40eec6a9</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>end</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>af8ff1c4e783163740d3be615dfd50f50</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a64844f64105f7bb5d39ea259e0e00fa7</anchor>
      <arglist>(std::ostream &amp;out=std::cout, bool merge=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>console</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a4b148a821f6d8855008a6e528c3c22c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>running</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a0f11dcc743f832943ed94edf44926fdc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Profiler &amp;</type>
      <name>Instance</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a6f65deca6dcad1a282dc967fd1ce1fc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Start</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>abffe7c4627124c028b1541b35f5ad59e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Stop</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a96bd99ebef801eda91dd731e749f5598</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Clear</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>af750a3320ddcc6282e9c45779efd389d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Event</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>ae5deccf4701d811da70333a159674fb2</anchor>
      <arglist>(const std::string &amp;name, const unsigned int times=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Average</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a22a9c18b1332df658eac4bc31f757d58</anchor>
      <arglist>(const std::string &amp;name, const double value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Begin</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>abade0a7c40c3ee768fc1edaf49571cf6</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>End</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a79cc35d2e207cc15ce709a9fc3149c70</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Status</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>a4bdcb925cd61a10c5f50eb64046f2871</anchor>
      <arglist>(std::ostream &amp;out=std::cout, bool merge=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Console</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>ab88cc9ecd1d8a72aee5695680cb8484f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Running</name>
      <anchorfile>classompl_1_1tools_1_1Profiler.html</anchorfile>
      <anchor>ab8afd7647ac8b228ac64c3c94963f13c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::tools::Profiler::ScopedBlock</name>
    <filename>classompl_1_1tools_1_1Profiler_1_1ScopedBlock.html</filename>
    <member kind="function">
      <type></type>
      <name>ScopedBlock</name>
      <anchorfile>classompl_1_1tools_1_1Profiler_1_1ScopedBlock.html</anchorfile>
      <anchor>a3c213fe2f0e0a97b145d1c7d1ee9958b</anchor>
      <arglist>(const std::string &amp;name, Profiler &amp;prof=Profiler::Instance())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::tools::Profiler::ScopedStart</name>
    <filename>classompl_1_1tools_1_1Profiler_1_1ScopedStart.html</filename>
    <member kind="function">
      <type></type>
      <name>ScopedStart</name>
      <anchorfile>classompl_1_1tools_1_1Profiler_1_1ScopedStart.html</anchorfile>
      <anchor>a9a6a6c0c28acf4bb834c0dec97cf4028</anchor>
      <arglist>(Profiler &amp;prof=Profiler::Instance())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::tools::SelfConfig</name>
    <filename>classompl_1_1tools_1_1SelfConfig.html</filename>
    <member kind="function">
      <type></type>
      <name>SelfConfig</name>
      <anchorfile>classompl_1_1tools_1_1SelfConfig.html</anchorfile>
      <anchor>ad0dca5fbc79a2687b39aa2c8bb15143b</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si, const std::string &amp;context=std::string())</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getProbabilityOfValidState</name>
      <anchorfile>classompl_1_1tools_1_1SelfConfig.html</anchorfile>
      <anchor>a67305a8d57f0737733c25f4fb32b13ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAverageValidMotionLength</name>
      <anchorfile>classompl_1_1tools_1_1SelfConfig.html</anchorfile>
      <anchor>a9bb25d080de0eaaaaad1600eda88ee26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configureValidStateSamplingAttempts</name>
      <anchorfile>classompl_1_1tools_1_1SelfConfig.html</anchorfile>
      <anchor>a2af548317b0f4784dd862de0274cfa74</anchor>
      <arglist>(unsigned int &amp;attempts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configurePlannerRange</name>
      <anchorfile>classompl_1_1tools_1_1SelfConfig.html</anchorfile>
      <anchor>a65bff53ea4bc6f158342a856175ab9a6</anchor>
      <arglist>(double &amp;range)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configureProjectionEvaluator</name>
      <anchorfile>classompl_1_1tools_1_1SelfConfig.html</anchorfile>
      <anchor>a6af441eace888354bcc5afe172561d62</anchor>
      <arglist>(base::ProjectionEvaluatorPtr &amp;proj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classompl_1_1tools_1_1SelfConfig.html</anchorfile>
      <anchor>af74b2ea34f63d3629de7469ab4443268</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NearestNeighbors&lt; _T &gt; *</type>
      <name>getDefaultNearestNeighbors</name>
      <anchorfile>classompl_1_1tools_1_1SelfConfig.html</anchorfile>
      <anchor>a6234444fd75f10224dff2e1a342998ea</anchor>
      <arglist>(const base::Planner *planner)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static base::PlannerPtr</type>
      <name>getDefaultPlanner</name>
      <anchorfile>classompl_1_1tools_1_1SelfConfig.html</anchorfile>
      <anchor>ae9f747585a0c3fdc50667d9f8a39095d</anchor>
      <arglist>(const base::GoalPtr &amp;goal)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::tools::Thunder</name>
    <filename>classompl_1_1tools_1_1Thunder.html</filename>
    <base>ompl::tools::ExperienceSetup</base>
    <member kind="function">
      <type></type>
      <name>Thunder</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>a38d1a4f9f7f760f43593ea3cb24242b5</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Thunder</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>a2dff3b6c8944feecaae7e3591963afba</anchor>
      <arglist>(const base::StateSpacePtr &amp;space)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printResultsInfo</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>a06265ccf356daee9f3689526b9b7010a</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printLogs</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>aa709b7a2dcc7e31e6dd5bfc8f09d99ed</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function">
      <type>ompl::base::PlannerPtr &amp;</type>
      <name>getPlanner</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>af4eddbcd0610d3c84b192e76081144a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ompl::geometric::ThunderRetrieveRepair &amp;</type>
      <name>getRetrieveRepairPlanner</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>ae74368abebb5be2db01acc1efcb4cd32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRepairPlanner</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>ae2206a7c1f4a324519d443ce1acad468</anchor>
      <arglist>(const base::PlannerPtr &amp;planner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlannerAllocator</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>ab0374be3a3904e7c487618335ea26917</anchor>
      <arglist>(const base::PlannerAllocator &amp;pa)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>a9615a8d1459b4e7856ab0ce75ca72f02</anchor>
      <arglist>(double time=1.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual base::PlannerStatus</type>
      <name>solve</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>ac6a8b29637b23f4cf538cc39b0be5c28</anchor>
      <arglist>(const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>save</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>a4d36dc08244289999fd44ceac8e47ceb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>saveIfChanged</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>aaab5ddc68e703844b6e54af9148dc1db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>ae6b11c228240fc75e33023520fa1d817</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>aecb87e61d1236ed23cce1980d84b70b3</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>a855de04464aaa20b018b72b2cc1dfdf8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAllPlannerDatas</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>a307fa60d11036d29eb242e665d7f3067</anchor>
      <arglist>(std::vector&lt; ompl::base::PlannerDataPtr &gt; &amp;plannerDatas) const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getExperiencesCount</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>a0d83a4db20b0da0ae7a13a6f2a6b2520</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertPlannerData</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>af5cbadb02fea5bc5687f4e64d66745c2</anchor>
      <arglist>(const ompl::base::PlannerDataPtr plannerData, ompl::geometric::PathGeometric &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reversePathIfNecessary</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>a06addf301accf4b73095d175ed53eb4c</anchor>
      <arglist>(ompl::geometric::PathGeometric &amp;path1, ompl::geometric::PathGeometric &amp;path2)</arglist>
    </member>
    <member kind="function">
      <type>ompl::tools::ThunderDBPtr</type>
      <name>getExperienceDB</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>aa874182b1c1b262029bf252093f54ecc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doPostProcessing</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>aa4d9cb3e86dbf43a35b7d2be1d73b625</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::PlannerPtr</type>
      <name>rrPlanner_</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>ad6f9adaa0a0351fb4d26e20520d6f7fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::PlannerPtr</type>
      <name>planner2_</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>a37bc1768a60827de512f48231f1f77ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>dualThreadScratchEnabled_</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>aa5c1c232d2da8da84b764de55be25b41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ompl::tools::ParallelPlanPtr</type>
      <name>pp_</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>ab30c6078c437d13e9390ab0367ad87d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ompl::tools::ThunderDBPtr</type>
      <name>experienceDB_</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>aab584251f4276dc566cf1b7eb540367f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ompl::geometric::PathGeometric &gt;</type>
      <name>queuedSolutionPaths_</name>
      <anchorfile>classompl_1_1tools_1_1Thunder.html</anchorfile>
      <anchor>a747aba773c961953e490c9246c2be23f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ompl::tools::ThunderDB</name>
    <filename>classompl_1_1tools_1_1ThunderDB.html</filename>
    <member kind="function">
      <type></type>
      <name>ThunderDB</name>
      <anchorfile>classompl_1_1tools_1_1ThunderDB.html</anchorfile>
      <anchor>a328194ca0f4107a87164c44f3f799cab</anchor>
      <arglist>(const base::StateSpacePtr &amp;space)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ThunderDB</name>
      <anchorfile>classompl_1_1tools_1_1ThunderDB.html</anchorfile>
      <anchor>a0e0bc6e9b2b04a7d2a7cb65e12e30a21</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load</name>
      <anchorfile>classompl_1_1tools_1_1ThunderDB.html</anchorfile>
      <anchor>a68c87a71cf6261652de79eded14f9f5d</anchor>
      <arglist>(const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addPath</name>
      <anchorfile>classompl_1_1tools_1_1ThunderDB.html</anchorfile>
      <anchor>ab1e9308508a46b78c82edbea97c1c30f</anchor>
      <arglist>(ompl::geometric::PathGeometric &amp;solutionPath, double &amp;insertionTime)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>saveIfChanged</name>
      <anchorfile>classompl_1_1tools_1_1ThunderDB.html</anchorfile>
      <anchor>a058797a803c3f7b2cc5ecca08802a333</anchor>
      <arglist>(const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>save</name>
      <anchorfile>classompl_1_1tools_1_1ThunderDB.html</anchorfile>
      <anchor>a7f8d0e5cb4af3218e9de6b36433a10e7</anchor>
      <arglist>(const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAllPlannerDatas</name>
      <anchorfile>classompl_1_1tools_1_1ThunderDB.html</anchorfile>
      <anchor>ad08ae44a360d98db4c6ffe8035bdcf08</anchor>
      <arglist>(std::vector&lt; ompl::base::PlannerDataPtr &gt; &amp;plannerDatas) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSPARSdb</name>
      <anchorfile>classompl_1_1tools_1_1ThunderDB.html</anchorfile>
      <anchor>a295766e2032f08b0d66251fca7c39e2f</anchor>
      <arglist>(ompl::tools::SPARSdbPtr &amp;prm)</arglist>
    </member>
    <member kind="function">
      <type>ompl::tools::SPARSdbPtr &amp;</type>
      <name>getSPARSdb</name>
      <anchorfile>classompl_1_1tools_1_1ThunderDB.html</anchorfile>
      <anchor>a13a4c88fd7e1ed8b8688e2a3523af477</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findNearestStartGoal</name>
      <anchorfile>classompl_1_1tools_1_1ThunderDB.html</anchorfile>
      <anchor>ad9d61568cbf13a644bd858becf85cf05</anchor>
      <arglist>(int nearestK, const base::State *start, const base::State *goal, ompl::geometric::SPARSdb::CandidateSolution &amp;candidateSolution, const base::PlannerTerminationCondition &amp;ptc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>debugVertex</name>
      <anchorfile>classompl_1_1tools_1_1ThunderDB.html</anchorfile>
      <anchor>aaa06b40e582b3890826cfd541ac304a5</anchor>
      <arglist>(const ompl::base::PlannerDataVertex &amp;vertex)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPathsInserted</name>
      <anchorfile>classompl_1_1tools_1_1ThunderDB.html</anchorfile>
      <anchor>a9ce4c84e9387abbfd2159261582e87fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getSavingEnabled</name>
      <anchorfile>classompl_1_1tools_1_1ThunderDB.html</anchorfile>
      <anchor>a69bbb2ed9428baf257066ae27dd9d68e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSavingEnabled</name>
      <anchorfile>classompl_1_1tools_1_1ThunderDB.html</anchorfile>
      <anchor>a307985115f34a69d59f20452ff691f20</anchor>
      <arglist>(bool saving_enabled)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classompl_1_1tools_1_1ThunderDB.html</anchorfile>
      <anchor>ae1478d1a938ea26df09a06710befe5d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>base::SpaceInformationPtr</type>
      <name>si_</name>
      <anchorfile>classompl_1_1tools_1_1ThunderDB.html</anchorfile>
      <anchor>af04cd24ed51c58b76e909967a5f143ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ompl::base::PlannerDataStorage</type>
      <name>plannerDataStorage_</name>
      <anchorfile>classompl_1_1tools_1_1ThunderDB.html</anchorfile>
      <anchor>a27b1af65beb94d58e429b6aaa120c41c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PDF&lt; GridCell * &gt;</name>
    <filename>classompl_1_1PDF.html</filename>
    <member kind="function">
      <type></type>
      <name>PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a74eb5856577a7c51f157c3dd0a0bb211</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a5b46002df3734b53e8340a031ec081cc</anchor>
      <arglist>(const std::vector&lt; GridCell * &gt; &amp;d, const std::vector&lt; double &gt; &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a9f6f99197d8379496126a1a48021d149</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Element * &gt; &amp;</type>
      <name>getElements</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a503b5f7191b709f9ed92a7f7f3530394</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>add</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ae0e20ec9697abbbff4eb5ca7f06c04f7</anchor>
      <arglist>(const GridCell * &amp;d, const double w)</arglist>
    </member>
    <member kind="function">
      <type>GridCell * &amp;</type>
      <name>sample</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a9eabafd0857350a3c70b2c5e0cb8709b</anchor>
      <arglist>(double r) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a5a6869bcc93cf5b5483048cd26dcb635</anchor>
      <arglist>(Element *elem, const double w)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWeight</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a5d521366fafb2030f496268386a2494b</anchor>
      <arglist>(const Element *elem) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>abb42f3f0ae997173f6d4368c5d5aec6e</anchor>
      <arglist>(Element *elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>acaa1582a3143b6d282186d6c75dd8cf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>aa4532134f60295236ebefee210b73313</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const GridCell * &amp;</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a83f3f0380ac1eed3a0b6d04603150b35</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a207bc400e0fc68265f9076538419c58d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printTree</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a122f69b2622ec5708070c111fab2347b</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PDF&lt; int &gt;</name>
    <filename>classompl_1_1PDF.html</filename>
    <member kind="function">
      <type></type>
      <name>PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a74eb5856577a7c51f157c3dd0a0bb211</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a5b46002df3734b53e8340a031ec081cc</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;d, const std::vector&lt; double &gt; &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a9f6f99197d8379496126a1a48021d149</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Element * &gt; &amp;</type>
      <name>getElements</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a503b5f7191b709f9ed92a7f7f3530394</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>add</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ae0e20ec9697abbbff4eb5ca7f06c04f7</anchor>
      <arglist>(const int &amp;d, const double w)</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>sample</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a9eabafd0857350a3c70b2c5e0cb8709b</anchor>
      <arglist>(double r) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a5a6869bcc93cf5b5483048cd26dcb635</anchor>
      <arglist>(Element *elem, const double w)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWeight</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a5d521366fafb2030f496268386a2494b</anchor>
      <arglist>(const Element *elem) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>abb42f3f0ae997173f6d4368c5d5aec6e</anchor>
      <arglist>(Element *elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>acaa1582a3143b6d282186d6c75dd8cf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>aa4532134f60295236ebefee210b73313</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int &amp;</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a83f3f0380ac1eed3a0b6d04603150b35</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a207bc400e0fc68265f9076538419c58d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printTree</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a122f69b2622ec5708070c111fab2347b</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PDF&lt; ompl::control::LTLPlanner::Motion * &gt;</name>
    <filename>classompl_1_1PDF.html</filename>
    <member kind="function">
      <type></type>
      <name>PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a74eb5856577a7c51f157c3dd0a0bb211</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a5b46002df3734b53e8340a031ec081cc</anchor>
      <arglist>(const std::vector&lt; ompl::control::LTLPlanner::Motion * &gt; &amp;d, const std::vector&lt; double &gt; &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a9f6f99197d8379496126a1a48021d149</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Element * &gt; &amp;</type>
      <name>getElements</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a503b5f7191b709f9ed92a7f7f3530394</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>add</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ae0e20ec9697abbbff4eb5ca7f06c04f7</anchor>
      <arglist>(const ompl::control::LTLPlanner::Motion * &amp;d, const double w)</arglist>
    </member>
    <member kind="function">
      <type>ompl::control::LTLPlanner::Motion * &amp;</type>
      <name>sample</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a9eabafd0857350a3c70b2c5e0cb8709b</anchor>
      <arglist>(double r) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a5a6869bcc93cf5b5483048cd26dcb635</anchor>
      <arglist>(Element *elem, const double w)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWeight</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a5d521366fafb2030f496268386a2494b</anchor>
      <arglist>(const Element *elem) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>abb42f3f0ae997173f6d4368c5d5aec6e</anchor>
      <arglist>(Element *elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>acaa1582a3143b6d282186d6c75dd8cf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>aa4532134f60295236ebefee210b73313</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ompl::control::LTLPlanner::Motion * &amp;</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a83f3f0380ac1eed3a0b6d04603150b35</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a207bc400e0fc68265f9076538419c58d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printTree</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a122f69b2622ec5708070c111fab2347b</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PDF&lt; ompl::control::ProductGraph::State * &gt;</name>
    <filename>classompl_1_1PDF.html</filename>
    <member kind="function">
      <type></type>
      <name>PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a74eb5856577a7c51f157c3dd0a0bb211</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a5b46002df3734b53e8340a031ec081cc</anchor>
      <arglist>(const std::vector&lt; ompl::control::ProductGraph::State * &gt; &amp;d, const std::vector&lt; double &gt; &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a9f6f99197d8379496126a1a48021d149</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Element * &gt; &amp;</type>
      <name>getElements</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a503b5f7191b709f9ed92a7f7f3530394</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>add</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ae0e20ec9697abbbff4eb5ca7f06c04f7</anchor>
      <arglist>(const ompl::control::ProductGraph::State * &amp;d, const double w)</arglist>
    </member>
    <member kind="function">
      <type>ompl::control::ProductGraph::State * &amp;</type>
      <name>sample</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a9eabafd0857350a3c70b2c5e0cb8709b</anchor>
      <arglist>(double r) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a5a6869bcc93cf5b5483048cd26dcb635</anchor>
      <arglist>(Element *elem, const double w)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWeight</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a5d521366fafb2030f496268386a2494b</anchor>
      <arglist>(const Element *elem) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>abb42f3f0ae997173f6d4368c5d5aec6e</anchor>
      <arglist>(Element *elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>acaa1582a3143b6d282186d6c75dd8cf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>aa4532134f60295236ebefee210b73313</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ompl::control::ProductGraph::State * &amp;</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a83f3f0380ac1eed3a0b6d04603150b35</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a207bc400e0fc68265f9076538419c58d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printTree</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a122f69b2622ec5708070c111fab2347b</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PDF&lt; ompl::geometric::BiEST::Motion * &gt;</name>
    <filename>classompl_1_1PDF.html</filename>
    <member kind="function">
      <type></type>
      <name>PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a74eb5856577a7c51f157c3dd0a0bb211</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a5b46002df3734b53e8340a031ec081cc</anchor>
      <arglist>(const std::vector&lt; ompl::geometric::BiEST::Motion * &gt; &amp;d, const std::vector&lt; double &gt; &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a9f6f99197d8379496126a1a48021d149</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Element * &gt; &amp;</type>
      <name>getElements</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a503b5f7191b709f9ed92a7f7f3530394</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>add</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ae0e20ec9697abbbff4eb5ca7f06c04f7</anchor>
      <arglist>(const ompl::geometric::BiEST::Motion * &amp;d, const double w)</arglist>
    </member>
    <member kind="function">
      <type>ompl::geometric::BiEST::Motion * &amp;</type>
      <name>sample</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a9eabafd0857350a3c70b2c5e0cb8709b</anchor>
      <arglist>(double r) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a5a6869bcc93cf5b5483048cd26dcb635</anchor>
      <arglist>(Element *elem, const double w)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWeight</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a5d521366fafb2030f496268386a2494b</anchor>
      <arglist>(const Element *elem) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>abb42f3f0ae997173f6d4368c5d5aec6e</anchor>
      <arglist>(Element *elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>acaa1582a3143b6d282186d6c75dd8cf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>aa4532134f60295236ebefee210b73313</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ompl::geometric::BiEST::Motion * &amp;</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a83f3f0380ac1eed3a0b6d04603150b35</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a207bc400e0fc68265f9076538419c58d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printTree</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a122f69b2622ec5708070c111fab2347b</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PDF&lt; ompl::geometric::EST::Motion * &gt;</name>
    <filename>classompl_1_1PDF.html</filename>
    <member kind="function">
      <type></type>
      <name>PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a74eb5856577a7c51f157c3dd0a0bb211</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a5b46002df3734b53e8340a031ec081cc</anchor>
      <arglist>(const std::vector&lt; ompl::geometric::EST::Motion * &gt; &amp;d, const std::vector&lt; double &gt; &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PDF</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a9f6f99197d8379496126a1a48021d149</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Element * &gt; &amp;</type>
      <name>getElements</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a503b5f7191b709f9ed92a7f7f3530394</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>add</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>ae0e20ec9697abbbff4eb5ca7f06c04f7</anchor>
      <arglist>(const ompl::geometric::EST::Motion * &amp;d, const double w)</arglist>
    </member>
    <member kind="function">
      <type>ompl::geometric::EST::Motion * &amp;</type>
      <name>sample</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a9eabafd0857350a3c70b2c5e0cb8709b</anchor>
      <arglist>(double r) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a5a6869bcc93cf5b5483048cd26dcb635</anchor>
      <arglist>(Element *elem, const double w)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWeight</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a5d521366fafb2030f496268386a2494b</anchor>
      <arglist>(const Element *elem) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>abb42f3f0ae997173f6d4368c5d5aec6e</anchor>
      <arglist>(Element *elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>acaa1582a3143b6d282186d6c75dd8cf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>aa4532134f60295236ebefee210b73313</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ompl::geometric::EST::Motion * &amp;</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a83f3f0380ac1eed3a0b6d04603150b35</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a207bc400e0fc68265f9076538419c58d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printTree</name>
      <anchorfile>classompl_1_1PDF.html</anchorfile>
      <anchor>a122f69b2622ec5708070c111fab2347b</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Point2DPlanning::Plane2DEnvironment</name>
    <filename>classPoint2DPlanning_1_1Plane2DEnvironment.html</filename>
  </compound>
  <compound kind="class">
    <name>SamplerSelector&lt; base::StateSampler &gt;</name>
    <filename>structompl_1_1base_1_1SamplerSelector.html</filename>
  </compound>
  <compound kind="class">
    <name>SamplerSelector&lt; base::ValidStateSampler &gt;</name>
    <filename>structompl_1_1base_1_1SamplerSelector.html</filename>
  </compound>
  <compound kind="class">
    <name>StateSamplerArray&lt; base::StateSampler &gt;</name>
    <filename>classompl_1_1base_1_1StateSamplerArray.html</filename>
    <member kind="typedef">
      <type>SamplerSelector&lt; base::StateSampler &gt;::SamplerPtr</type>
      <name>SamplerPtr</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>a0869da074058c67fb600d355c0d8a9c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SamplerSelector&lt; base::StateSampler &gt;::Sampler</type>
      <name>Sampler</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>a975d4bc341acf6116a94fdc6f050cc01</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateSamplerArray</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>a5d9c7fc2ef129b81f4f4b350b4c1faf8</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateSamplerArray</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>a4b2695cf7992fe63c9364b7df8ef18d3</anchor>
      <arglist>(const SpaceInformation *si)</arglist>
    </member>
    <member kind="function">
      <type>Sampler *</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>a9712328ee4ac70eb5477a97e67213bb1</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>aee87211c80826b2fddf610bf213f0a9e</anchor>
      <arglist>(std::size_t count)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>afaa33f3c0b4e71866aef2fad56e139c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>a8d28df7c315cfec6047dc60dcb78b8f7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StateSamplerArray&lt; base::ValidStateSampler &gt;</name>
    <filename>classompl_1_1base_1_1StateSamplerArray.html</filename>
    <member kind="typedef">
      <type>SamplerSelector&lt; base::ValidStateSampler &gt;::SamplerPtr</type>
      <name>SamplerPtr</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>a0869da074058c67fb600d355c0d8a9c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SamplerSelector&lt; base::ValidStateSampler &gt;::Sampler</type>
      <name>Sampler</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>a975d4bc341acf6116a94fdc6f050cc01</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateSamplerArray</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>a5d9c7fc2ef129b81f4f4b350b4c1faf8</anchor>
      <arglist>(const SpaceInformationPtr &amp;si)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateSamplerArray</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>a4b2695cf7992fe63c9364b7df8ef18d3</anchor>
      <arglist>(const SpaceInformation *si)</arglist>
    </member>
    <member kind="function">
      <type>Sampler *</type>
      <name>operator[]</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>a9712328ee4ac70eb5477a97e67213bb1</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>aee87211c80826b2fddf610bf213f0a9e</anchor>
      <arglist>(std::size_t count)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>afaa33f3c0b4e71866aef2fad56e139c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classompl_1_1base_1_1StateSamplerArray.html</anchorfile>
      <anchor>a8d28df7c315cfec6047dc60dcb78b8f7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; std::pair&lt; U, V &gt; &gt;</name>
    <filename>structstd_1_1hash_3_01std_1_1pair_3_01U_00_01V_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="namespace">
    <name>ompl</name>
    <filename>namespaceompl.html</filename>
    <namespace>ompl::app</namespace>
    <namespace>ompl::base</namespace>
    <namespace>ompl::control</namespace>
    <namespace>ompl::geometric</namespace>
    <namespace>ompl::machine</namespace>
    <namespace>ompl::magic</namespace>
    <namespace>ompl::msg</namespace>
    <namespace>ompl::time</namespace>
    <namespace>ompl::tools</namespace>
    <class kind="class">ompl::BinaryHeap</class>
    <class kind="class">ompl::DynamicSSSP</class>
    <class kind="class">ompl::Exception</class>
    <class kind="class">ompl::FLANNDistance</class>
    <class kind="class">ompl::GreedyKCenters</class>
    <class kind="class">ompl::Grid</class>
    <class kind="class">ompl::GridB</class>
    <class kind="class">ompl::GridN</class>
    <class kind="class">ompl::LPAstarOnGraph</class>
    <class kind="class">ompl::NearestNeighbors</class>
    <class kind="class">ompl::NearestNeighborsFLANN</class>
    <class kind="class">ompl::NearestNeighborsFLANNHierarchicalClustering</class>
    <class kind="class">ompl::NearestNeighborsFLANNLinear</class>
    <class kind="class">ompl::NearestNeighborsGNAT</class>
    <class kind="class">ompl::NearestNeighborsGNATNoThreadSafety</class>
    <class kind="class">ompl::NearestNeighborsLinear</class>
    <class kind="class">ompl::NearestNeighborsSqrtApprox</class>
    <class kind="class">ompl::PDF</class>
    <class kind="class">ompl::Permutation</class>
    <class kind="class">ompl::PPM</class>
    <class kind="class">ompl::ProlateHyperspheroid</class>
    <class kind="class">ompl::RNG</class>
    <member kind="function">
      <type>double</type>
      <name>nBallMeasure</name>
      <anchorfile>namespaceompl.html</anchorfile>
      <anchor>a233b299e1ff503752e7c0bebef59ac54</anchor>
      <arglist>(unsigned int N, double r)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unitNBallMeasure</name>
      <anchorfile>namespaceompl.html</anchorfile>
      <anchor>ac07d992fd77292786e9cdc9a0cadaeb0</anchor>
      <arglist>(unsigned int N)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>prolateHyperspheroidMeasure</name>
      <anchorfile>namespaceompl.html</anchorfile>
      <anchor>a6c1f0987bd0b549658bd65925d03e3e9</anchor>
      <arglist>(unsigned int N, double dFoci, double dTransverse)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ompl::app</name>
    <filename>namespaceompl_1_1app.html</filename>
    <class kind="class">ompl::app::AppBase</class>
    <class kind="struct">ompl::app::AppTypeSelector</class>
    <class kind="struct">ompl::app::AppTypeSelector&lt; CONTROL &gt;</class>
    <class kind="class">ompl::app::BlimpPlanning</class>
    <class kind="class">ompl::app::DynamicCarPlanning</class>
    <class kind="class">ompl::app::FCLContinuousMotionValidator</class>
    <class kind="class">ompl::app::FCLMethodWrapper</class>
    <class kind="class">ompl::app::FCLStateValidityChecker</class>
    <class kind="class">ompl::app::GBlimpPlanning</class>
    <class kind="class">ompl::app::GDynamicCarPlanning</class>
    <class kind="class">ompl::app::GeometrySpecification</class>
    <class kind="class">ompl::app::GKinematicCarPlanning</class>
    <class kind="class">ompl::app::GQuadrotorPlanning</class>
    <class kind="class">ompl::app::GSE2RigidBodyPlanning</class>
    <class kind="class">ompl::app::GSE3RigidBodyPlanning</class>
    <class kind="class">ompl::app::KinematicCarPlanning</class>
    <class kind="class">ompl::app::PQPStateValidityChecker</class>
    <class kind="class">ompl::app::QuadrotorPlanning</class>
    <class kind="class">ompl::app::RenderGeometry</class>
    <class kind="class">ompl::app::RigidBodyGeometry</class>
    <class kind="class">ompl::app::SE2MultiRigidBodyPlanning</class>
    <class kind="class">ompl::app::SE2RigidBodyPlanning</class>
    <class kind="class">ompl::app::SE3MultiRigidBodyPlanning</class>
    <class kind="class">ompl::app::SE3RigidBodyPlanning</class>
    <member kind="enumeration">
      <type></type>
      <name>MotionModel</name>
      <anchorfile>namespaceompl_1_1app.html</anchorfile>
      <anchor>a4eb5e3e5778337b61b7d3066eb2b9639</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CollisionChecker</name>
      <anchorfile>namespaceompl_1_1app.html</anchorfile>
      <anchor>a6238cec22bc5c2f9cb3e9aa612d461e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>control::DecompositionPtr</type>
      <name>allocDecomposition</name>
      <anchorfile>namespaceompl_1_1app.html</anchorfile>
      <anchor>a5c9ad850b4bf26d1c6f1bd48b4bddb79</anchor>
      <arglist>(const base::StateSpacePtr &amp;space, MotionModel mtype, const base::StateSpacePtr &amp;gspace)</arglist>
    </member>
    <member kind="function">
      <type>ompl::base::OptimizationObjectivePtr</type>
      <name>getOptimizationObjective</name>
      <anchorfile>namespaceompl_1_1app.html</anchorfile>
      <anchor>af450723bcda35917258743668723789f</anchor>
      <arglist>(const base::SpaceInformationPtr &amp;si, const std::string &amp;objective, double threshold)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>RenderPlannerData</name>
      <anchorfile>namespaceompl_1_1app.html</anchorfile>
      <anchor>a8a50aa69dd7d442b25b6f220d0cf8598</anchor>
      <arglist>(const base::PlannerData &amp;pd, const aiVector3D &amp;translate, MotionModel m, const GeometricStateExtractor &amp;gse, unsigned int robotCount)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ompl::base</name>
    <filename>namespaceompl_1_1base.html</filename>
    <class kind="class">ompl::base::AllValidStateValidityChecker</class>
    <class kind="class">ompl::base::CForestStateSampler</class>
    <class kind="class">ompl::base::CForestStateSpaceWrapper</class>
    <class kind="class">ompl::base::CompoundState</class>
    <class kind="class">ompl::base::CompoundStateSampler</class>
    <class kind="class">ompl::base::CompoundStateSpace</class>
    <class kind="class">ompl::base::Cost</class>
    <class kind="class">ompl::base::DiscreteMotionValidator</class>
    <class kind="class">ompl::base::DiscreteStateSampler</class>
    <class kind="class">ompl::base::DiscreteStateSpace</class>
    <class kind="class">ompl::base::DubinsMotionValidator</class>
    <class kind="class">ompl::base::DubinsStateSpace</class>
    <class kind="class">ompl::base::GaussianValidStateSampler</class>
    <class kind="class">ompl::base::GenericParam</class>
    <class kind="class">ompl::base::Goal</class>
    <class kind="class">ompl::base::GoalLazySamples</class>
    <class kind="class">ompl::base::GoalPtr</class>
    <class kind="class">ompl::base::GoalRegion</class>
    <class kind="class">ompl::base::GoalSampleableRegion</class>
    <class kind="class">ompl::base::GoalState</class>
    <class kind="class">ompl::base::GoalStates</class>
    <class kind="class">ompl::base::InformedSampler</class>
    <class kind="class">ompl::base::InformedStateSampler</class>
    <class kind="class">ompl::base::IterationTerminationCondition</class>
    <class kind="class">ompl::base::LightningRetrieveRepairPtr</class>
    <class kind="class">ompl::base::MaximizeClearanceValidStateSampler</class>
    <class kind="class">ompl::base::MaximizeMinClearanceObjective</class>
    <class kind="class">ompl::base::MechanicalWorkOptimizationObjective</class>
    <class kind="class">ompl::base::MinimaxObjective</class>
    <class kind="class">ompl::base::MinimumClearanceValidStateSampler</class>
    <class kind="class">ompl::base::MorseEnvironment</class>
    <class kind="class">ompl::base::MorseEnvironmentPtr</class>
    <class kind="class">ompl::base::MorseGoal</class>
    <class kind="class">ompl::base::MorseProjection</class>
    <class kind="class">ompl::base::MorseStateSpace</class>
    <class kind="class">ompl::base::MorseStateValidityChecker</class>
    <class kind="class">ompl::base::MorseTerminationCondition</class>
    <class kind="class">ompl::base::MotionValidator</class>
    <class kind="class">ompl::base::MotionValidatorPtr</class>
    <class kind="class">ompl::base::MultiOptimizationObjective</class>
    <class kind="class">ompl::base::ObstacleBasedValidStateSampler</class>
    <class kind="class">ompl::base::OptimizationObjective</class>
    <class kind="class">ompl::base::OptimizationObjectivePtr</class>
    <class kind="class">ompl::base::ParamSet</class>
    <class kind="class">ompl::base::Path</class>
    <class kind="class">ompl::base::PathLengthDirectInfSampler</class>
    <class kind="class">ompl::base::PathLengthOptimizationObjective</class>
    <class kind="class">ompl::base::PathPtr</class>
    <class kind="class">ompl::base::Planner</class>
    <class kind="class">ompl::base::PlannerData</class>
    <class kind="class">ompl::base::PlannerDataEdge</class>
    <class kind="class">ompl::base::PlannerDataPtr</class>
    <class kind="class">ompl::base::PlannerDataStorage</class>
    <class kind="class">ompl::base::PlannerDataVertex</class>
    <class kind="class">ompl::base::PlannerInputStates</class>
    <class kind="class">ompl::base::PlannerPtr</class>
    <class kind="struct">ompl::base::PlannerSolution</class>
    <class kind="struct">ompl::base::PlannerSpecs</class>
    <class kind="struct">ompl::base::PlannerStatus</class>
    <class kind="class">ompl::base::PlannerTerminationCondition</class>
    <class kind="class">ompl::base::PrecomputedStateSampler</class>
    <class kind="class">ompl::base::ProblemDefinition</class>
    <class kind="class">ompl::base::ProblemDefinitionPtr</class>
    <class kind="class">ompl::base::ProjectionEvaluator</class>
    <class kind="class">ompl::base::ProjectionEvaluatorPtr</class>
    <class kind="class">ompl::base::ProjectionMatrix</class>
    <class kind="class">ompl::base::RealVectorBounds</class>
    <class kind="class">ompl::base::RealVectorIdentityProjectionEvaluator</class>
    <class kind="class">ompl::base::RealVectorLinearProjectionEvaluator</class>
    <class kind="class">ompl::base::RealVectorOrthogonalProjectionEvaluator</class>
    <class kind="class">ompl::base::RealVectorRandomLinearProjectionEvaluator</class>
    <class kind="class">ompl::base::RealVectorStateSampler</class>
    <class kind="class">ompl::base::RealVectorStateSpace</class>
    <class kind="class">ompl::base::ReedsSheppMotionValidator</class>
    <class kind="class">ompl::base::ReedsSheppStateSpace</class>
    <class kind="class">ompl::base::RejectionInfSampler</class>
    <class kind="struct">ompl::base::SamplerSelector</class>
    <class kind="class">ompl::base::ScopedState</class>
    <class kind="class">ompl::base::SE2StateSpace</class>
    <class kind="class">ompl::base::SE3StateSpace</class>
    <class kind="class">ompl::base::SO2StateSampler</class>
    <class kind="class">ompl::base::SO2StateSpace</class>
    <class kind="class">ompl::base::SO3StateSampler</class>
    <class kind="class">ompl::base::SO3StateSpace</class>
    <class kind="class">ompl::base::SolutionNonExistenceProof</class>
    <class kind="class">ompl::base::SolutionNonExistenceProofPtr</class>
    <class kind="class">ompl::base::SpaceInformation</class>
    <class kind="class">ompl::base::SpaceInformationPtr</class>
    <class kind="class">ompl::base::SpecificParam</class>
    <class kind="class">ompl::base::State</class>
    <class kind="class">ompl::base::StateCostIntegralObjective</class>
    <class kind="class">ompl::base::StatePropagatorPtr</class>
    <class kind="class">ompl::base::StateSampler</class>
    <class kind="class">ompl::base::StateSamplerArray</class>
    <class kind="class">ompl::base::StateSamplerPtr</class>
    <class kind="class">ompl::base::StateSpace</class>
    <class kind="class">ompl::base::StateSpacePtr</class>
    <class kind="class">ompl::base::StateStorage</class>
    <class kind="class">ompl::base::StateStorageWithMetadata</class>
    <class kind="class">ompl::base::StateValidityChecker</class>
    <class kind="class">ompl::base::StateValidityCheckerPtr</class>
    <class kind="struct">ompl::base::StateValidityCheckerSpecs</class>
    <class kind="class">ompl::base::SubspaceProjectionEvaluator</class>
    <class kind="class">ompl::base::SubspaceStateSampler</class>
    <class kind="class">ompl::base::ThunderRetrieveRepairPtr</class>
    <class kind="class">ompl::base::TimeStateSampler</class>
    <class kind="class">ompl::base::TimeStateSpace</class>
    <class kind="class">ompl::base::TypedSpaceInformation</class>
    <class kind="class">ompl::base::TypedStateValidityChecker</class>
    <class kind="class">ompl::base::UniformValidStateSampler</class>
    <class kind="class">ompl::base::ValidStateSampler</class>
    <class kind="class">ompl::base::ValidStateSamplerPtr</class>
    <class kind="class">ompl::base::VFMechanicalWorkOptimizationObjective</class>
    <class kind="class">ompl::base::VFUpstreamCriterionOptimizationObjective</class>
    <member kind="typedef">
      <type>std::function&lt; bool(const GoalLazySamples *, State *)&gt;</type>
      <name>GoalSamplingFn</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a40940be986f325738f39536453915a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; Cost(const State *, const Goal *)&gt;</type>
      <name>CostToGoHeuristic</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a81618653825ed9a54f0eeb67d2580d04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; PlannerPtr(const SpaceInformationPtr &amp;)&gt;</type>
      <name>PlannerAllocator</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a95014338a116f4a7de30ec58145c253a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; bool()&gt;</type>
      <name>PlannerTerminationConditionFn</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a47c9ced2eac48435658b52a5e42c25ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(const Planner *, const std::vector&lt; const base::State * &gt; &amp;, const Cost)&gt;</type>
      <name>ReportIntermediateSolutionFn</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>aa36b813311b2a3d929d2a6f2bcecfbe8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; int &gt;</type>
      <name>ProjectionCoordinates</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a01cfb1e28af37bb139841342cb4afb0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::numeric::ublas::vector&lt; double &gt;</type>
      <name>EuclideanProjection</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>aa83f2e90d56884b236b1e400d116b10b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ScopedState&lt;&gt; &gt;</type>
      <name>ScopedStatePtr</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a37efdc0c229b4283de5d49feb273bc3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; bool(const State *)&gt;</type>
      <name>StateValidityCheckerFn</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a98ec8562aba676e9a97ec558d50b0a87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; StateSamplerPtr(const StateSpace *)&gt;</type>
      <name>StateSamplerAllocator</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>af5d30ed71922fa33bb5638545c08c969</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>StateStorageWithMetadata&lt; std::vector&lt; std::size_t &gt; &gt;</type>
      <name>GraphStateStorage</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a22b265d9afab284f0d4a1ad22d339a9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; ValidStateSamplerPtr(const SpaceInformation *)&gt;</type>
      <name>ValidStateSamplerAllocator</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a01ab09808800d0fc04bb4467f3571c97</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>GoalType</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a1620a159019faf720c550eeca5723f55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GOAL_ANY</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a1620a159019faf720c550eeca5723f55a63728e6f4a505262163e918202bd1785</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GOAL_REGION</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a1620a159019faf720c550eeca5723f55a45bf52626bee439d29a04158d867a979</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GOAL_SAMPLEABLE_REGION</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a1620a159019faf720c550eeca5723f55a6fb685fa51055688c4e130094225b7f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GOAL_STATE</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a1620a159019faf720c550eeca5723f55a451d783254d6bb398c15495e87bc1b86</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GOAL_STATES</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a1620a159019faf720c550eeca5723f55a80679771e14cf79b8baf3e5ecae20142</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GOAL_LAZY_SAMPLES</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a1620a159019faf720c550eeca5723f55a15dee78752265020cab91cf866fee69d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>AdvancedStateCopyOperation</name>
      <anchorfile>group__advancedStateCopy.html</anchorfile>
      <anchor>gaa66678b1f585228b1da65ed979c98211</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_DATA_COPIED</name>
      <anchorfile>group__advancedStateCopy.html</anchorfile>
      <anchor>ggaa66678b1f585228b1da65ed979c98211a6a78901c9c5abb5764843684670e231d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOME_DATA_COPIED</name>
      <anchorfile>group__advancedStateCopy.html</anchorfile>
      <anchor>ggaa66678b1f585228b1da65ed979c98211a6068072d46749cddb0526c9f2eb9796b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALL_DATA_COPIED</name>
      <anchorfile>group__advancedStateCopy.html</anchorfile>
      <anchor>ggaa66678b1f585228b1da65ed979c98211a1dde9fa1931003165d3821f133337e69</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>StateSpaceType</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a056b022e14fe04a75f81789947353920</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_SPACE_UNKNOWN</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a056b022e14fe04a75f81789947353920a4247bd6859b13c6482caed7f9dd9996d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_SPACE_REAL_VECTOR</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a056b022e14fe04a75f81789947353920abb95f16481daa006d055bad7060b8fbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_SPACE_SO2</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a056b022e14fe04a75f81789947353920aca07fe8d9ce9fe45ad5d1b2d90c8c1fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_SPACE_SO3</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a056b022e14fe04a75f81789947353920ae9ec8f7cf5204246a32a44768d843fb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_SPACE_SE2</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a056b022e14fe04a75f81789947353920a197336a12b06210c42899c5b53c298b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_SPACE_SE3</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a056b022e14fe04a75f81789947353920acc8d4a06096c378b5473fe4caf8171f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_SPACE_TIME</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a056b022e14fe04a75f81789947353920afc515ecf796d311c9ae7ae879fb63158</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_SPACE_DISCRETE</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a056b022e14fe04a75f81789947353920a56b36a6f5b0a8ae48be0baa7e348def3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATE_SPACE_TYPE_COUNT</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a056b022e14fe04a75f81789947353920aa011308faae02860d3e6fe26be28c167</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a5708f022c6261accef3b9c0fb4d96f90</anchor>
      <arglist>(std::ostream &amp;stream, Cost c)</arglist>
    </member>
    <member kind="function">
      <type>Cost</type>
      <name>goalRegionCostToGo</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a009050ed9b663bc4d6d4dbbee94c40b8</anchor>
      <arglist>(const State *state, const Goal *goal)</arglist>
    </member>
    <member kind="function">
      <type>OptimizationObjectivePtr</type>
      <name>operator+</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a5ac52d1250b648cdc3ae2ae59591f52f</anchor>
      <arglist>(const OptimizationObjectivePtr &amp;a, const OptimizationObjectivePtr &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>OptimizationObjectivePtr</type>
      <name>operator*</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a89d47afd597e87e6f0b99d46bd5f4e0a</anchor>
      <arglist>(double w, const OptimizationObjectivePtr &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>OptimizationObjectivePtr</type>
      <name>operator*</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>ae21d3b4c186b40fc2a303e842d079d79</anchor>
      <arglist>(const OptimizationObjectivePtr &amp;a, double w)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>aec89bfe00ba3673d7488252b4267ed0d</anchor>
      <arglist>(std::ostream &amp;out, const PlannerStatus &amp;status)</arglist>
    </member>
    <member kind="function">
      <type>PlannerTerminationCondition</type>
      <name>plannerNonTerminatingCondition</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a9ffbc7124ed20dc1331a8c6f40a8f05e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PlannerTerminationCondition</type>
      <name>plannerAlwaysTerminatingCondition</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a1125deb13109d3f27b3acab34d79c09c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PlannerTerminationCondition</type>
      <name>plannerOrTerminationCondition</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a743743b4754208eb83ecb3ab20e4df4c</anchor>
      <arglist>(const PlannerTerminationCondition &amp;c1, const PlannerTerminationCondition &amp;c2)</arglist>
    </member>
    <member kind="function">
      <type>PlannerTerminationCondition</type>
      <name>plannerAndTerminationCondition</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a6fe113eda8e4fb7306a5849f392db50b</anchor>
      <arglist>(const PlannerTerminationCondition &amp;c1, const PlannerTerminationCondition &amp;c2)</arglist>
    </member>
    <member kind="function">
      <type>PlannerTerminationCondition</type>
      <name>timedPlannerTerminationCondition</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>ae26e5f143063be389fba4906d438a381</anchor>
      <arglist>(double duration)</arglist>
    </member>
    <member kind="function">
      <type>PlannerTerminationCondition</type>
      <name>timedPlannerTerminationCondition</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a8344c024db04a8e51f226bf26825d372</anchor>
      <arglist>(time::duration duration)</arglist>
    </member>
    <member kind="function">
      <type>PlannerTerminationCondition</type>
      <name>timedPlannerTerminationCondition</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>a4b50516a130c05ecc0e420dd64d6a81e</anchor>
      <arglist>(double duration, double interval)</arglist>
    </member>
    <member kind="function">
      <type>PlannerTerminationCondition</type>
      <name>exactSolnPlannerTerminationCondition</name>
      <anchorfile>namespaceompl_1_1base.html</anchorfile>
      <anchor>ab38443263589f5809d0e6308d3e0912e</anchor>
      <arglist>(ompl::base::ProblemDefinitionPtr pdef)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>group__stateAndSpaceOperators.html</anchorfile>
      <anchor>ga7e6a8dfe3e0d56f11807e7817cf1c8c9</anchor>
      <arglist>(std::ostream &amp;out, const ScopedState&lt; T &gt; &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>ScopedState&lt; T &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>group__stateAndSpaceOperators.html</anchorfile>
      <anchor>ga5e5f40dc3239b5a4306609f8df5b8240</anchor>
      <arglist>(ScopedState&lt; T &gt; &amp;to, const ScopedState&lt; Y &gt; &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ScopedState&lt; T &gt; &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>group__stateAndSpaceOperators.html</anchorfile>
      <anchor>gaaf35354f70335067bcea8695958f2867</anchor>
      <arglist>(const ScopedState&lt; T &gt; &amp;from, ScopedState&lt; Y &gt; &amp;to)</arglist>
    </member>
    <member kind="function">
      <type>const ScopedState</type>
      <name>operator^</name>
      <anchorfile>group__stateAndSpaceOperators.html</anchorfile>
      <anchor>ga5d4bd70ea0237a80013a71dc2bb7daf1</anchor>
      <arglist>(const ScopedState&lt; T &gt; &amp;a, const ScopedState&lt; Y &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>AdvancedStateCopyOperation</type>
      <name>copyStateData</name>
      <anchorfile>group__advancedStateCopy.html</anchorfile>
      <anchor>ga26c3eda924eb78902a00170c46400a27</anchor>
      <arglist>(const StateSpacePtr &amp;destS, State *dest, const StateSpacePtr &amp;sourceS, const State *source)</arglist>
    </member>
    <member kind="function">
      <type>AdvancedStateCopyOperation</type>
      <name>copyStateData</name>
      <anchorfile>group__advancedStateCopy.html</anchorfile>
      <anchor>ga12cc0040b196f116961d6cae8a62f5d0</anchor>
      <arglist>(const StateSpace *destS, State *dest, const StateSpace *sourceS, const State *source)</arglist>
    </member>
    <member kind="function">
      <type>AdvancedStateCopyOperation</type>
      <name>copyStateData</name>
      <anchorfile>group__advancedStateCopy.html</anchorfile>
      <anchor>gab3308e05354b6e3e4175edb47d9cc46b</anchor>
      <arglist>(const StateSpacePtr &amp;destS, State *dest, const StateSpacePtr &amp;sourceS, const State *source, const std::vector&lt; std::string &gt; &amp;subspaces)</arglist>
    </member>
    <member kind="function">
      <type>AdvancedStateCopyOperation</type>
      <name>copyStateData</name>
      <anchorfile>group__advancedStateCopy.html</anchorfile>
      <anchor>gae1931f1fa53bb85eadfe033a3fc91d4c</anchor>
      <arglist>(const StateSpace *destS, State *dest, const StateSpace *sourceS, const State *source, const std::vector&lt; std::string &gt; &amp;subspaces)</arglist>
    </member>
    <member kind="function">
      <type>StateSpacePtr</type>
      <name>operator+</name>
      <anchorfile>group__stateAndSpaceOperators.html</anchorfile>
      <anchor>ga1a2a068c3ba88614e32425cf4c493261</anchor>
      <arglist>(const StateSpacePtr &amp;a, const StateSpacePtr &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>StateSpacePtr</type>
      <name>operator-</name>
      <anchorfile>group__stateAndSpaceOperators.html</anchorfile>
      <anchor>ga849c861f1e209144fbab68a95c479eb8</anchor>
      <arglist>(const StateSpacePtr &amp;a, const StateSpacePtr &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>StateSpacePtr</type>
      <name>operator-</name>
      <anchorfile>group__stateAndSpaceOperators.html</anchorfile>
      <anchor>gae1b5c9d6ea57481723cf8a9683a4eabc</anchor>
      <arglist>(const StateSpacePtr &amp;a, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>StateSpacePtr</type>
      <name>operator*</name>
      <anchorfile>group__stateAndSpaceOperators.html</anchorfile>
      <anchor>ga16229a85742bb392d45ea9fdc49d7434</anchor>
      <arglist>(const StateSpacePtr &amp;a, const StateSpacePtr &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ompl::control</name>
    <filename>namespaceompl_1_1control.html</filename>
    <class kind="class">ompl::control::Automaton</class>
    <class kind="class">ompl::control::AutomatonPtr</class>
    <class kind="class">ompl::control::CompoundControl</class>
    <class kind="class">ompl::control::CompoundControlSampler</class>
    <class kind="class">ompl::control::CompoundControlSpace</class>
    <class kind="class">ompl::control::Control</class>
    <class kind="class">ompl::control::ControlSampler</class>
    <class kind="class">ompl::control::ControlSamplerPtr</class>
    <class kind="class">ompl::control::ControlSpace</class>
    <class kind="class">ompl::control::ControlSpacePtr</class>
    <class kind="class">ompl::control::Decomposition</class>
    <class kind="class">ompl::control::DecompositionPtr</class>
    <class kind="class">ompl::control::DirectedControlSampler</class>
    <class kind="class">ompl::control::DirectedControlSamplerPtr</class>
    <class kind="class">ompl::control::DiscreteControlSampler</class>
    <class kind="class">ompl::control::DiscreteControlSpace</class>
    <class kind="class">ompl::control::EST</class>
    <class kind="class">ompl::control::GridDecomposition</class>
    <class kind="class">ompl::control::KPIECE1</class>
    <class kind="class">ompl::control::LTLPlanner</class>
    <class kind="class">ompl::control::LTLProblemDefinition</class>
    <class kind="class">ompl::control::LTLProblemDefinitionPtr</class>
    <class kind="class">ompl::control::LTLSpaceInformation</class>
    <class kind="class">ompl::control::LTLSpaceInformationPtr</class>
    <class kind="class">ompl::control::MorseControlSpace</class>
    <class kind="class">ompl::control::MorseSimpleSetup</class>
    <class kind="class">ompl::control::MorseStatePropagator</class>
    <class kind="class">ompl::control::ODEAdaptiveSolver</class>
    <class kind="class">ompl::control::ODEBasicSolver</class>
    <class kind="class">ompl::control::ODEErrorSolver</class>
    <class kind="class">ompl::control::ODESolver</class>
    <class kind="class">ompl::control::ODESolverPtr</class>
    <class kind="class">ompl::control::OpenDEControlSpace</class>
    <class kind="class">ompl::control::OpenDEEnvironment</class>
    <class kind="class">ompl::control::OpenDEEnvironmentPtr</class>
    <class kind="class">ompl::control::OpenDESimpleSetup</class>
    <class kind="class">ompl::control::OpenDEStatePropagator</class>
    <class kind="class">ompl::control::OpenDEStateSpace</class>
    <class kind="class">ompl::control::OpenDEStateValidityChecker</class>
    <class kind="class">ompl::control::PathControl</class>
    <class kind="class">ompl::control::PDST</class>
    <class kind="class">ompl::control::PlannerData</class>
    <class kind="class">ompl::control::PlannerDataEdgeControl</class>
    <class kind="class">ompl::control::PlannerDataStorage</class>
    <class kind="class">ompl::control::ProductGraph</class>
    <class kind="class">ompl::control::ProductGraphPtr</class>
    <class kind="class">ompl::control::PropositionalDecomposition</class>
    <class kind="class">ompl::control::PropositionalDecompositionPtr</class>
    <class kind="class">ompl::control::PropositionalTriangularDecomposition</class>
    <class kind="class">ompl::control::RealVectorControlSpace</class>
    <class kind="class">ompl::control::RealVectorControlUniformSampler</class>
    <class kind="class">ompl::control::RRT</class>
    <class kind="class">ompl::control::SimpleDirectedControlSampler</class>
    <class kind="class">ompl::control::SimpleSetup</class>
    <class kind="class">ompl::control::SimpleSetupPtr</class>
    <class kind="class">ompl::control::SpaceInformation</class>
    <class kind="class">ompl::control::SpaceInformationPtr</class>
    <class kind="class">ompl::control::SST</class>
    <class kind="class">ompl::control::StatePropagator</class>
    <class kind="class">ompl::control::SteeredControlSampler</class>
    <class kind="class">ompl::control::Syclop</class>
    <class kind="class">ompl::control::SyclopEST</class>
    <class kind="class">ompl::control::SyclopRRT</class>
    <class kind="class">ompl::control::TriangularDecomposition</class>
    <class kind="class">ompl::control::World</class>
    <member kind="typedef">
      <type>std::function&lt; ControlSamplerPtr(const ControlSpace *)&gt;</type>
      <name>ControlSamplerAllocator</name>
      <anchorfile>namespaceompl_1_1control.html</anchorfile>
      <anchor>afc43b4f629897ba8633929751df17e21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; DirectedControlSamplerPtr(const SpaceInformation *)&gt;</type>
      <name>DirectedControlSamplerAllocator</name>
      <anchorfile>namespaceompl_1_1control.html</anchorfile>
      <anchor>abb36126204f0724b797f9144d37ecdea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(const base::State *, const Control *, const double, base::State *)&gt;</type>
      <name>StatePropagatorFn</name>
      <anchorfile>namespaceompl_1_1control.html</anchorfile>
      <anchor>a08d0f0df0d548bd1f55de55fd89cae77</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ControlSpaceType</name>
      <anchorfile>namespaceompl_1_1control.html</anchorfile>
      <anchor>a8ef3a914bab4a26743f94faacc68cc4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONTROL_SPACE_UNKNOWN</name>
      <anchorfile>namespaceompl_1_1control.html</anchorfile>
      <anchor>a8ef3a914bab4a26743f94faacc68cc4aa1cbb04754e9842f008148d60f77e1ee7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONTROL_SPACE_REAL_VECTOR</name>
      <anchorfile>namespaceompl_1_1control.html</anchorfile>
      <anchor>a8ef3a914bab4a26743f94faacc68cc4aa32cb7ded005825e33c70249fd37bd8fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONTROL_SPACE_DISCRETE</name>
      <anchorfile>namespaceompl_1_1control.html</anchorfile>
      <anchor>a8ef3a914bab4a26743f94faacc68cc4aa300401d78a0a1dc45f9ce85cbbd544d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONTROL_SPACE_TYPE_COUNT</name>
      <anchorfile>namespaceompl_1_1control.html</anchorfile>
      <anchor>a8ef3a914bab4a26743f94faacc68cc4aa025af6fc6a9e8f1bce95beb83c495747</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>OMPL_DEPRECATED base::PlannerPtr</type>
      <name>getDefaultPlanner</name>
      <anchorfile>namespaceompl_1_1control.html</anchorfile>
      <anchor>aa8437cb69cc2be3f2184cacfe3720758</anchor>
      <arglist>(const base::GoalPtr &amp;goal)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ompl::geometric</name>
    <filename>namespaceompl_1_1geometric.html</filename>
    <class kind="class">ompl::geometric::AnytimePathShortening</class>
    <class kind="class">ompl::geometric::BFMT</class>
    <class kind="class">ompl::geometric::BiEST</class>
    <class kind="class">ompl::geometric::BiTRRT</class>
    <class kind="class">ompl::geometric::BITstar</class>
    <class kind="class">ompl::geometric::BKPIECE1</class>
    <class kind="class">ompl::geometric::CForest</class>
    <class kind="class">ompl::geometric::Discretization</class>
    <class kind="class">ompl::geometric::DynamicTimeWarpPtr</class>
    <class kind="class">ompl::geometric::EST</class>
    <class kind="class">ompl::geometric::ExperienceSetupPtr</class>
    <class kind="class">ompl::geometric::FMT</class>
    <class kind="class">ompl::geometric::GeneticSearch</class>
    <class kind="class">ompl::geometric::HillClimbing</class>
    <class kind="class">ompl::geometric::InformedRRTstar</class>
    <class kind="class">ompl::geometric::KBoundedStrategy</class>
    <class kind="class">ompl::geometric::KPIECE1</class>
    <class kind="class">ompl::geometric::KStarStrategy</class>
    <class kind="class">ompl::geometric::KStrategy</class>
    <class kind="class">ompl::geometric::LazyLBTRRT</class>
    <class kind="class">ompl::geometric::LazyPRM</class>
    <class kind="class">ompl::geometric::LazyPRMstar</class>
    <class kind="class">ompl::geometric::LazyRRT</class>
    <class kind="class">ompl::geometric::LBKPIECE1</class>
    <class kind="class">ompl::geometric::LBTRRT</class>
    <class kind="class">ompl::geometric::LightningDBPtr</class>
    <class kind="class">ompl::geometric::LightningPtr</class>
    <class kind="class">ompl::geometric::LightningRetrieveRepair</class>
    <class kind="class">ompl::geometric::PathGeometric</class>
    <class kind="class">ompl::geometric::PathHybridization</class>
    <class kind="class">ompl::geometric::PathHybridizationPtr</class>
    <class kind="class">ompl::geometric::PathSimplifier</class>
    <class kind="class">ompl::geometric::PathSimplifierPtr</class>
    <class kind="class">ompl::geometric::PDST</class>
    <class kind="class">ompl::geometric::PRM</class>
    <class kind="class">ompl::geometric::PRMstar</class>
    <class kind="class">ompl::geometric::ProjEST</class>
    <class kind="class">ompl::geometric::pRRT</class>
    <class kind="class">ompl::geometric::pSBL</class>
    <class kind="class">ompl::geometric::RRT</class>
    <class kind="class">ompl::geometric::RRTConnect</class>
    <class kind="class">ompl::geometric::RRTstar</class>
    <class kind="class">ompl::geometric::SBL</class>
    <class kind="class">ompl::geometric::SimpleSetup</class>
    <class kind="class">ompl::geometric::SimpleSetupPtr</class>
    <class kind="class">ompl::geometric::SPARS</class>
    <class kind="class">ompl::geometric::SPARSdb</class>
    <class kind="class">ompl::geometric::SPARStwo</class>
    <class kind="class">ompl::geometric::SST</class>
    <class kind="class">ompl::geometric::STRIDE</class>
    <class kind="class">ompl::geometric::ThunderDBPtr</class>
    <class kind="class">ompl::geometric::ThunderPtr</class>
    <class kind="class">ompl::geometric::ThunderRetrieveRepair</class>
    <class kind="class">ompl::geometric::TRRT</class>
    <class kind="class">ompl::geometric::VFRRT</class>
    <member kind="function">
      <type>OMPL_DEPRECATED base::PlannerPtr</type>
      <name>getDefaultPlanner</name>
      <anchorfile>namespaceompl_1_1geometric.html</anchorfile>
      <anchor>a123e2234df405f726e2e47168b13b9c8</anchor>
      <arglist>(const base::GoalPtr &amp;goal)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ompl::machine</name>
    <filename>namespaceompl_1_1machine.html</filename>
    <member kind="typedef">
      <type>unsigned long long</type>
      <name>MemUsage_t</name>
      <anchorfile>namespaceompl_1_1machine.html</anchorfile>
      <anchor>ab33b6ae8d7c29d501ac4f205cc5719e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>MemUsage_t</type>
      <name>getProcessMemoryUsage</name>
      <anchorfile>namespaceompl_1_1machine.html</anchorfile>
      <anchor>a263d0e9d43cd9e10edb468b97f46a198</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getHostname</name>
      <anchorfile>namespaceompl_1_1machine.html</anchorfile>
      <anchor>a72f733ca0ea9660e62e7d78887778494</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getCPUInfo</name>
      <anchorfile>namespaceompl_1_1machine.html</anchorfile>
      <anchor>a75c4da4e42a1de9050a171213135fa26</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ompl::magic</name>
    <filename>namespaceompl_1_1magic.html</filename>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>DEFAULT_NEAREST_NEIGHBORS_LAZY</name>
      <anchorfile>namespaceompl_1_1magic.html</anchorfile>
      <anchor>a0a89e52c164508dca142f36623fe2759</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>MIN_ADDED_SEGMENTS_FOR_LAZY_OPTIMIZATION</name>
      <anchorfile>namespaceompl_1_1magic.html</anchorfile>
      <anchor>a5ab4f8cb7b6975e069b111de7bd34557</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>MAX_RANDOM_BOUNCE_STEPS</name>
      <anchorfile>namespaceompl_1_1magic.html</anchorfile>
      <anchor>acf09430426a57052295791746f014f12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>ROADMAP_BUILD_TIME</name>
      <anchorfile>namespaceompl_1_1magic.html</anchorfile>
      <anchor>a3497680b3a4a3351ff97f12d813833b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>DEFAULT_NEAREST_NEIGHBORS</name>
      <anchorfile>namespaceompl_1_1magic.html</anchorfile>
      <anchor>a44f09b05d50332500c8b681d441f91d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>VFRRT_MEAN_NORM_SAMPLES</name>
      <anchorfile>namespaceompl_1_1magic.html</anchorfile>
      <anchor>a4cac6a9cef27adb1c435430d84bfca65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>MAX_CLIMB_NO_UPDATE_STEPS</name>
      <anchorfile>namespaceompl_1_1magic.html</anchorfile>
      <anchor>aeaa1ad057b7005ba95ba870756096b62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>GAP_COST_FRACTION</name>
      <anchorfile>namespaceompl_1_1magic.html</anchorfile>
      <anchor>a7579f652397414b97106db5698588348</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>PROJECTION_DIMENSION_SPLITS</name>
      <anchorfile>namespaceompl_1_1magic.html</anchorfile>
      <anchor>a89c2a3791d4d4579c36593a70f00588d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>PROJECTION_EXTENTS_SAMPLES</name>
      <anchorfile>namespaceompl_1_1magic.html</anchorfile>
      <anchor>a481cf3e5cb49a237be7b21dc05fbfeae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>PROJECTION_EXPAND_FACTOR</name>
      <anchorfile>namespaceompl_1_1magic.html</anchorfile>
      <anchor>abb245aac6dafd57e58b371fd89b136e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>MAX_MOTION_LENGTH_AS_SPACE_EXTENT_FRACTION</name>
      <anchorfile>namespaceompl_1_1magic.html</anchorfile>
      <anchor>abfb9e851ce1422c2114373bcf1ed7224</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>COST_MAX_MOTION_LENGTH_AS_SPACE_EXTENT_FRACTION</name>
      <anchorfile>namespaceompl_1_1magic.html</anchorfile>
      <anchor>a3c9c3d6c0ee87fea2dbc5fa7484d15fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>STD_DEV_AS_SPACE_EXTENT_FRACTION</name>
      <anchorfile>namespaceompl_1_1magic.html</anchorfile>
      <anchor>a711b7ddf17029ddcf154a1ecd3d583fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>MAX_VALID_SAMPLE_ATTEMPTS</name>
      <anchorfile>namespaceompl_1_1magic.html</anchorfile>
      <anchor>a22100e2fff9398fce45cfc11e21451f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>FIND_VALID_STATE_ATTEMPTS_WITHOUT_TERMINATION_CHECK</name>
      <anchorfile>namespaceompl_1_1magic.html</anchorfile>
      <anchor>a165c9405d5064e4101020d43163ec822</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>TEST_STATE_COUNT</name>
      <anchorfile>namespaceompl_1_1magic.html</anchorfile>
      <anchor>ad96353c64e790206f36a2fb9b2c7d646</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>NEAREST_K_RECALL_SOLUTIONS</name>
      <anchorfile>namespaceompl_1_1magic.html</anchorfile>
      <anchor>aab27b6368cce8238fff3d0ab01ad08d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ompl::msg</name>
    <filename>namespaceompl_1_1msg.html</filename>
    <class kind="class">ompl::msg::OutputHandler</class>
    <class kind="class">ompl::msg::OutputHandlerFile</class>
    <class kind="class">ompl::msg::OutputHandlerSTD</class>
    <member kind="enumeration">
      <type></type>
      <name>LogLevel</name>
      <anchorfile>namespaceompl_1_1msg.html</anchorfile>
      <anchor>ace832246a7b4bc5a50dde93a7e29a6b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>noOutputHandler</name>
      <anchorfile>namespaceompl_1_1msg.html</anchorfile>
      <anchor>a83e28f524a5576a73bb062523bbdc53d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restorePreviousOutputHandler</name>
      <anchorfile>namespaceompl_1_1msg.html</anchorfile>
      <anchor>ae944620cc2012c5ffe07e8bb6186d28c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useOutputHandler</name>
      <anchorfile>namespaceompl_1_1msg.html</anchorfile>
      <anchor>a66fd8fd39855d4166ff40164fe4d9d6b</anchor>
      <arglist>(OutputHandler *oh)</arglist>
    </member>
    <member kind="function">
      <type>OutputHandler *</type>
      <name>getOutputHandler</name>
      <anchorfile>namespaceompl_1_1msg.html</anchorfile>
      <anchor>a0e9a5d161592281f8caf01b0c8b2e746</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLogLevel</name>
      <anchorfile>namespaceompl_1_1msg.html</anchorfile>
      <anchor>a1c18c4617e713817e0e4fe7dc5c5c864</anchor>
      <arglist>(LogLevel level)</arglist>
    </member>
    <member kind="function">
      <type>LogLevel</type>
      <name>getLogLevel</name>
      <anchorfile>namespaceompl_1_1msg.html</anchorfile>
      <anchor>ad43f0d2a008f25720e8111395c5ff314</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>log</name>
      <anchorfile>namespaceompl_1_1msg.html</anchorfile>
      <anchor>affe7852f27c06f98af7eb2579f1e5350</anchor>
      <arglist>(const char *file, int line, LogLevel level, const char *m,...)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ompl::time</name>
    <filename>namespaceompl_1_1time.html</filename>
    <member kind="typedef">
      <type>std::chrono::system_clock::time_point</type>
      <name>point</name>
      <anchorfile>namespaceompl_1_1time.html</anchorfile>
      <anchor>adbc7e98a079460ed271a053a66321f4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::chrono::system_clock::duration</type>
      <name>duration</name>
      <anchorfile>namespaceompl_1_1time.html</anchorfile>
      <anchor>a408b9a566e1bd414a6afa9e32dc0734a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>point</type>
      <name>now</name>
      <anchorfile>namespaceompl_1_1time.html</anchorfile>
      <anchor>a5da903c529cfbbce79900b7c1cbc6cc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>duration</type>
      <name>seconds</name>
      <anchorfile>namespaceompl_1_1time.html</anchorfile>
      <anchor>acac374ab4374adb207edb38cedb7fbb1</anchor>
      <arglist>(double sec)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>seconds</name>
      <anchorfile>namespaceompl_1_1time.html</anchorfile>
      <anchor>a1257da2e008e9deb3231ac862ab6dd64</anchor>
      <arglist>(const duration &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>as_string</name>
      <anchorfile>namespaceompl_1_1time.html</anchorfile>
      <anchor>ae8d794354a37128403aba90a187fe532</anchor>
      <arglist>(const point &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ompl::tools</name>
    <filename>namespaceompl_1_1tools.html</filename>
    <class kind="class">ompl::tools::Benchmark</class>
    <class kind="class">ompl::tools::DynamicTimeWarp</class>
    <class kind="class">ompl::tools::ExperienceSetup</class>
    <class kind="class">ompl::tools::Lightning</class>
    <class kind="class">ompl::tools::LightningDB</class>
    <class kind="class">ompl::tools::OptimizePlan</class>
    <class kind="class">ompl::tools::ParallelPlan</class>
    <class kind="class">ompl::tools::PlannerMonitor</class>
    <class kind="class">ompl::tools::Profiler</class>
    <class kind="class">ompl::tools::SelfConfig</class>
    <class kind="class">ompl::tools::Thunder</class>
    <class kind="class">ompl::tools::ThunderDB</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ompl::geometric::SPARSdb &gt;</type>
      <name>SPARSdbPtr</name>
      <anchorfile>namespaceompl_1_1tools.html</anchorfile>
      <anchor>af9770e774db40b49f190776aeaf49aeb</anchor>
      <arglist></arglist>
      <docanchor file="namespaceompl_1_1tools">ThunderDB</docanchor>
    </member>
  </compound>
  <compound kind="group">
    <name>demos</name>
    <title>Demos</title>
    <filename>group__demos.html</filename>
  </compound>
  <compound kind="group">
    <name>advancedStateCopy</name>
    <title>Advanced methods for copying states</title>
    <filename>group__advancedStateCopy.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>AdvancedStateCopyOperation</name>
      <anchorfile>group__advancedStateCopy.html</anchorfile>
      <anchor>gaa66678b1f585228b1da65ed979c98211</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_DATA_COPIED</name>
      <anchorfile>group__advancedStateCopy.html</anchorfile>
      <anchor>ggaa66678b1f585228b1da65ed979c98211a6a78901c9c5abb5764843684670e231d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOME_DATA_COPIED</name>
      <anchorfile>group__advancedStateCopy.html</anchorfile>
      <anchor>ggaa66678b1f585228b1da65ed979c98211a6068072d46749cddb0526c9f2eb9796b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALL_DATA_COPIED</name>
      <anchorfile>group__advancedStateCopy.html</anchorfile>
      <anchor>ggaa66678b1f585228b1da65ed979c98211a1dde9fa1931003165d3821f133337e69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>AdvancedStateCopyOperation</type>
      <name>copyStateData</name>
      <anchorfile>group__advancedStateCopy.html</anchorfile>
      <anchor>ga26c3eda924eb78902a00170c46400a27</anchor>
      <arglist>(const StateSpacePtr &amp;destS, State *dest, const StateSpacePtr &amp;sourceS, const State *source)</arglist>
    </member>
    <member kind="function">
      <type>AdvancedStateCopyOperation</type>
      <name>copyStateData</name>
      <anchorfile>group__advancedStateCopy.html</anchorfile>
      <anchor>ga12cc0040b196f116961d6cae8a62f5d0</anchor>
      <arglist>(const StateSpace *destS, State *dest, const StateSpace *sourceS, const State *source)</arglist>
    </member>
    <member kind="function">
      <type>AdvancedStateCopyOperation</type>
      <name>copyStateData</name>
      <anchorfile>group__advancedStateCopy.html</anchorfile>
      <anchor>gab3308e05354b6e3e4175edb47d9cc46b</anchor>
      <arglist>(const StateSpacePtr &amp;destS, State *dest, const StateSpacePtr &amp;sourceS, const State *source, const std::vector&lt; std::string &gt; &amp;subspaces)</arglist>
    </member>
    <member kind="function">
      <type>AdvancedStateCopyOperation</type>
      <name>copyStateData</name>
      <anchorfile>group__advancedStateCopy.html</anchorfile>
      <anchor>gae1931f1fa53bb85eadfe033a3fc91d4c</anchor>
      <arglist>(const StateSpace *destS, State *dest, const StateSpace *sourceS, const State *source, const std::vector&lt; std::string &gt; &amp;subspaces)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>logging</name>
    <title>Logging Macros</title>
    <filename>group__logging.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>OMPL_ERROR</name>
      <anchorfile>group__logging.html</anchorfile>
      <anchor>ga05ad3ae88188e7f248748785afd2b882</anchor>
      <arglist>(fmt,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OMPL_WARN</name>
      <anchorfile>group__logging.html</anchorfile>
      <anchor>gaf7bb99b62ae59ab21470b11000efd39e</anchor>
      <arglist>(fmt,...)  </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OMPL_INFORM</name>
      <anchorfile>group__logging.html</anchorfile>
      <anchor>ga04bc36d1b8c57ad7e13a8a48451a3a05</anchor>
      <arglist>(fmt,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OMPL_DEBUG</name>
      <anchorfile>group__logging.html</anchorfile>
      <anchor>ga576d0bc79b521f19c5415f330e2b173d</anchor>
      <arglist>(fmt,...)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>stateAndSpaceOperators</name>
    <title>Operators for States and State Spaces</title>
    <filename>group__stateAndSpaceOperators.html</filename>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>group__stateAndSpaceOperators.html</anchorfile>
      <anchor>ga7e6a8dfe3e0d56f11807e7817cf1c8c9</anchor>
      <arglist>(std::ostream &amp;out, const ScopedState&lt; T &gt; &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>ScopedState&lt; T &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>group__stateAndSpaceOperators.html</anchorfile>
      <anchor>ga5e5f40dc3239b5a4306609f8df5b8240</anchor>
      <arglist>(ScopedState&lt; T &gt; &amp;to, const ScopedState&lt; Y &gt; &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ScopedState&lt; T &gt; &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>group__stateAndSpaceOperators.html</anchorfile>
      <anchor>gaaf35354f70335067bcea8695958f2867</anchor>
      <arglist>(const ScopedState&lt; T &gt; &amp;from, ScopedState&lt; Y &gt; &amp;to)</arglist>
    </member>
    <member kind="function">
      <type>const ScopedState</type>
      <name>operator^</name>
      <anchorfile>group__stateAndSpaceOperators.html</anchorfile>
      <anchor>ga5d4bd70ea0237a80013a71dc2bb7daf1</anchor>
      <arglist>(const ScopedState&lt; T &gt; &amp;a, const ScopedState&lt; Y &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>StateSpacePtr</type>
      <name>operator+</name>
      <anchorfile>group__stateAndSpaceOperators.html</anchorfile>
      <anchor>ga1a2a068c3ba88614e32425cf4c493261</anchor>
      <arglist>(const StateSpacePtr &amp;a, const StateSpacePtr &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>StateSpacePtr</type>
      <name>operator-</name>
      <anchorfile>group__stateAndSpaceOperators.html</anchorfile>
      <anchor>ga849c861f1e209144fbab68a95c479eb8</anchor>
      <arglist>(const StateSpacePtr &amp;a, const StateSpacePtr &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>StateSpacePtr</type>
      <name>operator-</name>
      <anchorfile>group__stateAndSpaceOperators.html</anchorfile>
      <anchor>gae1b5c9d6ea57481723cf8a9683a4eabc</anchor>
      <arglist>(const StateSpacePtr &amp;a, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>StateSpacePtr</type>
      <name>operator*</name>
      <anchorfile>group__stateAndSpaceOperators.html</anchorfile>
      <anchor>ga16229a85742bb392d45ea9fdc49d7434</anchor>
      <arglist>(const StateSpacePtr &amp;a, const StateSpacePtr &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>md_doc_markdown_demos</name>
    <title>demos</title>
    <filename>md_doc_markdown_demos</filename>
  </compound>
  <compound kind="page">
    <name>md_doc_markdown_download</name>
    <title>Download</title>
    <filename>md_doc_markdown_download</filename>
    <docanchor file="md_doc_markdown_download" title="Repositories">download_repos</docanchor>
  </compound>
  <compound kind="page">
    <name>md_doc_markdown_gui</name>
    <title>Graphical User Interface to OMPL</title>
    <filename>md_doc_markdown_gui</filename>
    <docanchor file="md_doc_markdown_gui" title="Defining a motion planning problem">gui_define</docanchor>
    <docanchor file="md_doc_markdown_gui" title="Setting up the planner">gui_planners</docanchor>
    <docanchor file="md_doc_markdown_gui" title="Defining a bounding box for the robot">gui_bounding_box</docanchor>
    <docanchor file="md_doc_markdown_gui" title="Visualizing solution paths">gui_paths</docanchor>
  </compound>
  <compound kind="page">
    <name>md_doc_markdown_installation</name>
    <title>Installation</title>
    <filename>md_doc_markdown_installation</filename>
    <docanchor file="md_doc_markdown_installation" title="Installation on Linux">install_linux</docanchor>
    <docanchor file="md_doc_markdown_installation" title="Installation on Mac OS X">install_osx</docanchor>
    <docanchor file="md_doc_markdown_installation" title="MacPorts">install_macports</docanchor>
    <docanchor file="md_doc_markdown_installation" title="Homebrew">install_homebrew</docanchor>
    <docanchor file="md_doc_markdown_installation" title="Installation on Windows">install_windows</docanchor>
  </compound>
  <compound kind="page">
    <name>md_doc_markdown_license</name>
    <title>License</title>
    <filename>md_doc_markdown_license</filename>
    <docanchor file="md_doc_markdown_license" title="BSD License">bsdlicense</docanchor>
    <docanchor file="md_doc_markdown_license" title="Rice University Software Distribution License">ricelicense</docanchor>
  </compound>
  <compound kind="page">
    <name>md_doc_markdown_releaseNotes</name>
    <title>Release Notes</title>
    <filename>md_doc_markdown_releaseNotes</filename>
  </compound>
  <compound kind="page">
    <name>md_doc_markdown_webapp</name>
    <title>OMPL Web App</title>
    <filename>md_doc_markdown_webapp</filename>
    <docanchor file="md_doc_markdown_webapp" title="Usage">webapp_usage</docanchor>
    <docanchor file="md_doc_markdown_webapp" title="Deploying the OMPL Web App Locally">webapp_deploy</docanchor>
    <docanchor file="md_doc_markdown_webapp" title="JavaScript Libraries Used by the OMPL Web App">webapp_licenses</docanchor>
  </compound>
  <compound kind="page">
    <name>md_ompl_doc_markdown_acknowledgements</name>
    <title>Acknowledgements</title>
    <filename>md_ompl_doc_markdown_acknowledgements</filename>
  </compound>
  <compound kind="page">
    <name>md_ompl_doc_markdown_api_overview</name>
    <title>API Overview</title>
    <filename>md_ompl_doc_markdown_api_overview</filename>
  </compound>
  <compound kind="page">
    <name>md_ompl_doc_markdown_benchmark</name>
    <title>How to Benchmark Planners</title>
    <filename>md_ompl_doc_markdown_benchmark</filename>
    <docanchor file="md_ompl_doc_markdown_benchmark" title="Create a benchmark configuration file">benchmark_config</docanchor>
    <docanchor file="md_ompl_doc_markdown_benchmark" title="Writing benchmarking code">benchmark_code</docanchor>
    <docanchor file="md_ompl_doc_markdown_benchmark" title="Processing the benchmarking log file">benchmark_log</docanchor>
    <docanchor file="md_ompl_doc_markdown_benchmark" title="Sample benchmark results">benchmark_sample_results</docanchor>
    <docanchor file="md_ompl_doc_markdown_benchmark" title="The benchmark logfile format">benchmark_logfile_format</docanchor>
    <docanchor file="md_ompl_doc_markdown_benchmark" title="The benchmark database schema">benchmark_database</docanchor>
  </compound>
  <compound kind="page">
    <name>md_ompl_doc_markdown_buildOptions</name>
    <title>Build Options</title>
    <filename>md_ompl_doc_markdown_buildOptions</filename>
  </compound>
  <compound kind="page">
    <name>md_ompl_doc_markdown_buildSystem</name>
    <title>Integrate Your Own Code with OMPL&apos;s Build System</title>
    <filename>md_ompl_doc_markdown_buildSystem</filename>
  </compound>
  <compound kind="page">
    <name>md_ompl_doc_markdown_CForest</name>
    <title>CForest Parallelization Framework</title>
    <filename>md_ompl_doc_markdown_CForest</filename>
    <docanchor file="md_ompl_doc_markdown_CForest" title="CForest in OMPL">cf_ompl</docanchor>
    <docanchor file="md_ompl_doc_markdown_CForest" title="Main differences with the paper version">cf_diff</docanchor>
    <docanchor file="md_ompl_doc_markdown_CForest" title="Example">cf_example</docanchor>
    <docanchor file="md_ompl_doc_markdown_CForest" title="Results">cf_results</docanchor>
    <docanchor file="md_ompl_doc_markdown_CForest" title="Advanced information">cf_advanced</docanchor>
    <docanchor file="md_ompl_doc_markdown_CForest" title="Design and implementation details">cf_implementation</docanchor>
    <docanchor file="md_ompl_doc_markdown_CForest" title="Limitations">cf_limitations</docanchor>
    <docanchor file="md_ompl_doc_markdown_CForest" title="Make your planner CForest-compatible">cf_compatible</docanchor>
  </compound>
  <compound kind="page">
    <name>md_ompl_doc_markdown_citations</name>
    <title>Citations</title>
    <filename>md_ompl_doc_markdown_citations</filename>
  </compound>
  <compound kind="page">
    <name>md_ompl_doc_markdown_contact</name>
    <title>Contact Us</title>
    <filename>md_ompl_doc_markdown_contact</filename>
  </compound>
  <compound kind="page">
    <name>md_ompl_doc_markdown_contrib</name>
    <title>Submit Your Contribution</title>
    <filename>md_ompl_doc_markdown_contrib</filename>
  </compound>
  <compound kind="page">
    <name>md_ompl_doc_markdown_demos</name>
    <title>Demos</title>
    <filename>md_ompl_doc_markdown_demos</filename>
  </compound>
  <compound kind="page">
    <name>md_ompl_doc_markdown_developers</name>
    <title>Developers</title>
    <filename>md_ompl_doc_markdown_developers</filename>
  </compound>
  <compound kind="page">
    <name>md_ompl_doc_markdown_education</name>
    <title>Teaching Module on Motion Planning</title>
    <filename>md_ompl_doc_markdown_education</filename>
  </compound>
  <compound kind="page">
    <name>md_ompl_doc_markdown_FAQ</name>
    <title>Frequently Asked Questions</title>
    <filename>md_ompl_doc_markdown_FAQ</filename>
  </compound>
  <compound kind="page">
    <name>md_ompl_doc_markdown_gallery</name>
    <title>Gallery</title>
    <filename>md_ompl_doc_markdown_gallery</filename>
    <docanchor file="md_ompl_doc_markdown_gallery" title="Planning Using OMPL.app">gallery_omplapp</docanchor>
    <docanchor file="md_ompl_doc_markdown_gallery" title="Class Project from COMP 450 on Path Optimization">gallery_comp450</docanchor>
  </compound>
  <compound kind="page">
    <name>md_ompl_doc_markdown_genericPlanning</name>
    <title>Generic Instructions for Setting Up a Planning Context</title>
    <filename>md_ompl_doc_markdown_genericPlanning</filename>
  </compound>
  <compound kind="page">
    <name>md_ompl_doc_markdown_geometricPlanningSE3</name>
    <title>Geometric Planning for a Rigid Body in 3D</title>
    <filename>md_ompl_doc_markdown_geometricPlanningSE3</filename>
    <docanchor file="md_ompl_doc_markdown_geometricPlanningSE3" title="Using the ompl::geometric::SimpleSetup Class">geometricSimpleSetup</docanchor>
    <docanchor file="md_ompl_doc_markdown_geometricPlanningSE3" title="Without ompl::geometric::SimpleSetup">withoutGeometricSimpleSetup</docanchor>
  </compound>
  <compound kind="page">
    <name>md_ompl_doc_markdown_goalRepresentation</name>
    <title>Representing Goals in OMPL</title>
    <filename>md_ompl_doc_markdown_goalRepresentation</filename>
  </compound>
  <compound kind="page">
    <name>implementingStateSpaces</name>
    <title>Implementing State Spaces</title>
    <filename>implementingStateSpaces</filename>
  </compound>
  <compound kind="page">
    <name>md_ompl_doc_markdown_installPyPlusPlus</name>
    <title>Installation of Py++</title>
    <filename>md_ompl_doc_markdown_installPyPlusPlus</filename>
  </compound>
  <compound kind="page">
    <name>md_ompl_doc_markdown_integration</name>
    <title>Integration of OMPL in Other Systems</title>
    <filename>md_ompl_doc_markdown_integration</filename>
    <docanchor file="md_ompl_doc_markdown_integration" title="MoveIt!">integration_moveit</docanchor>
    <docanchor file="md_ompl_doc_markdown_integration" title="OpenRAVE">integration_openrave</docanchor>
    <docanchor file="md_ompl_doc_markdown_integration" title="V-REP">integration_vrep</docanchor>
    <docanchor file="md_ompl_doc_markdown_integration" title="MORSE">integration_morse</docanchor>
    <docanchor file="md_ompl_doc_markdown_integration" title="The Kautham Project">integration_kautham</docanchor>
    <docanchor file="md_ompl_doc_markdown_integration" title="VEROSIM">integration_verosim</docanchor>
    <docanchor file="md_ompl_doc_markdown_integration" title="Robotics Library">integration_rl</docanchor>
    <docanchor file="md_ompl_doc_markdown_integration" title="SIMS">integration_sims</docanchor>
    <docanchor file="md_ompl_doc_markdown_integration" title="OMPL.app">integration_omplapp</docanchor>
  </compound>
  <compound kind="page">
    <name>md_ompl_doc_markdown_mailingLists</name>
    <title>Mailing Lists</title>
    <filename>md_ompl_doc_markdown_mailingLists</filename>
  </compound>
  <compound kind="page">
    <name>md_ompl_doc_markdown_mainpage</name>
    <title>mainpage</title>
    <filename>md_ompl_doc_markdown_mainpage</filename>
  </compound>
  <compound kind="page">
    <name>md_ompl_doc_markdown_morse</name>
    <title>Using OMPL with Morse</title>
    <filename>md_ompl_doc_markdown_morse</filename>
    <docanchor file="md_ompl_doc_markdown_morse" title="Installation">morseInstallation</docanchor>
    <docanchor file="md_ompl_doc_markdown_morse" title="Quickstart">morseQuickstart</docanchor>
    <docanchor file="md_ompl_doc_markdown_morse" title="Setting up an environment">morseSettingUpAnEnvironment</docanchor>
    <docanchor file="md_ompl_doc_markdown_morse" title="Adding robot(s)">morseAddingRobots</docanchor>
    <docanchor file="md_ompl_doc_markdown_morse" title="Defining the goal">morseGoal</docanchor>
    <docanchor file="md_ompl_doc_markdown_morse" title="Bounds configuration and planning">morsePlanning</docanchor>
    <docanchor file="md_ompl_doc_markdown_morse" title="Playback and animation saving">morsePlayback</docanchor>
    <docanchor file="md_ompl_doc_markdown_morse" title="Rendering animation videos">morseRendering</docanchor>
    <docanchor file="md_ompl_doc_markdown_morse" title="Advanced tweaks">morseAdvancedTweaks</docanchor>
  </compound>
  <compound kind="page">
    <name>md_ompl_doc_markdown_newPlanner</name>
    <title>Implementing a New Motion Planner</title>
    <filename>md_ompl_doc_markdown_newPlanner</filename>
  </compound>
  <compound kind="page">
    <name>md_ompl_doc_markdown_odeint</name>
    <title>Using the ODESolver for Planning with Controls</title>
    <filename>md_ompl_doc_markdown_odeint</filename>
  </compound>
  <compound kind="page">
    <name>optimalPlanning</name>
    <title>Optimal Planning</title>
    <filename>optimalPlanning</filename>
  </compound>
  <compound kind="page">
    <name>md_ompl_doc_markdown_optimalPlanningTutorial</name>
    <title>Optimal Planning Tutorial</title>
    <filename>md_ompl_doc_markdown_optimalPlanningTutorial</filename>
  </compound>
  <compound kind="page">
    <name>md_ompl_doc_markdown_optimizationObjectivesTutorial</name>
    <title>Optimization Objectives Tutorial</title>
    <filename>md_ompl_doc_markdown_optimizationObjectivesTutorial</filename>
  </compound>
  <compound kind="page">
    <name>md_ompl_doc_markdown_pathVisualization</name>
    <title>Path Visualization</title>
    <filename>md_ompl_doc_markdown_pathVisualization</filename>
  </compound>
  <compound kind="page">
    <name>md_ompl_doc_markdown_plannerarena</name>
    <title>OMPL Planner Arena</title>
    <filename>md_ompl_doc_markdown_plannerarena</filename>
  </compound>
  <compound kind="page">
    <name>md_ompl_doc_markdown_planners</name>
    <title>Available Planners</title>
    <filename>md_ompl_doc_markdown_planners</filename>
    <docanchor file="md_ompl_doc_markdown_planners" title="Geometric planners">geometric_planners</docanchor>
    <docanchor file="md_ompl_doc_markdown_planners" title="Control-based planners">control_planners</docanchor>
  </compound>
  <compound kind="page">
    <name>md_ompl_doc_markdown_projections</name>
    <title>Use of Projections in OMPL</title>
    <filename>md_ompl_doc_markdown_projections</filename>
  </compound>
  <compound kind="page">
    <name>md_ompl_doc_markdown_pybindingsPlanner</name>
    <title>Creating Python Bindings for a New Planner</title>
    <filename>md_ompl_doc_markdown_pybindingsPlanner</filename>
    <docanchor file="md_ompl_doc_markdown_pybindingsPlanner" title="Updating the Python binding generation code">pybinding</docanchor>
    <docanchor file="md_ompl_doc_markdown_pybindingsPlanner" title="Planner parameters">params</docanchor>
  </compound>
  <compound kind="page">
    <name>md_ompl_doc_markdown_python</name>
    <title>Python Bindings</title>
    <filename>md_ompl_doc_markdown_python</filename>
    <docanchor file="md_ompl_doc_markdown_python" title="Usage of the Python bindings: Good practices">py_good_practices</docanchor>
    <docanchor file="md_ompl_doc_markdown_python" title="Important differences between C++ and Python">cpp_py_diffs</docanchor>
    <docanchor file="md_ompl_doc_markdown_python" title="Differences between the C++ and Python API&apos;s">py_api_diffs</docanchor>
    <docanchor file="md_ompl_doc_markdown_python" title="A simple example">py_example</docanchor>
    <docanchor file="md_ompl_doc_markdown_python" title="Creating boost::function objects from Python functions">pyfunction_to_stdfunction</docanchor>
    <docanchor file="md_ompl_doc_markdown_python" title="(Re)generating the Python bindings">updating_python_bindings</docanchor>
    <docanchor file="md_ompl_doc_markdown_python" title="Code generation">binding_code_generation</docanchor>
    <docanchor file="md_ompl_doc_markdown_python" title="Compiling the Python modules">compile_bindings</docanchor>
    <docanchor file="md_ompl_doc_markdown_python" title="Forcing CMake to do The Right Thing">bindings_cmake</docanchor>
  </compound>
  <compound kind="page">
    <name>md_ompl_doc_markdown_register</name>
    <title>Registration</title>
    <filename>md_ompl_doc_markdown_register</filename>
  </compound>
  <compound kind="page">
    <name>md_ompl_doc_markdown_samplers</name>
    <title>Available State Samplers</title>
    <filename>md_ompl_doc_markdown_samplers</filename>
  </compound>
  <compound kind="page">
    <name>md_ompl_doc_markdown_spaces</name>
    <title>Available Spaces</title>
    <filename>md_ompl_doc_markdown_spaces</filename>
  </compound>
  <compound kind="page">
    <name>stateValidation</name>
    <title>State Validity Checking</title>
    <filename>stateValidation</filename>
  </compound>
  <compound kind="page">
    <name>md_ompl_doc_markdown_styleGuide</name>
    <title>OMPL Style Guide</title>
    <filename>md_ompl_doc_markdown_styleGuide</filename>
  </compound>
  <compound kind="page">
    <name>thank-you</name>
    <title>Thank you</title>
    <filename>thank-you</filename>
  </compound>
  <compound kind="page">
    <name>md_ompl_doc_markdown_thirdparty</name>
    <title>Contributions</title>
    <filename>md_ompl_doc_markdown_thirdparty</filename>
  </compound>
  <compound kind="page">
    <name>md_ompl_doc_markdown_tutorials</name>
    <title>Tutorials</title>
    <filename>md_ompl_doc_markdown_tutorials</filename>
  </compound>
  <compound kind="page">
    <name>md_ompl_doc_markdown_workingWithStates</name>
    <title>Working with States and State Spaces</title>
    <filename>md_ompl_doc_markdown_workingWithStates</filename>
    <docanchor file="md_ompl_doc_markdown_workingWithStates" title="Allocating memory for states">stateAlloc</docanchor>
    <docanchor file="md_ompl_doc_markdown_workingWithStates" title="Working with states">stateOps</docanchor>
    <docanchor file="md_ompl_doc_markdown_workingWithStates" title="Operators for States and State Spaces">stateAndSpaceOperatorsCopy</docanchor>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>The Open Motion Planning Library</title>
    <filename>index</filename>
  </compound>
</tagfile>
